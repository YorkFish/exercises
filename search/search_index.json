{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my blog Link \u8fd9\u4e00\u4e2a\u535a\u5ba2\u5199\u7ec3\u4e60 \u53e6\u4e00\u4e2a\u535a\u5ba2\u505a\u7b14\u8bb0 >>> \u4f20\u9001\u95e8","title":"index"},{"location":"#welcome-to-my-blog","text":"\u8fd9\u4e00\u4e2a\u535a\u5ba2\u5199\u7ec3\u4e60 \u53e6\u4e00\u4e2a\u535a\u5ba2\u505a\u7b14\u8bb0 >>> \u4f20\u9001\u95e8","title":"Welcome to my blog"},{"location":"about/","text":"\u53c2\u8003\u4e0e\u611f\u8c22 Link 1. Python Challenge Link Documentation Link Python3 \u6807\u51c6\u5e93 Link base64: >>> \u4f20\u9001\u95e8 binascii: >>> \u4f20\u9001\u95e8 bz2: >>> \u4f20\u9001\u95e8 collections: >>> \u4f20\u9001\u95e8 datetime: >>> \u4f20\u9001\u95e8 difflib: >>> \u4f20\u9001\u95e8 email: >>> \u4f20\u9001\u95e8 gzip: >>> \u4f20\u9001\u95e8 hashlib: >>> \u4f20\u9001\u95e8 pickle: >>> \u4f20\u9001\u95e8 re: >>> \u4f20\u9001\u95e8 struct: >>> \u4f20\u9001\u95e8 urllib.parse: >>> \u4f20\u9001\u95e8 urllib.server: >>> \u4f20\u9001\u95e8 wave: >>> \u4f20\u9001\u95e8 xmlrpc.client: >>> \u4f20\u9001\u95e8 xmlrpc.server: >>> \u4f20\u9001\u95e8 zipfile: >>> \u4f20\u9001\u95e8 zlib: >>> \u4f20\u9001\u95e8 \u7b2c\u4e09\u65b9\u5e93 Link Pillow: >>> \u4f20\u9001\u95e8 requests: >>> \u4f20\u9001\u95e8 \u535a\u4e3b Link FishC\u2014\u2014 jerryxjr1220 : >>> \u4f20\u9001\u95e8 Youku\u2014\u2014 \u8001\u8d75\u7231\u7f16\u7a0b : >>> \u4f20\u9001\u95e8 \u7f51\u7ad9 Link Hackingnote: >>> \u4f20\u9001\u95e8 NowCoder: >>> \u4f20\u9001\u95e8 2. LeetCode Link 2020 April Challenge Link Ken-Yi Lee","title":"about"},{"location":"about/#_1","text":"","title":"\u53c2\u8003\u4e0e\u611f\u8c22"},{"location":"about/#1-python-challenge","text":"","title":"1. Python Challenge"},{"location":"about/#documentation","text":"","title":"Documentation"},{"location":"about/#python3","text":"base64: >>> \u4f20\u9001\u95e8 binascii: >>> \u4f20\u9001\u95e8 bz2: >>> \u4f20\u9001\u95e8 collections: >>> \u4f20\u9001\u95e8 datetime: >>> \u4f20\u9001\u95e8 difflib: >>> \u4f20\u9001\u95e8 email: >>> \u4f20\u9001\u95e8 gzip: >>> \u4f20\u9001\u95e8 hashlib: >>> \u4f20\u9001\u95e8 pickle: >>> \u4f20\u9001\u95e8 re: >>> \u4f20\u9001\u95e8 struct: >>> \u4f20\u9001\u95e8 urllib.parse: >>> \u4f20\u9001\u95e8 urllib.server: >>> \u4f20\u9001\u95e8 wave: >>> \u4f20\u9001\u95e8 xmlrpc.client: >>> \u4f20\u9001\u95e8 xmlrpc.server: >>> \u4f20\u9001\u95e8 zipfile: >>> \u4f20\u9001\u95e8 zlib: >>> \u4f20\u9001\u95e8","title":"Python3 \u6807\u51c6\u5e93"},{"location":"about/#_2","text":"Pillow: >>> \u4f20\u9001\u95e8 requests: >>> \u4f20\u9001\u95e8","title":"\u7b2c\u4e09\u65b9\u5e93"},{"location":"about/#_3","text":"FishC\u2014\u2014 jerryxjr1220 : >>> \u4f20\u9001\u95e8 Youku\u2014\u2014 \u8001\u8d75\u7231\u7f16\u7a0b : >>> \u4f20\u9001\u95e8","title":"\u535a\u4e3b"},{"location":"about/#_4","text":"Hackingnote: >>> \u4f20\u9001\u95e8 NowCoder: >>> \u4f20\u9001\u95e8","title":"\u7f51\u7ad9"},{"location":"about/#2-leetcode","text":"","title":"2. LeetCode"},{"location":"about/#2020-april-challenge","text":"Ken-Yi Lee","title":"2020 April Challenge"},{"location":"CChallenge/preview/","text":"\u8bf4\u660e Link 1. \u9898\u6e90 Link April LeetCoding Challenge \u7f51\u7ad9\uff1a https://leetcode.com/ \u65f6\u95f4\uff1a2020-04-01 ~ 2020-04-30 2. \u9898\u76ee Link \u9898\u53f7 \u9898\u76ee \u5e8f\u53f7 01 Single Number 136 02 Happy Number 202 03 Maximum Subarray 53 04 Move Zeros 283 05 Best Time to Buy and Sell Stock II 122 06 Group Anagrams 49 07 Counting Elements 1426* 08 Middle of the Linked List 876 09 Backspace String Compare 844 10 Min Stack 155 11 Diameter of Binary Tree 543 12 Last Stone Weight 1406 13 Contiguous Array 525 14 Perform String Shifts 1427* 15 Product of Array Except Self 238 16 Valid Parenthesis String 678 17 Number of Islands 200 18 Minimum Path Sum 64 19 Search in Rotated Sorted Array 33 20 Construct Binary Search Tree from Preorder Traversal 1008 21 Leftmost Column with at Least a One 1428* 22 Subarray Sum Equals K 560 23 Bitwise AND of Numbers Range 201 24 LRU Cache 146 25 Jump Game 55 26 Longset Common Subsequence 1143 27 Maximal Square 221 28 First Unique Number 1429* 29 Binary Tree Maximum Path Sum 124 30 Check If a String is a Valid Sequence from Root to Path in a Binary Tree 1430* \u591a\u7ef4\u6570\u7ec4 lesson 6 lesson 17 \u4e8c\u53c9\u6811 lesson 11 lesson 20 - BST lesson 30 \u4e8c\u5206 lesson 8 lesson 19 lesson 21 \u8d1f\u6570\u53d6\u4f59 lesson 14 \u5feb\u6162\u6307\u9488 lesson 2 lesson 8 \u5feb\u6392 lesson 6 lesson 7 lesson 12 \u4e09\u6b21\u7ffb\u8f6c lesson 14 \u53cc\u6307\u9488 lesson 4 lesson 9 lesson 16 \u4f4d\u8fd0\u7b97 lesson 1 lesson 23 \u6808 lesson 10 DP lesson 13 lesson 18 lesson 26 lesson 27 \u6709\u9501 lesson 7 lesson 14 lesson 21 lesson 28 lesson 30 3. \u53c2\u8003 Link \u5076\u7136\u95f4\u5728 B \u7ad9\u770b\u5230\u6709 UP \u642c\u8fd0\u6cb9\u7ba1\u4e0a\u4e00\u4f4d\u53f0\u5927\u8001\u5e08\u7684\u76f4\u64ad\u8bfe\uff0c\u8001\u5e08\u7528 C \u8bed\u8a00\u8bb2\u89e3\u201c\u56db\u6708\u6311\u6218\u201d \u8001\u5e08\uff1a Ken-Yi Lee \u8001\u5e08\u7684\u7f51\u7ad9\uff1a FeisStu 4. \u5176\u4ed6\u8bf4\u660e Link \u4e0d\u7528\u4e0d\u7528\u5c31\u5fd8\u4e86\uff0c\u8d81\u8fd9\u6b21\u673a\u4f1a\uff0c\u6e29\u6545\u77e5\u65b0 \u6211\u770b\u5230\u89c6\u9891\u7684\u65f6\u5019\uff0c\u8fc7\u4e86\u201c\u56db\u6708\u6311\u6218\u201d\uff0c\u6211\u662f\u5bf9\u7740\u89c6\u9891\uff0c\u5728\u201c\u672c\u5730\u201d\u505a\u7684\u9898 \u7f16\u8f91\u5668\uff1a\"Sublime Test 3\" \u7f16\u8bd1\u5668\uff1a\"GCC 8.1.0 - 32bit\" \u603b\u7ed3\u7684\u65f6\u5019\uff0c\u5728 \"LeetCode\" \u4e0a\u627e\u5230\u5bf9\u5e94\u7684\u9898\u76ee\u63d0\u4ea4 \u5176\u4e2d 5 \u9898\u6709\u9501","title":"preview"},{"location":"CChallenge/preview/#_1","text":"","title":"\u8bf4\u660e"},{"location":"CChallenge/preview/#1","text":"April LeetCoding Challenge \u7f51\u7ad9\uff1a https://leetcode.com/ \u65f6\u95f4\uff1a2020-04-01 ~ 2020-04-30","title":"1. \u9898\u6e90"},{"location":"CChallenge/preview/#2","text":"\u9898\u53f7 \u9898\u76ee \u5e8f\u53f7 01 Single Number 136 02 Happy Number 202 03 Maximum Subarray 53 04 Move Zeros 283 05 Best Time to Buy and Sell Stock II 122 06 Group Anagrams 49 07 Counting Elements 1426* 08 Middle of the Linked List 876 09 Backspace String Compare 844 10 Min Stack 155 11 Diameter of Binary Tree 543 12 Last Stone Weight 1406 13 Contiguous Array 525 14 Perform String Shifts 1427* 15 Product of Array Except Self 238 16 Valid Parenthesis String 678 17 Number of Islands 200 18 Minimum Path Sum 64 19 Search in Rotated Sorted Array 33 20 Construct Binary Search Tree from Preorder Traversal 1008 21 Leftmost Column with at Least a One 1428* 22 Subarray Sum Equals K 560 23 Bitwise AND of Numbers Range 201 24 LRU Cache 146 25 Jump Game 55 26 Longset Common Subsequence 1143 27 Maximal Square 221 28 First Unique Number 1429* 29 Binary Tree Maximum Path Sum 124 30 Check If a String is a Valid Sequence from Root to Path in a Binary Tree 1430* \u591a\u7ef4\u6570\u7ec4 lesson 6 lesson 17 \u4e8c\u53c9\u6811 lesson 11 lesson 20 - BST lesson 30 \u4e8c\u5206 lesson 8 lesson 19 lesson 21 \u8d1f\u6570\u53d6\u4f59 lesson 14 \u5feb\u6162\u6307\u9488 lesson 2 lesson 8 \u5feb\u6392 lesson 6 lesson 7 lesson 12 \u4e09\u6b21\u7ffb\u8f6c lesson 14 \u53cc\u6307\u9488 lesson 4 lesson 9 lesson 16 \u4f4d\u8fd0\u7b97 lesson 1 lesson 23 \u6808 lesson 10 DP lesson 13 lesson 18 lesson 26 lesson 27 \u6709\u9501 lesson 7 lesson 14 lesson 21 lesson 28 lesson 30","title":"2. \u9898\u76ee"},{"location":"CChallenge/preview/#3","text":"\u5076\u7136\u95f4\u5728 B \u7ad9\u770b\u5230\u6709 UP \u642c\u8fd0\u6cb9\u7ba1\u4e0a\u4e00\u4f4d\u53f0\u5927\u8001\u5e08\u7684\u76f4\u64ad\u8bfe\uff0c\u8001\u5e08\u7528 C \u8bed\u8a00\u8bb2\u89e3\u201c\u56db\u6708\u6311\u6218\u201d \u8001\u5e08\uff1a Ken-Yi Lee \u8001\u5e08\u7684\u7f51\u7ad9\uff1a FeisStu","title":"3. \u53c2\u8003"},{"location":"CChallenge/preview/#4","text":"\u4e0d\u7528\u4e0d\u7528\u5c31\u5fd8\u4e86\uff0c\u8d81\u8fd9\u6b21\u673a\u4f1a\uff0c\u6e29\u6545\u77e5\u65b0 \u6211\u770b\u5230\u89c6\u9891\u7684\u65f6\u5019\uff0c\u8fc7\u4e86\u201c\u56db\u6708\u6311\u6218\u201d\uff0c\u6211\u662f\u5bf9\u7740\u89c6\u9891\uff0c\u5728\u201c\u672c\u5730\u201d\u505a\u7684\u9898 \u7f16\u8f91\u5668\uff1a\"Sublime Test 3\" \u7f16\u8bd1\u5668\uff1a\"GCC 8.1.0 - 32bit\" \u603b\u7ed3\u7684\u65f6\u5019\uff0c\u5728 \"LeetCode\" \u4e0a\u627e\u5230\u5bf9\u5e94\u7684\u9898\u76ee\u63d0\u4ea4 \u5176\u4e2d 5 \u9898\u6709\u9501","title":"4. \u5176\u4ed6\u8bf4\u660e"},{"location":"CChallenge/Solutions/01_Single_Number/","text":"1. Single Number Link Problem Link Given a non-empty array of integers, every element appears twice except for one. Find that single one. Note Link Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example Link Example 1: Input: [2, 2, 1] Output: 1 Example 2: Input: [4, 1, 2, 1, 2] Output: 4 Default Code Link 1 2 3 int singleNumber ( int * nums , int numsSize ){ } Solution Link \u601d\u8def\uff1a\u6240\u6709\u6570\u5b57\u5f02\u6216\u4e00\u904d\uff0c\u5269\u4e0b\u7684\u5c31\u662f single number 1 2 3 4 5 6 7 int singleNumber ( int * nums , int numsSize ){ int res = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { res ^= nums [ i ]; } return res ; }","title":"01 Single Number"},{"location":"CChallenge/Solutions/01_Single_Number/#1-single-number","text":"","title":"1. Single Number"},{"location":"CChallenge/Solutions/01_Single_Number/#problem","text":"Given a non-empty array of integers, every element appears twice except for one. Find that single one.","title":"Problem"},{"location":"CChallenge/Solutions/01_Single_Number/#note","text":"Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?","title":"Note"},{"location":"CChallenge/Solutions/01_Single_Number/#example","text":"Example 1: Input: [2, 2, 1] Output: 1 Example 2: Input: [4, 1, 2, 1, 2] Output: 4","title":"Example"},{"location":"CChallenge/Solutions/01_Single_Number/#default-code","text":"1 2 3 int singleNumber ( int * nums , int numsSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/01_Single_Number/#solution","text":"\u601d\u8def\uff1a\u6240\u6709\u6570\u5b57\u5f02\u6216\u4e00\u904d\uff0c\u5269\u4e0b\u7684\u5c31\u662f single number 1 2 3 4 5 6 7 int singleNumber ( int * nums , int numsSize ){ int res = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { res ^= nums [ i ]; } return res ; }","title":"Solution"},{"location":"CChallenge/Solutions/02_Happy_Number/","text":"2. Happy Number Link Problem Link Write an algorighm to detemine if a number n is \"happy\". A happy number is a number defined by the following process. Starting with any positive integer, replace the number by the sum of the squares of digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. Return True if n is a happy number, and False if not. Example Link Input: 19 Output: true Explanatoin 1^2 + 9^2 = 82 8^2 + 2^2 = 68 6^2 + 8^2 = 100 1^2 + 0^2 + 0^2 = 1 Default Code Link 1 2 3 bool isHappy ( int n ){ } \u6dfb\u52a0\u793a\u4f8b Link Input: 20 Output: false Explanatoin 2^2 + 0^2 = 4 4^2 = 16 1^2 + 6^2 = 37 3^2 + 7^2 = 58 5^2 + 8^2 = 89 8^2 + 9^2 = 145 1^2 + 4^2 + 5^2 = 42 4^2 + 2^2 = 20 ... Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u6309\u7167\u9898\u610f\uff0c\u66b4\u529b\u6c42\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool isHappy ( int n ){ int num = n ; int sum , tmp ; while ( num != 1 ) { sum = 0 ; while ( num > 0 ) { tmp = num % 10 ; sum += tmp * tmp ; num /= 10 ; } if ( sum == 1 ) { return true ; } if ( sum == n ) { return false ; } num = sum ; } return true ; } \u8fd0\u884c\u7ed3\u679c TLE \u65b9\u4fbf\u8d77\u89c1\uff0c\u5f80\u540e\uff0c TLE \u8868\u793a\u201c\u8fd0\u884c\u8d85\u65f6\u201d \u65b9\u6cd5\u4e8c Link \u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u653e\u8fd0\u7b97\u9014\u4e2d\u51fa\u73b0\u8fc7\u7684\u6570\u5b57 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int next_n ( int n ) { int sum = 0 ; while ( n > 0 ) { int tmp = n % 10 ; sum += tmp * tmp ; n /= 10 ; } return sum ; } int contains ( int * history , int size , int n ) { for ( int i = 0 ; i < size ; i ++ ) { if ( history [ i ] == n ) { return true ; } } return false ; } bool isHappy ( int n ) { int history [ 1000 ] = { 0 }; // 19_9999_9999 => 9^2 * 9 + 1 = 730 int size = 0 ; while ( ! contains ( history , size , n )) { history [ size ] = n ; size ++ ; n = next_n ( n ); } return ( n == 1 ); } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u5feb\u6162\u6307\u9488 \u6162\u6307\u9488\u6bcf\u6b21\u4e00\u6b65\uff0c\u5feb\u6307\u9488\u6bcf\u6b21\u4e24\u6b65 \u53ea\u6709 happy number \u7684\u5feb\u6162\u6307\u9488\u6700\u7ec8\u4f1a\u5728 1 \u76f8\u9047 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 nt next_n ( int n ) { int sum = 0 ; while ( n > 0 ) { int tmp = n % 10 ; sum += tmp * tmp ; n /= 10 ; } return sum ; } bool isHappy ( int n ) { int slow = n ; int fast = n ; do { slow = next_n ( slow ); fast = next_n ( fast ); fast = next_n ( fast ); } while ( slow != fast ); return fast == 1 ; }","title":"02 Happy Number"},{"location":"CChallenge/Solutions/02_Happy_Number/#2-happy-number","text":"","title":"2. Happy Number"},{"location":"CChallenge/Solutions/02_Happy_Number/#problem","text":"Write an algorighm to detemine if a number n is \"happy\". A happy number is a number defined by the following process. Starting with any positive integer, replace the number by the sum of the squares of digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. Return True if n is a happy number, and False if not.","title":"Problem"},{"location":"CChallenge/Solutions/02_Happy_Number/#example","text":"Input: 19 Output: true Explanatoin 1^2 + 9^2 = 82 8^2 + 2^2 = 68 6^2 + 8^2 = 100 1^2 + 0^2 + 0^2 = 1","title":"Example"},{"location":"CChallenge/Solutions/02_Happy_Number/#default-code","text":"1 2 3 bool isHappy ( int n ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/02_Happy_Number/#_1","text":"Input: 20 Output: false Explanatoin 2^2 + 0^2 = 4 4^2 = 16 1^2 + 6^2 = 37 3^2 + 7^2 = 58 5^2 + 8^2 = 89 8^2 + 9^2 = 145 1^2 + 4^2 + 5^2 = 42 4^2 + 2^2 = 20 ...","title":"\u6dfb\u52a0\u793a\u4f8b"},{"location":"CChallenge/Solutions/02_Happy_Number/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/02_Happy_Number/#_2","text":"\u601d\u8def\uff1a\u6309\u7167\u9898\u610f\uff0c\u66b4\u529b\u6c42\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool isHappy ( int n ){ int num = n ; int sum , tmp ; while ( num != 1 ) { sum = 0 ; while ( num > 0 ) { tmp = num % 10 ; sum += tmp * tmp ; num /= 10 ; } if ( sum == 1 ) { return true ; } if ( sum == n ) { return false ; } num = sum ; } return true ; } \u8fd0\u884c\u7ed3\u679c TLE \u65b9\u4fbf\u8d77\u89c1\uff0c\u5f80\u540e\uff0c TLE \u8868\u793a\u201c\u8fd0\u884c\u8d85\u65f6\u201d","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/02_Happy_Number/#_3","text":"\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u653e\u8fd0\u7b97\u9014\u4e2d\u51fa\u73b0\u8fc7\u7684\u6570\u5b57 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int next_n ( int n ) { int sum = 0 ; while ( n > 0 ) { int tmp = n % 10 ; sum += tmp * tmp ; n /= 10 ; } return sum ; } int contains ( int * history , int size , int n ) { for ( int i = 0 ; i < size ; i ++ ) { if ( history [ i ] == n ) { return true ; } } return false ; } bool isHappy ( int n ) { int history [ 1000 ] = { 0 }; // 19_9999_9999 => 9^2 * 9 + 1 = 730 int size = 0 ; while ( ! contains ( history , size , n )) { history [ size ] = n ; size ++ ; n = next_n ( n ); } return ( n == 1 ); }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/02_Happy_Number/#_4","text":"\u601d\u8def\uff1a\u5feb\u6162\u6307\u9488 \u6162\u6307\u9488\u6bcf\u6b21\u4e00\u6b65\uff0c\u5feb\u6307\u9488\u6bcf\u6b21\u4e24\u6b65 \u53ea\u6709 happy number \u7684\u5feb\u6162\u6307\u9488\u6700\u7ec8\u4f1a\u5728 1 \u76f8\u9047 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 nt next_n ( int n ) { int sum = 0 ; while ( n > 0 ) { int tmp = n % 10 ; sum += tmp * tmp ; n /= 10 ; } return sum ; } bool isHappy ( int n ) { int slow = n ; int fast = n ; do { slow = next_n ( slow ); fast = next_n ( fast ); fast = next_n ( fast ); } while ( slow != fast ); return fast == 1 ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/","text":"3. Maximum Subarray Link Problem Link Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example Link Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4], Output: 6 Explanatoin: [4, -1, 2, 1] has the largest sum = 6. Follow Up Link If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Default Code Link 1 2 3 int maxSubArray ( int * nums , int numsSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u66b4\u529b\u6c42\u89e3\uff1a\u8ba1\u7b97\u6240\u6709\u5207\u7247\uff0c\u53d6\u5f97\u6700\u5927\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 int maxSubArray ( int * nums , int numsSize ) { int max = nums [ 0 ]; for ( int i = 0 ; i < numsSize ; i ++ ) { int sum = 0 ; for ( int j = i ; j < numsSize ; j ++ ) { sum += nums [ j ]; if ( max < sum ) { max = sum ; } } } return max ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u904d\u5386\u4e00\u904d\uff0c\u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\u7d2f\u52a0\uff0c\u65f6\u523b\u66f4\u65b0\u6700\u5927\u503c\uff0c\u7d2f\u52a0\u6570\u5c0f\u4e8e\u96f6\u65f6\u91cd\u7f6e\u4e3a\u96f6 1 2 3 4 5 6 7 8 9 10 11 int maxSubArray ( int * nums , int numsSize ) { if ( numsSize == 0 ) return 0 ; int max = nums [ 0 ]; int sum = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { if ( sum < 0 ) sum = 0 ; sum += nums [ i ]; if ( max < sum ) max = sum ; } return max ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e8c \u76f8\u540c\uff0c\u7ec6\u8282\u5904\u7565\u6709\u4e0d\u540c 1 2 3 4 5 6 7 8 9 int maxSubArray ( int * nums , int numsSize ) { int max = nums [ 0 ], sum = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { sum += nums [ i ]; if ( sum < nums [ i ]) sum = nums [ i ]; if ( max < sum ) max = sum ; } return max ; } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e8c \u76f8\u540c\uff0c\u7ec6\u8282\u5904\u7565\u6709\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int maxSubArray ( int * nums , int numsSize ) { int sum = nums [ 0 ]; int max = sum ; for ( int i = 1 ; i < numsSize ; i ++ ) { if ( sum > 0 ) { sum += nums [ i ]; } else { sum = nums [ i ]; } if ( max < sum ) { max = sum ; } } return max ; }","title":"03 Maximun Subarray"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#3-maximum-subarray","text":"","title":"3. Maximum Subarray"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#problem","text":"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.","title":"Problem"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#example","text":"Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4], Output: 6 Explanatoin: [4, -1, 2, 1] has the largest sum = 6.","title":"Example"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#follow-up","text":"If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.","title":"Follow Up"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#default-code","text":"1 2 3 int maxSubArray ( int * nums , int numsSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#_1","text":"\u66b4\u529b\u6c42\u89e3\uff1a\u8ba1\u7b97\u6240\u6709\u5207\u7247\uff0c\u53d6\u5f97\u6700\u5927\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 int maxSubArray ( int * nums , int numsSize ) { int max = nums [ 0 ]; for ( int i = 0 ; i < numsSize ; i ++ ) { int sum = 0 ; for ( int j = i ; j < numsSize ; j ++ ) { sum += nums [ j ]; if ( max < sum ) { max = sum ; } } } return max ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#_2","text":"\u601d\u8def\uff1a\u904d\u5386\u4e00\u904d\uff0c\u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\u7d2f\u52a0\uff0c\u65f6\u523b\u66f4\u65b0\u6700\u5927\u503c\uff0c\u7d2f\u52a0\u6570\u5c0f\u4e8e\u96f6\u65f6\u91cd\u7f6e\u4e3a\u96f6 1 2 3 4 5 6 7 8 9 10 11 int maxSubArray ( int * nums , int numsSize ) { if ( numsSize == 0 ) return 0 ; int max = nums [ 0 ]; int sum = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { if ( sum < 0 ) sum = 0 ; sum += nums [ i ]; if ( max < sum ) max = sum ; } return max ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#_3","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e8c \u76f8\u540c\uff0c\u7ec6\u8282\u5904\u7565\u6709\u4e0d\u540c 1 2 3 4 5 6 7 8 9 int maxSubArray ( int * nums , int numsSize ) { int max = nums [ 0 ], sum = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { sum += nums [ i ]; if ( sum < nums [ i ]) sum = nums [ i ]; if ( max < sum ) max = sum ; } return max ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/03_Maximun_Subarray/#_4","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e8c \u76f8\u540c\uff0c\u7ec6\u8282\u5904\u7565\u6709\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int maxSubArray ( int * nums , int numsSize ) { int sum = nums [ 0 ]; int max = sum ; for ( int i = 1 ; i < numsSize ; i ++ ) { if ( sum > 0 ) { sum += nums [ i ]; } else { sum = nums [ i ]; } if ( max < sum ) { max = sum ; } } return max ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/04_Move_Zeros/","text":"4. Move Zeros Link Problem Link Given an array nums , write a function to move all 0 's to the end of it while maintaining the relative order of the non-zero elements. Example Link Input: [0, 1, 0, 3, 12] OutPut: [1, 3, 12, 0, 0] Note Link You must do this in-place without making a copy of the array. Minimize the total number of operations. Default Code Link 1 2 3 void moveZeroes ( int * nums , int numsSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u66b4\u529b\u6c42\u89e3 \u4ece\u5934\u5230\u5c3e\u627e\u96f6\uff0c\u5f97\u7d22\u5f15 index1 \u4ece index1 \u5230\u5c3e\u627e\u975e\u96f6\uff0c\u5f97\u7d22\u5f15 index2 \u82e5 index1 , index2 \u5728\u8303\u56f4\u5185\uff0c\u5219\u6362\u4f4d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void moveZeroes ( int * nums , int numsSize ) { if ( numsSize <= 0 ) return ; int first = 0 ; int second ; while ( first < numsSize ) { while ( first < numsSize && nums [ first ]) { // \u627e\u96f6 first ++ ; } second = first + 1 ; while ( second < numsSize && ! nums [ second ]) { // \u627e\u975e\u96f6 second ++ ; } if ( second < numsSize ) { int tmp = nums [ first ]; nums [ first ] = nums [ second ]; nums [ second ] = tmp ; } first ++ ; } } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u66b4\u529b\u6c42\u89e3 \u904d\u5386\uff0c\u82e5\u5f53\u524d\u6570\u975e\u96f6\uff0c\u540e\u4e00\u4e2a\u4e3a\u96f6\uff0c\u5219\u6362\u4f4d\uff0c\u5e76\u8df3\u51fa\u5faa\u73af \u91cd\u590d\u4e0a\u4e00\u6b65\uff0c\u76f4\u5230\u53ef\u4ee5\u4e0d\u8df3\u51fa\u5730\u904d\u5386\u5b8c\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 void moveZeroes ( int * nums , int numsSize ) { int loop = 1 ; while ( loop ) { for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { if ( nums [ i ] == 0 && nums [ i + 1 ] != 0 ) { nums [ i ] = nums [ i + 1 ]; nums [ i + 1 ] = 0 ; break ; } if ( i == numsSize - 2 ) loop = 0 ; } } } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e8c \u76f8\u540c\uff0c\u7ec6\u8282\u5904\u7565\u6709\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 void moveZeroes ( int * nums , int numsSize ) { while ( true ) { // while \u6700\u591a\u8dd1 numsSize-1 \u6b21 bool isOk = true ; for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { if ( nums [ i ] == 0 && nums [ i + 1 ] != 0 ) { nums [ i ] = nums [ i + 1 ]; nums [ i + 1 ] = 0 ; isOk = false ; } } if ( isOk ) break ; } } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u53cc\u6307\u9488 \u4e00\u4e2a\u6307\u9488\u7528\u6765\u7d22\u5f15\u201c\u53ef\u8986\u76d6\u5904\u201d \u4e00\u4e2a\u6307\u9488\u7528\u6765\u904d\u5386 \u904d\u5386\u65f6\u9047\u5230\u975e\u96f6\u503c\uff0c\u201c\u5f80\u524d\u8986\u76d6\u201d \u904d\u5386\u5b8c\uff0c\u82e5\u201c\u53ef\u8986\u76d6\u5904\u201d\u6709\u591a\uff0c\u5219\u7f6e\u96f6 1 2 3 4 5 6 7 8 9 10 11 12 void moveZeroes ( int * nums , int numsSize ) { int j = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] != 0 ) { nums [ j ] = nums [ i ]; j ++ ; } } while ( j < numsSize ) { nums [ j ++ ] = 0 ; } }","title":"04 Move Zeros"},{"location":"CChallenge/Solutions/04_Move_Zeros/#4-move-zeros","text":"","title":"4. Move Zeros"},{"location":"CChallenge/Solutions/04_Move_Zeros/#problem","text":"Given an array nums , write a function to move all 0 's to the end of it while maintaining the relative order of the non-zero elements.","title":"Problem"},{"location":"CChallenge/Solutions/04_Move_Zeros/#example","text":"Input: [0, 1, 0, 3, 12] OutPut: [1, 3, 12, 0, 0]","title":"Example"},{"location":"CChallenge/Solutions/04_Move_Zeros/#note","text":"You must do this in-place without making a copy of the array. Minimize the total number of operations.","title":"Note"},{"location":"CChallenge/Solutions/04_Move_Zeros/#default-code","text":"1 2 3 void moveZeroes ( int * nums , int numsSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/04_Move_Zeros/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/04_Move_Zeros/#_1","text":"\u601d\u8def\uff1a\u66b4\u529b\u6c42\u89e3 \u4ece\u5934\u5230\u5c3e\u627e\u96f6\uff0c\u5f97\u7d22\u5f15 index1 \u4ece index1 \u5230\u5c3e\u627e\u975e\u96f6\uff0c\u5f97\u7d22\u5f15 index2 \u82e5 index1 , index2 \u5728\u8303\u56f4\u5185\uff0c\u5219\u6362\u4f4d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void moveZeroes ( int * nums , int numsSize ) { if ( numsSize <= 0 ) return ; int first = 0 ; int second ; while ( first < numsSize ) { while ( first < numsSize && nums [ first ]) { // \u627e\u96f6 first ++ ; } second = first + 1 ; while ( second < numsSize && ! nums [ second ]) { // \u627e\u975e\u96f6 second ++ ; } if ( second < numsSize ) { int tmp = nums [ first ]; nums [ first ] = nums [ second ]; nums [ second ] = tmp ; } first ++ ; } }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/04_Move_Zeros/#_2","text":"\u601d\u8def\uff1a\u66b4\u529b\u6c42\u89e3 \u904d\u5386\uff0c\u82e5\u5f53\u524d\u6570\u975e\u96f6\uff0c\u540e\u4e00\u4e2a\u4e3a\u96f6\uff0c\u5219\u6362\u4f4d\uff0c\u5e76\u8df3\u51fa\u5faa\u73af \u91cd\u590d\u4e0a\u4e00\u6b65\uff0c\u76f4\u5230\u53ef\u4ee5\u4e0d\u8df3\u51fa\u5730\u904d\u5386\u5b8c\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 void moveZeroes ( int * nums , int numsSize ) { int loop = 1 ; while ( loop ) { for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { if ( nums [ i ] == 0 && nums [ i + 1 ] != 0 ) { nums [ i ] = nums [ i + 1 ]; nums [ i + 1 ] = 0 ; break ; } if ( i == numsSize - 2 ) loop = 0 ; } } } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/04_Move_Zeros/#_3","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e8c \u76f8\u540c\uff0c\u7ec6\u8282\u5904\u7565\u6709\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 void moveZeroes ( int * nums , int numsSize ) { while ( true ) { // while \u6700\u591a\u8dd1 numsSize-1 \u6b21 bool isOk = true ; for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { if ( nums [ i ] == 0 && nums [ i + 1 ] != 0 ) { nums [ i ] = nums [ i + 1 ]; nums [ i + 1 ] = 0 ; isOk = false ; } } if ( isOk ) break ; } }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/04_Move_Zeros/#_4","text":"\u601d\u8def\uff1a\u53cc\u6307\u9488 \u4e00\u4e2a\u6307\u9488\u7528\u6765\u7d22\u5f15\u201c\u53ef\u8986\u76d6\u5904\u201d \u4e00\u4e2a\u6307\u9488\u7528\u6765\u904d\u5386 \u904d\u5386\u65f6\u9047\u5230\u975e\u96f6\u503c\uff0c\u201c\u5f80\u524d\u8986\u76d6\u201d \u904d\u5386\u5b8c\uff0c\u82e5\u201c\u53ef\u8986\u76d6\u5904\u201d\u6709\u591a\uff0c\u5219\u7f6e\u96f6 1 2 3 4 5 6 7 8 9 10 11 12 void moveZeroes ( int * nums , int numsSize ) { int j = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] != 0 ) { nums [ j ] = nums [ i ]; j ++ ; } } while ( j < numsSize ) { nums [ j ++ ] = 0 ; } }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/","text":"5. Best Time to Buy and Sell Stock II Link Problem Link Say you have an anrray for which the i th element is the price of a given stock on day i. Design an algorithm to find the maximun profit. You may complete as many transactions as you like (i.e., buy one and sell ones share of the stock multiple times). Note Link You may be engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Example Link Example 1: Input: [7, 1, 5, 3, 6, 4] Output: 7 Explanation: Buy on day 2 (peice = 1) and sell on day 3 (price = 5), porfit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Example 2: Input: [1, 2, 3, 4, 5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again. Example 3: Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transaction is done, i.e. max profit = 0. Constraints Link 1 <= prices.length <= 3 * 10^4 0 <= prices[i] <= 10^4 Default Code Link 1 2 3 int maxProfit ( int * prices , int pricesSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u9012\u5f52 \u5148\u7b97\u51fa\u524d n-1 \u4e2a\u4ef7\u683c\u7684\u6700\u5927\u5229\u6da6 \u518d\u5224\u65ad\u7b2c n \u4e2a\u4ef7\u683c\u662f\u5426\u6e38\u6709\u7528 1 2 3 4 5 6 7 8 9 10 int maxProfit ( int * prices , int pricesSize ) { if ( pricesSize < 2 ) return 0 ; int tmp = maxProfit ( prices , pricesSize - 1 ); int max = tmp < 0 ? 0 : tmp ; for ( int i = 0 ; i < pricesSize - 1 ; i ++ ) { int sum = maxProfit ( prices , i + 1 ) + ( prices [ pricesSize - 1 ] - prices [ i ]); if ( max < sum ) max = sum ; } return max ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u7528\u6570\u7ec4\u201c\u7a7a\u95f4\u6362\u65f6\u95f4\u201d profits[n]: \u524d n \u4e2a\u4ef7\u683c\u7684\u6700\u5927\u5229\u6da6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int maxProfit ( int * prices , int pricesSize ) { if ( pricesSize < 2 ) return 0 ; int profits [ pricesSize + 1 ]; profits [ 1 ] = 0 ; for ( int i = 2 ; i < pricesSize + 1 ; i ++ ) { int profit = profits [ i - 1 ]; int max = profit ; for ( int j = 1 ; j < i ; j ++ ) { profit = profits [ j ] + prices [ i - 1 ] - prices [ j - 1 ]; if ( max < profit ) max = profit ; } profits [ i ] = max ; } return profits [ pricesSize ]; } \u65b9\u6cd5\u4e09 Link [1, 2, 3] (2-1) + (3-2) = 2 3 - 1 = 2 \u601d\u8def\uff1a\u540e\u4e00\u4e2a\u6570\u5927\u4e8e\u524d\u4e00\u4e2a\u6570\uff0c\u5c31\u505a\u4e00\u6b21\u8ba1\u7b97 1 2 3 4 5 6 7 8 9 int maxProfit ( int * prices , int pricesSize ) { int total = 0 ; for ( int i = 0 ; i < pricesSize - 1 ; i ++ ) { if ( prices [ i ] < prices [ i + 1 ]) { total += prices [ i + 1 ] - prices [ i ]; } } return total ; } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u628a\u6570\u503c\u60f3\u6210\u6298\u7ebf\u56fe\uff0c\u9014\u4e2d\u627e\u201c\u5c71\u811a\u201d\uff0c\u6309\u7167\u201c\u5c71\u9876\u201d\u5206\u5272\uff0c\u6bcf\u6b21\u5206\u5272\u90fd\u7528\u201c\u5cf0\u503c\u201d\u51cf\u201c\u8c37\u503c\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int maxProfit ( int * prices , int pricesSize ) { int ans = 0 ; int min = prices [ 0 ]; int max = prices [ 0 ]; for ( int i = 0 ; i < pricesSize ; i ++ ) { if ( max <= prices [ i ]) { // \u6709\u6700\u5927\u503c\u5c31\u66ff\u6362 max = prices [ i ]; if ( prices [ i ] < min ) { // \u6709\u6700\u5c0f\u503c\u5c31\u66ff\u6362 min = prices [ i ]; } } else { // \u7b97\u4e0a\u4e00\u8f6e ans += max - min ; min = max = prices [ i ]; } if ( i == pricesSize - 1 && max - min > 0 ) // \u7b97\u6700\u540e\u4e00\u8f6e ans += max - min ; } return ans ; }","title":"05 Best Time to Buy and Sell Stock II"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#5-best-time-to-buy-and-sell-stock-ii","text":"","title":"5. Best Time to Buy and Sell Stock II"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#problem","text":"Say you have an anrray for which the i th element is the price of a given stock on day i. Design an algorithm to find the maximun profit. You may complete as many transactions as you like (i.e., buy one and sell ones share of the stock multiple times).","title":"Problem"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#note","text":"You may be engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","title":"Note"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#example","text":"Example 1: Input: [7, 1, 5, 3, 6, 4] Output: 7 Explanation: Buy on day 2 (peice = 1) and sell on day 3 (price = 5), porfit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Example 2: Input: [1, 2, 3, 4, 5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again. Example 3: Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transaction is done, i.e. max profit = 0.","title":"Example"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#constraints","text":"1 <= prices.length <= 3 * 10^4 0 <= prices[i] <= 10^4","title":"Constraints"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#default-code","text":"1 2 3 int maxProfit ( int * prices , int pricesSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#_1","text":"\u601d\u8def\uff1a\u9012\u5f52 \u5148\u7b97\u51fa\u524d n-1 \u4e2a\u4ef7\u683c\u7684\u6700\u5927\u5229\u6da6 \u518d\u5224\u65ad\u7b2c n \u4e2a\u4ef7\u683c\u662f\u5426\u6e38\u6709\u7528 1 2 3 4 5 6 7 8 9 10 int maxProfit ( int * prices , int pricesSize ) { if ( pricesSize < 2 ) return 0 ; int tmp = maxProfit ( prices , pricesSize - 1 ); int max = tmp < 0 ? 0 : tmp ; for ( int i = 0 ; i < pricesSize - 1 ; i ++ ) { int sum = maxProfit ( prices , i + 1 ) + ( prices [ pricesSize - 1 ] - prices [ i ]); if ( max < sum ) max = sum ; } return max ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#_2","text":"\u601d\u8def\uff1a\u7528\u6570\u7ec4\u201c\u7a7a\u95f4\u6362\u65f6\u95f4\u201d profits[n]: \u524d n \u4e2a\u4ef7\u683c\u7684\u6700\u5927\u5229\u6da6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int maxProfit ( int * prices , int pricesSize ) { if ( pricesSize < 2 ) return 0 ; int profits [ pricesSize + 1 ]; profits [ 1 ] = 0 ; for ( int i = 2 ; i < pricesSize + 1 ; i ++ ) { int profit = profits [ i - 1 ]; int max = profit ; for ( int j = 1 ; j < i ; j ++ ) { profit = profits [ j ] + prices [ i - 1 ] - prices [ j - 1 ]; if ( max < profit ) max = profit ; } profits [ i ] = max ; } return profits [ pricesSize ]; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#_3","text":"[1, 2, 3] (2-1) + (3-2) = 2 3 - 1 = 2 \u601d\u8def\uff1a\u540e\u4e00\u4e2a\u6570\u5927\u4e8e\u524d\u4e00\u4e2a\u6570\uff0c\u5c31\u505a\u4e00\u6b21\u8ba1\u7b97 1 2 3 4 5 6 7 8 9 int maxProfit ( int * prices , int pricesSize ) { int total = 0 ; for ( int i = 0 ; i < pricesSize - 1 ; i ++ ) { if ( prices [ i ] < prices [ i + 1 ]) { total += prices [ i + 1 ] - prices [ i ]; } } return total ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/05_Best_Time_to_Buy_and_Sell_Stock_II/#_4","text":"\u601d\u8def\uff1a\u628a\u6570\u503c\u60f3\u6210\u6298\u7ebf\u56fe\uff0c\u9014\u4e2d\u627e\u201c\u5c71\u811a\u201d\uff0c\u6309\u7167\u201c\u5c71\u9876\u201d\u5206\u5272\uff0c\u6bcf\u6b21\u5206\u5272\u90fd\u7528\u201c\u5cf0\u503c\u201d\u51cf\u201c\u8c37\u503c\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int maxProfit ( int * prices , int pricesSize ) { int ans = 0 ; int min = prices [ 0 ]; int max = prices [ 0 ]; for ( int i = 0 ; i < pricesSize ; i ++ ) { if ( max <= prices [ i ]) { // \u6709\u6700\u5927\u503c\u5c31\u66ff\u6362 max = prices [ i ]; if ( prices [ i ] < min ) { // \u6709\u6700\u5c0f\u503c\u5c31\u66ff\u6362 min = prices [ i ]; } } else { // \u7b97\u4e0a\u4e00\u8f6e ans += max - min ; min = max = prices [ i ]; } if ( i == pricesSize - 1 && max - min > 0 ) // \u7b97\u6700\u540e\u4e00\u8f6e ans += max - min ; } return ans ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/06_Group_Anagrams/","text":"6. Group Anagrams Link Problem Link Given an array strings, group anagrams together. Example Link Input: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], Output: [ [\"ate\", \"eat\", \"tea\"], [\"nat\", tan\"], [\"bat\"] ] Note Link All inputs will be in lowercase. The order of your output does not matter. Default Code Link 1 2 3 4 5 6 7 8 /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ char *** groupAnagrams ( char ** strs , int strsSize , int * returnSize , int ** returnColumnSizes ){ } About Function Link \u8fd4\u56de\u503c\u7684\u4e09\u4e2a * \uff0c\u4ece\u53f3\u81f3\u5de6 \u5b57\u7b26\u4e32 \u4e00\u7ef4\u6570\u7ec4 \u4e8c\u7ef4\u6570\u7ec4 strs \u6307\u5411\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4(*)\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32(char*) returnSize: \u4e8c\u7ef4\u7a7a\u95f4\u7684\u5927\u5c0f returnColumnSizes: \u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u5404\u4e2a\u4e00\u7ef4\u7a7a\u95f4\u7684\u5927\u5c0f { {\"ate\", \"eat\", \"tea\"}, {\"nat\", \"tan\"}, {\"bat\"}} } Solution Link \u601d\u8def \u904d\u5386\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4f9d\u6b21\u5b58\u5165\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u5b58\u6392\u5e8f\u524d\u540e\u7684\u5b57\u7b26\u4e32 \u4ee5\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u4e3a\u6807\u51c6\uff0c\u7ed9\u7ed3\u6784\u4f53\u6570\u7ec4\u6392\u5e8f \u904d\u5386\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u5c06\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u76f8\u540c\u7684\u5206\u5728\u4e00\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 typedef struct { char * original ; char * sorted ; } Pair ; int cmpChar ( const void * a , const void * b ) { return * ( const char * ) a - * ( const char * ) b ; } int cmpPair ( const void * a , const void * b ) { const Pair * pa = ( const Pair * ) a ; const Pair * pb = ( const Pair * ) b ; return strcmp ( pa -> sorted , pb -> sorted ); } char *** groupAnagrams ( char ** strs , int strsSize , int * returnSize , int ** returnColumnSizes ) { Pair * pairs = malloc ( sizeof ( Pair ) * strsSize ); for ( int i = 0 ; i < strsSize ; i ++ ) { int length = strlen ( strs [ i ]); char * sorted_str = malloc ( sizeof ( char ) * ( length + 1 )); strcpy ( sorted_str , strs [ i ]); qsort ( sorted_str , length , sizeof ( char ), cmpChar ); pairs [ i ]. original = strs [ i ]; pairs [ i ]. sorted = sorted_str ; } qsort ( pairs , strsSize , sizeof ( Pair ), cmpPair ); char *** returnResult = NULL ; // [] * returnSize = 0 ; * returnColumnSizes = NULL ; // [] for ( int i = 0 ; i < strsSize ; i ++ ) { if ( i == 0 || strcmp ( pairs [ i ]. sorted , pairs [ i - 1 ]. sorted ) != 0 ) { // case1 int lastGroupIdx = * returnSize ; returnResult = realloc ( returnResult , sizeof ( char ** ) * ( * returnSize + 1 )); returnResult [ lastGroupIdx ] = malloc ( sizeof ( char * ) * 1 ); returnResult [ lastGroupIdx ][ 0 ] = pairs [ i ]. original ; ( * returnSize ) ++ ; * returnColumnSizes = realloc ( * returnColumnSizes , sizeof ( int ) * ( * returnSize )); ( * returnColumnSizes )[ lastGroupIdx ] = 1 ; } else { // case2 int lastGroupIdx = * returnSize - 1 ; int lastGroupSize = ( * returnColumnSizes )[ lastGroupIdx ]; returnResult [ lastGroupIdx ] = realloc ( returnResult [ lastGroupIdx ], sizeof ( char * ) * ( lastGroupSize + 1 )); returnResult [ lastGroupIdx ][ lastGroupSize ] = pairs [ i ]. original ; // \"eat\" ( * returnColumnSizes )[ lastGroupIdx ] = lastGroupSize + 1 ; } } return returnResult ; }","title":"06 Group Anagrams"},{"location":"CChallenge/Solutions/06_Group_Anagrams/#6-group-anagrams","text":"","title":"6. Group Anagrams"},{"location":"CChallenge/Solutions/06_Group_Anagrams/#problem","text":"Given an array strings, group anagrams together.","title":"Problem"},{"location":"CChallenge/Solutions/06_Group_Anagrams/#example","text":"Input: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], Output: [ [\"ate\", \"eat\", \"tea\"], [\"nat\", tan\"], [\"bat\"] ]","title":"Example"},{"location":"CChallenge/Solutions/06_Group_Anagrams/#note","text":"All inputs will be in lowercase. The order of your output does not matter.","title":"Note"},{"location":"CChallenge/Solutions/06_Group_Anagrams/#default-code","text":"1 2 3 4 5 6 7 8 /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ char *** groupAnagrams ( char ** strs , int strsSize , int * returnSize , int ** returnColumnSizes ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/06_Group_Anagrams/#about-function","text":"\u8fd4\u56de\u503c\u7684\u4e09\u4e2a * \uff0c\u4ece\u53f3\u81f3\u5de6 \u5b57\u7b26\u4e32 \u4e00\u7ef4\u6570\u7ec4 \u4e8c\u7ef4\u6570\u7ec4 strs \u6307\u5411\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4(*)\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32(char*) returnSize: \u4e8c\u7ef4\u7a7a\u95f4\u7684\u5927\u5c0f returnColumnSizes: \u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u5404\u4e2a\u4e00\u7ef4\u7a7a\u95f4\u7684\u5927\u5c0f { {\"ate\", \"eat\", \"tea\"}, {\"nat\", \"tan\"}, {\"bat\"}} }","title":"About Function"},{"location":"CChallenge/Solutions/06_Group_Anagrams/#solution","text":"\u601d\u8def \u904d\u5386\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4f9d\u6b21\u5b58\u5165\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u5b58\u6392\u5e8f\u524d\u540e\u7684\u5b57\u7b26\u4e32 \u4ee5\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u4e3a\u6807\u51c6\uff0c\u7ed9\u7ed3\u6784\u4f53\u6570\u7ec4\u6392\u5e8f \u904d\u5386\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u5c06\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u76f8\u540c\u7684\u5206\u5728\u4e00\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 typedef struct { char * original ; char * sorted ; } Pair ; int cmpChar ( const void * a , const void * b ) { return * ( const char * ) a - * ( const char * ) b ; } int cmpPair ( const void * a , const void * b ) { const Pair * pa = ( const Pair * ) a ; const Pair * pb = ( const Pair * ) b ; return strcmp ( pa -> sorted , pb -> sorted ); } char *** groupAnagrams ( char ** strs , int strsSize , int * returnSize , int ** returnColumnSizes ) { Pair * pairs = malloc ( sizeof ( Pair ) * strsSize ); for ( int i = 0 ; i < strsSize ; i ++ ) { int length = strlen ( strs [ i ]); char * sorted_str = malloc ( sizeof ( char ) * ( length + 1 )); strcpy ( sorted_str , strs [ i ]); qsort ( sorted_str , length , sizeof ( char ), cmpChar ); pairs [ i ]. original = strs [ i ]; pairs [ i ]. sorted = sorted_str ; } qsort ( pairs , strsSize , sizeof ( Pair ), cmpPair ); char *** returnResult = NULL ; // [] * returnSize = 0 ; * returnColumnSizes = NULL ; // [] for ( int i = 0 ; i < strsSize ; i ++ ) { if ( i == 0 || strcmp ( pairs [ i ]. sorted , pairs [ i - 1 ]. sorted ) != 0 ) { // case1 int lastGroupIdx = * returnSize ; returnResult = realloc ( returnResult , sizeof ( char ** ) * ( * returnSize + 1 )); returnResult [ lastGroupIdx ] = malloc ( sizeof ( char * ) * 1 ); returnResult [ lastGroupIdx ][ 0 ] = pairs [ i ]. original ; ( * returnSize ) ++ ; * returnColumnSizes = realloc ( * returnColumnSizes , sizeof ( int ) * ( * returnSize )); ( * returnColumnSizes )[ lastGroupIdx ] = 1 ; } else { // case2 int lastGroupIdx = * returnSize - 1 ; int lastGroupSize = ( * returnColumnSizes )[ lastGroupIdx ]; returnResult [ lastGroupIdx ] = realloc ( returnResult [ lastGroupIdx ], sizeof ( char * ) * ( lastGroupSize + 1 )); returnResult [ lastGroupIdx ][ lastGroupSize ] = pairs [ i ]. original ; // \"eat\" ( * returnColumnSizes )[ lastGroupIdx ] = lastGroupSize + 1 ; } } return returnResult ; }","title":"Solution"},{"location":"CChallenge/Solutions/07_Counting_Elements/","text":"7. Counting Elements Link Problem Link Given an integer array arr , count element x such that x + 1 is also in arr . If there's duplicates in arr , count them sperately. Example Link Example 1: Input: arr = [1, 2, 3] Output: 2 Explanation: 1 and 2 are counted 2 and 3 in arr. Example 2: Input: arr = [1, 1, 3, 3, 5, 5, 7, 7] output: 0 Explanation: No numbers are counted, cause there's no 2, 4, 6, or 8 in arr. Example 3: Input: arr = [1, 1, 2, 2] Output: 2 Explanation: Two is are counted cause 2 is in arr. Constraints: Link 1 <= arr.length <= 100 0 <= arr[i] <= 1000 Default Code Link 1 2 3 int countElements ( int * arr , int arrSize ) { } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\u6570\u7ec4\uff0c\u6709\u4e00\u6837\u7684\u5148\u5b58\u7740\uff0c\u9047\u5230\u76f8\u5dee\u4e00\u7684\uff0c\u4e00\u5e76\u52a0\u5165\u7ed3\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int cmpNum ( const void * a , const void * b ) { return * ( const int * ) a - * ( const int * ) b ; } int countElements ( int * arr , int arrSize ) { qsort ( arr , arrSize , sizeof ( int ), cmpNum ); int sum = 0 , cnt = 1 ; int pre = arr [ 0 ]; for ( int i = 1 ; i < arrSize ; i ++ ) { if ( pre == arr [ i ]) { cnt ++ ; continue ; } if ( pre + 1 == arr [ i ]) { sum += cnt ; } cnt = 1 ; pre = arr [ i ]; } return sum ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u628a\u539f\u6570\u7ec4\u6570\u5b57\u52a0\u4e00\uff0c\u5b58\u5165\u65b0\u6570\u7ec4 \u8ba1\u7b97\u539f\u6570\u7ec4\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u80fd\u518d\u65b0\u6570\u7ec4\u4e2d\u627e\u5230 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int countElements ( int * arr , int arrSize ) { int plus1 [ arrSize ]; for ( int i = 0 ; i < arrSize ; i ++ ) { plus1 [ i ] = arr [ i ] + 1 ; } int found [ arrSize ]; for ( int i = 0 ; i < arrSize ; i ++ ) { bool isFound = false ; for ( int j = 0 ; j < arrSize ; j ++ ) { if ( arr [ j ] == plus1 [ i ]) { isFound = true ; break ; } } found [ i ] = isFound ? 1 : 0 ; } int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { count += found [ i ]; } return count ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u76f4\u63a5\u5728\u539f\u6570\u7ec4\u4e2d\u627e arr[i]+1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool isFound ( int xPlus1 , int * arr , int arrSize ) { bool isFound = false ; for ( int i = 0 ; i < arrSize ; i ++ ) { if ( arr [ i ] == xPlus1 ) { isFound = true ; break ; } } return isFound ; } int countElements ( int * arr , int arrSize ) { int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { if ( isFound ( arr [ i ] + 1 , arr , arrSize )) { count ++ ; } } return count ; } \u65b9\u6cd5\u56db Link \u601d\u8def \u5f00\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4\uff0c\u5c06\u539f\u6570\u7ec4\u7684\u503c\u5bf9\u5e94\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u5e76\u505a\u597d\u6807\u8bb0 \u5c06\u539f\u6570\u7ec4\u7684\u503c\u52a0\u4e00\u7528\u4f5c\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u8ba1\u7b97\u6807\u8bb0\u6570\u91cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int countElements ( int * arr , int arrSize ) { // 0<=arr[i]<=1000 => 1<=arr[i]+1<=1001 bool isFound [ 1002 ] = { false }; for ( int i = 0 ; i < arrSize ; i ++ ) { isFound [ arr [ i ]] = true ; } int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { if ( isFound [ arr [ i ] + 1 ]) { count ++ ; } } return count ; } \u65b9\u6cd5\u4e94 Link \u601d\u8def \u5f00\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4\uff0c\u5c06\u539f\u6570\u7ec4\u7684\u503c\u5bf9\u5e94\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u503c\u4e3a\u6539\u7d22\u5f15\u5728\u539f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u5bf9\u65b0\u6570\u7ec4\u7684 newArr[i] \u800c\u8a00\uff0c\u82e5 newArr[i+1] \u975e\u96f6\uff0c\u5219\u5c06 newArr[i] \u52a0\u5165\u7ed3\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int countElements ( int * arr , int arrSize ) { // 0<=arr[i]<=1000 => 1<=arr[i]+1<=1001 int countOfNumX [ 1002 ] = { 0 }; for ( int i = 0 ; i < arrSize ; i ++ ) { countOfNumX [ arr [ i ]] ++ ; } int count = 0 ; for ( int x = 0 ; x <= 1000 ; x ++ ) { if ( countOfNumX [ x + 1 ]) { count += countOfNumX [ x ]; } } return count ; } \u65b9\u6cd5\u516d Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e09 \u4e00\u6837 1 2 3 4 5 6 7 8 9 10 11 12 int countElements ( int * arr , int arrSize ) { int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { for ( int j = 0 ; j < arrSize ; j ++ ) { if ( arr [ j ] == arr [ i ] + 1 ) { count ++ ; break ; } } } return count ; }","title":"07 Counting Elements"},{"location":"CChallenge/Solutions/07_Counting_Elements/#7-counting-elements","text":"","title":"7. Counting Elements"},{"location":"CChallenge/Solutions/07_Counting_Elements/#problem","text":"Given an integer array arr , count element x such that x + 1 is also in arr . If there's duplicates in arr , count them sperately.","title":"Problem"},{"location":"CChallenge/Solutions/07_Counting_Elements/#example","text":"Example 1: Input: arr = [1, 2, 3] Output: 2 Explanation: 1 and 2 are counted 2 and 3 in arr. Example 2: Input: arr = [1, 1, 3, 3, 5, 5, 7, 7] output: 0 Explanation: No numbers are counted, cause there's no 2, 4, 6, or 8 in arr. Example 3: Input: arr = [1, 1, 2, 2] Output: 2 Explanation: Two is are counted cause 2 is in arr.","title":"Example"},{"location":"CChallenge/Solutions/07_Counting_Elements/#constraints","text":"1 <= arr.length <= 100 0 <= arr[i] <= 1000","title":"Constraints:"},{"location":"CChallenge/Solutions/07_Counting_Elements/#default-code","text":"1 2 3 int countElements ( int * arr , int arrSize ) { }","title":"Default Code"},{"location":"CChallenge/Solutions/07_Counting_Elements/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/07_Counting_Elements/#_1","text":"\u601d\u8def\uff1a\u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\u6570\u7ec4\uff0c\u6709\u4e00\u6837\u7684\u5148\u5b58\u7740\uff0c\u9047\u5230\u76f8\u5dee\u4e00\u7684\uff0c\u4e00\u5e76\u52a0\u5165\u7ed3\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int cmpNum ( const void * a , const void * b ) { return * ( const int * ) a - * ( const int * ) b ; } int countElements ( int * arr , int arrSize ) { qsort ( arr , arrSize , sizeof ( int ), cmpNum ); int sum = 0 , cnt = 1 ; int pre = arr [ 0 ]; for ( int i = 1 ; i < arrSize ; i ++ ) { if ( pre == arr [ i ]) { cnt ++ ; continue ; } if ( pre + 1 == arr [ i ]) { sum += cnt ; } cnt = 1 ; pre = arr [ i ]; } return sum ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/07_Counting_Elements/#_2","text":"\u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u628a\u539f\u6570\u7ec4\u6570\u5b57\u52a0\u4e00\uff0c\u5b58\u5165\u65b0\u6570\u7ec4 \u8ba1\u7b97\u539f\u6570\u7ec4\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u80fd\u518d\u65b0\u6570\u7ec4\u4e2d\u627e\u5230 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int countElements ( int * arr , int arrSize ) { int plus1 [ arrSize ]; for ( int i = 0 ; i < arrSize ; i ++ ) { plus1 [ i ] = arr [ i ] + 1 ; } int found [ arrSize ]; for ( int i = 0 ; i < arrSize ; i ++ ) { bool isFound = false ; for ( int j = 0 ; j < arrSize ; j ++ ) { if ( arr [ j ] == plus1 [ i ]) { isFound = true ; break ; } } found [ i ] = isFound ? 1 : 0 ; } int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { count += found [ i ]; } return count ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/07_Counting_Elements/#_3","text":"\u601d\u8def\uff1a\u76f4\u63a5\u5728\u539f\u6570\u7ec4\u4e2d\u627e arr[i]+1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool isFound ( int xPlus1 , int * arr , int arrSize ) { bool isFound = false ; for ( int i = 0 ; i < arrSize ; i ++ ) { if ( arr [ i ] == xPlus1 ) { isFound = true ; break ; } } return isFound ; } int countElements ( int * arr , int arrSize ) { int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { if ( isFound ( arr [ i ] + 1 , arr , arrSize )) { count ++ ; } } return count ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/07_Counting_Elements/#_4","text":"\u601d\u8def \u5f00\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4\uff0c\u5c06\u539f\u6570\u7ec4\u7684\u503c\u5bf9\u5e94\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u5e76\u505a\u597d\u6807\u8bb0 \u5c06\u539f\u6570\u7ec4\u7684\u503c\u52a0\u4e00\u7528\u4f5c\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u8ba1\u7b97\u6807\u8bb0\u6570\u91cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int countElements ( int * arr , int arrSize ) { // 0<=arr[i]<=1000 => 1<=arr[i]+1<=1001 bool isFound [ 1002 ] = { false }; for ( int i = 0 ; i < arrSize ; i ++ ) { isFound [ arr [ i ]] = true ; } int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { if ( isFound [ arr [ i ] + 1 ]) { count ++ ; } } return count ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/07_Counting_Elements/#_5","text":"\u601d\u8def \u5f00\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4\uff0c\u5c06\u539f\u6570\u7ec4\u7684\u503c\u5bf9\u5e94\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u503c\u4e3a\u6539\u7d22\u5f15\u5728\u539f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u5bf9\u65b0\u6570\u7ec4\u7684 newArr[i] \u800c\u8a00\uff0c\u82e5 newArr[i+1] \u975e\u96f6\uff0c\u5219\u5c06 newArr[i] \u52a0\u5165\u7ed3\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int countElements ( int * arr , int arrSize ) { // 0<=arr[i]<=1000 => 1<=arr[i]+1<=1001 int countOfNumX [ 1002 ] = { 0 }; for ( int i = 0 ; i < arrSize ; i ++ ) { countOfNumX [ arr [ i ]] ++ ; } int count = 0 ; for ( int x = 0 ; x <= 1000 ; x ++ ) { if ( countOfNumX [ x + 1 ]) { count += countOfNumX [ x ]; } } return count ; }","title":"\u65b9\u6cd5\u4e94"},{"location":"CChallenge/Solutions/07_Counting_Elements/#_6","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e09 \u4e00\u6837 1 2 3 4 5 6 7 8 9 10 11 12 int countElements ( int * arr , int arrSize ) { int count = 0 ; for ( int i = 0 ; i < arrSize ; i ++ ) { for ( int j = 0 ; j < arrSize ; j ++ ) { if ( arr [ j ] == arr [ i ] + 1 ) { count ++ ; break ; } } } return count ; }","title":"\u65b9\u6cd5\u516d"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/","text":"8. Middle of the Linked List Link Problem Link Given a non-empty, singly linked list with head node head , return a middle node of linked list. If there are two middle nodes, return the second middle node. Example Link Example 1: Input: [1, 2, 3, 4, 5] output: Node 3 from the list (Serialization: [3, 4, 5]) The returned node has value 3. (The judge's serializaiton of this node is [3, 4, 5]). Note that we returned a ListNode object ans, such that: ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. Example 2: Input: [1, 2, 3, 4, 5, 6] Output: Node 4 form this list (Serialization: [4, 5, 6]) Since the list has two middle nodes with values 3 and 4, we return the sevcond one. Note Link The number of modes in the given list will be between 1 and 100 . Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * middleNode ( struct ListNode * head ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u5148\u7b97\u51fa\u94fe\u8868\u957f\u5ea6\uff0c\u518d\u4ece\u5934\u8d70\u5230\u4e2d\u95f4 1 2 3 4 5 6 7 8 9 10 11 12 13 struct ListNode * middleNode ( struct ListNode * head ) { int length = 0 ; for ( struct ListNode * curr = head ; curr != NULL ; curr = curr -> next ) { length ++ ; } length /= 2 ; struct ListNode * curr = head ; while ( length > 0 ) { curr = curr -> next ; length -- ; } return curr ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u5feb\u6162\u6307\u9488 \u5feb\u6162\u6307\u9488\u540c\u65f6\u4ece\u5934\u51fa\u53d1 \u6162\u6307\u9488\u6bcf\u6b21\u8d70\u4e00\u683c\uff0c\u5feb\u6307\u9488\u6bcf\u6b21\u8d70\u4e24\u683c \u5feb\u6307\u9488\u89e6\u5e95\uff0c\u6162\u6307\u9488\u5c31\u5230\u4e2d\u95f4\u4e86 1 2 3 4 5 6 7 8 9 struct ListNode * middleNode ( struct ListNode * head ) { struct ListNode * slow = head ; // \u4e4c\u9f9f struct ListNode * fast = head ; // \u5154\u5b50 while ( fast && fast -> next ) { slow = slow -> next ; fast = fast -> next -> next ; } return slow ; }","title":"08 Middle of the Linked List"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#8-middle-of-the-linked-list","text":"","title":"8. Middle of the Linked List"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#problem","text":"Given a non-empty, singly linked list with head node head , return a middle node of linked list. If there are two middle nodes, return the second middle node.","title":"Problem"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#example","text":"Example 1: Input: [1, 2, 3, 4, 5] output: Node 3 from the list (Serialization: [3, 4, 5]) The returned node has value 3. (The judge's serializaiton of this node is [3, 4, 5]). Note that we returned a ListNode object ans, such that: ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. Example 2: Input: [1, 2, 3, 4, 5, 6] Output: Node 4 form this list (Serialization: [4, 5, 6]) Since the list has two middle nodes with values 3 and 4, we return the sevcond one.","title":"Example"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#note","text":"The number of modes in the given list will be between 1 and 100 .","title":"Note"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * middleNode ( struct ListNode * head ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#_1","text":"\u601d\u8def\uff1a\u5148\u7b97\u51fa\u94fe\u8868\u957f\u5ea6\uff0c\u518d\u4ece\u5934\u8d70\u5230\u4e2d\u95f4 1 2 3 4 5 6 7 8 9 10 11 12 13 struct ListNode * middleNode ( struct ListNode * head ) { int length = 0 ; for ( struct ListNode * curr = head ; curr != NULL ; curr = curr -> next ) { length ++ ; } length /= 2 ; struct ListNode * curr = head ; while ( length > 0 ) { curr = curr -> next ; length -- ; } return curr ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/08_Middle_of_the_Linked_List/#_2","text":"\u601d\u8def\uff1a\u5feb\u6162\u6307\u9488 \u5feb\u6162\u6307\u9488\u540c\u65f6\u4ece\u5934\u51fa\u53d1 \u6162\u6307\u9488\u6bcf\u6b21\u8d70\u4e00\u683c\uff0c\u5feb\u6307\u9488\u6bcf\u6b21\u8d70\u4e24\u683c \u5feb\u6307\u9488\u89e6\u5e95\uff0c\u6162\u6307\u9488\u5c31\u5230\u4e2d\u95f4\u4e86 1 2 3 4 5 6 7 8 9 struct ListNode * middleNode ( struct ListNode * head ) { struct ListNode * slow = head ; // \u4e4c\u9f9f struct ListNode * fast = head ; // \u5154\u5b50 while ( fast && fast -> next ) { slow = slow -> next ; fast = fast -> next -> next ; } return slow ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/","text":"9. Backspace String Compare Link Problem Link Given two strings S and T . return if they are equal when both are typed into empty text editors. # means a backspace character. Example Link Example 1: Input: S = \"ab#c\", T = \"ad#c\" Output: true Explanation: Both S and T become \"ac\". Example 2: Input: S = \"ab##\", T = \"c#d#\" Output: true Explanation: Both S and T become \"\". Example 3: Input: S = \"a##c\", T = \"#a#c\" Output: true Explanation: Both S and T become \"c\". Example 4: Input: S = \"a#c\", T = \"b\" Output: false Explanation: S becomes \"c\" while T becomes \"b\". Note Link 1 <= S.length <= 200 1 <= T.length <= 200 S and T only contain lowercase letters and # characters. Follow Up Link Can you solve it in O(N) time and O(1) space? Default Code Link 1 2 3 bool backspaceCompare ( char * S , char * T ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u5148\u5f97\u5230\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u679c\uff0c\u518d\u6bd4\u8f83\u76f8\u540c\u4e0e\u5426 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 bool backspaceCompare ( char * S , char * T ) { int lenS = strlen ( S ); char resultS [ lenS + 1 ]; int j = 0 ; for ( int i = 0 ; i < lenS ; i ++ ) { if ( S [ i ] != '#' ) { resultS [ j ++ ] = S [ i ]; } else if ( j > 0 ) { j -- ; } } resultS [ j ] = '\\0' ; int lenT = strlen ( T ); char resultT [ lenT + 1 ]; j = 0 ; for ( int i = 0 ; i < lenT ; i ++ ) { if ( T [ i ] != '#' ) { resultT [ j ++ ] = T [ i ]; } else if ( j > 0 ) { j -- ; } } resultT [ j ] = '\\0' ; return strcmp ( resultS , resultT ) == 0 ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u53ea\u662f\u5c06\u5904\u7406\u5b57\u7b26\u4e32\u7684\u7247\u6bb5\u5c01\u88c5\u6210\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // C \u901a\u5e38\u5c06\u7ed3\u679c\u53c2\u6570\u653e\u5728\u524d\u9762 void process ( char * result , const char * str , int length ) { int j = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( str [ i ] != '#' ) { result [ j ++ ] = str [ i ]; } else if ( j > 0 ) { j -- ; } } result [ j ] = '\\0' ; } bool backspaceCompare ( char * S , char * T ) { int lenS = strlen ( S ); char resultS [ lenS + 1 ]; process ( resultS , S , lenS ); int lenT = strlen ( T ); char resultT [ lenT + 1 ]; process ( resultT , T , lenT ); return strcmp ( resultS , resultT ) == 0 ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u53ea\u662f\u5c06\u5904\u7406\u5b57\u7b26\u4e32\u7684\u7247\u6bb5\u5c01\u88c5\u6210\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u4e86 malloc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 char * process ( const char * str ) { int length = strlen ( str ); char * result = malloc ( sizeof ( char ) * ( length + 1 )); int j = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( str [ i ] != '#' ) { result [ j ++ ] = str [ i ]; } else if ( j > 0 ) { j -- ; } } result [ j ] = '\\0' ; return result ; } bool backspaceCompare ( char * S , char * T ) { char * resultS = process ( S ); char * resultT = process ( T ); bool areEqual = ( strcmp ( resultS , resultT ) == 0 ); free ( resultS ); free ( resultT ); return areEqual ; } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u53ea\u662f\u5c06\u5904\u7406\u5b57\u7b26\u4e32\u7684\u7247\u6bb5\u5c01\u88c5\u6210\u51fd\u6570\uff0c\u4e0d\u8fc7\u66f4\u6539\u4e86\u539f\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void process ( char * str ) { int length = strlen ( str ); int j = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( str [ i ] != '#' ) { str [ j ++ ] = str [ i ]; } else if ( j > 0 ) { j -- ; } } str [ j ] = '\\0' ; } bool backspaceCompare ( char * S , char * T ) { process ( S ); process ( T ); return strcmp ( S , T ) == 0 ; }","title":"09 Backspace String Compare"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#9-backspace-string-compare","text":"","title":"9. Backspace String Compare"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#problem","text":"Given two strings S and T . return if they are equal when both are typed into empty text editors. # means a backspace character.","title":"Problem"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#example","text":"Example 1: Input: S = \"ab#c\", T = \"ad#c\" Output: true Explanation: Both S and T become \"ac\". Example 2: Input: S = \"ab##\", T = \"c#d#\" Output: true Explanation: Both S and T become \"\". Example 3: Input: S = \"a##c\", T = \"#a#c\" Output: true Explanation: Both S and T become \"c\". Example 4: Input: S = \"a#c\", T = \"b\" Output: false Explanation: S becomes \"c\" while T becomes \"b\".","title":"Example"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#note","text":"1 <= S.length <= 200 1 <= T.length <= 200 S and T only contain lowercase letters and # characters.","title":"Note"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#follow-up","text":"Can you solve it in O(N) time and O(1) space?","title":"Follow Up"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#default-code","text":"1 2 3 bool backspaceCompare ( char * S , char * T ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#_1","text":"\u601d\u8def\uff1a\u5148\u5f97\u5230\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u679c\uff0c\u518d\u6bd4\u8f83\u76f8\u540c\u4e0e\u5426 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 bool backspaceCompare ( char * S , char * T ) { int lenS = strlen ( S ); char resultS [ lenS + 1 ]; int j = 0 ; for ( int i = 0 ; i < lenS ; i ++ ) { if ( S [ i ] != '#' ) { resultS [ j ++ ] = S [ i ]; } else if ( j > 0 ) { j -- ; } } resultS [ j ] = '\\0' ; int lenT = strlen ( T ); char resultT [ lenT + 1 ]; j = 0 ; for ( int i = 0 ; i < lenT ; i ++ ) { if ( T [ i ] != '#' ) { resultT [ j ++ ] = T [ i ]; } else if ( j > 0 ) { j -- ; } } resultT [ j ] = '\\0' ; return strcmp ( resultS , resultT ) == 0 ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#_2","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u53ea\u662f\u5c06\u5904\u7406\u5b57\u7b26\u4e32\u7684\u7247\u6bb5\u5c01\u88c5\u6210\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // C \u901a\u5e38\u5c06\u7ed3\u679c\u53c2\u6570\u653e\u5728\u524d\u9762 void process ( char * result , const char * str , int length ) { int j = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( str [ i ] != '#' ) { result [ j ++ ] = str [ i ]; } else if ( j > 0 ) { j -- ; } } result [ j ] = '\\0' ; } bool backspaceCompare ( char * S , char * T ) { int lenS = strlen ( S ); char resultS [ lenS + 1 ]; process ( resultS , S , lenS ); int lenT = strlen ( T ); char resultT [ lenT + 1 ]; process ( resultT , T , lenT ); return strcmp ( resultS , resultT ) == 0 ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#_3","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u53ea\u662f\u5c06\u5904\u7406\u5b57\u7b26\u4e32\u7684\u7247\u6bb5\u5c01\u88c5\u6210\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u4e86 malloc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 char * process ( const char * str ) { int length = strlen ( str ); char * result = malloc ( sizeof ( char ) * ( length + 1 )); int j = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( str [ i ] != '#' ) { result [ j ++ ] = str [ i ]; } else if ( j > 0 ) { j -- ; } } result [ j ] = '\\0' ; return result ; } bool backspaceCompare ( char * S , char * T ) { char * resultS = process ( S ); char * resultT = process ( T ); bool areEqual = ( strcmp ( resultS , resultT ) == 0 ); free ( resultS ); free ( resultT ); return areEqual ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/09_Backspace_String_Compare/#_4","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u53ea\u662f\u5c06\u5904\u7406\u5b57\u7b26\u4e32\u7684\u7247\u6bb5\u5c01\u88c5\u6210\u51fd\u6570\uff0c\u4e0d\u8fc7\u66f4\u6539\u4e86\u539f\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void process ( char * str ) { int length = strlen ( str ); int j = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( str [ i ] != '#' ) { str [ j ++ ] = str [ i ]; } else if ( j > 0 ) { j -- ; } } str [ j ] = '\\0' ; } bool backspaceCompare ( char * S , char * T ) { process ( S ); process ( T ); return strcmp ( S , T ) == 0 ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/10_Min_Stack/","text":"10. Min Stack Link Problem Link Design a stack that supports push, pop, top and retrieving the minimun element in constant time. push(x) -- Push element x onto stack. pop() -- Remvoes the element on top of the stack. top() -- Get the top element. getMin() -- Retrieve the minimum element in the stack. Example Link Input [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] Output [null,null,null,null,-3,null,0,-2] Explanation MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); \u2192 Returns -3. minStack.pop(); minStack.top(); \u2192 Returns 0. minStack.getMin(); \u2192 Returns -2. Constraints Link Methods pop, top and getMin operations will always be called on non-empty stacks. Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 typedef struct { } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { } void minStackPush ( MinStack * obj , int x ) { } void minStackPop ( MinStack * obj ) { } int minStackTop ( MinStack * obj ) { } int minStackGetMin ( MinStack * obj ) { } void minStackFree ( MinStack * obj ) { } /** * Your MinStack struct will be instantiated and called as such: * MinStack* obj = minStackCreate(); * minStackPush(obj, x); * minStackPop(obj); * int param_3 = minStackTop(obj); * int param_4 = minStackGetMin(obj); * minStackFree(obj); */ Solution Link \u601d\u8def \u7b2c\u4e00\u6b21\u538b\u6808\uff0c\u5c06\u503c append \u8fdb\u201c\u6700\u5c0f\u503c\u201d\u6570\u7ec4 \u4e4b\u540e\u538b\u6808\uff0c\u90fd\u53bb\u4e0e\u201c\u6700\u5c0f\u503c\u201d\u6570\u7ec4\u672b\u5c3e\u6bd4\u8f83\uff0c\u5c06\u6bd4\u5b8c\u7684\u6700\u5c0f\u503c append \u8fdb\u201c\u6700\u5c0f\u503c\u201d\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 typedef struct { int * data ; int * mins ; int size ; } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { MinStack * s = malloc ( sizeof ( MinStack )); s -> data = NULL ; s -> mins = NULL ; s -> size = 0 ; return s ; } void minStackPush ( MinStack * obj , int x ) { obj -> data = realloc ( obj -> data , sizeof ( int ) * ( obj -> size + 1 )); obj -> mins = realloc ( obj -> mins , sizeof ( int ) * ( obj -> size + 1 )); obj -> data [ obj -> size ] = x ; if ( obj -> size == 0 || x < obj -> mins [ obj -> size - 1 ]) { obj -> mins [ obj -> size ] = x ; } else { obj -> mins [ obj -> size ] = obj -> mins [ obj -> size - 1 ]; } obj -> size ++ ; } void minStackPop ( MinStack * obj ) { obj -> size -- ; } int minStackTop ( MinStack * obj ) { return obj -> data [ obj -> size - 1 ]; } /* int minStackGetMin(MinStack* obj) { int min = obj->data[0]; for (int i = 1; i < obj->size; ++i) { if (obj->data[i] < min) { min = obj->data[i]; } } return min; } */ int minStackGetMin ( MinStack * obj ) { return obj -> mins [ obj -> size - 1 ]; } void minStackFree ( MinStack * obj ) { free ( obj -> data ); free ( obj -> mins ); free ( obj ); }","title":"10 Min Stack"},{"location":"CChallenge/Solutions/10_Min_Stack/#10-min-stack","text":"","title":"10. Min Stack"},{"location":"CChallenge/Solutions/10_Min_Stack/#problem","text":"Design a stack that supports push, pop, top and retrieving the minimun element in constant time. push(x) -- Push element x onto stack. pop() -- Remvoes the element on top of the stack. top() -- Get the top element. getMin() -- Retrieve the minimum element in the stack.","title":"Problem"},{"location":"CChallenge/Solutions/10_Min_Stack/#example","text":"Input [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] Output [null,null,null,null,-3,null,0,-2] Explanation MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); \u2192 Returns -3. minStack.pop(); minStack.top(); \u2192 Returns 0. minStack.getMin(); \u2192 Returns -2.","title":"Example"},{"location":"CChallenge/Solutions/10_Min_Stack/#constraints","text":"Methods pop, top and getMin operations will always be called on non-empty stacks.","title":"Constraints"},{"location":"CChallenge/Solutions/10_Min_Stack/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 typedef struct { } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { } void minStackPush ( MinStack * obj , int x ) { } void minStackPop ( MinStack * obj ) { } int minStackTop ( MinStack * obj ) { } int minStackGetMin ( MinStack * obj ) { } void minStackFree ( MinStack * obj ) { } /** * Your MinStack struct will be instantiated and called as such: * MinStack* obj = minStackCreate(); * minStackPush(obj, x); * minStackPop(obj); * int param_3 = minStackTop(obj); * int param_4 = minStackGetMin(obj); * minStackFree(obj); */","title":"Default Code"},{"location":"CChallenge/Solutions/10_Min_Stack/#solution","text":"\u601d\u8def \u7b2c\u4e00\u6b21\u538b\u6808\uff0c\u5c06\u503c append \u8fdb\u201c\u6700\u5c0f\u503c\u201d\u6570\u7ec4 \u4e4b\u540e\u538b\u6808\uff0c\u90fd\u53bb\u4e0e\u201c\u6700\u5c0f\u503c\u201d\u6570\u7ec4\u672b\u5c3e\u6bd4\u8f83\uff0c\u5c06\u6bd4\u5b8c\u7684\u6700\u5c0f\u503c append \u8fdb\u201c\u6700\u5c0f\u503c\u201d\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 typedef struct { int * data ; int * mins ; int size ; } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { MinStack * s = malloc ( sizeof ( MinStack )); s -> data = NULL ; s -> mins = NULL ; s -> size = 0 ; return s ; } void minStackPush ( MinStack * obj , int x ) { obj -> data = realloc ( obj -> data , sizeof ( int ) * ( obj -> size + 1 )); obj -> mins = realloc ( obj -> mins , sizeof ( int ) * ( obj -> size + 1 )); obj -> data [ obj -> size ] = x ; if ( obj -> size == 0 || x < obj -> mins [ obj -> size - 1 ]) { obj -> mins [ obj -> size ] = x ; } else { obj -> mins [ obj -> size ] = obj -> mins [ obj -> size - 1 ]; } obj -> size ++ ; } void minStackPop ( MinStack * obj ) { obj -> size -- ; } int minStackTop ( MinStack * obj ) { return obj -> data [ obj -> size - 1 ]; } /* int minStackGetMin(MinStack* obj) { int min = obj->data[0]; for (int i = 1; i < obj->size; ++i) { if (obj->data[i] < min) { min = obj->data[i]; } } return min; } */ int minStackGetMin ( MinStack * obj ) { return obj -> mins [ obj -> size - 1 ]; } void minStackFree ( MinStack * obj ) { free ( obj -> data ); free ( obj -> mins ); free ( obj ); }","title":"Solution"},{"location":"CChallenge/Solutions/11_Diameter_of_Binary_Tree/","text":"11. Diameter of Binary Tree Link Problem Link Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. Example Link Given a binary tree 1 / \\ 2 3 / \\ 4 5 Return 3 , which is the length of the path [4, 2, 1, 3] or [5, 2, 1, 3] Note Link The length of path between two nodes is represented by the number of edges between them. Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ int diameterOfBinaryTree ( struct TreeNode * root ){ } Solution Link \u601d\u8def\uff1a\u9012\u5f52\uff0c\u4e09\u79cd\u53ef\u80fd \u6700\u5927\u8def\u5f84\u7ecf\u8fc7\u6839\u7ed3\u70b9 \u6700\u5927\u8def\u5f84\u5728\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811 \u6700\u5927\u8def\u5f84\u5728\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int maxDepth ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; int leftMax = maxDepth ( root -> left ); int rightMax = maxDepth ( root -> right ); int res = ( leftMax < rightMax ? rightMax : leftMax ) + 1 ; return res ; } int diameterOfBinaryTree ( struct TreeNode * root ){ if ( root == NULL ) return 0 ; int middle = maxDepth ( root -> left ) + maxDepth ( root -> right ); int left = diameterOfBinaryTree ( root -> left ); int right = diameterOfBinaryTree ( root -> right ); int res = left < middle ? middle : left ; res = res < right ? right : res ; return res ; }","title":"11 Diameter of Binary Tree"},{"location":"CChallenge/Solutions/11_Diameter_of_Binary_Tree/#11-diameter-of-binary-tree","text":"","title":"11. Diameter of Binary Tree"},{"location":"CChallenge/Solutions/11_Diameter_of_Binary_Tree/#problem","text":"Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.","title":"Problem"},{"location":"CChallenge/Solutions/11_Diameter_of_Binary_Tree/#example","text":"Given a binary tree 1 / \\ 2 3 / \\ 4 5 Return 3 , which is the length of the path [4, 2, 1, 3] or [5, 2, 1, 3]","title":"Example"},{"location":"CChallenge/Solutions/11_Diameter_of_Binary_Tree/#note","text":"The length of path between two nodes is represented by the number of edges between them.","title":"Note"},{"location":"CChallenge/Solutions/11_Diameter_of_Binary_Tree/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ int diameterOfBinaryTree ( struct TreeNode * root ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/11_Diameter_of_Binary_Tree/#solution","text":"\u601d\u8def\uff1a\u9012\u5f52\uff0c\u4e09\u79cd\u53ef\u80fd \u6700\u5927\u8def\u5f84\u7ecf\u8fc7\u6839\u7ed3\u70b9 \u6700\u5927\u8def\u5f84\u5728\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811 \u6700\u5927\u8def\u5f84\u5728\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int maxDepth ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; int leftMax = maxDepth ( root -> left ); int rightMax = maxDepth ( root -> right ); int res = ( leftMax < rightMax ? rightMax : leftMax ) + 1 ; return res ; } int diameterOfBinaryTree ( struct TreeNode * root ){ if ( root == NULL ) return 0 ; int middle = maxDepth ( root -> left ) + maxDepth ( root -> right ); int left = diameterOfBinaryTree ( root -> left ); int right = diameterOfBinaryTree ( root -> right ); int res = left < middle ? middle : left ; res = res < right ? right : res ; return res ; }","title":"Solution"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/","text":"12. Last Stone Weight Link Problem Link We have a collection of stoes, each stone has a positive integer weight. Each turn, we choose the two heaviest stones and smash them together. Suppose the stones have weights x and y with x <= y . The result of this smash is: if x == y , both stones are totally destroyed; if x != y , the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x . At the end, there is at most 1 stone left. Return the weight of this stone(or 0 if there are no stones left.) Example Link Input: [2, 7, 4, 1, 8, 1] Output: 1 Explanation: We combine 7 and 8 to get 1 so the array converts to [2, 4, 1, 1, 1] then, We combine 2 and 4 to get 2 so the array converts to [2, 1, 1, 1] then, We combine 2 and 1 to get 1 so the array converts to [1, 1, 1] then, We combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone. Note Link 1 <= stones.length <= 30 1 <= stones[i] <= 1000 Hide Hint Link Hide Hint #1 Simulate the process. We an do it with a heap, or by sorting some list of stones every time we take a turn. Default Code Link 1 2 3 int lastStoneWeight ( int * stones , int stonesSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def \u5148\u540e\u627e\u51fa\u6700\u5927\u7684\u4e24\u4e2a\u6570\uff0c\u5e76\u5c06\u5176\u5728\u6570\u7ec4\u4e2d\u7f6e\u96f6 \u5c06\u4e24\u6570\u4e4b\u5dee\u5b58\u5165\u6570\u7ec4\u4e2d\u503c\u4e3a\u96f6\u5904 \u5faa\u73af\u76f4\u81f3\u5012\u6570\u7b2c\u4e8c\u5927\u7684\u6570\u4e3a\u96f6\uff0c\u6700\u5927\u503c\u5373\u4e3a\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 int extractMax ( int * stones , int stonesSize ) { int max = stones [ 0 ]; for ( int i = 1 ; i < stonesSize ; i ++ ) { if ( max < stones [ i ]) { max = stones [ i ]; } } for ( int i = 0 ; i < stonesSize ; i ++ ) { if ( stones [ i ] == max ) { stones [ i ] = 0 ; break ; } } return max ; } void insert ( int * stones , int stonesSize , int val ) { for ( int i = 0 ; i < stonesSize ; i ++ ) { if ( stones [ i ] == 0 ) { stones [ i ] = val ; break ; } } } int lastStoneWeight ( int * stones , int stonesSize ) { while ( true ) { int y = extractMax ( stones , stonesSize ); int x = extractMax ( stones , stonesSize ); if ( x == 0 ) { return y ; } else if ( x != y ) { insert ( stones , stonesSize , y - x ); } } return 0 ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u627e\u6700\u5927\u503c\u65f6\uff0c\u4f7f\u7528\u7d22\u5f15\u5c11\u8d70\u4e00\u4e2a\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int extractMax ( int * stones , int stonesSize ) { int max_i = 0 ; for ( int i = 1 ; i < stonesSize ; i ++ ) { if ( stones [ max_i ] < stones [ i ]) { max_i = i ; } } int max = stones [ max_i ]; stones [ max_i ] = 0 ; return max ; } // insert \u4e0e lastStoneWeight \u540c\u65b9\u6cd5\u4e00 // void insert(int* stones, int stonesSize, int val) // int lastStoneWeight(int* stones, int stonesSize) \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u5148\u6392\u5e8f\uff0c\u518d\u5c06\u524d\u4e24\u4e2a\u6570\u6309\u7167\u9898\u610f\u201c\u5bf9\u78b0\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int cmp ( const void * a , const void * b ) { return * ( const int * ) b - * ( const int * ) a ; } int lastStoneWeight ( int * stones , int stonesSize ){ if ( stonesSize < 2 ) return stones [ 0 ]; while ( true ) { qsort ( stones , stonesSize , sizeof ( int ), cmp ); int y = stones [ 0 ]; int x = stones [ 1 ]; stones [ 0 ] = stones [ 1 ] = 0 ; if ( x == 0 ) { return y ; } else if ( x != y ) { stones [ 0 ] = y - x ; } } return 0 ; } \u65b9\u6cd5\u56db Link \u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4\uff0c\u4ee5\u539f\u6570\u7ec4\u7684\u503c\u4f5c\u4e3a\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u7b97\u597d\u6570\u91cf \u65b0\u6570\u7ec4\u5012\u5e8f\u904d\u5386\uff0c\u5f97\u5230\u6700\u5927\u503c \u201c\u5bf9\u78b0\u201d\u540e\u7684\u503c\u4ecd\u4f5c\u4e3a\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u7b97\u597d\u6570\u91cf \u76f4\u81f3\u5012\u6570\u7b2c\u4e8c\u5927\u7684\u6570\u4e3a\u96f6\uff0c\u6700\u5927\u503c\u5373\u4e3a\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int extractMax ( int * counter ) { for ( int i = 1000 ; i > 0 ; i -- ) { if ( counter [ i ] > 0 ) { counter [ i ] -- ; return i ; } } return 0 ; } void insert ( int * counter , int val ) { counter [ val ] ++ ; } int lastStoneWeight ( int * stones , int stonesSize ){ int counter [ 1001 ] = { 0 }; for ( int i = 0 ; i < stonesSize ; i ++ ) { counter [ stones [ i ]] ++ ; } while ( true ) { int y = extractMax ( counter ); int x = extractMax ( counter ); if ( x == 0 ) { return y ; } else if ( x != y ) { insert ( counter , y - x ); } } return 0 ; } \u65b9\u6cd5\u4e94 Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u56db \u76f8\u540c\uff0c\u5c31\u662f\u627e\u6700\u5927\u503c\u65f6\u5f15\u5165\u4e86\u4e0a\u9650\uff0c\u51cf\u5c11\u4e86\u641c\u7d22\u6b21\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 int extractMax ( int * counter , int upperBound ) { for ( int i = upperBound ; i > 0 ; i -- ) { if ( counter [ i ] > 0 ) { counter [ i ] -- ; return i ; } } return 0 ; } void insert ( int * counter , int val ) { counter [ val ] ++ ; } int lastStoneWeight ( int * stones , int stonesSize ){ int counter [ 1001 ] = { 0 }; for ( int i = 0 ; i < stonesSize ; i ++ ) { counter [ stones [ i ]] ++ ; } int upperBound = 1000 ; while ( true ) { int y = extractMax ( counter , upperBound ); int x = extractMax ( counter , upperBound ); if ( x == 0 ) { return y ; } else if ( x != y ) { insert ( counter , y - x ); } upperBound = y ; } return 0 ; }","title":"12 Last Stone Weight"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#12-last-stone-weight","text":"","title":"12. Last Stone Weight"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#problem","text":"We have a collection of stoes, each stone has a positive integer weight. Each turn, we choose the two heaviest stones and smash them together. Suppose the stones have weights x and y with x <= y . The result of this smash is: if x == y , both stones are totally destroyed; if x != y , the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x . At the end, there is at most 1 stone left. Return the weight of this stone(or 0 if there are no stones left.)","title":"Problem"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#example","text":"Input: [2, 7, 4, 1, 8, 1] Output: 1 Explanation: We combine 7 and 8 to get 1 so the array converts to [2, 4, 1, 1, 1] then, We combine 2 and 4 to get 2 so the array converts to [2, 1, 1, 1] then, We combine 2 and 1 to get 1 so the array converts to [1, 1, 1] then, We combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.","title":"Example"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#note","text":"1 <= stones.length <= 30 1 <= stones[i] <= 1000","title":"Note"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#hide-hint","text":"Hide Hint #1 Simulate the process. We an do it with a heap, or by sorting some list of stones every time we take a turn.","title":"Hide Hint"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#default-code","text":"1 2 3 int lastStoneWeight ( int * stones , int stonesSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#_1","text":"\u601d\u8def \u5148\u540e\u627e\u51fa\u6700\u5927\u7684\u4e24\u4e2a\u6570\uff0c\u5e76\u5c06\u5176\u5728\u6570\u7ec4\u4e2d\u7f6e\u96f6 \u5c06\u4e24\u6570\u4e4b\u5dee\u5b58\u5165\u6570\u7ec4\u4e2d\u503c\u4e3a\u96f6\u5904 \u5faa\u73af\u76f4\u81f3\u5012\u6570\u7b2c\u4e8c\u5927\u7684\u6570\u4e3a\u96f6\uff0c\u6700\u5927\u503c\u5373\u4e3a\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 int extractMax ( int * stones , int stonesSize ) { int max = stones [ 0 ]; for ( int i = 1 ; i < stonesSize ; i ++ ) { if ( max < stones [ i ]) { max = stones [ i ]; } } for ( int i = 0 ; i < stonesSize ; i ++ ) { if ( stones [ i ] == max ) { stones [ i ] = 0 ; break ; } } return max ; } void insert ( int * stones , int stonesSize , int val ) { for ( int i = 0 ; i < stonesSize ; i ++ ) { if ( stones [ i ] == 0 ) { stones [ i ] = val ; break ; } } } int lastStoneWeight ( int * stones , int stonesSize ) { while ( true ) { int y = extractMax ( stones , stonesSize ); int x = extractMax ( stones , stonesSize ); if ( x == 0 ) { return y ; } else if ( x != y ) { insert ( stones , stonesSize , y - x ); } } return 0 ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#_2","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u627e\u6700\u5927\u503c\u65f6\uff0c\u4f7f\u7528\u7d22\u5f15\u5c11\u8d70\u4e00\u4e2a\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int extractMax ( int * stones , int stonesSize ) { int max_i = 0 ; for ( int i = 1 ; i < stonesSize ; i ++ ) { if ( stones [ max_i ] < stones [ i ]) { max_i = i ; } } int max = stones [ max_i ]; stones [ max_i ] = 0 ; return max ; } // insert \u4e0e lastStoneWeight \u540c\u65b9\u6cd5\u4e00 // void insert(int* stones, int stonesSize, int val) // int lastStoneWeight(int* stones, int stonesSize)","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#_3","text":"\u601d\u8def\uff1a\u5148\u6392\u5e8f\uff0c\u518d\u5c06\u524d\u4e24\u4e2a\u6570\u6309\u7167\u9898\u610f\u201c\u5bf9\u78b0\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int cmp ( const void * a , const void * b ) { return * ( const int * ) b - * ( const int * ) a ; } int lastStoneWeight ( int * stones , int stonesSize ){ if ( stonesSize < 2 ) return stones [ 0 ]; while ( true ) { qsort ( stones , stonesSize , sizeof ( int ), cmp ); int y = stones [ 0 ]; int x = stones [ 1 ]; stones [ 0 ] = stones [ 1 ] = 0 ; if ( x == 0 ) { return y ; } else if ( x != y ) { stones [ 0 ] = y - x ; } } return 0 ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#_4","text":"\u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4\uff0c\u4ee5\u539f\u6570\u7ec4\u7684\u503c\u4f5c\u4e3a\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u7b97\u597d\u6570\u91cf \u65b0\u6570\u7ec4\u5012\u5e8f\u904d\u5386\uff0c\u5f97\u5230\u6700\u5927\u503c \u201c\u5bf9\u78b0\u201d\u540e\u7684\u503c\u4ecd\u4f5c\u4e3a\u65b0\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u7b97\u597d\u6570\u91cf \u76f4\u81f3\u5012\u6570\u7b2c\u4e8c\u5927\u7684\u6570\u4e3a\u96f6\uff0c\u6700\u5927\u503c\u5373\u4e3a\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int extractMax ( int * counter ) { for ( int i = 1000 ; i > 0 ; i -- ) { if ( counter [ i ] > 0 ) { counter [ i ] -- ; return i ; } } return 0 ; } void insert ( int * counter , int val ) { counter [ val ] ++ ; } int lastStoneWeight ( int * stones , int stonesSize ){ int counter [ 1001 ] = { 0 }; for ( int i = 0 ; i < stonesSize ; i ++ ) { counter [ stones [ i ]] ++ ; } while ( true ) { int y = extractMax ( counter ); int x = extractMax ( counter ); if ( x == 0 ) { return y ; } else if ( x != y ) { insert ( counter , y - x ); } } return 0 ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/12_Last_Stone_Weight/#_5","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u56db \u76f8\u540c\uff0c\u5c31\u662f\u627e\u6700\u5927\u503c\u65f6\u5f15\u5165\u4e86\u4e0a\u9650\uff0c\u51cf\u5c11\u4e86\u641c\u7d22\u6b21\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 int extractMax ( int * counter , int upperBound ) { for ( int i = upperBound ; i > 0 ; i -- ) { if ( counter [ i ] > 0 ) { counter [ i ] -- ; return i ; } } return 0 ; } void insert ( int * counter , int val ) { counter [ val ] ++ ; } int lastStoneWeight ( int * stones , int stonesSize ){ int counter [ 1001 ] = { 0 }; for ( int i = 0 ; i < stonesSize ; i ++ ) { counter [ stones [ i ]] ++ ; } int upperBound = 1000 ; while ( true ) { int y = extractMax ( counter , upperBound ); int x = extractMax ( counter , upperBound ); if ( x == 0 ) { return y ; } else if ( x != y ) { insert ( counter , y - x ); } upperBound = y ; } return 0 ; }","title":"\u65b9\u6cd5\u4e94"},{"location":"CChallenge/Solutions/13_Contiguous_Array/","text":"13. Contiguous Array Link Problem Link Given a binary array, Find the maximum length of a contiguous subarray with equal number of 0 and 1. Example Link Example 1: Input: [0, 1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1. Example 2: Input: [0, 1, 0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Note Link The length of the given binary array will not exceed 50,000. Default Code Link 1 2 3 int findMaxLength ( int * nums , int numsSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22\uff0c\u904d\u5386\u6240\u6709\u53ef\u80fd\uff0c\u5e76\u65f6\u523b\u66f4\u65b0\u6700\u5927\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int findMaxLength ( int * nums , int numsSize ) { int maxLength = 0 ; for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { for ( int j = i + 1 ; j < numsSize ; j ++ ) { int count0 = 0 ; int count1 = 0 ; for ( int k = i ; k <= j ; k ++ ) { if ( nums [ k ] == 0 ) { count0 ++ ; } else { count1 ++ ; } } if ( count0 == count1 ) { int length = j - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e8c Link \u601d\u8def {?, ?, ?, i, ?, ?, ?, j, ?, ?} \u82e5 [0, i-1] \u4e0e [0, j] \u7684 0 \u4e0e 1 \u5dee\u503c\u4e00\u6837\uff0c\u5219 [i, j] \u4e2d 0 \u4e0e 1 \u6570\u91cf\u76f8\u5f53 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int count0 ( int j , int * nums ) { int count = 0 ; for ( int i = 0 ; i <= j ; i ++ ) { if ( nums [ i ] == 0 ) { count ++ ; } } return count ; } int count1 ( int j , int * nums ) { int count = 0 ; for ( int i = 0 ; i <= j ; i ++ ) { if ( nums [ i ] == 1 ) { count ++ ; } } return count ; } int findMaxLength ( int * nums , int numsSize ) { int maxLength = 0 ; for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { for ( int j = i + 1 ; j < numsSize ; j ++ ) { if ( count0 ( j , nums ) - count0 ( i - 1 , nums ) == count1 ( j , nums ) - count1 ( i - 1 , nums )) { // if (count0(j, nums) - count1(j, nums) == count0(i-1, nums) - count1(i-1, nums)) { int length = j - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e09 Link \u601d\u8def \u4ece\u5934\u5230\u5c3e\u904d\u5386 \u904d\u5386\u5230 nums[i] \u65f6\uff0c\u8ba1\u7b97\u51fa nums[i] \u4e4b\u524d 0 \u4e0e 1 \u7684\u6570\u91cf\u5dee \u5f80\u540e\u627e\u6700\u5927\u7d22\u5f15\uff0c\u5373 nums[j] \u4e4b\u524d 0 \u4e0e 1 \u7684\u6570\u91cf\u5dee\u4e0e nums[i] \u76f8\u540c\u7684\u6700\u5927\u7684 j \u7528 j - (i-1) \u7b97\u51fa\u5f53\u524d\u7684\u6700\u5927\u957f\u5ea6 \u7ef4\u62a4\u6700\u5927\u957f\u5ea6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // countDiff == count0() - count1() // j => [0, j] => 0,1 \u7684\u6b21\u6570\u5dee int countDiff ( int j , int * nums ) { int diff = 0 ; for ( int i = 0 ; i <= j ; i ++ ) { if ( nums [ i ] == 0 ) { diff ++ ; } if ( nums [ i ] == 1 ) { diff -- ; } } return diff ; } // 0,1 \u51fa\u73b0\u7684\u6b21\u6570\u76f8\u5dee j \u6b21 => \u5dee j \u6b21\u7684\u6700\u5927\u7d22\u5f15\u53f7\u662f\u8c01 int findMaxJ ( int target , int * nums , int numsSize ) { int maxJ = - 1 ; for ( int j = 0 ; j < numsSize ; j ++ ) { if ( countDiff ( j , nums ) == target ) { maxJ = j ; } } return maxJ ; } int findMaxLength ( int * nums , int numsSize ) { int maxLength = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { int target = countDiff ( i - 1 , nums ); int length = findMaxJ ( target , nums , numsSize ) - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u56db Link \u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4 cntDiff \uff0c\u6bd4\u539f\u6570\u7ec4\u591a\u4e00\u4e2a\u5143\u7d20 cntDiff[i] : \u539f\u6570\u7ec4\u4e2d\u524d i \u4e2a\u5143\u7d20\u4e2d 0 \u4e0e 1 \u7684\u6570\u91cf\u5dee \u5269\u4e0b\u7684\u4e0e \u65b9\u6cd5\u4e09 \u4e00\u81f4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int cindex ( int j ) { return j + 1 ; } int findMaxJ ( int target , int numsSize , int * cntDiff ) { int maxJ = - 1 ; for ( int j = 0 ; j < numsSize ; j ++ ) { if ( cntDiff [ cindex ( j )] == target ) { maxJ = j ; } } return maxJ ; } int findMaxLength ( int * nums , int numsSize ) { int cntDiffSize = numsSize + 1 ; int cntDiff [ cntDiffSize ]; cntDiff [ cindex ( - 1 )] = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == 0 ) { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] + 1 ; } else { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] - 1 ; } } int maxLength = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { int target = cntDiff [ cindex ( i - 1 )]; int length = findMaxJ ( target , numsSize , cntDiff ) - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e94 Link \u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u56db \u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u6570\u7ec4\u7ed9 findMaxJ \u63d0\u901f \u82e5\u539f\u6570\u7ec4\u4e2d\u6709 n \u4e2a\u6570\uff0c\u5219 0 \u4e0e 1 \u7684\u5dee\u5728 [-n, n] \u5bf9 findMaxJ \u800c\u8a00 {-n, -n+1, ... -1, 0, 1, ..., n-1, n} { 0, 1, ... n-1, n, n+1, ..., 2n-1, 2n} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 int cindex ( int j ) { return j + 1 ; } int findex ( int j , int numsSize ) { return j + numsSize ; } int findMaxLength ( int * nums , int numsSize ) { int cntDiffSize = numsSize + 1 ; int cntDiff [ cntDiffSize ]; cntDiff [ cindex ( - 1 )] = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == 0 ) { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] + 1 ; } else { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] - 1 ; } } int findMaxJSize = 2 * numsSize + 1 ; int findMaxJ [ findMaxJSize ]; for ( int i = - numsSize ; i <= numsSize ; i ++ ) { findMaxJ [ findex ( i , numsSize )] = - 1 ; } for ( int j = 0 ; j < numsSize ; j ++ ) { findMaxJ [ findex ( cntDiff [ cindex ( j )], numsSize )] = j ; } int maxLength = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { int target = cntDiff [ cindex ( i - 1 )]; int length = findMaxJ [ findex ( target , numsSize )] - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1aOK!","title":"13 Contiguous Array"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#13-contiguous-array","text":"","title":"13. Contiguous Array"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#problem","text":"Given a binary array, Find the maximum length of a contiguous subarray with equal number of 0 and 1.","title":"Problem"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#example","text":"Example 1: Input: [0, 1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1. Example 2: Input: [0, 1, 0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.","title":"Example"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#note","text":"The length of the given binary array will not exceed 50,000.","title":"Note"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#default-code","text":"1 2 3 int findMaxLength ( int * nums , int numsSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#_1","text":"\u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22\uff0c\u904d\u5386\u6240\u6709\u53ef\u80fd\uff0c\u5e76\u65f6\u523b\u66f4\u65b0\u6700\u5927\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int findMaxLength ( int * nums , int numsSize ) { int maxLength = 0 ; for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { for ( int j = i + 1 ; j < numsSize ; j ++ ) { int count0 = 0 ; int count1 = 0 ; for ( int k = i ; k <= j ; k ++ ) { if ( nums [ k ] == 0 ) { count0 ++ ; } else { count1 ++ ; } } if ( count0 == count1 ) { int length = j - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#_2","text":"\u601d\u8def {?, ?, ?, i, ?, ?, ?, j, ?, ?} \u82e5 [0, i-1] \u4e0e [0, j] \u7684 0 \u4e0e 1 \u5dee\u503c\u4e00\u6837\uff0c\u5219 [i, j] \u4e2d 0 \u4e0e 1 \u6570\u91cf\u76f8\u5f53 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int count0 ( int j , int * nums ) { int count = 0 ; for ( int i = 0 ; i <= j ; i ++ ) { if ( nums [ i ] == 0 ) { count ++ ; } } return count ; } int count1 ( int j , int * nums ) { int count = 0 ; for ( int i = 0 ; i <= j ; i ++ ) { if ( nums [ i ] == 1 ) { count ++ ; } } return count ; } int findMaxLength ( int * nums , int numsSize ) { int maxLength = 0 ; for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { for ( int j = i + 1 ; j < numsSize ; j ++ ) { if ( count0 ( j , nums ) - count0 ( i - 1 , nums ) == count1 ( j , nums ) - count1 ( i - 1 , nums )) { // if (count0(j, nums) - count1(j, nums) == count0(i-1, nums) - count1(i-1, nums)) { int length = j - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#_3","text":"\u601d\u8def \u4ece\u5934\u5230\u5c3e\u904d\u5386 \u904d\u5386\u5230 nums[i] \u65f6\uff0c\u8ba1\u7b97\u51fa nums[i] \u4e4b\u524d 0 \u4e0e 1 \u7684\u6570\u91cf\u5dee \u5f80\u540e\u627e\u6700\u5927\u7d22\u5f15\uff0c\u5373 nums[j] \u4e4b\u524d 0 \u4e0e 1 \u7684\u6570\u91cf\u5dee\u4e0e nums[i] \u76f8\u540c\u7684\u6700\u5927\u7684 j \u7528 j - (i-1) \u7b97\u51fa\u5f53\u524d\u7684\u6700\u5927\u957f\u5ea6 \u7ef4\u62a4\u6700\u5927\u957f\u5ea6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // countDiff == count0() - count1() // j => [0, j] => 0,1 \u7684\u6b21\u6570\u5dee int countDiff ( int j , int * nums ) { int diff = 0 ; for ( int i = 0 ; i <= j ; i ++ ) { if ( nums [ i ] == 0 ) { diff ++ ; } if ( nums [ i ] == 1 ) { diff -- ; } } return diff ; } // 0,1 \u51fa\u73b0\u7684\u6b21\u6570\u76f8\u5dee j \u6b21 => \u5dee j \u6b21\u7684\u6700\u5927\u7d22\u5f15\u53f7\u662f\u8c01 int findMaxJ ( int target , int * nums , int numsSize ) { int maxJ = - 1 ; for ( int j = 0 ; j < numsSize ; j ++ ) { if ( countDiff ( j , nums ) == target ) { maxJ = j ; } } return maxJ ; } int findMaxLength ( int * nums , int numsSize ) { int maxLength = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { int target = countDiff ( i - 1 , nums ); int length = findMaxJ ( target , nums , numsSize ) - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#_4","text":"\u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4 cntDiff \uff0c\u6bd4\u539f\u6570\u7ec4\u591a\u4e00\u4e2a\u5143\u7d20 cntDiff[i] : \u539f\u6570\u7ec4\u4e2d\u524d i \u4e2a\u5143\u7d20\u4e2d 0 \u4e0e 1 \u7684\u6570\u91cf\u5dee \u5269\u4e0b\u7684\u4e0e \u65b9\u6cd5\u4e09 \u4e00\u81f4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int cindex ( int j ) { return j + 1 ; } int findMaxJ ( int target , int numsSize , int * cntDiff ) { int maxJ = - 1 ; for ( int j = 0 ; j < numsSize ; j ++ ) { if ( cntDiff [ cindex ( j )] == target ) { maxJ = j ; } } return maxJ ; } int findMaxLength ( int * nums , int numsSize ) { int cntDiffSize = numsSize + 1 ; int cntDiff [ cntDiffSize ]; cntDiff [ cindex ( - 1 )] = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == 0 ) { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] + 1 ; } else { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] - 1 ; } } int maxLength = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { int target = cntDiff [ cindex ( i - 1 )]; int length = findMaxJ ( target , numsSize , cntDiff ) - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/13_Contiguous_Array/#_5","text":"\u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u56db \u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u6570\u7ec4\u7ed9 findMaxJ \u63d0\u901f \u82e5\u539f\u6570\u7ec4\u4e2d\u6709 n \u4e2a\u6570\uff0c\u5219 0 \u4e0e 1 \u7684\u5dee\u5728 [-n, n] \u5bf9 findMaxJ \u800c\u8a00 {-n, -n+1, ... -1, 0, 1, ..., n-1, n} { 0, 1, ... n-1, n, n+1, ..., 2n-1, 2n} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 int cindex ( int j ) { return j + 1 ; } int findex ( int j , int numsSize ) { return j + numsSize ; } int findMaxLength ( int * nums , int numsSize ) { int cntDiffSize = numsSize + 1 ; int cntDiff [ cntDiffSize ]; cntDiff [ cindex ( - 1 )] = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == 0 ) { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] + 1 ; } else { cntDiff [ cindex ( i )] = cntDiff [ cindex ( i - 1 )] - 1 ; } } int findMaxJSize = 2 * numsSize + 1 ; int findMaxJ [ findMaxJSize ]; for ( int i = - numsSize ; i <= numsSize ; i ++ ) { findMaxJ [ findex ( i , numsSize )] = - 1 ; } for ( int j = 0 ; j < numsSize ; j ++ ) { findMaxJ [ findex ( cntDiff [ cindex ( j )], numsSize )] = j ; } int maxLength = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { int target = cntDiff [ cindex ( i - 1 )]; int length = findMaxJ [ findex ( target , numsSize )] - i + 1 ; if ( maxLength < length ) { maxLength = length ; } } return maxLength ; } \u8fd0\u884c\u7ed3\u679c\uff1aOK!","title":"\u65b9\u6cd5\u4e94"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/","text":"14. Perform String Shifts Link Problem Link You are given a string s containing lowercase English letters, and a matrix shift , where shift[i] = [direction, amount] : direction can be 0 (for left shift) or 1 (for right shift). amount is the amount by which string s is to be shifted. Similarly, a right shift by 1 means remove the last character of s and add it to the beginning. Return the final string all operations. Example Link Example 1: Input: s = \"abc\", shift = [[0, 1], [1, 2]] Output: \"cab\" Explanation: [0, 1] means shift to left by 1. \"abc\" -> \"bca\" [1, 2] means shift to right by 2. \"bca\" -> \"cab\" Example 2: Input: s = \"abcdefg\", shift = [[1, 1], [1, 1], [0, 2], [1, 3]] Output: \"efgabcd\" Explanation: [1, 1] means shift to right by 1. \"abcdefg\" -> \"gabcdef\" [1, 1] means shift to right by 1. \"gabcdef\" -> \"fgabcde\" [0, 2] means shift to left by 2. \"fgabcde\" -> \"abcdefg\" [1, 3] means shift to right by 3. \"abcdefg\" -> \"efgabcd\" Constrains Link 1 <= s.length <= 100 s only contains lower case English letters. 1 <= shift.length <= 100 shift[i].length == 2 0 <= shift[i][0] <= 1 0 <= shift[i][1] <= 100 Default Code Link 1 2 3 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u66b4\u529b\u89e3\u6cd5\uff0c\u6309\u7167\u7ed9\u51fa\u7684 shift \u4f9d\u6b21\u201c\u5de6\u79fb\u201d\u3001\u201c\u53f3\u79fb\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { for ( int j = 0 ; j < amount ; j ++ ) { char temp = s [ 0 ]; for ( int k = 0 ; k < len - 1 ; k ++ ) { s [ k ] = s [ k + 1 ]; } s [ len - 1 ] = temp ; } } else if ( direction == 1 ) { for ( int j = 0 ; j < amount ; j ++ ) { char temp = s [ len - 1 ]; for ( int k = len - 1 ; k > 0 ; k -- ) { // \u5982\u679c\u662f\u590d\u5236\u4e0a\u4e00\u6bb5 for \u505a\u66f4\u6539\uff0c\u522b\u7c97\u5fc3\uff01 s [ k ] = s [ k - 1 ]; } s [ 0 ] = temp ; } } } return s ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def abcd -> shift right 1 -> dabc abcd -> shift left 3 -> dabc => shift right 1 == shift left (n-1) \u5728 \u65b9\u6cd5\u4e00 \u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u4e0a\u65b9\u89c4\u5f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ] % len ; if ( direction == 1 ) { amount = len - amount ; } for ( int j = 0 ; j < amount ; j ++ ) { char temp = s [ 0 ]; for ( int k = 0 ; k < len - 1 ; k ++ ) { s [ k ] = s [ k + 1 ]; } s [ len - 1 ] = temp ; } } return s ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u4e00\u6b21\u6027\u628a\u79fb\u52a8\u6b65\u6570\u7b97\u597d\uff0c\u518d\u79fb\uff0c\u6ce8\u610f\u8d1f\u6570\u53d6\u4f59 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } for ( int j = 0 ; j < totalAmount ; j ++ ) { char temp = s [ 0 ]; for ( int k = 0 ; k < len - 1 ; k ++ ) { s [ k ] = s [ k + 1 ]; } s [ len - 1 ] = temp ; } return s ; } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a \u4e00\u6b21\u6027\u7b97\u597d\u79fb\u52a8\u6b65\u6570 \u590d\u5236\u539f\u5b57\u7b26\u4e32 \u7528\u65b0\u5b57\u7b26\u4e32\u76f8\u5e94\u4f4d\u7f6e\u8986\u76d6\u539f\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } char t [ len ]; for ( int i = 0 ; i < len ; i ++ ) { t [ i ] = s [ i ]; } for ( int i = 0 ; i < len ; i ++ ) { s [ i ] = t [( i + totalAmount ) % len ]; } return s ; } \u65b9\u6cd5\u4e94 Link \u601d\u8def \u4e09\u6b21\u7ffb\u8f6c\uff0c\u5982\u539f\u6570\u7ec4 1, 2, 3, 4, | 5, 6, 7, 8, 9 4, 3, 2, 1, | 5, 6, 7, 8, 9 4, 3, 2, 1, | 9, 8, 7, 6, 5 5, 6, 7, 8, 9 | 1, 2, 3, 4 \u4e00\u6b21\u6027\u7b97\u597d\u79fb\u52a8\u6b65\u6570\uff0c\u4f7f\u7528\u4e09\u6b21\u7ffb\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void reverse ( char * s , int start , int stop ) { stop -- ; while ( start < stop ) { char temp = s [ start ]; s [ start ] = s [ stop ]; s [ stop ] = temp ; start ++ ; stop -- ; } } char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } // \u4e09\u6b21\u53cd\u8f6c reverse ( s , 0 , totalAmount ); // [0, totalAmount) reverse ( s , totalAmount , len ); reverse ( s , 0 , len ); return s ; } \u65b9\u6cd5\u516d Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e94 \u76f8\u540c\uff0c\u5c31\u662f\u7ffb\u8f6c\u65f6\u6539\u4f20\u6307\u9488 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void reverse ( char * start , char * stop ) { stop -- ; while ( start < stop ) { char temp = * start ; * start = * stop ; * stop = temp ; start ++ ; stop -- ; } } char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } // \u4e09\u6b21\u53cd\u8f6c reverse ( s , s + totalAmount ); // [0, totalAmount) reverse ( s + totalAmount , s + len ); reverse ( s , s + len ); return s ; }","title":"14 Perform String Shifts"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#14-perform-string-shifts","text":"","title":"14. Perform String Shifts"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#problem","text":"You are given a string s containing lowercase English letters, and a matrix shift , where shift[i] = [direction, amount] : direction can be 0 (for left shift) or 1 (for right shift). amount is the amount by which string s is to be shifted. Similarly, a right shift by 1 means remove the last character of s and add it to the beginning. Return the final string all operations.","title":"Problem"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#example","text":"Example 1: Input: s = \"abc\", shift = [[0, 1], [1, 2]] Output: \"cab\" Explanation: [0, 1] means shift to left by 1. \"abc\" -> \"bca\" [1, 2] means shift to right by 2. \"bca\" -> \"cab\" Example 2: Input: s = \"abcdefg\", shift = [[1, 1], [1, 1], [0, 2], [1, 3]] Output: \"efgabcd\" Explanation: [1, 1] means shift to right by 1. \"abcdefg\" -> \"gabcdef\" [1, 1] means shift to right by 1. \"gabcdef\" -> \"fgabcde\" [0, 2] means shift to left by 2. \"fgabcde\" -> \"abcdefg\" [1, 3] means shift to right by 3. \"abcdefg\" -> \"efgabcd\"","title":"Example"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#constrains","text":"1 <= s.length <= 100 s only contains lower case English letters. 1 <= shift.length <= 100 shift[i].length == 2 0 <= shift[i][0] <= 1 0 <= shift[i][1] <= 100","title":"Constrains"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#default-code","text":"1 2 3 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { }","title":"Default Code"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#_1","text":"\u601d\u8def\uff1a\u66b4\u529b\u89e3\u6cd5\uff0c\u6309\u7167\u7ed9\u51fa\u7684 shift \u4f9d\u6b21\u201c\u5de6\u79fb\u201d\u3001\u201c\u53f3\u79fb\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { for ( int j = 0 ; j < amount ; j ++ ) { char temp = s [ 0 ]; for ( int k = 0 ; k < len - 1 ; k ++ ) { s [ k ] = s [ k + 1 ]; } s [ len - 1 ] = temp ; } } else if ( direction == 1 ) { for ( int j = 0 ; j < amount ; j ++ ) { char temp = s [ len - 1 ]; for ( int k = len - 1 ; k > 0 ; k -- ) { // \u5982\u679c\u662f\u590d\u5236\u4e0a\u4e00\u6bb5 for \u505a\u66f4\u6539\uff0c\u522b\u7c97\u5fc3\uff01 s [ k ] = s [ k - 1 ]; } s [ 0 ] = temp ; } } } return s ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#_2","text":"\u601d\u8def abcd -> shift right 1 -> dabc abcd -> shift left 3 -> dabc => shift right 1 == shift left (n-1) \u5728 \u65b9\u6cd5\u4e00 \u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u4e0a\u65b9\u89c4\u5f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ] % len ; if ( direction == 1 ) { amount = len - amount ; } for ( int j = 0 ; j < amount ; j ++ ) { char temp = s [ 0 ]; for ( int k = 0 ; k < len - 1 ; k ++ ) { s [ k ] = s [ k + 1 ]; } s [ len - 1 ] = temp ; } } return s ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#_3","text":"\u601d\u8def\uff1a\u4e00\u6b21\u6027\u628a\u79fb\u52a8\u6b65\u6570\u7b97\u597d\uff0c\u518d\u79fb\uff0c\u6ce8\u610f\u8d1f\u6570\u53d6\u4f59 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } for ( int j = 0 ; j < totalAmount ; j ++ ) { char temp = s [ 0 ]; for ( int k = 0 ; k < len - 1 ; k ++ ) { s [ k ] = s [ k + 1 ]; } s [ len - 1 ] = temp ; } return s ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#_4","text":"\u601d\u8def\uff1a \u4e00\u6b21\u6027\u7b97\u597d\u79fb\u52a8\u6b65\u6570 \u590d\u5236\u539f\u5b57\u7b26\u4e32 \u7528\u65b0\u5b57\u7b26\u4e32\u76f8\u5e94\u4f4d\u7f6e\u8986\u76d6\u539f\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } char t [ len ]; for ( int i = 0 ; i < len ; i ++ ) { t [ i ] = s [ i ]; } for ( int i = 0 ; i < len ; i ++ ) { s [ i ] = t [( i + totalAmount ) % len ]; } return s ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#_5","text":"\u601d\u8def \u4e09\u6b21\u7ffb\u8f6c\uff0c\u5982\u539f\u6570\u7ec4 1, 2, 3, 4, | 5, 6, 7, 8, 9 4, 3, 2, 1, | 5, 6, 7, 8, 9 4, 3, 2, 1, | 9, 8, 7, 6, 5 5, 6, 7, 8, 9 | 1, 2, 3, 4 \u4e00\u6b21\u6027\u7b97\u597d\u79fb\u52a8\u6b65\u6570\uff0c\u4f7f\u7528\u4e09\u6b21\u7ffb\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void reverse ( char * s , int start , int stop ) { stop -- ; while ( start < stop ) { char temp = s [ start ]; s [ start ] = s [ stop ]; s [ stop ] = temp ; start ++ ; stop -- ; } } char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } // \u4e09\u6b21\u53cd\u8f6c reverse ( s , 0 , totalAmount ); // [0, totalAmount) reverse ( s , totalAmount , len ); reverse ( s , 0 , len ); return s ; }","title":"\u65b9\u6cd5\u4e94"},{"location":"CChallenge/Solutions/14_Perform_String_Shifts/#_6","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e94 \u76f8\u540c\uff0c\u5c31\u662f\u7ffb\u8f6c\u65f6\u6539\u4f20\u6307\u9488 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void reverse ( char * start , char * stop ) { stop -- ; while ( start < stop ) { char temp = * start ; * start = * stop ; * stop = temp ; start ++ ; stop -- ; } } char * stringShift ( char * s , int ** shift , int shiftSize , int * shiftColSize ) { int len = strlen ( s ); int totalAmount = 0 ; for ( int i = 0 ; i < shiftSize ; i ++ ) { int direction = shift [ i ][ 0 ]; int amount = shift [ i ][ 1 ]; if ( direction == 0 ) { totalAmount += amount ; } else { totalAmount -= amount ; } } totalAmount %= len ; if ( totalAmount < 0 ) { totalAmount += len ; } // \u4e09\u6b21\u53cd\u8f6c reverse ( s , s + totalAmount ); // [0, totalAmount) reverse ( s + totalAmount , s + len ); reverse ( s , s + len ); return s ; }","title":"\u65b9\u6cd5\u516d"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/","text":"15. Product of Array Except Self Link Problem Link Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i] . Example Link Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Constaint Link It's guranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer. Note Link Please solve it whthout division and in O(n). Follow up Link Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.) Default Code Link 1 2 3 4 5 6 /** * Note: The returned array must be malloced, assume caller calls free(). */ int * productExceptSelf ( int * nums , int numsSize , int * returnSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def \u4e09\u79cd\u60c5\u51b5 \u6ca1\u6709 0\uff0c\u6b63\u5e38\u8ba1\u7b97 \u4e00\u4e2a 0\uff0c0 \u90a3\u4e2a\u4f4d\u7f6e\u6b63\u5e38\u8ba1\u7b97\uff0c\u5176\u4f59\u4f4d\u7f6e\u7ed3\u679c\u4e3a 0 \u5927\u4e8e\u4e00\u4e2a 0\uff0c\u7ed3\u679c\u5747\u4e3a 0 \u5148\u6570 0 \u7684\u4e2a\u6570\uff0c\u518d\u6309\u4e09\u79cd\u60c5\u51b5\u8d70\uff0c\u7528\u4e86\u9664\u6cd5\uff08\u9898\u76ee\u4e0d\u5e0c\u671b\u7b54\u9898\u8005\u4f7f\u7528\u9664\u6cd5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); int numberOfZeros = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == 0 ) { numberOfZeros ++ ; } } if ( numberOfZeros == 1 ) { int total = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] != 0 ) { total *= nums [ i ]; } } for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] != 0 ) { result [ i ] = 0 ; } else { result [ i ] = total ; } } } else if ( numberOfZeros >= 2 ) { for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = 0 ; } } else { int total = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { total *= nums [ i ]; } for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = total / nums [ i ]; } } return result ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def \u904d\u5386\u539f\u6570\u7ec4\uff0c\u5b9e\u65f6\u8ba1\u7b97\u5de6\u4fa7\u4e58\u79ef\u4e0e\u53f3\u4fa7\u4e58\u79ef\uff0c\u7136\u540e\u5de6\u53f3\u76f8\u4e58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); for ( int i = 0 ; i < numsSize ; i ++ ) { int left = 1 ; for ( int j = 0 ; j < i ; j ++ ) { left *= nums [ j ]; } int right = 1 ; for ( int j = i + 1 ; j < numsSize ; j ++ ) { right *= nums [ j ]; } result [ i ] = left * right ; } return result ; } TLE \u65b9\u6cd5\u4e09 Link \u601d\u8def \u65b0\u5f00\u4e24\u4e2a\u6570\u7ec4 left[i] \u8868\u793a nums[i] \u5de6\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef right[i] \u8868\u793a nums[i] \u53f3\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef \u5904\u7406\u597d\u65b0\u6570\u7ec4\uff0c\u5bf9\u5e94\u76f8\u4e58\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); int lefts [ numsSize ]; int rights [ numsSize ]; lefts [ 0 ] = 1 ; rights [ numsSize - 1 ] = 1 ; for ( int i = 1 ; i < numsSize ; i ++ ) { lefts [ i ] = lefts [ i - 1 ] * nums [ i - 1 ]; } for ( int i = numsSize - 2 ; i >= 0 ; i -- ) { rights [ i ] = rights [ i + 1 ] * nums [ i + 1 ]; } for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = lefts [ i ] * rights [ i ]; } return result ; } \u65b9\u6cd5\u56db Link \u601d\u8def \u53ea\u5f00 rights \u6570\u7ec4 \u7528\u4e00\u4e2a\u53d8\u91cf\u4e00\u8fb9\u904d\u5386\u539f\u6570\u7ec4\uff0c\u4e00\u904d\u7d2f\u4e58\uff0c\u5e76\u4e0e\u5904\u7406\u597d\u7684 rights \u6570\u7ec4\u5bf9\u5e94\u76f8\u4e58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); int rights [ numsSize ]; rights [ numsSize - 1 ] = 1 ; for ( int i = numsSize - 2 ; i >= 0 ; i -- ) { rights [ i ] = rights [ i + 1 ] * nums [ i + 1 ]; } int left = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = left * rights [ i ]; left *= nums [ i ]; } return result ; } \u65b9\u6cd5\u4e94 Link \u601d\u8def \u76f4\u63a5\u7528 result \u6570\u7ec4\u4ee3\u66ff \u65b9\u6cd5\u56db \u65b0\u5f00\u7684 rights \u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); result [ numsSize - 1 ] = 1 ; for ( int i = numsSize - 2 ; i >= 0 ; i -- ) { result [ i ] = result [ i + 1 ] * nums [ i + 1 ]; } int left = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = left * result [ i ]; left *= nums [ i ]; } return result ; }","title":"15 Product of Array Except Self"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#15-product-of-array-except-self","text":"","title":"15. Product of Array Except Self"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#problem","text":"Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i] .","title":"Problem"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#example","text":"Input: [1, 2, 3, 4] Output: [24, 12, 8, 6]","title":"Example"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#constaint","text":"It's guranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.","title":"Constaint"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#note","text":"Please solve it whthout division and in O(n).","title":"Note"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#follow-up","text":"Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)","title":"Follow up"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#default-code","text":"1 2 3 4 5 6 /** * Note: The returned array must be malloced, assume caller calls free(). */ int * productExceptSelf ( int * nums , int numsSize , int * returnSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#_1","text":"\u601d\u8def \u4e09\u79cd\u60c5\u51b5 \u6ca1\u6709 0\uff0c\u6b63\u5e38\u8ba1\u7b97 \u4e00\u4e2a 0\uff0c0 \u90a3\u4e2a\u4f4d\u7f6e\u6b63\u5e38\u8ba1\u7b97\uff0c\u5176\u4f59\u4f4d\u7f6e\u7ed3\u679c\u4e3a 0 \u5927\u4e8e\u4e00\u4e2a 0\uff0c\u7ed3\u679c\u5747\u4e3a 0 \u5148\u6570 0 \u7684\u4e2a\u6570\uff0c\u518d\u6309\u4e09\u79cd\u60c5\u51b5\u8d70\uff0c\u7528\u4e86\u9664\u6cd5\uff08\u9898\u76ee\u4e0d\u5e0c\u671b\u7b54\u9898\u8005\u4f7f\u7528\u9664\u6cd5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); int numberOfZeros = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == 0 ) { numberOfZeros ++ ; } } if ( numberOfZeros == 1 ) { int total = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] != 0 ) { total *= nums [ i ]; } } for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] != 0 ) { result [ i ] = 0 ; } else { result [ i ] = total ; } } } else if ( numberOfZeros >= 2 ) { for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = 0 ; } } else { int total = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { total *= nums [ i ]; } for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = total / nums [ i ]; } } return result ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#_2","text":"\u601d\u8def \u904d\u5386\u539f\u6570\u7ec4\uff0c\u5b9e\u65f6\u8ba1\u7b97\u5de6\u4fa7\u4e58\u79ef\u4e0e\u53f3\u4fa7\u4e58\u79ef\uff0c\u7136\u540e\u5de6\u53f3\u76f8\u4e58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); for ( int i = 0 ; i < numsSize ; i ++ ) { int left = 1 ; for ( int j = 0 ; j < i ; j ++ ) { left *= nums [ j ]; } int right = 1 ; for ( int j = i + 1 ; j < numsSize ; j ++ ) { right *= nums [ j ]; } result [ i ] = left * right ; } return result ; } TLE","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#_3","text":"\u601d\u8def \u65b0\u5f00\u4e24\u4e2a\u6570\u7ec4 left[i] \u8868\u793a nums[i] \u5de6\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef right[i] \u8868\u793a nums[i] \u53f3\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef \u5904\u7406\u597d\u65b0\u6570\u7ec4\uff0c\u5bf9\u5e94\u76f8\u4e58\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); int lefts [ numsSize ]; int rights [ numsSize ]; lefts [ 0 ] = 1 ; rights [ numsSize - 1 ] = 1 ; for ( int i = 1 ; i < numsSize ; i ++ ) { lefts [ i ] = lefts [ i - 1 ] * nums [ i - 1 ]; } for ( int i = numsSize - 2 ; i >= 0 ; i -- ) { rights [ i ] = rights [ i + 1 ] * nums [ i + 1 ]; } for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = lefts [ i ] * rights [ i ]; } return result ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#_4","text":"\u601d\u8def \u53ea\u5f00 rights \u6570\u7ec4 \u7528\u4e00\u4e2a\u53d8\u91cf\u4e00\u8fb9\u904d\u5386\u539f\u6570\u7ec4\uff0c\u4e00\u904d\u7d2f\u4e58\uff0c\u5e76\u4e0e\u5904\u7406\u597d\u7684 rights \u6570\u7ec4\u5bf9\u5e94\u76f8\u4e58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); int rights [ numsSize ]; rights [ numsSize - 1 ] = 1 ; for ( int i = numsSize - 2 ; i >= 0 ; i -- ) { rights [ i ] = rights [ i + 1 ] * nums [ i + 1 ]; } int left = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = left * rights [ i ]; left *= nums [ i ]; } return result ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/15_Product_of_Array_Except_Self/#_5","text":"\u601d\u8def \u76f4\u63a5\u7528 result \u6570\u7ec4\u4ee3\u66ff \u65b9\u6cd5\u56db \u65b0\u5f00\u7684 rights \u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int * productExceptSelf ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * result = malloc ( sizeof ( int ) * numsSize ); result [ numsSize - 1 ] = 1 ; for ( int i = numsSize - 2 ; i >= 0 ; i -- ) { result [ i ] = result [ i + 1 ] * nums [ i + 1 ]; } int left = 1 ; for ( int i = 0 ; i < numsSize ; i ++ ) { result [ i ] = left * result [ i ]; left *= nums [ i ]; } return result ; }","title":"\u65b9\u6cd5\u4e94"},{"location":"CChallenge/Solutions/16_Valid_Parenthesis_String/","text":"16. Valid Parenthesis String Link Problem Link Given a string containing only types of characters: '(', ')', and '*', write a function to check whether this string is valid. We define the validity of a string by these rules: Any left parenthesis '(' must have a corresponding right parenthesis ')'. Any right parenthesis ')' must have a corresponding left parenthesis '('. Left parenthesis '(' must go before the corresponding right parenthesis ')'. '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string. An empty string is also valid. Example Link Example 1: Input: \"()\" Output: True Example 2: Input: \"(*)\" Output: True Example 3: Input: \"(*))\" Output: True Note Link The string size will be in the range [1, 100] Default Code Link 1 2 3 bool checkValidString ( char * s ){ } Solution Link \u601d\u8def \u7528\u4e24\u4e2a\u53d8\u91cf\u6a21\u62df\u4e24\u4e2a\u6781\u9650\u60c5\u51b5\uff0c\u4e00\u4e2a\u8868\u793a\u6700\u5c11\u6709\u51e0\u4e2a ( \uff0c\u53e6\u4e00\u4e2a\u8868\u793a\u6700\u591a\u6709\u51e0\u4e2a ( \u9047\u5230 ( \u65f6\u81ea\u589e \u9047\u5230 ) \u65f6\u81ea\u51cf \u9047\u5230 * \u65f6\u4e00\u4e2a\u81ea\u51cf\uff08\u5f53 ) \uff09\uff0c\u4e00\u4e2a\u81ea\u589e\uff08\u5f53 ( \uff09 \u6ce8\u610f\u4e0b\u9650\u4e0d\u53ef\u5c0f\u4e8e\u96f6 \u6700\u540e\u5224\u65ad\u4e0b\u9650\u662f\u5426\u4e3a\u96f6\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 bool checkValidString ( char * s ) { int minCount = 0 ; // \u6700\u5c11\u6709\u51e0\u4e2a '(' int maxCount = 0 ; // \u6700\u591a\u6709\u51e0\u4e2a '(' int length = strlen ( s ); for ( int i = 0 ; i < length ; i ++ ) { if ( s [ i ] == '(' ) { minCount ++ ; maxCount ++ ; } else if ( s [ i ] == ')' ) { minCount -- ; maxCount -- ; } else if ( s [ i ] == '*' ) { minCount -- ; maxCount ++ ; } if ( maxCount < 0 ) { // minCount <= maxCount return false ; } if ( minCount < 0 ) { minCount = 0 ; } } return minCount == 0 ; }","title":"16 Valid Parenthesis String"},{"location":"CChallenge/Solutions/16_Valid_Parenthesis_String/#16-valid-parenthesis-string","text":"","title":"16. Valid Parenthesis String"},{"location":"CChallenge/Solutions/16_Valid_Parenthesis_String/#problem","text":"Given a string containing only types of characters: '(', ')', and '*', write a function to check whether this string is valid. We define the validity of a string by these rules: Any left parenthesis '(' must have a corresponding right parenthesis ')'. Any right parenthesis ')' must have a corresponding left parenthesis '('. Left parenthesis '(' must go before the corresponding right parenthesis ')'. '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string. An empty string is also valid.","title":"Problem"},{"location":"CChallenge/Solutions/16_Valid_Parenthesis_String/#example","text":"Example 1: Input: \"()\" Output: True Example 2: Input: \"(*)\" Output: True Example 3: Input: \"(*))\" Output: True","title":"Example"},{"location":"CChallenge/Solutions/16_Valid_Parenthesis_String/#note","text":"The string size will be in the range [1, 100]","title":"Note"},{"location":"CChallenge/Solutions/16_Valid_Parenthesis_String/#default-code","text":"1 2 3 bool checkValidString ( char * s ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/16_Valid_Parenthesis_String/#solution","text":"\u601d\u8def \u7528\u4e24\u4e2a\u53d8\u91cf\u6a21\u62df\u4e24\u4e2a\u6781\u9650\u60c5\u51b5\uff0c\u4e00\u4e2a\u8868\u793a\u6700\u5c11\u6709\u51e0\u4e2a ( \uff0c\u53e6\u4e00\u4e2a\u8868\u793a\u6700\u591a\u6709\u51e0\u4e2a ( \u9047\u5230 ( \u65f6\u81ea\u589e \u9047\u5230 ) \u65f6\u81ea\u51cf \u9047\u5230 * \u65f6\u4e00\u4e2a\u81ea\u51cf\uff08\u5f53 ) \uff09\uff0c\u4e00\u4e2a\u81ea\u589e\uff08\u5f53 ( \uff09 \u6ce8\u610f\u4e0b\u9650\u4e0d\u53ef\u5c0f\u4e8e\u96f6 \u6700\u540e\u5224\u65ad\u4e0b\u9650\u662f\u5426\u4e3a\u96f6\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 bool checkValidString ( char * s ) { int minCount = 0 ; // \u6700\u5c11\u6709\u51e0\u4e2a '(' int maxCount = 0 ; // \u6700\u591a\u6709\u51e0\u4e2a '(' int length = strlen ( s ); for ( int i = 0 ; i < length ; i ++ ) { if ( s [ i ] == '(' ) { minCount ++ ; maxCount ++ ; } else if ( s [ i ] == ')' ) { minCount -- ; maxCount -- ; } else if ( s [ i ] == '*' ) { minCount -- ; maxCount ++ ; } if ( maxCount < 0 ) { // minCount <= maxCount return false ; } if ( minCount < 0 ) { minCount = 0 ; } } return minCount == 0 ; }","title":"Solution"},{"location":"CChallenge/Solutions/17_Number_of_Islands/","text":"17. Number of Islands Link Problem Link Given a 2d grid map of 1 s (land) and 0 s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Example Link Example 1: Input: grid = [ [\"1\",\"1\",\"1\",\"1\",\"0\"], [\"1\",\"1\",\"0\",\"1\",\"0\"], [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\"] ] Output: 1 Example 2: Input: grid = [ [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"1\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"1\",\"1\"] ] Output: 3 Default Code Link 1 2 3 int numIslands ( char ** grid , int gridSize , int * gridColSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u904d\u5386\u4e8c\u7ef4\u5b57\u7b26\u6570\u7ec4\uff0c\u82e5\u627e\u5230 1 \uff0c\u5219\u5148\u6807\u8bb0\uff0c\u518d\u5bfb\u627e\u5176\u201c\u4e0a\u4e0b\u5de6\u53f3\u201d\uff08\u82e5\u6709\uff09\uff0c\u76f4\u5230\u627e\u5b8c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 int numIslands ( char ** grid , int gridSize , int * gridColSize ) { if ( gridSize == 0 ) return 0 ; const char WATER = '0' ; const char LAND = '1' ; const char NEW = 'X' ; const char USED = 'O' ; int NUMBER_OF_ROWS = gridSize ; int NUMBER_OF_COLS = gridColSize [ 0 ]; int numberOfIslands = 0 ; for ( int i = 0 ; i < NUMBER_OF_ROWS ; i ++ ) { for ( int j = 0 ; j < NUMBER_OF_COLS ; j ++ ) { if ( grid [ i ][ j ] == LAND ) { grid [ i ][ j ] = NEW ; bool hasNew ; do { hasNew = false ; for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == LAND ) { int upX = x ; int upY = y - 1 ; if ( upY >= 0 && grid [ upY ][ upX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int downX = x ; int downY = y + 1 ; if ( downY < NUMBER_OF_ROWS && grid [ downY ][ downX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int leftX = x - 1 ; int leftY = y ; if ( leftX >= 0 && grid [ leftY ][ leftX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int rightX = x + 1 ; int rightY = y ; if ( rightX < NUMBER_OF_COLS && grid [ rightY ][ rightX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } } } } } while ( hasNew ); for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == NEW ) { grid [ y ][ x ] = USED ; } } } numberOfIslands ++ ; } } } return numberOfIslands ; } \u65b9\u6cd5\u4e8c Link \u91cd\u6784 \u65b9\u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 const char WATER = '0' ; const char LAND = '1' ; const char NEW = 'X' ; const char USED = 'O' ; void floorFill ( char ** grid , int NUMBER_OF_ROWS , int NUMBER_OF_COLS , int i , int j ) { grid [ i ][ j ] = NEW ; bool hasNew ; do { hasNew = false ; for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == LAND ) { int upX = x ; int upY = y - 1 ; if ( upY >= 0 && grid [ upY ][ upX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int downX = x ; int downY = y + 1 ; if ( downY < NUMBER_OF_ROWS && grid [ downY ][ downX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int leftX = x - 1 ; int leftY = y ; if ( leftX >= 0 && grid [ leftY ][ leftX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int rightX = x + 1 ; int rightY = y ; if ( rightX < NUMBER_OF_COLS && grid [ rightY ][ rightX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } } } } } while ( hasNew ); } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u9012\u5f52\uff0c\u4e00\u8f6e\u4e00\u8f6e\u5730\u4e0a\u4e0b\u5de6\u53f3\u627e\uff0c\u627e\u8fc7\u7684\u505a\u597d\u6807\u8bb0\uff0c\u4e00\u5757\u5730\u7ed3\u675f\u540e\uff0c\u66f4\u65b0\u6807\u8bb0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 const char LAND = '1' ; const char NEW = 'X' ; const char USED = 'O' ; void floorFill ( char ** grid , int NUMBER_OF_ROWS , int NUMBER_OF_COLS , int i , int j ) { if ( i < 0 || j < 0 || i >= NUMBER_OF_ROWS || j >= NUMBER_OF_COLS || grid [ i ][ j ] != LAND ) return ; grid [ i ][ j ] = NEW ; floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i + 1 , j ); floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i - 1 , j ); floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i , j + 1 ); floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i , j - 1 ); } int numIslands ( char ** grid , int gridSize , int * gridColSize ) { if ( gridSize == 0 ) return 0 ; int NUMBER_OF_ROWS = gridSize ; int NUMBER_OF_COLS = gridColSize [ 0 ]; int numberOfIslands = 0 ; for ( int i = 0 ; i < NUMBER_OF_ROWS ; i ++ ) { for ( int j = 0 ; j < NUMBER_OF_COLS ; j ++ ) { if ( grid [ i ][ j ] == LAND ) { floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i , j ); for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == NEW ) { grid [ y ][ x ] = USED ; } } } numberOfIslands ++ ; } } } return numberOfIslands ; }","title":"17 Number of Islands"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#17-number-of-islands","text":"","title":"17. Number of Islands"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#problem","text":"Given a 2d grid map of 1 s (land) and 0 s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.","title":"Problem"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#example","text":"Example 1: Input: grid = [ [\"1\",\"1\",\"1\",\"1\",\"0\"], [\"1\",\"1\",\"0\",\"1\",\"0\"], [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\"] ] Output: 1 Example 2: Input: grid = [ [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"1\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"1\",\"1\"] ] Output: 3","title":"Example"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#default-code","text":"1 2 3 int numIslands ( char ** grid , int gridSize , int * gridColSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#_1","text":"\u601d\u8def\uff1a\u904d\u5386\u4e8c\u7ef4\u5b57\u7b26\u6570\u7ec4\uff0c\u82e5\u627e\u5230 1 \uff0c\u5219\u5148\u6807\u8bb0\uff0c\u518d\u5bfb\u627e\u5176\u201c\u4e0a\u4e0b\u5de6\u53f3\u201d\uff08\u82e5\u6709\uff09\uff0c\u76f4\u5230\u627e\u5b8c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 int numIslands ( char ** grid , int gridSize , int * gridColSize ) { if ( gridSize == 0 ) return 0 ; const char WATER = '0' ; const char LAND = '1' ; const char NEW = 'X' ; const char USED = 'O' ; int NUMBER_OF_ROWS = gridSize ; int NUMBER_OF_COLS = gridColSize [ 0 ]; int numberOfIslands = 0 ; for ( int i = 0 ; i < NUMBER_OF_ROWS ; i ++ ) { for ( int j = 0 ; j < NUMBER_OF_COLS ; j ++ ) { if ( grid [ i ][ j ] == LAND ) { grid [ i ][ j ] = NEW ; bool hasNew ; do { hasNew = false ; for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == LAND ) { int upX = x ; int upY = y - 1 ; if ( upY >= 0 && grid [ upY ][ upX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int downX = x ; int downY = y + 1 ; if ( downY < NUMBER_OF_ROWS && grid [ downY ][ downX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int leftX = x - 1 ; int leftY = y ; if ( leftX >= 0 && grid [ leftY ][ leftX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int rightX = x + 1 ; int rightY = y ; if ( rightX < NUMBER_OF_COLS && grid [ rightY ][ rightX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } } } } } while ( hasNew ); for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == NEW ) { grid [ y ][ x ] = USED ; } } } numberOfIslands ++ ; } } } return numberOfIslands ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#_2","text":"\u91cd\u6784 \u65b9\u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 const char WATER = '0' ; const char LAND = '1' ; const char NEW = 'X' ; const char USED = 'O' ; void floorFill ( char ** grid , int NUMBER_OF_ROWS , int NUMBER_OF_COLS , int i , int j ) { grid [ i ][ j ] = NEW ; bool hasNew ; do { hasNew = false ; for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == LAND ) { int upX = x ; int upY = y - 1 ; if ( upY >= 0 && grid [ upY ][ upX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int downX = x ; int downY = y + 1 ; if ( downY < NUMBER_OF_ROWS && grid [ downY ][ downX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int leftX = x - 1 ; int leftY = y ; if ( leftX >= 0 && grid [ leftY ][ leftX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } int rightX = x + 1 ; int rightY = y ; if ( rightX < NUMBER_OF_COLS && grid [ rightY ][ rightX ] == NEW ) { grid [ y ][ x ] = NEW ; hasNew = true ; } } } } } while ( hasNew ); }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/17_Number_of_Islands/#_3","text":"\u601d\u8def\uff1a\u9012\u5f52\uff0c\u4e00\u8f6e\u4e00\u8f6e\u5730\u4e0a\u4e0b\u5de6\u53f3\u627e\uff0c\u627e\u8fc7\u7684\u505a\u597d\u6807\u8bb0\uff0c\u4e00\u5757\u5730\u7ed3\u675f\u540e\uff0c\u66f4\u65b0\u6807\u8bb0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 const char LAND = '1' ; const char NEW = 'X' ; const char USED = 'O' ; void floorFill ( char ** grid , int NUMBER_OF_ROWS , int NUMBER_OF_COLS , int i , int j ) { if ( i < 0 || j < 0 || i >= NUMBER_OF_ROWS || j >= NUMBER_OF_COLS || grid [ i ][ j ] != LAND ) return ; grid [ i ][ j ] = NEW ; floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i + 1 , j ); floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i - 1 , j ); floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i , j + 1 ); floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i , j - 1 ); } int numIslands ( char ** grid , int gridSize , int * gridColSize ) { if ( gridSize == 0 ) return 0 ; int NUMBER_OF_ROWS = gridSize ; int NUMBER_OF_COLS = gridColSize [ 0 ]; int numberOfIslands = 0 ; for ( int i = 0 ; i < NUMBER_OF_ROWS ; i ++ ) { for ( int j = 0 ; j < NUMBER_OF_COLS ; j ++ ) { if ( grid [ i ][ j ] == LAND ) { floorFill ( grid , NUMBER_OF_ROWS , NUMBER_OF_COLS , i , j ); for ( int y = 0 ; y < NUMBER_OF_ROWS ; y ++ ) { for ( int x = 0 ; x < NUMBER_OF_COLS ; x ++ ) { if ( grid [ y ][ x ] == NEW ) { grid [ y ][ x ] = USED ; } } } numberOfIslands ++ ; } } } return numberOfIslands ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/","text":"18. Minimum Path Sum Link Problem Link Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. Note Link You can only move eighter down or right at any point in time. Example Link Input: [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 7 Explanation: Because the path 1+3+1+1+1 minimizes the sum. Default Code Link 1 2 3 int minPathSum ( int ** grid , int gridSize , int * gridColSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u9012\u5f52 \u4ece\u53f3\u4e0b\u89d2\u5f80\u5de6\u4e0a\u89d2\u904d\u5386 \u5199\u597d\u51fa\u53e3\u540e\uff0c\u5224\u65ad\u4ece\u4e0a\u65b9\u4e0b\u6765\u8fd8\u662f\u4ece\u5de6\u8fb9\u8fc7\u6765 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // (0, 0) => ... => (row, col) int minPartialPathSum ( int ** grid , int row , int col ) { if ( row == 0 && col == 0 ) return grid [ 0 ][ 0 ]; int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = minPartialPathSum ( grid , row - 1 , col ) + grid [ row ][ col ]; if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = minPartialPathSum ( grid , row , col - 1 ) + grid [ row ][ col ]; if ( leftMin < min ) { min = leftMin ; } } return min ; } int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col return minPartialPathSum ( grid , M - 1 , N - 1 ); } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u9012\u5f52 \u52a8\u6001\u5206\u914d\u7a7a\u95f4\uff0c cache[row][col] \u8868\u793a\u4ece\u5de6\u4e0a\u89d2\u5230 grid[row][col] \u7684\u6700\u5c0f\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 int minPartialPathSum ( int ** grid , int row , int col , int ** cache ) { if ( row == 0 && col == 0 ) return grid [ 0 ][ 0 ]; if ( cache [ row ][ col ] != 0 ) return cache [ row ][ col ]; int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = minPartialPathSum ( grid , row - 1 , col , cache ); if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = minPartialPathSum ( grid , row , col - 1 , cache ); if ( leftMin < min ) { min = leftMin ; } } cache [ row ][ col ] = min + grid [ row ][ col ]; return cache [ row ][ col ]; } int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col int ** cache = malloc ( M * sizeof ( int * )); for ( int i = 0 ; i < M ; i ++ ) { cache [ i ] = calloc ( N , sizeof ( int )); } int result = minPartialPathSum ( grid , M - 1 , N - 1 , cache ); for ( int i = 0 ; i < M ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; } \u8865\u5145 AddressSanitizer \u662f\u4e00\u4e2a\u5feb\u901f\u7684\u5185\u5b58\u9519\u8bef\u68c0\u6d4b\u5de5\u5177 \u5b83\u7531\u4e00\u4e2a\u7f16\u8bd1\u65f6\u63d2\u6869\u6a21\u5757\u548c\u4e00\u4e2a\u8fd0\u884c\u5e93\u7ec4\u6210 \u8be5\u5de5\u5177\u53ef\u4ee5\u68c0\u6d4b\u4ee5\u4e0b\u7c7b\u578b\u7684\u9519\u8bef \u5806\u3001\u6808\u548c\u5168\u5c40\u53d8\u91cf\u7684\u8d8a\u754c UAF Use-After-Return\uff08runtime flag ASAN_OPTIONS=detect_stack_use_after_return=1\uff09 Use-After-Scope\uff08clang flag -fsanitize-address-use-after-scope\uff09 Doube-Free Memory Leaks AddressSanitizer\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u6027\u80fd\u5927\u4e8e\u4e24\u500d\uff08\u76f8\u6bd4\u4e4b\u524d\u5185\u5b58\u68c0\u67e5\u5de5\u5177\u5df2\u7ecf\u6709\u4e86\u5f88\u5927\u63d0\u5347\uff09 \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a DP \u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col int ** cache = malloc ( M * sizeof ( int * )); for ( int i = 0 ; i < M ; i ++ ) { cache [ i ] = calloc ( N , sizeof ( int )); } for ( int row = 0 ; row < M ; row ++ ) { for ( int col = 0 ; col < N ; col ++ ) { if ( row == 0 && col == 0 ) { cache [ row ][ col ] = grid [ 0 ][ 0 ]; continue ; } int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = cache [ row - 1 ][ col ]; if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = cache [ row ][ col - 1 ]; if ( leftMin < min ) { min = leftMin ; } } cache [ row ][ col ] = min + grid [ row ][ col ]; } } int result = cache [ M - 1 ][ N - 1 ]; for ( int i = 0 ; i < M ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u5bf9 \u65b9\u6cd5\u4e09 \u7684 DP \u964d\u7ef4 \u7528\u4e24\u884c\u8f6e\u6362\uff0c\u7528\u5947\u5076\u7d22\u5f15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col int ** cache = malloc ( 2 * sizeof ( int * )); // here changed for ( int i = 0 ; i < 2 ; i ++ ) { cache [ i ] = calloc ( N , sizeof ( int )); } for ( int row = 0 ; row < M ; row ++ ) { for ( int col = 0 ; col < N ; col ++ ) { if ( row == 0 && col == 0 ) { cache [ row ][ col ] = grid [ 0 ][ 0 ]; continue ; } int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = cache [( row - 1 ) % 2 ][ col ]; // \u6240\u6709\u7684\u884c\u90fd\u5bf9 2 \u53d6\u4f59\uff0c\u8fd9\u6837\u53ef\u4ee5\u4ea4\u66ff if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = cache [ row % 2 ][ col - 1 ]; if ( leftMin < min ) { min = leftMin ; } } cache [ row % 2 ][ col ] = min + grid [ row ][ col ]; } } int result = cache [( M - 1 ) % 2 ][ N - 1 ]; for ( int i = 0 ; i < 2 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; }","title":"18 Minimum Path Sum"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#18-minimum-path-sum","text":"","title":"18. Minimum Path Sum"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#problem","text":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.","title":"Problem"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#note","text":"You can only move eighter down or right at any point in time.","title":"Note"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#example","text":"Input: [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 7 Explanation: Because the path 1+3+1+1+1 minimizes the sum.","title":"Example"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#default-code","text":"1 2 3 int minPathSum ( int ** grid , int gridSize , int * gridColSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#_1","text":"\u601d\u8def\uff1a\u9012\u5f52 \u4ece\u53f3\u4e0b\u89d2\u5f80\u5de6\u4e0a\u89d2\u904d\u5386 \u5199\u597d\u51fa\u53e3\u540e\uff0c\u5224\u65ad\u4ece\u4e0a\u65b9\u4e0b\u6765\u8fd8\u662f\u4ece\u5de6\u8fb9\u8fc7\u6765 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // (0, 0) => ... => (row, col) int minPartialPathSum ( int ** grid , int row , int col ) { if ( row == 0 && col == 0 ) return grid [ 0 ][ 0 ]; int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = minPartialPathSum ( grid , row - 1 , col ) + grid [ row ][ col ]; if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = minPartialPathSum ( grid , row , col - 1 ) + grid [ row ][ col ]; if ( leftMin < min ) { min = leftMin ; } } return min ; } int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col return minPartialPathSum ( grid , M - 1 , N - 1 ); } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#_2","text":"\u601d\u8def\uff1a\u9012\u5f52 \u52a8\u6001\u5206\u914d\u7a7a\u95f4\uff0c cache[row][col] \u8868\u793a\u4ece\u5de6\u4e0a\u89d2\u5230 grid[row][col] \u7684\u6700\u5c0f\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 int minPartialPathSum ( int ** grid , int row , int col , int ** cache ) { if ( row == 0 && col == 0 ) return grid [ 0 ][ 0 ]; if ( cache [ row ][ col ] != 0 ) return cache [ row ][ col ]; int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = minPartialPathSum ( grid , row - 1 , col , cache ); if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = minPartialPathSum ( grid , row , col - 1 , cache ); if ( leftMin < min ) { min = leftMin ; } } cache [ row ][ col ] = min + grid [ row ][ col ]; return cache [ row ][ col ]; } int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col int ** cache = malloc ( M * sizeof ( int * )); for ( int i = 0 ; i < M ; i ++ ) { cache [ i ] = calloc ( N , sizeof ( int )); } int result = minPartialPathSum ( grid , M - 1 , N - 1 , cache ); for ( int i = 0 ; i < M ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; } \u8865\u5145 AddressSanitizer \u662f\u4e00\u4e2a\u5feb\u901f\u7684\u5185\u5b58\u9519\u8bef\u68c0\u6d4b\u5de5\u5177 \u5b83\u7531\u4e00\u4e2a\u7f16\u8bd1\u65f6\u63d2\u6869\u6a21\u5757\u548c\u4e00\u4e2a\u8fd0\u884c\u5e93\u7ec4\u6210 \u8be5\u5de5\u5177\u53ef\u4ee5\u68c0\u6d4b\u4ee5\u4e0b\u7c7b\u578b\u7684\u9519\u8bef \u5806\u3001\u6808\u548c\u5168\u5c40\u53d8\u91cf\u7684\u8d8a\u754c UAF Use-After-Return\uff08runtime flag ASAN_OPTIONS=detect_stack_use_after_return=1\uff09 Use-After-Scope\uff08clang flag -fsanitize-address-use-after-scope\uff09 Doube-Free Memory Leaks AddressSanitizer\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u6027\u80fd\u5927\u4e8e\u4e24\u500d\uff08\u76f8\u6bd4\u4e4b\u524d\u5185\u5b58\u68c0\u67e5\u5de5\u5177\u5df2\u7ecf\u6709\u4e86\u5f88\u5927\u63d0\u5347\uff09","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#_3","text":"\u601d\u8def\uff1a DP \u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col int ** cache = malloc ( M * sizeof ( int * )); for ( int i = 0 ; i < M ; i ++ ) { cache [ i ] = calloc ( N , sizeof ( int )); } for ( int row = 0 ; row < M ; row ++ ) { for ( int col = 0 ; col < N ; col ++ ) { if ( row == 0 && col == 0 ) { cache [ row ][ col ] = grid [ 0 ][ 0 ]; continue ; } int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = cache [ row - 1 ][ col ]; if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = cache [ row ][ col - 1 ]; if ( leftMin < min ) { min = leftMin ; } } cache [ row ][ col ] = min + grid [ row ][ col ]; } } int result = cache [ M - 1 ][ N - 1 ]; for ( int i = 0 ; i < M ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/18_Minimum_Path_Sum/#_4","text":"\u601d\u8def\uff1a\u5bf9 \u65b9\u6cd5\u4e09 \u7684 DP \u964d\u7ef4 \u7528\u4e24\u884c\u8f6e\u6362\uff0c\u7528\u5947\u5076\u7d22\u5f15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int minPathSum ( int ** grid , int gridSize , int * gridColSize ) { int M = gridSize ; // row int N = gridColSize [ 0 ]; // col int ** cache = malloc ( 2 * sizeof ( int * )); // here changed for ( int i = 0 ; i < 2 ; i ++ ) { cache [ i ] = calloc ( N , sizeof ( int )); } for ( int row = 0 ; row < M ; row ++ ) { for ( int col = 0 ; col < N ; col ++ ) { if ( row == 0 && col == 0 ) { cache [ row ][ col ] = grid [ 0 ][ 0 ]; continue ; } int min = INT_MAX ; if ( row - 1 >= 0 ) { int upMin = cache [( row - 1 ) % 2 ][ col ]; // \u6240\u6709\u7684\u884c\u90fd\u5bf9 2 \u53d6\u4f59\uff0c\u8fd9\u6837\u53ef\u4ee5\u4ea4\u66ff if ( upMin < min ) { min = upMin ; } } if ( col - 1 >= 0 ) { int leftMin = cache [ row % 2 ][ col - 1 ]; if ( leftMin < min ) { min = leftMin ; } } cache [ row % 2 ][ col ] = min + grid [ row ][ col ]; } } int result = cache [( M - 1 ) % 2 ][ N - 1 ]; for ( int i = 0 ; i < 2 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/","text":"19. Search in Rotated Sorted Array Link Problem Link Suppose an array sorted in ascending order is rotated at pivot unknown to you beforehand. (i.e., [0, 1, 2, 3, 4, 5, 6, 7] might become [4, 5, 6, 7, 0, 1, 2]). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array. Your algorithm's runtime complexity must be in the order of O(log n). Example Link Example 1: Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0 Output: 4 Example 2: Input: nums = [4, 6, 7, 0, 1, 2], target = 3 Output: -1 Default Code Link 1 2 3 4 5 6 7 8 int search ( int * nums , int numsSize , int target ) { for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == target ) { return i ; } } return - 1 ; } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u9012\u5f52 + \u4e8c\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 int rangeSearch ( int * nums , int start , int end , int target ) { // range: [start, end), target if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( nums [ mid ] == target ) return mid ; if ( target < nums [ mid ]) { if ( nums [ 0 ] > nums [ mid ]) { // nums: [6, 7, 8, *0, (1), 2, 3, 4, 5] return rangeSearch ( nums , start , mid , target ); // FindLeft(); } else { if ( nums [ 0 ] > target ) { // nums: [3, 4, 5, 6, (7), 8, *0, 1, 2] return rangeSearch ( nums , mid + 1 , end , target ); // FindRight(); } else { // nums: [3, *4, 5, 6, (7), 8, 0, 1, 2] return rangeSearch ( nums , start , mid , target ); // FindLeft(); } } } if ( nums [ mid ] < target ) { if ( nums [ 0 ] < nums [ mid ]) { // nums: [3, 4, 5, 6, (7), *8, 0, 1, 2] return rangeSearch ( nums , mid + 1 , end , target ); // FindRight(); } else { if ( nums [ 0 ] > target ) { // nums: [6, 7, 8, 0, (1), 2, 3, *4, 5] return rangeSearch ( nums , mid + 1 , end , target ); // FindRight(); } else { // nums: [6, 7, *8, 0, (1), 2, 3, 4, 5] return rangeSearch ( nums , start , mid , target ); // FindLeft(); } } } return - 1 ; } int search ( int * nums , int numsSize , int target ) { return rangeSearch ( nums , 0 , numsSize , target ); } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u4e8c\u5206 \u5c06 \u65b9\u6cd5\u4e00 \u7684\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 int search ( int * nums , int numsSize , int target ) { int start = 0 , end = numsSize ; while ( true ) { if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( nums [ mid ] == target ) return mid ; if ( target < nums [ mid ]) { if ( nums [ 0 ] > nums [ mid ]) { end = mid ; } else { if ( nums [ 0 ] > target ) { start = mid + 1 ; } else { end = mid ; } } } if ( nums [ mid ] < target ) { if ( nums [ 0 ] < nums [ mid ]) { start = mid + 1 ; } else { if ( nums [ 0 ] > target ) { start = mid + 1 ; } else { end = mid ; } } } } return - 1 ; } \u8865\u5145 Link \u6211\u7684\u60f3\u6cd5 \u5148\u7528\u65cb\u8f6c\u524d\u7684\u6570\u7ec4\u4f5c\u53c2\u8003 {m1, m2, m3, ..., mn} \u4e0d\u59a8\u8bbe mid = m6 , target = m4 nums m1, m2, m3, m4, m5, m6, m7, m8, m9..., mn mid ^ target ^ \u82e5 nums[0] \u6307\u5411 m3\uff0c\u5219 nums = m3, *m4, m5, (m6), m7, m8, m9..., mn, m1, m2 target \u5728 left \u82e5 nums[0] \u6307\u5411 m5 nums = m5, (m6), m7, m8, m9..., mn, m1, m2, m3, *m4 target \u5728 right target \u5728 mid \u53f3\u4fa7\u65f6\u601d\u8def\u7c7b\u4f3c\uff0c\u53ea\u662f\u201c\u65cb\u8f6c\u201d\u65f6\u662f\u628a\u540e\u9762\u7684\u6570\u526a\u5230\u524d\u9762","title":"19 Search in Rotated Sorted Array"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#19-search-in-rotated-sorted-array","text":"","title":"19. Search in Rotated Sorted Array"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#problem","text":"Suppose an array sorted in ascending order is rotated at pivot unknown to you beforehand. (i.e., [0, 1, 2, 3, 4, 5, 6, 7] might become [4, 5, 6, 7, 0, 1, 2]). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array. Your algorithm's runtime complexity must be in the order of O(log n).","title":"Problem"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#example","text":"Example 1: Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0 Output: 4 Example 2: Input: nums = [4, 6, 7, 0, 1, 2], target = 3 Output: -1","title":"Example"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#default-code","text":"1 2 3 4 5 6 7 8 int search ( int * nums , int numsSize , int target ) { for ( int i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] == target ) { return i ; } } return - 1 ; }","title":"Default Code"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#_1","text":"\u601d\u8def\uff1a\u9012\u5f52 + \u4e8c\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 int rangeSearch ( int * nums , int start , int end , int target ) { // range: [start, end), target if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( nums [ mid ] == target ) return mid ; if ( target < nums [ mid ]) { if ( nums [ 0 ] > nums [ mid ]) { // nums: [6, 7, 8, *0, (1), 2, 3, 4, 5] return rangeSearch ( nums , start , mid , target ); // FindLeft(); } else { if ( nums [ 0 ] > target ) { // nums: [3, 4, 5, 6, (7), 8, *0, 1, 2] return rangeSearch ( nums , mid + 1 , end , target ); // FindRight(); } else { // nums: [3, *4, 5, 6, (7), 8, 0, 1, 2] return rangeSearch ( nums , start , mid , target ); // FindLeft(); } } } if ( nums [ mid ] < target ) { if ( nums [ 0 ] < nums [ mid ]) { // nums: [3, 4, 5, 6, (7), *8, 0, 1, 2] return rangeSearch ( nums , mid + 1 , end , target ); // FindRight(); } else { if ( nums [ 0 ] > target ) { // nums: [6, 7, 8, 0, (1), 2, 3, *4, 5] return rangeSearch ( nums , mid + 1 , end , target ); // FindRight(); } else { // nums: [6, 7, *8, 0, (1), 2, 3, 4, 5] return rangeSearch ( nums , start , mid , target ); // FindLeft(); } } } return - 1 ; } int search ( int * nums , int numsSize , int target ) { return rangeSearch ( nums , 0 , numsSize , target ); }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#_2","text":"\u601d\u8def\uff1a\u4e8c\u5206 \u5c06 \u65b9\u6cd5\u4e00 \u7684\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 int search ( int * nums , int numsSize , int target ) { int start = 0 , end = numsSize ; while ( true ) { if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( nums [ mid ] == target ) return mid ; if ( target < nums [ mid ]) { if ( nums [ 0 ] > nums [ mid ]) { end = mid ; } else { if ( nums [ 0 ] > target ) { start = mid + 1 ; } else { end = mid ; } } } if ( nums [ mid ] < target ) { if ( nums [ 0 ] < nums [ mid ]) { start = mid + 1 ; } else { if ( nums [ 0 ] > target ) { start = mid + 1 ; } else { end = mid ; } } } } return - 1 ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/19_Search_in_Rotated_Sorted_Array/#_3","text":"\u6211\u7684\u60f3\u6cd5 \u5148\u7528\u65cb\u8f6c\u524d\u7684\u6570\u7ec4\u4f5c\u53c2\u8003 {m1, m2, m3, ..., mn} \u4e0d\u59a8\u8bbe mid = m6 , target = m4 nums m1, m2, m3, m4, m5, m6, m7, m8, m9..., mn mid ^ target ^ \u82e5 nums[0] \u6307\u5411 m3\uff0c\u5219 nums = m3, *m4, m5, (m6), m7, m8, m9..., mn, m1, m2 target \u5728 left \u82e5 nums[0] \u6307\u5411 m5 nums = m5, (m6), m7, m8, m9..., mn, m1, m2, m3, *m4 target \u5728 right target \u5728 mid \u53f3\u4fa7\u65f6\u601d\u8def\u7c7b\u4f3c\uff0c\u53ea\u662f\u201c\u65cb\u8f6c\u201d\u65f6\u662f\u628a\u540e\u9762\u7684\u6570\u526a\u5230\u524d\u9762","title":"\u8865\u5145"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/","text":"20. Construct Binary Search Tree from Preorder Traversal Link Problem Link Return the root node of a binary search tree thar matches the given preorder traversal. (Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val , and any descendant of node.right has a value > node.val . Also recall that a preorder traversal displays the value of the node first, then traverses node.left , then traverses node.right .) It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements. Example Link Input: [8, 5, 1, 7, 10, 12] Output: [8, 5, 10, 1, 7, null, 12] 8 / \\ 5 10 / \\ \\ 1 7 12 Note Link 1 <= preorder.length <= 100 1 <= preorder[i] <= 10^8 The values of preorder aree disinct. Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u9012\u5f52 \u5206\u7247\u3001\u8fde\u7ed3\u3001\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct TreeNode * bstFromPreorderRanged ( int * preorder , int start , int end ) { if ( start == end ) return NULL ; struct TreeNode * root = malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ start ]; int i = start + 1 ; while ( i < end && preorder [ i ] < root -> val ) { i ++ ; } root -> left = bstFromPreorderRanged ( preorder , start + 1 , i ); root -> right = bstFromPreorderRanged ( preorder , i , end ); return root ; } struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ) { // [0, preorderSize) return bstFromPreorderRanged ( preorder , 0 , preorderSize ); } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u9012\u5f52 \u5728 \u65b9\u6cd5\u4e00 \u7684\u57fa\u7840\u4e0a\uff0c\u501f\u52a9\u5168\u5c40\u53d8\u91cf\u5b9a\u4f4d\u5207\u7247\u4f4d\u7f6e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int pos ; struct TreeNode * bstFromPreorderRanged ( int * preorder , int start , int end , int max ) { if ( start == end ) return NULL ; if ( max < preorder [ start ]) return NULL ; struct TreeNode * root = malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ start ]; pos ++ ; root -> left = bstFromPreorderRanged ( preorder , start + 1 , end , root -> val ); root -> right = bstFromPreorderRanged ( preorder , pos , end , max ); return root ; } struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ) { pos = 0 ; return bstFromPreorderRanged ( preorder , 0 , preorderSize , INT_MAX ); } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af \u65b0\u5f00\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u65b0\u5efa\u4e00\u4e2a\u7528\u4e8e\u6807\u8bb0\u7d22\u5f15\u7684\u53d8\u91cf\uff08\u7c7b\u4f3c\u201c\u6808\u201d\u7684 pop \u4e2d\u7684\u53c2\u6570\uff09 \u82e5\u539f\u6570\u7ec4\u7684\u503c\u5c0f\u4e8e\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u672b\u4f4d\u7ed3\u70b9\u7684\u503c\uff0c\u505a\u597d\u8fde\u7ed3\uff0c\u7136\u540e append \u7ed3\u70b9 \u82e5\u539f\u6570\u7ec4\u7684\u503c\u5927\u4e8e\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u672b\u4f4d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u524d\u5bfb\u627e\u7ed3\u70b9 \u82e5\u627e\u5230\u503c\u5c0f\u7684\u7ed3\u70b9\uff0c\u505a\u597d\u8fde\u7ed3\uff0c\u7136\u540e\u66ff\u6362 \u82e5\u6ca1\u627e\u5230\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u6570\u7ec4\u7684\u9996\u4e2a\u7ed3\u70b9\uff0c\u8fde\u7ed3\u3001\u66ff\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ) { struct TreeNode * root = malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ 0 ]; root -> left = root -> right = NULL ; struct TreeNode * path [ 100 ]; int topIndex = 0 ; path [ topIndex ] = root ; for ( int i = 1 ; i < preorderSize ; i ++ ) { struct TreeNode * node = malloc ( sizeof ( struct TreeNode )); node -> val = preorder [ i ]; node -> left = node -> right = NULL ; if ( preorder [ i ] < path [ topIndex ] -> val ) { path [ topIndex ] -> left = node ; topIndex ++ ; path [ topIndex ] = node ; } else { while ( topIndex - 1 >= 0 && path [ topIndex - 1 ] -> val < preorder [ i ]) { topIndex -- ; } if ( topIndex - 1 >= 0 ) { path [ topIndex ] -> right = node ; path [ topIndex ] = node ; } else { path [ 0 ] -> right = node ; path [ 0 ] = node ; } } } return root ; }","title":"20 Construct Binary Search Tree from Preorder Traversal"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#20-construct-binary-search-tree-from-preorder-traversal","text":"","title":"20. Construct Binary Search Tree from Preorder Traversal"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#problem","text":"Return the root node of a binary search tree thar matches the given preorder traversal. (Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val , and any descendant of node.right has a value > node.val . Also recall that a preorder traversal displays the value of the node first, then traverses node.left , then traverses node.right .) It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.","title":"Problem"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#example","text":"Input: [8, 5, 1, 7, 10, 12] Output: [8, 5, 10, 1, 7, null, 12] 8 / \\ 5 10 / \\ \\ 1 7 12","title":"Example"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#note","text":"1 <= preorder.length <= 100 1 <= preorder[i] <= 10^8 The values of preorder aree disinct.","title":"Note"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#_1","text":"\u601d\u8def\uff1a\u9012\u5f52 \u5206\u7247\u3001\u8fde\u7ed3\u3001\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct TreeNode * bstFromPreorderRanged ( int * preorder , int start , int end ) { if ( start == end ) return NULL ; struct TreeNode * root = malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ start ]; int i = start + 1 ; while ( i < end && preorder [ i ] < root -> val ) { i ++ ; } root -> left = bstFromPreorderRanged ( preorder , start + 1 , i ); root -> right = bstFromPreorderRanged ( preorder , i , end ); return root ; } struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ) { // [0, preorderSize) return bstFromPreorderRanged ( preorder , 0 , preorderSize ); }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#_2","text":"\u601d\u8def\uff1a\u9012\u5f52 \u5728 \u65b9\u6cd5\u4e00 \u7684\u57fa\u7840\u4e0a\uff0c\u501f\u52a9\u5168\u5c40\u53d8\u91cf\u5b9a\u4f4d\u5207\u7247\u4f4d\u7f6e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int pos ; struct TreeNode * bstFromPreorderRanged ( int * preorder , int start , int end , int max ) { if ( start == end ) return NULL ; if ( max < preorder [ start ]) return NULL ; struct TreeNode * root = malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ start ]; pos ++ ; root -> left = bstFromPreorderRanged ( preorder , start + 1 , end , root -> val ); root -> right = bstFromPreorderRanged ( preorder , pos , end , max ); return root ; } struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ) { pos = 0 ; return bstFromPreorderRanged ( preorder , 0 , preorderSize , INT_MAX ); }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/20_Construct_Binary_Search_Tree_from_Preorder_Traversal/#_3","text":"\u601d\u8def\uff1a\u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af \u65b0\u5f00\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u65b0\u5efa\u4e00\u4e2a\u7528\u4e8e\u6807\u8bb0\u7d22\u5f15\u7684\u53d8\u91cf\uff08\u7c7b\u4f3c\u201c\u6808\u201d\u7684 pop \u4e2d\u7684\u53c2\u6570\uff09 \u82e5\u539f\u6570\u7ec4\u7684\u503c\u5c0f\u4e8e\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u672b\u4f4d\u7ed3\u70b9\u7684\u503c\uff0c\u505a\u597d\u8fde\u7ed3\uff0c\u7136\u540e append \u7ed3\u70b9 \u82e5\u539f\u6570\u7ec4\u7684\u503c\u5927\u4e8e\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u672b\u4f4d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u524d\u5bfb\u627e\u7ed3\u70b9 \u82e5\u627e\u5230\u503c\u5c0f\u7684\u7ed3\u70b9\uff0c\u505a\u597d\u8fde\u7ed3\uff0c\u7136\u540e\u66ff\u6362 \u82e5\u6ca1\u627e\u5230\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u6570\u7ec4\u7684\u9996\u4e2a\u7ed3\u70b9\uff0c\u8fde\u7ed3\u3001\u66ff\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ) { struct TreeNode * root = malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ 0 ]; root -> left = root -> right = NULL ; struct TreeNode * path [ 100 ]; int topIndex = 0 ; path [ topIndex ] = root ; for ( int i = 1 ; i < preorderSize ; i ++ ) { struct TreeNode * node = malloc ( sizeof ( struct TreeNode )); node -> val = preorder [ i ]; node -> left = node -> right = NULL ; if ( preorder [ i ] < path [ topIndex ] -> val ) { path [ topIndex ] -> left = node ; topIndex ++ ; path [ topIndex ] = node ; } else { while ( topIndex - 1 >= 0 && path [ topIndex - 1 ] -> val < preorder [ i ]) { topIndex -- ; } if ( topIndex - 1 >= 0 ) { path [ topIndex ] -> right = node ; path [ topIndex ] = node ; } else { path [ 0 ] -> right = node ; path [ 0 ] = node ; } } } return root ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/","text":"21. Leftmost Column with at Least a One Link Problem Link (This problem is an interactive problem.) A binary matrix means that all elements are 0 or 1 . For each individual row of the matrix, this row is sorted in non-decreasing order. Given a row-sorted binary matrix binaryMatrix, return leftmost column index(0-indexed) with at least a 1 in it. If such index doesn't exist, return -1 . You can't access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface: BinaryMatrix.get(x, y) returns the element of the matrix at index (x, y) (0-indexed). BinaryMatrix.dimensions() returns a list of 2 elements [n, m] ,which means the matrix is n * m . Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification. For custom testing purposes you're given the binary matrix mat as input in the following four examples. You will not have access the binary matrix directly. Example Link Example 1 Link ------- | 0 | 0 | ------- | 1 | 1 | ------- Input: mat = [[0, 0], [1, 1]] Output: 0 Example 2 Link ------- | 0 | 0 | ------- | 0 | 1 | ------- Input: mat = [[0, 0], [0, 1]] Output: 1 Example 3 Link ------- | 0 | 0 | ------- | 0 | 0 | ------- Input: mat = [[0, 0], [0, 0]] Output: -1 Example 4 Link --------------- | 0 | 0 | 0 | 1 | --------------- | 0 | 0 | 1 | 1 | --------------- | 0 | 1 | 1 | 1 | --------------- Input: mat = [[0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 1, 1]] Output: 1 Constrains Link 1 <= mat.length, mat[i].length <= 100 mat[i][j] is eigher 0 or 1 . mat[i] is sorted in a non-decreasing way. Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 /** * This is the BinaryMatrix's API interface. * You should not implement it, or speculate about its implementation * struct BinaryMatrix { * int (*get)(struct BinaryMatrix*, int, int); * int* (*dimensions)(struct BinaryMatrix*); * }; */ int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { } About Function Link matrix->dimensions(matrix)[0] : row matrix->dimensions(matrix)[1] : col Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u4ece\u5de6\u4e0a\u89d2\u81f3\u53f3\u4e0b\u89d2\u66b4\u529b\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // \u56de\u4f20\u7b2c\u4e00\u4e2a\u51fa\u73b0 1 \u7684 column\uff0c-1 \u8868\u793a\u6ca1\u627e\u5230 int findFirstOne ( struct BinaryMatrix * matrix , int row ) { int m = matrix -> dimensions ( matrix )[ 0 ]; int col = 0 ; while ( col < m && matrix -> get ( matrix , row , col ) != 1 ) { // \u9898\u76ee\u8bf4 get() \u6700\u591a\u4f7f\u7528 1000 \u6b21 col ++ ; } if ( col == m ) { col = - 1 ; } return col ; } int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int leftMostCol = - 1 ; for ( int row = 0 ; row < n ; row ++ ) { int leftCol = findFirstOne ( matrix , row ); if ( leftCol != - 1 ) { if ( leftMostCol == - 1 || leftCol < leftMostCol ) { leftMostCol = leftCol ; } } } return leftMostCol ; } get() \u4f7f\u7528\u8d85\u6807 \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u9012\u5f52 + \u4e8c\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 int binarySearch ( struct BinaryMatrix * matrix , int row , int start , int end ) { // range: [start, end) if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( matrix -> get ( matrix , row , mid ) == 1 ) { if ( mid == 0 ) { return mid ; } if ( matrix -> get ( matrix , row , mid - 1 ) == 0 ) { return mid ; } else { return binarySearch ( matrix , row , start , mid ); } } else { return binarySearch ( matrix , row , mid + 1 , end ); } } int findFirstOne ( struct BinaryMatrix * matrix , int row ) { int m = matrix -> dimensions ( matrix )[ 1 ]; return binarySearch ( matrix , row , 0 , m ); } int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int leftMostCol = - 1 ; for ( int row = 0 ; row < n ; row ++ ) { int leftCol = findFirstOne ( matrix , row ); if ( leftCol != - 1 ) { if ( leftMostCol == - 1 || leftCol < leftMostCol ) { leftMostCol = leftCol ; } } } return leftMostCol ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int findFirstOne ( struct BinaryMatrix * matrix , int row ) { int m = matrix -> dimensions ( matrix )[ 1 ]; int start = 0 , end = m ; while ( true ) { if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( matrix -> get ( matrix , row , mid ) == 1 ) { if ( mid == 0 ) { return 0 ; } if ( matrix -> get ( matrix , row , mid - 1 ) == 0 ) { // [?, ?, 0, (1), ?, ?, ?] return mid ; } else { // [?, ?, 1, (1), ?, ?, ?] end = mid ; } } else { // [?, ?, (0), ?, ?, ?] start = mid + 1 ; } } return - 1 ; } int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int leftMostCol = - 1 ; for ( int row = 0 ; row < n ; row ++ ) { int leftCol = findFirstOne ( matrix , row ); if ( leftCol != - 1 ) { if ( leftMostCol == - 1 || leftCol < leftMostCol ) { leftMostCol = leftCol ; } } } return leftMostCol ; } \u65b9\u6cd5\u56db Link \u601d\u8def \u4ece\u7b2c\u4e00\u884c\u7684\u672b\u5c3e\u5f80\u524d\u5bfb\u627e\u7b2c\u4e00\u4e2a 1 \u7684 column \uff0c\u5e76\u6807\u8bb0\u4e3a leftMostCol \u4e0b\u4e00\u884c\u4ece leftMostCol \u5f80\u524d\u5bfb\u627e \u76f4\u81f3\u627e\u5230\u5f00\u5934\u6216\u6700\u540e\u4e00\u884c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int m = matrix -> dimensions ( matrix )[ 1 ]; int leftMostCol = m ; for ( int row = 0 ; row < n ; row ++ ) { // [0, 0, 0, 0 , 1, 1, 1] // [0, 0, 0, (1), ?, ?, ?] while ( matrix -> get ( matrix , row , leftMostCol - 1 ) == 1 ) { leftMostCol -- ; if ( leftMostCol == 0 ) { return 0 ; } } } if ( leftMostCol == m ) { leftMostCol = - 1 ; } return leftMostCol ; }","title":"21 Leftmost Column with at Least a One"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#21-leftmost-column-with-at-least-a-one","text":"","title":"21. Leftmost Column with at Least a One"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#problem","text":"(This problem is an interactive problem.) A binary matrix means that all elements are 0 or 1 . For each individual row of the matrix, this row is sorted in non-decreasing order. Given a row-sorted binary matrix binaryMatrix, return leftmost column index(0-indexed) with at least a 1 in it. If such index doesn't exist, return -1 . You can't access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface: BinaryMatrix.get(x, y) returns the element of the matrix at index (x, y) (0-indexed). BinaryMatrix.dimensions() returns a list of 2 elements [n, m] ,which means the matrix is n * m . Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification. For custom testing purposes you're given the binary matrix mat as input in the following four examples. You will not have access the binary matrix directly.","title":"Problem"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#example","text":"","title":"Example"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#example-1","text":"------- | 0 | 0 | ------- | 1 | 1 | ------- Input: mat = [[0, 0], [1, 1]] Output: 0","title":"Example 1"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#example-2","text":"------- | 0 | 0 | ------- | 0 | 1 | ------- Input: mat = [[0, 0], [0, 1]] Output: 1","title":"Example 2"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#example-3","text":"------- | 0 | 0 | ------- | 0 | 0 | ------- Input: mat = [[0, 0], [0, 0]] Output: -1","title":"Example 3"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#example-4","text":"--------------- | 0 | 0 | 0 | 1 | --------------- | 0 | 0 | 1 | 1 | --------------- | 0 | 1 | 1 | 1 | --------------- Input: mat = [[0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 1, 1]] Output: 1","title":"Example 4"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#constrains","text":"1 <= mat.length, mat[i].length <= 100 mat[i][j] is eigher 0 or 1 . mat[i] is sorted in a non-decreasing way.","title":"Constrains"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 /** * This is the BinaryMatrix's API interface. * You should not implement it, or speculate about its implementation * struct BinaryMatrix { * int (*get)(struct BinaryMatrix*, int, int); * int* (*dimensions)(struct BinaryMatrix*); * }; */ int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { }","title":"Default Code"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#about-function","text":"matrix->dimensions(matrix)[0] : row matrix->dimensions(matrix)[1] : col","title":"About Function"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#_1","text":"\u601d\u8def\uff1a\u4ece\u5de6\u4e0a\u89d2\u81f3\u53f3\u4e0b\u89d2\u66b4\u529b\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // \u56de\u4f20\u7b2c\u4e00\u4e2a\u51fa\u73b0 1 \u7684 column\uff0c-1 \u8868\u793a\u6ca1\u627e\u5230 int findFirstOne ( struct BinaryMatrix * matrix , int row ) { int m = matrix -> dimensions ( matrix )[ 0 ]; int col = 0 ; while ( col < m && matrix -> get ( matrix , row , col ) != 1 ) { // \u9898\u76ee\u8bf4 get() \u6700\u591a\u4f7f\u7528 1000 \u6b21 col ++ ; } if ( col == m ) { col = - 1 ; } return col ; } int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int leftMostCol = - 1 ; for ( int row = 0 ; row < n ; row ++ ) { int leftCol = findFirstOne ( matrix , row ); if ( leftCol != - 1 ) { if ( leftMostCol == - 1 || leftCol < leftMostCol ) { leftMostCol = leftCol ; } } } return leftMostCol ; } get() \u4f7f\u7528\u8d85\u6807","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#_2","text":"\u601d\u8def\uff1a\u9012\u5f52 + \u4e8c\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 int binarySearch ( struct BinaryMatrix * matrix , int row , int start , int end ) { // range: [start, end) if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( matrix -> get ( matrix , row , mid ) == 1 ) { if ( mid == 0 ) { return mid ; } if ( matrix -> get ( matrix , row , mid - 1 ) == 0 ) { return mid ; } else { return binarySearch ( matrix , row , start , mid ); } } else { return binarySearch ( matrix , row , mid + 1 , end ); } } int findFirstOne ( struct BinaryMatrix * matrix , int row ) { int m = matrix -> dimensions ( matrix )[ 1 ]; return binarySearch ( matrix , row , 0 , m ); } int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int leftMostCol = - 1 ; for ( int row = 0 ; row < n ; row ++ ) { int leftCol = findFirstOne ( matrix , row ); if ( leftCol != - 1 ) { if ( leftMostCol == - 1 || leftCol < leftMostCol ) { leftMostCol = leftCol ; } } } return leftMostCol ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#_3","text":"\u601d\u8def\uff1a\u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int findFirstOne ( struct BinaryMatrix * matrix , int row ) { int m = matrix -> dimensions ( matrix )[ 1 ]; int start = 0 , end = m ; while ( true ) { if ( start == end ) return - 1 ; int mid = ( start + end ) / 2 ; if ( matrix -> get ( matrix , row , mid ) == 1 ) { if ( mid == 0 ) { return 0 ; } if ( matrix -> get ( matrix , row , mid - 1 ) == 0 ) { // [?, ?, 0, (1), ?, ?, ?] return mid ; } else { // [?, ?, 1, (1), ?, ?, ?] end = mid ; } } else { // [?, ?, (0), ?, ?, ?] start = mid + 1 ; } } return - 1 ; } int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int leftMostCol = - 1 ; for ( int row = 0 ; row < n ; row ++ ) { int leftCol = findFirstOne ( matrix , row ); if ( leftCol != - 1 ) { if ( leftMostCol == - 1 || leftCol < leftMostCol ) { leftMostCol = leftCol ; } } } return leftMostCol ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/21_Leftmost_Column_with_at_Least_a_One/#_4","text":"\u601d\u8def \u4ece\u7b2c\u4e00\u884c\u7684\u672b\u5c3e\u5f80\u524d\u5bfb\u627e\u7b2c\u4e00\u4e2a 1 \u7684 column \uff0c\u5e76\u6807\u8bb0\u4e3a leftMostCol \u4e0b\u4e00\u884c\u4ece leftMostCol \u5f80\u524d\u5bfb\u627e \u76f4\u81f3\u627e\u5230\u5f00\u5934\u6216\u6700\u540e\u4e00\u884c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int leftMostColumnWithOne ( struct BinaryMatrix * matrix ) { int n = matrix -> dimensions ( matrix )[ 0 ]; int m = matrix -> dimensions ( matrix )[ 1 ]; int leftMostCol = m ; for ( int row = 0 ; row < n ; row ++ ) { // [0, 0, 0, 0 , 1, 1, 1] // [0, 0, 0, (1), ?, ?, ?] while ( matrix -> get ( matrix , row , leftMostCol - 1 ) == 1 ) { leftMostCol -- ; if ( leftMostCol == 0 ) { return 0 ; } } } if ( leftMostCol == m ) { leftMostCol = - 1 ; } return leftMostCol ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/","text":"22. Subarray Sum Equals K Link Problem Link Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose wum equalst to k. Example Link Input: nums = [1, 1, 1], k = 2 Output: 2 Note Link Teh length of the array is in range [1, 20,000] The range of numbers in the array is [-1000, 1000]. and the range of the integer k is [-1e7, 1e7]. Default Code Link 1 2 3 int subarraySum ( int * nums , int numsSize , int k ) { } Hide Hint Link Hide Hint #1 Will Brute force work here Try to optimize it. Hide Hint #2 Can we optimize it by using some extra space? Hide Hint #3 What about storing sum frequencies in a hash table? Will it be useful? Hide Hint #4 sum(i, j) = sum(0, j) - sum(0, i), represents the sum of all the elements from index i to j-1. Can we use this property to optimize it. Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int subarraySum ( int * nums , int numsSize , int k ) { int count = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { for ( int j = i ; j < numsSize ; j ++ ) { int sum = 0 ; for ( int x = i ; x <= j ; x ++ ) { sum += nums [ x ]; } if ( sum == k ) { count ++ ; } } } return count ; } \u65b9\u6cd5\u4e8c Link \u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4 sum \uff0c\u957f\u5ea6\u6bd4\u539f\u6570\u7ec4\u5927\u4e00 sum[n] : \u539f\u6570\u7ec4\u524d n \u4e2a\u6570\u4e4b\u548c sum[j+1] - sum[i] \u7b2c i+1 \u4e2a\u6570\u5230\u7b2c j+1 \u4e2a\u6570\u4e4b\u548c \u5373 nums[i] \u52a0\u5230 nums[j] sum[j+1] - sum[i] == k => sum[i] = sum[j+1] - k , 0 <= i <= j \u5982\u679c\u80fd\u5728 sum[:j+1] \u4e2d\u627e\u5230 sum[i] \uff0c\u5219 k \u5b58\u5728 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int subarraySum ( int * nums , int numsSize , int k ) { // sum(x): nums[0] + nums[1] + ... + nums[x-1] int sum [ numsSize + 1 ]; sum [ 0 ] = 0 ; for ( int x = 1 ; x <= numsSize ; x ++ ) { sum [ x ] = sum [ x - 1 ] + nums [ x - 1 ]; } // 0 <= i <= j < numsSize int count = 0 ; for ( int j = 0 ; j < numsSize ; j ++ ) { int target = sum [ j + 1 ] - k ; // sum(j+1) - sum(i) == k => sum(i) = sum(j+1) - k for ( int i = 0 ; i <= j ; i ++ ) { if ( sum [ i ] == target ) { count ++ ; } } } return count ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u6709\u70b9\u50cf LeetCode \u7684\u7b2c\u4e00\u9898 \u81ea\u5df1\u6784\u5efa\u4e00\u4e2a\u201c\u5b57\u5178\u201d\uff0c\u501f\u52a9\u201c\u5b57\u5178\u201d\u63d0\u901f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 int CAPACITY = 1000000 ; struct Entry { int sum ; int count ; }; // [0, CAPACITY) int getIndex ( int sum ) { return ( sum % CAPACITY + CAPACITY ) % CAPACITY ; // -12 % 10 = -1 ...... -2 } void addOne ( struct Entry ** counter , int sum ) { int i = getIndex ( sum ); while ( counter [ i ] != NULL ) { if ( counter [ i ] -> sum == sum ) { counter [ i ] -> count ++ ; return ; } i = getIndex ( i + 1 ); } struct Entry * entry = malloc ( sizeof ( struct Entry )); entry -> sum = sum ; entry -> count = 1 ; counter [ i ] = entry ; } int query ( struct Entry ** counter , int sum ) { int i = getIndex ( sum ); while ( counter [ i ] != NULL ) { if ( counter [ i ] -> sum == sum ) { return counter [ i ] -> count ; } i = getIndex ( i + 1 ); } return 0 ; } int subarraySum ( int * nums , int numsSize , int k ) { // HashTable struct Entry ** counter = calloc ( CAPACITY , sizeof ( struct Entry * )); int sum = 0 ; int totalCount = 0 ; for ( int j = 0 ; j < numsSize ; j ++ ) { addOne ( counter , sum ); sum += nums [ j ]; int target = sum - k ; totalCount += query ( counter , target ); } free ( counter ); return totalCount ; } \u8865\u5145 Link \u5f15\u5165\u94fe\u8868\uff0c\u8fd8\u80fd\u4f18\u5316","title":"22 Subarray Sum Equals K"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#22-subarray-sum-equals-k","text":"","title":"22. Subarray Sum Equals K"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#problem","text":"Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose wum equalst to k.","title":"Problem"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#example","text":"Input: nums = [1, 1, 1], k = 2 Output: 2","title":"Example"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#note","text":"Teh length of the array is in range [1, 20,000] The range of numbers in the array is [-1000, 1000]. and the range of the integer k is [-1e7, 1e7].","title":"Note"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#default-code","text":"1 2 3 int subarraySum ( int * nums , int numsSize , int k ) { }","title":"Default Code"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#hide-hint","text":"Hide Hint #1 Will Brute force work here Try to optimize it. Hide Hint #2 Can we optimize it by using some extra space? Hide Hint #3 What about storing sum frequencies in a hash table? Will it be useful? Hide Hint #4 sum(i, j) = sum(0, j) - sum(0, i), represents the sum of all the elements from index i to j-1. Can we use this property to optimize it.","title":"Hide Hint"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#_1","text":"\u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int subarraySum ( int * nums , int numsSize , int k ) { int count = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { for ( int j = i ; j < numsSize ; j ++ ) { int sum = 0 ; for ( int x = i ; x <= j ; x ++ ) { sum += nums [ x ]; } if ( sum == k ) { count ++ ; } } } return count ; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#_2","text":"\u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4 sum \uff0c\u957f\u5ea6\u6bd4\u539f\u6570\u7ec4\u5927\u4e00 sum[n] : \u539f\u6570\u7ec4\u524d n \u4e2a\u6570\u4e4b\u548c sum[j+1] - sum[i] \u7b2c i+1 \u4e2a\u6570\u5230\u7b2c j+1 \u4e2a\u6570\u4e4b\u548c \u5373 nums[i] \u52a0\u5230 nums[j] sum[j+1] - sum[i] == k => sum[i] = sum[j+1] - k , 0 <= i <= j \u5982\u679c\u80fd\u5728 sum[:j+1] \u4e2d\u627e\u5230 sum[i] \uff0c\u5219 k \u5b58\u5728 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int subarraySum ( int * nums , int numsSize , int k ) { // sum(x): nums[0] + nums[1] + ... + nums[x-1] int sum [ numsSize + 1 ]; sum [ 0 ] = 0 ; for ( int x = 1 ; x <= numsSize ; x ++ ) { sum [ x ] = sum [ x - 1 ] + nums [ x - 1 ]; } // 0 <= i <= j < numsSize int count = 0 ; for ( int j = 0 ; j < numsSize ; j ++ ) { int target = sum [ j + 1 ] - k ; // sum(j+1) - sum(i) == k => sum(i) = sum(j+1) - k for ( int i = 0 ; i <= j ; i ++ ) { if ( sum [ i ] == target ) { count ++ ; } } } return count ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#_3","text":"\u601d\u8def\uff1a\u6709\u70b9\u50cf LeetCode \u7684\u7b2c\u4e00\u9898 \u81ea\u5df1\u6784\u5efa\u4e00\u4e2a\u201c\u5b57\u5178\u201d\uff0c\u501f\u52a9\u201c\u5b57\u5178\u201d\u63d0\u901f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 int CAPACITY = 1000000 ; struct Entry { int sum ; int count ; }; // [0, CAPACITY) int getIndex ( int sum ) { return ( sum % CAPACITY + CAPACITY ) % CAPACITY ; // -12 % 10 = -1 ...... -2 } void addOne ( struct Entry ** counter , int sum ) { int i = getIndex ( sum ); while ( counter [ i ] != NULL ) { if ( counter [ i ] -> sum == sum ) { counter [ i ] -> count ++ ; return ; } i = getIndex ( i + 1 ); } struct Entry * entry = malloc ( sizeof ( struct Entry )); entry -> sum = sum ; entry -> count = 1 ; counter [ i ] = entry ; } int query ( struct Entry ** counter , int sum ) { int i = getIndex ( sum ); while ( counter [ i ] != NULL ) { if ( counter [ i ] -> sum == sum ) { return counter [ i ] -> count ; } i = getIndex ( i + 1 ); } return 0 ; } int subarraySum ( int * nums , int numsSize , int k ) { // HashTable struct Entry ** counter = calloc ( CAPACITY , sizeof ( struct Entry * )); int sum = 0 ; int totalCount = 0 ; for ( int j = 0 ; j < numsSize ; j ++ ) { addOne ( counter , sum ); sum += nums [ j ]; int target = sum - k ; totalCount += query ( counter , target ); } free ( counter ); return totalCount ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/22_Subarray_Sum_Equals_K/#_4","text":"\u5f15\u5165\u94fe\u8868\uff0c\u8fd8\u80fd\u4f18\u5316","title":"\u8865\u5145"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/","text":"23. Bitwise AND of Numbers Range Link Problem Link Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive. Example Link Example 1 Input: [5, 7] Output: 4 Example 2 Input: [0, 1] Output: 0 Default Code Link 1 2 3 int rangeBitwiseAnd ( int m , int n ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u4ece m \u5230 n \u4f9d\u6b21\u4f5c\u201c\u4e0e\u8fd0\u7b97\u201d 1 2 3 4 5 6 7 8 9 int rangeBitwiseAnd ( int m , int n ) { if ( m == n ) return m ; int res = m ; for ( int i = m + 1 ; i < n ; i ++ ) { // n=INT_MAX \u65f6\uff0c\u9632\u6b62\u56e0\u4e3a ++ \u800c\u6ea2\u51fa res &= i ; } res &= n ; // n=INT_MAX \u65f6\uff0c\u9632\u6b62\u56e0\u4e3a ++ \u800c\u6ea2\u51fa return res ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e8c Link \u601d\u8def bin(m) \u4e0e bin(n) \u8df3\u8fc7\u7b26\u53f7\u4f4d\uff0c\u4ece\u5934\u5230\u5c3e\u6bd4\u8f83 \u56e0\u4e3a m <= n \uff0c\u6240\u4ee5\u82e5\u6709\u4e0d\u540c\uff0c\u5fc5\u662f m \u90a3\u4f4d\u4e3a 0 \uff0c n \u90a3\u4f4d\u4e3a 1 \u7b2c\u4e00\u6b21\u53d1\u73b0\u8fd9\u6837\u7684\u4e0d\u540c\uff0c\u90a3\u4f4d\u53ca\u4ee5\u540e\uff0c\u5747\u4f1a\u56e0\u4e3a\u201c\u4e0e\u8fd0\u7b97\u201d\u800c\u53d8\u4e3a 0 \u56e0\u4e3a\uff0c\u53ea\u8981\u6709\u8fdb\u4f4d\uff0c\u5c31\u6709 0 -> 1 \uff0c\u800c\u6709 0 \uff0c\u5c31\u4f1a\u201c\u4e0e\u8fd0\u7b97\u201d\u4e3a 0 m: 0010 1000 ... n: 0010 1100 ... ^ res: 0010 1000 ... 1 2 3 4 5 6 7 8 9 10 11 12 int rangeBitwiseAnd ( int m , int n ) { int res = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int dm = m & ( 1 << i ); int dn = n & ( 1 << i ); if ( dm != dn ) { break ; } res += dm ; } return res ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def \u4e0e \u65b9\u6cd5\u4e8c \u7c7b\u4f3c\uff0c\u5bfb\u627e\u7b2c\u4e00\u4e2a\u201c\u4e0d\u540c\u4f4d\u201d m \u4e0e n \u540c\u65f6\u53f3\u79fb\uff0c\u5e76\u8bb0\u5f55\u6b21\u6570 \u5f53 m\u2018 \u4e0e n\u2019 \u76f8\u540c\u65f6\uff0c\u5934\u90e8\u5c31\u6709\u4e86\uff0c\u540e\u8fb9\u52a0\u96f6\u5373\u53ef\uff0c\u96f6\u7684\u6570\u91cf\u4e0e\u53f3\u79fb\u6b21\u6570\u76f8\u540c 1 2 3 4 5 6 7 8 9 int rangeBitwiseAnd ( int m , int n ) { int count = 0 ; while ( m != n ) { m >>= 1 ; n >>= 1 ; count ++ ; } return m << count ; }","title":"23 Bitwise AND of Numbers Range"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#23-bitwise-and-of-numbers-range","text":"","title":"23. Bitwise AND of Numbers Range"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#problem","text":"Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive.","title":"Problem"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#example","text":"Example 1 Input: [5, 7] Output: 4 Example 2 Input: [0, 1] Output: 0","title":"Example"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#default-code","text":"1 2 3 int rangeBitwiseAnd ( int m , int n ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#_1","text":"\u601d\u8def\uff1a\u4ece m \u5230 n \u4f9d\u6b21\u4f5c\u201c\u4e0e\u8fd0\u7b97\u201d 1 2 3 4 5 6 7 8 9 int rangeBitwiseAnd ( int m , int n ) { if ( m == n ) return m ; int res = m ; for ( int i = m + 1 ; i < n ; i ++ ) { // n=INT_MAX \u65f6\uff0c\u9632\u6b62\u56e0\u4e3a ++ \u800c\u6ea2\u51fa res &= i ; } res &= n ; // n=INT_MAX \u65f6\uff0c\u9632\u6b62\u56e0\u4e3a ++ \u800c\u6ea2\u51fa return res ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#_2","text":"\u601d\u8def bin(m) \u4e0e bin(n) \u8df3\u8fc7\u7b26\u53f7\u4f4d\uff0c\u4ece\u5934\u5230\u5c3e\u6bd4\u8f83 \u56e0\u4e3a m <= n \uff0c\u6240\u4ee5\u82e5\u6709\u4e0d\u540c\uff0c\u5fc5\u662f m \u90a3\u4f4d\u4e3a 0 \uff0c n \u90a3\u4f4d\u4e3a 1 \u7b2c\u4e00\u6b21\u53d1\u73b0\u8fd9\u6837\u7684\u4e0d\u540c\uff0c\u90a3\u4f4d\u53ca\u4ee5\u540e\uff0c\u5747\u4f1a\u56e0\u4e3a\u201c\u4e0e\u8fd0\u7b97\u201d\u800c\u53d8\u4e3a 0 \u56e0\u4e3a\uff0c\u53ea\u8981\u6709\u8fdb\u4f4d\uff0c\u5c31\u6709 0 -> 1 \uff0c\u800c\u6709 0 \uff0c\u5c31\u4f1a\u201c\u4e0e\u8fd0\u7b97\u201d\u4e3a 0 m: 0010 1000 ... n: 0010 1100 ... ^ res: 0010 1000 ... 1 2 3 4 5 6 7 8 9 10 11 12 int rangeBitwiseAnd ( int m , int n ) { int res = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int dm = m & ( 1 << i ); int dn = n & ( 1 << i ); if ( dm != dn ) { break ; } res += dm ; } return res ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/23_Bitwise_AND_of_Numbers_Range/#_3","text":"\u601d\u8def \u4e0e \u65b9\u6cd5\u4e8c \u7c7b\u4f3c\uff0c\u5bfb\u627e\u7b2c\u4e00\u4e2a\u201c\u4e0d\u540c\u4f4d\u201d m \u4e0e n \u540c\u65f6\u53f3\u79fb\uff0c\u5e76\u8bb0\u5f55\u6b21\u6570 \u5f53 m\u2018 \u4e0e n\u2019 \u76f8\u540c\u65f6\uff0c\u5934\u90e8\u5c31\u6709\u4e86\uff0c\u540e\u8fb9\u52a0\u96f6\u5373\u53ef\uff0c\u96f6\u7684\u6570\u91cf\u4e0e\u53f3\u79fb\u6b21\u6570\u76f8\u540c 1 2 3 4 5 6 7 8 9 int rangeBitwiseAnd ( int m , int n ) { int count = 0 ; while ( m != n ) { m >>= 1 ; n >>= 1 ; count ++ ; } return m << count ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/24_LRU_Cache/","text":"24. LRU Cache Link Problem Link Design and implement a data structure for Least Recently Used (LRU) cache . It should support the following operations: get and put . get(key) Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item. The cache is initialized with a positive capacity. Follow up Link Could you do both operations in O(1) time complexity? Example Link 1 2 3 4 5 6 7 8 9 10 11 LRUCache cache = new LRUCache ( 2 /* capacity */ ); cache . put ( 1 , 1 ); cache . put ( 2 , 2 ); cache . get ( 1 ); // returns 1 cache . put ( 3 , 3 ); // evicts key 2 cache . get ( 2 ); // returns -1 (not found) cache . put ( 4 , 4 ); // evicts key 1 cache . get ( 1 ); // returns -1 (not found) cache . get ( 3 ); // returns 3 cache . get ( 4 ); // returns 4 Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 typedef struct { } LRUCache ; LRUCache * lRUCacheCreate ( int capacity ) { } int lRUCacheGet ( LRUCache * obj , int key ) { } void lRUCachePut ( LRUCache * obj , int key , int value ) { } void lRUCacheFree ( LRUCache * obj ) { } /** * Your LRUCache struct will be instantiated and called as such: * LRUCache* obj = lRUCacheCreate(capacity); * int param_1 = lRUCacheGet(obj, key); * lRUCachePut(obj, key, value); * lRUCacheFree(obj); */ Solution Link \u601d\u8def \u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6240\u6709\u7684\u64cd\u4f5c\u6b21\u6570 \u6bcf\u6b21\u64cd\u4f5c\u5b8c\u5c31\u628a\u8fd9\u4e2a\u6b21\u6570\u8d4b\u7ed9\u5bf9\u5e94\u7684\u201c\u952e\u503c\u5bf9\u201d \u201c\u952e\u503c\u5bf9\u201d\u7684\u201c\u64cd\u4f5c\u6b21\u6570\u201d\u8d8a\u5927\u8d8a\u65b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // \u952e\u503c\u5bf9\uff08\u5b57\u5178\uff09 struct Entry { int key ; int value ; int priority ; }; typedef struct { struct Entry * entries ; int capacity ; // \u6570\u91cf int currentPriority ; // \u4f18\u5148\u5ea6\uff0c\u78b0\u4e00\u4e0b\u5c31\u52a0\u4e00\uff0c\u53ef\u4ee5\u7406\u89e3\u6210 time\uff0c\u8d8a\u5927\u8d8a\u65b0 } LRUCache ; /* lRUCacheCreat(3): obj-> capacity: 3 entries: [(key, value, priority), (key, value, priority), (key, value, priority)] */ LRUCache * lRUCacheCreat ( int capacity ) { LRUCache * obj = malloc ( sizeof ( LRUCache )); obj -> entries = calloc ( capacity , sizeof ( struct Entry )); obj -> capacity = capacity ; obj -> currentPriority = 0 ; for ( int i = 0 ; i < capacity ; i ++ ) { obj -> entries [ i ]. key = - 1 ; } return obj ; } int lRUCacheGet ( LRUCache * obj , int key ) { // \u6709 for ( int i = 0 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. key == key ) { obj -> currentPriority ++ ; obj -> entries [ i ]. priority = obj -> currentPriority ; return obj -> entries [ i ]. value ; } } // \u6ca1\u6709 return - 1 ; } void lRUCachePut ( LRUCache * obj , int key , int value ) { // \u539f\u672c\u5c31\u6709\uff1a\u8986\u76d6\uff0c\u53d6\u4ee3 for ( int i = 0 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. key == key ) { obj -> entries [ i ]. value = value ; obj -> currentPriority ++ ; obj -> entries [ i ]. priority = obj -> currentPriority ; return ; } } // \u539f\u672c\u6ca1\u6709\uff1a\u65b0\u589e // \u672a\u6ee1\uff1a\u65b0\u589e\u5728\u7a7a\u683c (key, -1) for ( int i = 0 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. key == - 1 ) { obj -> entries [ i ]. key = key ; obj -> entries [ i ]. value = value ; obj -> currentPriority ++ ; obj -> entries [ i ]. priority = obj -> currentPriority ; return ; } } // \u5df2\u6ee1\uff1a\u627e\u5230 priority \u6700\u5c0f\u7684\u505a\u53d6\u4ee3 int minI = 0 ; // priority \u6700\u5c0f\u7684 entry \u7684\u7d22\u5f15\u53f7 for ( int i = 1 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. priority < obj -> entries [ minI ]. priority ) { minI = i ; } } obj -> entries [ minI ]. key = key ; obj -> entries [ minI ]. value = value ; obj -> currentPriority ++ ; obj -> entries [ minI ]. priority = obj -> currentPriority ; } void lRUCacheFree ( LRUCache * obj ) { // LRUCache* obj = malloc(sizeof(LRUCache)); // obj->entries = calloc(capacity, sizeof(struct Entry)); // \u8fd9\u91cc\u91ca\u653e\u4e0e\u521b\u5efa\u6cdb\u53cd\u7740\u6765 free ( obj -> entries ); free ( obj ); }","title":"24 LRU Cache"},{"location":"CChallenge/Solutions/24_LRU_Cache/#24-lru-cache","text":"","title":"24. LRU Cache"},{"location":"CChallenge/Solutions/24_LRU_Cache/#problem","text":"Design and implement a data structure for Least Recently Used (LRU) cache . It should support the following operations: get and put . get(key) Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item. The cache is initialized with a positive capacity.","title":"Problem"},{"location":"CChallenge/Solutions/24_LRU_Cache/#follow-up","text":"Could you do both operations in O(1) time complexity?","title":"Follow up"},{"location":"CChallenge/Solutions/24_LRU_Cache/#example","text":"1 2 3 4 5 6 7 8 9 10 11 LRUCache cache = new LRUCache ( 2 /* capacity */ ); cache . put ( 1 , 1 ); cache . put ( 2 , 2 ); cache . get ( 1 ); // returns 1 cache . put ( 3 , 3 ); // evicts key 2 cache . get ( 2 ); // returns -1 (not found) cache . put ( 4 , 4 ); // evicts key 1 cache . get ( 1 ); // returns -1 (not found) cache . get ( 3 ); // returns 3 cache . get ( 4 ); // returns 4","title":"Example"},{"location":"CChallenge/Solutions/24_LRU_Cache/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 typedef struct { } LRUCache ; LRUCache * lRUCacheCreate ( int capacity ) { } int lRUCacheGet ( LRUCache * obj , int key ) { } void lRUCachePut ( LRUCache * obj , int key , int value ) { } void lRUCacheFree ( LRUCache * obj ) { } /** * Your LRUCache struct will be instantiated and called as such: * LRUCache* obj = lRUCacheCreate(capacity); * int param_1 = lRUCacheGet(obj, key); * lRUCachePut(obj, key, value); * lRUCacheFree(obj); */","title":"Default Code"},{"location":"CChallenge/Solutions/24_LRU_Cache/#solution","text":"\u601d\u8def \u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6240\u6709\u7684\u64cd\u4f5c\u6b21\u6570 \u6bcf\u6b21\u64cd\u4f5c\u5b8c\u5c31\u628a\u8fd9\u4e2a\u6b21\u6570\u8d4b\u7ed9\u5bf9\u5e94\u7684\u201c\u952e\u503c\u5bf9\u201d \u201c\u952e\u503c\u5bf9\u201d\u7684\u201c\u64cd\u4f5c\u6b21\u6570\u201d\u8d8a\u5927\u8d8a\u65b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // \u952e\u503c\u5bf9\uff08\u5b57\u5178\uff09 struct Entry { int key ; int value ; int priority ; }; typedef struct { struct Entry * entries ; int capacity ; // \u6570\u91cf int currentPriority ; // \u4f18\u5148\u5ea6\uff0c\u78b0\u4e00\u4e0b\u5c31\u52a0\u4e00\uff0c\u53ef\u4ee5\u7406\u89e3\u6210 time\uff0c\u8d8a\u5927\u8d8a\u65b0 } LRUCache ; /* lRUCacheCreat(3): obj-> capacity: 3 entries: [(key, value, priority), (key, value, priority), (key, value, priority)] */ LRUCache * lRUCacheCreat ( int capacity ) { LRUCache * obj = malloc ( sizeof ( LRUCache )); obj -> entries = calloc ( capacity , sizeof ( struct Entry )); obj -> capacity = capacity ; obj -> currentPriority = 0 ; for ( int i = 0 ; i < capacity ; i ++ ) { obj -> entries [ i ]. key = - 1 ; } return obj ; } int lRUCacheGet ( LRUCache * obj , int key ) { // \u6709 for ( int i = 0 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. key == key ) { obj -> currentPriority ++ ; obj -> entries [ i ]. priority = obj -> currentPriority ; return obj -> entries [ i ]. value ; } } // \u6ca1\u6709 return - 1 ; } void lRUCachePut ( LRUCache * obj , int key , int value ) { // \u539f\u672c\u5c31\u6709\uff1a\u8986\u76d6\uff0c\u53d6\u4ee3 for ( int i = 0 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. key == key ) { obj -> entries [ i ]. value = value ; obj -> currentPriority ++ ; obj -> entries [ i ]. priority = obj -> currentPriority ; return ; } } // \u539f\u672c\u6ca1\u6709\uff1a\u65b0\u589e // \u672a\u6ee1\uff1a\u65b0\u589e\u5728\u7a7a\u683c (key, -1) for ( int i = 0 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. key == - 1 ) { obj -> entries [ i ]. key = key ; obj -> entries [ i ]. value = value ; obj -> currentPriority ++ ; obj -> entries [ i ]. priority = obj -> currentPriority ; return ; } } // \u5df2\u6ee1\uff1a\u627e\u5230 priority \u6700\u5c0f\u7684\u505a\u53d6\u4ee3 int minI = 0 ; // priority \u6700\u5c0f\u7684 entry \u7684\u7d22\u5f15\u53f7 for ( int i = 1 ; i < obj -> capacity ; i ++ ) { if ( obj -> entries [ i ]. priority < obj -> entries [ minI ]. priority ) { minI = i ; } } obj -> entries [ minI ]. key = key ; obj -> entries [ minI ]. value = value ; obj -> currentPriority ++ ; obj -> entries [ minI ]. priority = obj -> currentPriority ; } void lRUCacheFree ( LRUCache * obj ) { // LRUCache* obj = malloc(sizeof(LRUCache)); // obj->entries = calloc(capacity, sizeof(struct Entry)); // \u8fd9\u91cc\u91ca\u653e\u4e0e\u521b\u5efa\u6cdb\u53cd\u7740\u6765 free ( obj -> entries ); free ( obj ); }","title":"Solution"},{"location":"CChallenge/Solutions/25_Jump_Game/","text":"25. Jump Game Link Problem Link Given an array of non-negetive integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index. Example Link Example 1 Input: [2, 3, 1, 1, 4] Output: true Explanation Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2 Input: [3, 2, 1, 0, 4] Output: false Explanation You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. Default Code Link 1 2 3 bool canJump ( int * nums , int numsSize ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u9ed8\u8ba4\u9996\u4f4d\u4e3a true \uff0c\u5176\u4ed6\u4e3a false \u4ece\u5934\u904d\u5386\u6570\u7ec4\uff0c\u628a\u80fd\u8d70\u5230\u7684\u5730\u65b9\u6539\u4e3a true \u6700\u540e\uff0c nums[-1] \u7684\u503c\u5373\u4e3a\u7ed3\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 bool canJamp ( int * nums , int numsSize ) { // \u51d1 numsSize-1 // nums: [2, 3, 1, 1, 4], numsSize = 5 // canReach: [T, F, F, F, F] => [T, T, T, T, (T)] bool canReach [ numsSize ]; canReach [ 0 ] = true ; for ( int i = 1 ; i < numsSize ; i ++ ) { canReach [ i ] = false ; } for ( int i = 0 ; i < numsSize ; i ++ ) { if ( canReach [ i ]) { for ( int j = 1 ; j <= nums [ i ]; j ++ ) { int k = i + j ; if ( k < numsSize ) { canReach [ k ] = true ; } } } } return canReach [ numsSize - 1 ]; } \u65b9\u6cd5\u4e8c Link \u601d\u8def \u4ece\u5934\u5230\u5c3e\u904d\u5386\uff0c\u5e76\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u201c\u6700\u8fdc\u53ef\u5230\u5904\u201d \u904d\u5386\u7ed3\u675f\uff0c\u82e5\u201c\u6700\u8fdc\u53ef\u5230\u5904\u201d\u80fd\u8fbe\u5230 nums[-1] \uff0c\u5219 canJamp 1 2 3 4 5 6 7 8 9 10 11 12 bool canJamp ( int * nums , int numsSize ) { int maxCanReach = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( i <= maxCanReach ) { int canReach = i + nums [ i ]; if ( maxCanReach < canReach ) { maxCanReach = canReach ; } } } return numsSize - 1 <= maxCanReach ; }","title":"25 Jump Game"},{"location":"CChallenge/Solutions/25_Jump_Game/#25-jump-game","text":"","title":"25. Jump Game"},{"location":"CChallenge/Solutions/25_Jump_Game/#problem","text":"Given an array of non-negetive integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.","title":"Problem"},{"location":"CChallenge/Solutions/25_Jump_Game/#example","text":"Example 1 Input: [2, 3, 1, 1, 4] Output: true Explanation Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2 Input: [3, 2, 1, 0, 4] Output: false Explanation You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.","title":"Example"},{"location":"CChallenge/Solutions/25_Jump_Game/#default-code","text":"1 2 3 bool canJump ( int * nums , int numsSize ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/25_Jump_Game/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/25_Jump_Game/#_1","text":"\u601d\u8def \u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u9ed8\u8ba4\u9996\u4f4d\u4e3a true \uff0c\u5176\u4ed6\u4e3a false \u4ece\u5934\u904d\u5386\u6570\u7ec4\uff0c\u628a\u80fd\u8d70\u5230\u7684\u5730\u65b9\u6539\u4e3a true \u6700\u540e\uff0c nums[-1] \u7684\u503c\u5373\u4e3a\u7ed3\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 bool canJamp ( int * nums , int numsSize ) { // \u51d1 numsSize-1 // nums: [2, 3, 1, 1, 4], numsSize = 5 // canReach: [T, F, F, F, F] => [T, T, T, T, (T)] bool canReach [ numsSize ]; canReach [ 0 ] = true ; for ( int i = 1 ; i < numsSize ; i ++ ) { canReach [ i ] = false ; } for ( int i = 0 ; i < numsSize ; i ++ ) { if ( canReach [ i ]) { for ( int j = 1 ; j <= nums [ i ]; j ++ ) { int k = i + j ; if ( k < numsSize ) { canReach [ k ] = true ; } } } } return canReach [ numsSize - 1 ]; }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/25_Jump_Game/#_2","text":"\u601d\u8def \u4ece\u5934\u5230\u5c3e\u904d\u5386\uff0c\u5e76\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u201c\u6700\u8fdc\u53ef\u5230\u5904\u201d \u904d\u5386\u7ed3\u675f\uff0c\u82e5\u201c\u6700\u8fdc\u53ef\u5230\u5904\u201d\u80fd\u8fbe\u5230 nums[-1] \uff0c\u5219 canJamp 1 2 3 4 5 6 7 8 9 10 11 12 bool canJamp ( int * nums , int numsSize ) { int maxCanReach = 0 ; for ( int i = 0 ; i < numsSize ; i ++ ) { if ( i <= maxCanReach ) { int canReach = i + nums [ i ]; if ( maxCanReach < canReach ) { maxCanReach = canReach ; } } } return numsSize - 1 <= maxCanReach ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/","text":"26. Longset Common Subsequence Link Problem Link Given two strings text1 and text2 , return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remainging characters. (eg, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not). A common subsequence of two string is a subsequence that is common to both strings. if there is not commonsubsequence, return 0. Example Link Example 1 Input: text1 = \"abcde\", text2 = \"ace\" Output: 3 Explanation: The longest common subsequence is \"ace\" and its length is 3. Example 2 Input: text1 = \"abc\", text2 = \"abc\" Output: 3 Explanation: The longest common subsequence is \"abc\" and its length is 3. Example 3 Input: text1 = \"abc\", text2 = \"def\" Output: 0 Explanation: There is not such common subsequence, so the result is 0. Constraints Link 1 <= text1.length <= 1000 1 <= text2.length <= 1000 The input strings consist of lowercase English characters only. Hide Hint Link Hide Hint #1 Try dynamic programming. DP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j]. Hide Hint #2 DP[i][j] = DP[i-1][j-1] + 1, if text1[i] == text2[j] DP[i][j] == max(DP[i-1][j], DP[i][j-1]), otherwise Default Code Link 1 2 3 int longestCommonSubsequence ( char * text1 , char * text2 ){ } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u9012\u5f52 text1: \"abcde\" text2: \"ace\" text1 \u6700\u540e\u4e00\u4e2a\u5b57\u5143 \u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 \u4e0d\u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 text2 \u6700\u540e\u4e00\u4e2a\u5b57\u5143 \u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 \u4e0d\u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int lcs ( char * text1 , char * text2 , int m , int n ) { if ( m == 0 || n == 0 ) return 0 ; if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { // greedy // text1: \"abcd(e)\" => ...(e) // text2: \"ac(e)\" => ...(e) return lcs ( text1 , text2 , m - 1 , n - 1 ) + 1 ; } else { // text1: \"abcd(e)\" // text2: \"acd\" int discard1 = lcs ( text1 , text2 , m - 1 , n ); // text1: \"abcd(e)\" // text2: \"acdf\" int discard2 = lcs ( text1 , text2 , m , n - 1 ); int max = discard1 < discard2 ? discard2 : discard1 ; return max ; } } int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); return lcs ( text1 , text2 , len1 , len2 ); } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u9012\u5f52 \u5728 \u65b9\u6cd5\u4e00 \u7684\u57fa\u7840\u4e0a\u4f7f\u7528\u6570\u7ec4\u63d0\u901f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int lcs ( char * text1 , char * text2 , int m , int n , int ** cache ) { if ( m == 0 || n == 0 ) return 0 ; if ( cache [ m ][ n ] != - 1 ) return cache [ m ][ n ]; int result ; if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { result = lcs ( text1 , text2 , m - 1 , n - 1 , cache ) + 1 ; } else { int discard1 = lcs ( text1 , text2 , m - 1 , n , cache ); int discard2 = lcs ( text1 , text2 , m , n - 1 , cache ); result = discard1 < discard2 ? discard2 : discard1 ; } cache [ m ][ n ] = result ; return result ; } int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); // int cache[len1+1][len2+1]; => cache[1000][1000] int ** cache = malloc (( len1 + 1 ) * sizeof ( int * )); for ( int i = 0 ; i <= len1 ; i ++ ) { cache [ i ] = malloc (( len2 + 1 ) * sizeof ( int )); } for ( int i = 0 ; i <= len1 ; i ++ ) { for ( int j = 0 ; j <= len2 ; j ++ ) { cache [ i ][ j ] = - 1 ; } } int result = lcs ( text1 , text2 , len1 , len2 , cache ); for ( int i = 0 ; i <= len1 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def \u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af cache[m][n] : text1[:m] \u4e0e text2[:n] \u7684\u6700\u5927\u76f8\u540c\u5b50\u5e8f\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); int ** cache = malloc (( len1 + 1 ) * sizeof ( int * )); for ( int i = 0 ; i <= len1 ; i ++ ) { cache [ i ] = malloc (( len2 + 1 ) * sizeof ( int )); } int result ; for ( int m = 0 ; m <= len1 ; m ++ ) { for ( int n = 0 ; n <= len2 ; n ++ ) { if ( m == 0 || n == 0 ) { cache [ m ][ n ] = 0 ; continue ; } if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { result = cache [ m - 1 ][ n - 1 ] + 1 ; } else { int discard1 = cache [ m - 1 ][ n ]; int discard2 = cache [ m ][ n - 1 ]; result = discard1 < discard2 ? discard2 : discard1 ; } cache [ m ][ n ] = result ; } } result = cache [ len1 ][ len2 ]; for ( int i = 0 ; i <= len1 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u5bf9 \u65b9\u6cd5\u4e09 \u7565\u4f5c\u4fee\u6539 \u5b9a\u4e49 cache \u65f6\u987a\u4fbf\u521d\u59cb\u5316\u4e3a 0 \u904d\u5386\u65f6\u8df3\u8fc7\u9996\u884c\u3001\u9996\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); int ** cache = malloc (( len1 + 1 ) * sizeof ( int * )); for ( int i = 0 ; i <= len1 ; i ++ ) { cache [ i ] = calloc (( len2 + 1 ), sizeof ( int )); } for ( int m = 1 ; m <= len1 ; m ++ ) { for ( int n = 1 ; n <= len2 ; n ++ ) { if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { cache [ m ][ n ] = cache [ m - 1 ][ n - 1 ] + 1 ; } else { cache [ m ][ n ] = cache [ m - 1 ][ n ] < cache [ m ][ n - 1 ] ? cache [ m ][ n - 1 ] : cache [ m - 1 ][ n ]; } } } int result = cache [ len1 ][ len2 ]; for ( int i = 0 ; i <= len1 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; }","title":"26 Longset Common Subsequence"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#26-longset-common-subsequence","text":"","title":"26. Longset Common Subsequence"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#problem","text":"Given two strings text1 and text2 , return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remainging characters. (eg, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not). A common subsequence of two string is a subsequence that is common to both strings. if there is not commonsubsequence, return 0.","title":"Problem"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#example","text":"Example 1 Input: text1 = \"abcde\", text2 = \"ace\" Output: 3 Explanation: The longest common subsequence is \"ace\" and its length is 3. Example 2 Input: text1 = \"abc\", text2 = \"abc\" Output: 3 Explanation: The longest common subsequence is \"abc\" and its length is 3. Example 3 Input: text1 = \"abc\", text2 = \"def\" Output: 0 Explanation: There is not such common subsequence, so the result is 0.","title":"Example"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#constraints","text":"1 <= text1.length <= 1000 1 <= text2.length <= 1000 The input strings consist of lowercase English characters only.","title":"Constraints"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#hide-hint","text":"Hide Hint #1 Try dynamic programming. DP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j]. Hide Hint #2 DP[i][j] = DP[i-1][j-1] + 1, if text1[i] == text2[j] DP[i][j] == max(DP[i-1][j], DP[i][j-1]), otherwise","title":"Hide Hint"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#default-code","text":"1 2 3 int longestCommonSubsequence ( char * text1 , char * text2 ){ }","title":"Default Code"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#_1","text":"\u601d\u8def\uff1a\u9012\u5f52 text1: \"abcde\" text2: \"ace\" text1 \u6700\u540e\u4e00\u4e2a\u5b57\u5143 \u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 \u4e0d\u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 text2 \u6700\u540e\u4e00\u4e2a\u5b57\u5143 \u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 \u4e0d\u5c5e\u4e8e\u6700\u957f\u7684\u5171\u540c\u5b50\u5e8f\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int lcs ( char * text1 , char * text2 , int m , int n ) { if ( m == 0 || n == 0 ) return 0 ; if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { // greedy // text1: \"abcd(e)\" => ...(e) // text2: \"ac(e)\" => ...(e) return lcs ( text1 , text2 , m - 1 , n - 1 ) + 1 ; } else { // text1: \"abcd(e)\" // text2: \"acd\" int discard1 = lcs ( text1 , text2 , m - 1 , n ); // text1: \"abcd(e)\" // text2: \"acdf\" int discard2 = lcs ( text1 , text2 , m , n - 1 ); int max = discard1 < discard2 ? discard2 : discard1 ; return max ; } } int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); return lcs ( text1 , text2 , len1 , len2 ); } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#_2","text":"\u601d\u8def\uff1a\u9012\u5f52 \u5728 \u65b9\u6cd5\u4e00 \u7684\u57fa\u7840\u4e0a\u4f7f\u7528\u6570\u7ec4\u63d0\u901f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int lcs ( char * text1 , char * text2 , int m , int n , int ** cache ) { if ( m == 0 || n == 0 ) return 0 ; if ( cache [ m ][ n ] != - 1 ) return cache [ m ][ n ]; int result ; if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { result = lcs ( text1 , text2 , m - 1 , n - 1 , cache ) + 1 ; } else { int discard1 = lcs ( text1 , text2 , m - 1 , n , cache ); int discard2 = lcs ( text1 , text2 , m , n - 1 , cache ); result = discard1 < discard2 ? discard2 : discard1 ; } cache [ m ][ n ] = result ; return result ; } int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); // int cache[len1+1][len2+1]; => cache[1000][1000] int ** cache = malloc (( len1 + 1 ) * sizeof ( int * )); for ( int i = 0 ; i <= len1 ; i ++ ) { cache [ i ] = malloc (( len2 + 1 ) * sizeof ( int )); } for ( int i = 0 ; i <= len1 ; i ++ ) { for ( int j = 0 ; j <= len2 ; j ++ ) { cache [ i ][ j ] = - 1 ; } } int result = lcs ( text1 , text2 , len1 , len2 , cache ); for ( int i = 0 ; i <= len1 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#_3","text":"\u601d\u8def \u5c06 \u65b9\u6cd5\u4e8c \u7684\u9012\u5f52\u8f6c\u5faa\u73af cache[m][n] : text1[:m] \u4e0e text2[:n] \u7684\u6700\u5927\u76f8\u540c\u5b50\u5e8f\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); int ** cache = malloc (( len1 + 1 ) * sizeof ( int * )); for ( int i = 0 ; i <= len1 ; i ++ ) { cache [ i ] = malloc (( len2 + 1 ) * sizeof ( int )); } int result ; for ( int m = 0 ; m <= len1 ; m ++ ) { for ( int n = 0 ; n <= len2 ; n ++ ) { if ( m == 0 || n == 0 ) { cache [ m ][ n ] = 0 ; continue ; } if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { result = cache [ m - 1 ][ n - 1 ] + 1 ; } else { int discard1 = cache [ m - 1 ][ n ]; int discard2 = cache [ m ][ n - 1 ]; result = discard1 < discard2 ? discard2 : discard1 ; } cache [ m ][ n ] = result ; } } result = cache [ len1 ][ len2 ]; for ( int i = 0 ; i <= len1 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/26_Longset_Common_Subsequence/#_4","text":"\u601d\u8def\uff1a\u5bf9 \u65b9\u6cd5\u4e09 \u7565\u4f5c\u4fee\u6539 \u5b9a\u4e49 cache \u65f6\u987a\u4fbf\u521d\u59cb\u5316\u4e3a 0 \u904d\u5386\u65f6\u8df3\u8fc7\u9996\u884c\u3001\u9996\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int longestCommonSubsequence ( char * text1 , char * text2 ) { int len1 = strlen ( text1 ); int len2 = strlen ( text2 ); int ** cache = malloc (( len1 + 1 ) * sizeof ( int * )); for ( int i = 0 ; i <= len1 ; i ++ ) { cache [ i ] = calloc (( len2 + 1 ), sizeof ( int )); } for ( int m = 1 ; m <= len1 ; m ++ ) { for ( int n = 1 ; n <= len2 ; n ++ ) { if ( text1 [ m - 1 ] == text2 [ n - 1 ]) { cache [ m ][ n ] = cache [ m - 1 ][ n - 1 ] + 1 ; } else { cache [ m ][ n ] = cache [ m - 1 ][ n ] < cache [ m ][ n - 1 ] ? cache [ m ][ n - 1 ] : cache [ m - 1 ][ n ]; } } } int result = cache [ len1 ][ len2 ]; for ( int i = 0 ; i <= len1 ; i ++ ) { free ( cache [ i ]); } free ( cache ); return result ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/27_Maximal_Square/","text":"27. Maximal Square Link Problem Link Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area. Example Link Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 Default Code Link 1 2 3 int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int min2 ( int a , int b ) { return a < b ? a : b ; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { int squareSize = min2 ( rows - row , cols - col ); for ( int size = 1 ; size <= squareSize ; size ++ ) { // \u68c0\u67e5\u5728 size * size \u7684\u8303\u56f4\u5185\u662f\u5426\u6ca1\u6709 0 bool noZero = true ; for ( int dr = 0 ; dr < size ; dr ++ ) { for ( int dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { noZero = false ; } } } if ( noZero && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u5c31\u662f\u591a\u4e86\u4e2a\u8df3\u51fa\u53cc\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // int min2(int a, int b) int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { int squareSize = min2 ( rows - row , cols - col ); for ( int size = 1 ; size <= squareSize ; size ++ ) { // \u68c0\u67e5\u5728 size * size \u7684\u8303\u56f4\u5185\u662f\u5426\u6ca1\u6709 0 bool noZero = true ; for ( int dr = 0 ; dr < size ; dr ++ ) { int dc ; for ( dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { noZero = false ; break ; } } if ( dc < size ) break ; } if ( noZero && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; } \u65b9\u6cd5\u4e09 Link \u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e8c \u7684\u57fa\u7840\u4e0a\u5c06\u68c0\u67e5 0 \u90e8\u5206\u5c01\u88c5\u6210\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // int min2(int a, int b) // \u68c0\u67e5\u5728 (row, col) \u4e3a\u8d77\u70b9\u7684 size * size \u8303\u56f4\u5185\u662f\u5426\u6ca1\u6709 0 bool noZero ( char ** matrix , int row , int col , int size ) { for ( int dr = 0 ; dr < size ; dr ++ ) { for ( int dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { return false ; } } } return true ; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { int tmp = min2 ( rows - row , cols - col ); for ( int size = 1 ; size <= tmp ; size ++ ) { if ( noZero ( matrix , row , col , size ) && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; } \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e09 \u7684\u57fa\u7840\u4e0a\u5c0f\u6539\uff0c size \u4ece\u5927\u5230\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // int min2(int a, int b) bool noZero ( char ** matrix , int row , int col , int size ) { for ( int dr = 0 ; dr < size ; dr ++ ) { for ( int dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { return false ; } } } return true ; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { for ( int size = min2 ( rows - row , cols - col ); size >= 1 ; size -- ) { if ( noZero ( matrix , row , col , size ) && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; } \u65b9\u6cd5\u4e94 Link \u601d\u8def matrix1.1: [[..... . ], [..... . ], [..... . ], [.....(0)]] matrix1.2: [[1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, (1)]] matrix2: [[..... . ], [..... . ], [..... . ], [.....(1)]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // int min2(int a, int b) int min3 ( int a , int b , int c ) { return min2 ( min2 ( a , b ), c ); } int max2 ( int a , int b ) { return a < b ? b : a ; } int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; return min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 )) + 1 ; } int findMaximalSquare ( char ** matrix , int rows , int cols ) { if ( rows == 0 || cols == 0 ) return 0 ; // case 1 // \u5f53\u53f3\u4e0b\u89d2\u662f 0 \u65f6\uff0c\u6216\u8005 // \u5f53\u53f3\u4e0b\u89d2\u662f 1 \u65f6\uff0c\u4f46\u4e0d\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer1 = max2 ( findMaximalSquare ( matrix , rows - 1 , cols ), findMaximalSquare ( matrix , rows , cols - 1 )); // case 2 // \u5f53\u53f3\u4e0b\u89d2\u662f 1\uff0c\u4e14\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer2 = findMaximalSquareBottomLeftOne ( matrix , rows , cols ); return max2 ( answer1 , answer2 ); } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int answer = findMaximalSquare ( matrix , rows , cols ); return answer * answer ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u516d Link \u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e94 \u7684\u57fa\u7840\u4e0a\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4 cache \u8bb0\u5f55\u8fc7\u7a0b\uff0c\u63d0\u901f cache[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; return min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 )) + 1 ; } int findMaximalSquare ( char ** matrix , int rows , int cols , int ** cache ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( cache [ rows ][ cols ] != - 1 ) return cache [ rows ][ cols ]; // case 1 // \u5f53\u53f3\u4e0b\u89d2\u662f 0 \u65f6\uff0c\u6216\u8005 // \u5f53\u53f3\u4e0b\u89d2\u662f 1 \u65f6\uff0c\u4f46\u4e0d\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer1 = max2 ( findMaximalSquare ( matrix , rows - 1 , cols , cache ), findMaximalSquare ( matrix , rows , cols - 1 , cache )); // case 2 // \u5f53\u53f3\u4e0b\u89d2\u662f 1\uff0c\u4e14\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer2 = findMaximalSquareBottomLeftOne ( matrix , rows , cols ); cache [ rows ][ cols ] = max2 ( answer1 , answer2 ); return cache [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int ** cache = malloc (( rows + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= rows ; row ++ ) { cache [ row ] = malloc (( cols + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= rows ; row ++ ) { for ( int col = 0 ; col <= cols ; col ++ ) { cache [ row ][ col ] = - 1 ; // miss } } int answer = findMaximalSquare ( matrix , rows , cols , cache ); for ( int row = 0 ; row <= rows ; row ++ ) { free ( cache [ row ]); } free ( cache ); return answer * answer ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE \u65b9\u6cd5\u4e03 Link \u601d\u8def \u5f00\u4e24\u4e2a\u6570\u7ec4 cache1[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size cache2[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; if ( cache2 [ rows ][ cols ] != - 1 ) return cache2 [ rows ][ cols ]; cache2 [ rows ][ cols ] = min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 , cache2 )) + 1 ; return cache2 [ rows ][ cols ]; } int findMaximalSquare ( char ** matrix , int rows , int cols , int ** cache1 , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( cache1 [ rows ][ cols ] != - 1 ) return cache1 [ rows ][ cols ]; // case 1 // \u5f53\u53f3\u4e0b\u89d2\u662f 0 \u65f6\uff0c\u6216\u8005 // \u5f53\u53f3\u4e0b\u89d2\u662f 1 \u65f6\uff0c\u4f46\u4e0d\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer1 = max2 ( findMaximalSquare ( matrix , rows - 1 , cols , cache1 , cache2 ), findMaximalSquare ( matrix , rows , cols - 1 , cache1 , cache2 )); // case 2 // \u5f53\u53f3\u4e0b\u89d2\u662f 1\uff0c\u4e14\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer2 = findMaximalSquareBottomLeftOne ( matrix , rows , cols , cache2 ); cache1 [ rows ][ cols ] = max2 ( answer1 , answer2 ); return cache1 [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int ** cache1 = malloc (( rows + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( rows + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= rows ; row ++ ) { cache1 [ row ] = malloc (( cols + 1 ) * sizeof ( int )); cache2 [ row ] = malloc (( cols + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= rows ; row ++ ) { for ( int col = 0 ; col <= cols ; col ++ ) { cache1 [ row ][ col ] = - 1 ; // miss cache2 [ row ][ col ] = - 1 ; // miss } } int answer = findMaximalSquare ( matrix , rows , cols , cache1 , cache2 ); for ( int row = 0 ; row <= rows ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; } \u65b9\u6cd5\u516b Link \u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e03 \u7684\u57fa\u7840\u4e0a\uff0c\u5c06 cache1 \u90e8\u5206\uff0c\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; if ( cache2 [ rows ][ cols ] != - 1 ) return cache2 [ rows ][ cols ]; cache2 [ rows ][ cols ] = min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 , cache2 )) + 1 ; return cache2 [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache1 = malloc (( matrixSize + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache1 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); cache2 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= matrixSize ; row ++ ) { for ( int col = 0 ; col <= matrixColSize [ 0 ]; col ++ ) { cache1 [ row ][ col ] = - 1 ; // miss cache2 [ row ][ col ] = - 1 ; // miss } } for ( int rows = 0 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 0 ; cols <= matrixColSize [ 0 ]; cols ++ ) { if ( rows == 0 || cols == 0 ) { cache1 [ rows ][ cols ] = 0 ; continue ; } cache1 [ rows ][ cols ] = max2 ( max2 ( cache1 [ rows - 1 ][ cols ], cache1 [ rows ][ cols - 1 ]), findMaximalSquareBottomLeftOne ( matrix , rows , cols , cache2 )); } } int answer = cache1 [ matrixSize ][ matrixColSize [ 0 ]]; for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; } \u65b9\u6cd5\u4e5d Link \u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u516b \u7684\u57fa\u7840\u4e0a\u5c0f\u6539\uff0c cache1 \u7528 calloc \u521d\u59cb\u5316\uff0c\u7701\u53bb\u4e86\u5faa\u73af\u65f6\u7684 padding \u90e8\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; if ( cache2 [ rows ][ cols ] != - 1 ) return cache2 [ rows ][ cols ]; cache2 [ rows ][ cols ] = min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 , cache2 )) + 1 ; return cache2 [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache1 = malloc (( matrixSize + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache1 [ row ] = calloc ( matrixColSize [ 0 ] + 1 , sizeof ( int )); cache2 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= matrixSize ; row ++ ) { for ( int col = 0 ; col <= matrixColSize [ 0 ]; col ++ ) { cache2 [ row ][ col ] = - 1 ; // miss } } for ( int rows = 1 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 1 ; cols <= matrixColSize [ 0 ]; cols ++ ) { cache1 [ rows ][ cols ] = max2 ( max2 ( cache1 [ rows - 1 ][ cols ], cache1 [ rows ][ cols - 1 ]), findMaximalSquareBottomLeftOne ( matrix , rows , cols , cache2 )); } } int answer = cache1 [ matrixSize ][ matrixColSize [ 0 ]]; for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; } \u65b9\u6cd5\u5341 Link \u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e5d \u7684\u57fa\u7840\u4e0a\uff0c\u5c06 cache2 \u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache1 = malloc (( matrixSize + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache1 [ row ] = calloc ( matrixColSize [ 0 ] + 1 , sizeof ( int )); cache2 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= matrixSize ; row ++ ) { for ( int col = 0 ; col <= matrixColSize [ 0 ]; col ++ ) { cache2 [ row ][ col ] = - 1 ; // miss } } for ( int rows = 0 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 0 ; cols <= matrixColSize [ 0 ]; cols ++ ) { if ( rows == 0 || cols == 0 ) { cache2 [ rows ][ cols ] = 0 ; continue ; } if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) { cache2 [ rows ][ cols ] = 0 ; continue ; } cache2 [ rows ][ cols ] = min3 ( cache2 [ rows - 1 ][ cols ], cache2 [ rows ][ cols - 1 ], cache2 [ rows - 1 ][ cols - 1 ]) + 1 ; } } for ( int rows = 1 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 1 ; cols <= matrixColSize [ 0 ]; cols ++ ) { cache1 [ rows ][ cols ] = max2 ( max2 ( cache1 [ rows - 1 ][ cols ], cache1 [ rows ][ cols - 1 ]), cache2 [ rows ][ cols ]); } } int answer = cache1 [ matrixSize ][ matrixColSize [ 0 ]]; for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; } \u65b9\u6cd5\u5341\u4e00 Link \u601d\u8def \u53ea\u5f00\u4e00\u4e2a\u6570\u7ec4 cache2[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size cache2[rows][cols] = min3(...) + 1 \u4ece\u53f3\u4e0b\u89d2\u5f80\u4e09\u4e2a\u65b9\u5411\u6269\u5f20\uff1a\u5de6\u3001\u4e0a\u3001\u5de6\u4e0a \u6709\u70b9\u50cf\u6728\u6876\u7406\u8bba\uff0c\u6269\u5f20\u7684\u5927\u5c0f\u6700\u7ec8\u53d6\u51b3\u4e8e\u6700\u77ed\u7684\u201c\u6728\u677f\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache2 [ row ] = calloc ( matrixColSize [ 0 ] + 1 , sizeof ( int )); } int answer = 0 ; for ( int rows = 1 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 1 ; cols <= matrixColSize [ 0 ]; cols ++ ) { if ( matrix [ rows - 1 ][ cols - 1 ] == '1' ) { cache2 [ rows ][ cols ] = min3 ( // \u8fd9\u4e2a\u5173\u7cfb\u5f0f\u662f\u6700\u91cd\u8981\u7684 cache2 [ rows - 1 ][ cols ], cache2 [ rows ][ cols - 1 ], cache2 [ rows - 1 ][ cols - 1 ]) + 1 ; } answer = max2 ( answer , cache2 [ rows ][ cols ]); } } for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache2 [ row ]); } free ( cache2 ); return answer * answer ; }","title":"27 Maximal Square"},{"location":"CChallenge/Solutions/27_Maximal_Square/#27-maximal-square","text":"","title":"27. Maximal Square"},{"location":"CChallenge/Solutions/27_Maximal_Square/#problem","text":"Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.","title":"Problem"},{"location":"CChallenge/Solutions/27_Maximal_Square/#example","text":"Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4","title":"Example"},{"location":"CChallenge/Solutions/27_Maximal_Square/#default-code","text":"1 2 3 int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { }","title":"Default Code"},{"location":"CChallenge/Solutions/27_Maximal_Square/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_1","text":"\u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int min2 ( int a , int b ) { return a < b ? a : b ; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { int squareSize = min2 ( rows - row , cols - col ); for ( int size = 1 ; size <= squareSize ; size ++ ) { // \u68c0\u67e5\u5728 size * size \u7684\u8303\u56f4\u5185\u662f\u5426\u6ca1\u6709 0 bool noZero = true ; for ( int dr = 0 ; dr < size ; dr ++ ) { for ( int dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { noZero = false ; } } } if ( noZero && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_2","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u5c31\u662f\u591a\u4e86\u4e2a\u8df3\u51fa\u53cc\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // int min2(int a, int b) int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { int squareSize = min2 ( rows - row , cols - col ); for ( int size = 1 ; size <= squareSize ; size ++ ) { // \u68c0\u67e5\u5728 size * size \u7684\u8303\u56f4\u5185\u662f\u5426\u6ca1\u6709 0 bool noZero = true ; for ( int dr = 0 ; dr < size ; dr ++ ) { int dc ; for ( dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { noZero = false ; break ; } } if ( dc < size ) break ; } if ( noZero && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_3","text":"\u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e8c \u7684\u57fa\u7840\u4e0a\u5c06\u68c0\u67e5 0 \u90e8\u5206\u5c01\u88c5\u6210\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // int min2(int a, int b) // \u68c0\u67e5\u5728 (row, col) \u4e3a\u8d77\u70b9\u7684 size * size \u8303\u56f4\u5185\u662f\u5426\u6ca1\u6709 0 bool noZero ( char ** matrix , int row , int col , int size ) { for ( int dr = 0 ; dr < size ; dr ++ ) { for ( int dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { return false ; } } } return true ; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { int tmp = min2 ( rows - row , cols - col ); for ( int size = 1 ; size <= tmp ; size ++ ) { if ( noZero ( matrix , row , col , size ) && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; }","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_4","text":"\u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e09 \u7684\u57fa\u7840\u4e0a\u5c0f\u6539\uff0c size \u4ece\u5927\u5230\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // int min2(int a, int b) bool noZero ( char ** matrix , int row , int col , int size ) { for ( int dr = 0 ; dr < size ; dr ++ ) { for ( int dc = 0 ; dc < size ; dc ++ ) { if ( matrix [ row + dr ][ col + dc ] == '0' ) { return false ; } } } return true ; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int maxSize = 0 ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { for ( int size = min2 ( rows - row , cols - col ); size >= 1 ; size -- ) { if ( noZero ( matrix , row , col , size ) && maxSize < size ) { maxSize = size ; } } } } return maxSize * maxSize ; }","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_5","text":"\u601d\u8def matrix1.1: [[..... . ], [..... . ], [..... . ], [.....(0)]] matrix1.2: [[1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, (1)]] matrix2: [[..... . ], [..... . ], [..... . ], [.....(1)]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // int min2(int a, int b) int min3 ( int a , int b , int c ) { return min2 ( min2 ( a , b ), c ); } int max2 ( int a , int b ) { return a < b ? b : a ; } int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; return min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 )) + 1 ; } int findMaximalSquare ( char ** matrix , int rows , int cols ) { if ( rows == 0 || cols == 0 ) return 0 ; // case 1 // \u5f53\u53f3\u4e0b\u89d2\u662f 0 \u65f6\uff0c\u6216\u8005 // \u5f53\u53f3\u4e0b\u89d2\u662f 1 \u65f6\uff0c\u4f46\u4e0d\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer1 = max2 ( findMaximalSquare ( matrix , rows - 1 , cols ), findMaximalSquare ( matrix , rows , cols - 1 )); // case 2 // \u5f53\u53f3\u4e0b\u89d2\u662f 1\uff0c\u4e14\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer2 = findMaximalSquareBottomLeftOne ( matrix , rows , cols ); return max2 ( answer1 , answer2 ); } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int answer = findMaximalSquare ( matrix , rows , cols ); return answer * answer ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u4e94"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_6","text":"\u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e94 \u7684\u57fa\u7840\u4e0a\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4 cache \u8bb0\u5f55\u8fc7\u7a0b\uff0c\u63d0\u901f cache[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; return min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 )) + 1 ; } int findMaximalSquare ( char ** matrix , int rows , int cols , int ** cache ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( cache [ rows ][ cols ] != - 1 ) return cache [ rows ][ cols ]; // case 1 // \u5f53\u53f3\u4e0b\u89d2\u662f 0 \u65f6\uff0c\u6216\u8005 // \u5f53\u53f3\u4e0b\u89d2\u662f 1 \u65f6\uff0c\u4f46\u4e0d\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer1 = max2 ( findMaximalSquare ( matrix , rows - 1 , cols , cache ), findMaximalSquare ( matrix , rows , cols - 1 , cache )); // case 2 // \u5f53\u53f3\u4e0b\u89d2\u662f 1\uff0c\u4e14\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer2 = findMaximalSquareBottomLeftOne ( matrix , rows , cols ); cache [ rows ][ cols ] = max2 ( answer1 , answer2 ); return cache [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int ** cache = malloc (( rows + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= rows ; row ++ ) { cache [ row ] = malloc (( cols + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= rows ; row ++ ) { for ( int col = 0 ; col <= cols ; col ++ ) { cache [ row ][ col ] = - 1 ; // miss } } int answer = findMaximalSquare ( matrix , rows , cols , cache ); for ( int row = 0 ; row <= rows ; row ++ ) { free ( cache [ row ]); } free ( cache ); return answer * answer ; } \u8fd0\u884c\u7ed3\u679c\uff1a TLE","title":"\u65b9\u6cd5\u516d"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_7","text":"\u601d\u8def \u5f00\u4e24\u4e2a\u6570\u7ec4 cache1[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size cache2[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; if ( cache2 [ rows ][ cols ] != - 1 ) return cache2 [ rows ][ cols ]; cache2 [ rows ][ cols ] = min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 , cache2 )) + 1 ; return cache2 [ rows ][ cols ]; } int findMaximalSquare ( char ** matrix , int rows , int cols , int ** cache1 , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( cache1 [ rows ][ cols ] != - 1 ) return cache1 [ rows ][ cols ]; // case 1 // \u5f53\u53f3\u4e0b\u89d2\u662f 0 \u65f6\uff0c\u6216\u8005 // \u5f53\u53f3\u4e0b\u89d2\u662f 1 \u65f6\uff0c\u4f46\u4e0d\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer1 = max2 ( findMaximalSquare ( matrix , rows - 1 , cols , cache1 , cache2 ), findMaximalSquare ( matrix , rows , cols - 1 , cache1 , cache2 )); // case 2 // \u5f53\u53f3\u4e0b\u89d2\u662f 1\uff0c\u4e14\u5728\u6700\u5927\u6b63\u65b9\u5f62\u5185\u65f6 int answer2 = findMaximalSquareBottomLeftOne ( matrix , rows , cols , cache2 ); cache1 [ rows ][ cols ] = max2 ( answer1 , answer2 ); return cache1 [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int rows = matrixSize ; int cols = matrixColSize [ 0 ]; int ** cache1 = malloc (( rows + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( rows + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= rows ; row ++ ) { cache1 [ row ] = malloc (( cols + 1 ) * sizeof ( int )); cache2 [ row ] = malloc (( cols + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= rows ; row ++ ) { for ( int col = 0 ; col <= cols ; col ++ ) { cache1 [ row ][ col ] = - 1 ; // miss cache2 [ row ][ col ] = - 1 ; // miss } } int answer = findMaximalSquare ( matrix , rows , cols , cache1 , cache2 ); for ( int row = 0 ; row <= rows ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; }","title":"\u65b9\u6cd5\u4e03"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_8","text":"\u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e03 \u7684\u57fa\u7840\u4e0a\uff0c\u5c06 cache1 \u90e8\u5206\uff0c\u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; if ( cache2 [ rows ][ cols ] != - 1 ) return cache2 [ rows ][ cols ]; cache2 [ rows ][ cols ] = min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 , cache2 )) + 1 ; return cache2 [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache1 = malloc (( matrixSize + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache1 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); cache2 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= matrixSize ; row ++ ) { for ( int col = 0 ; col <= matrixColSize [ 0 ]; col ++ ) { cache1 [ row ][ col ] = - 1 ; // miss cache2 [ row ][ col ] = - 1 ; // miss } } for ( int rows = 0 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 0 ; cols <= matrixColSize [ 0 ]; cols ++ ) { if ( rows == 0 || cols == 0 ) { cache1 [ rows ][ cols ] = 0 ; continue ; } cache1 [ rows ][ cols ] = max2 ( max2 ( cache1 [ rows - 1 ][ cols ], cache1 [ rows ][ cols - 1 ]), findMaximalSquareBottomLeftOne ( matrix , rows , cols , cache2 )); } } int answer = cache1 [ matrixSize ][ matrixColSize [ 0 ]]; for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; }","title":"\u65b9\u6cd5\u516b"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_9","text":"\u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u516b \u7684\u57fa\u7840\u4e0a\u5c0f\u6539\uff0c cache1 \u7528 calloc \u521d\u59cb\u5316\uff0c\u7701\u53bb\u4e86\u5faa\u73af\u65f6\u7684 padding \u90e8\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int findMaximalSquareBottomLeftOne ( char ** matrix , int rows , int cols , int ** cache2 ) { if ( rows == 0 || cols == 0 ) return 0 ; if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) return 0 ; if ( cache2 [ rows ][ cols ] != - 1 ) return cache2 [ rows ][ cols ]; cache2 [ rows ][ cols ] = min3 ( findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows , cols - 1 , cache2 ), findMaximalSquareBottomLeftOne ( matrix , rows - 1 , cols - 1 , cache2 )) + 1 ; return cache2 [ rows ][ cols ]; } int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache1 = malloc (( matrixSize + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache1 [ row ] = calloc ( matrixColSize [ 0 ] + 1 , sizeof ( int )); cache2 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= matrixSize ; row ++ ) { for ( int col = 0 ; col <= matrixColSize [ 0 ]; col ++ ) { cache2 [ row ][ col ] = - 1 ; // miss } } for ( int rows = 1 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 1 ; cols <= matrixColSize [ 0 ]; cols ++ ) { cache1 [ rows ][ cols ] = max2 ( max2 ( cache1 [ rows - 1 ][ cols ], cache1 [ rows ][ cols - 1 ]), findMaximalSquareBottomLeftOne ( matrix , rows , cols , cache2 )); } } int answer = cache1 [ matrixSize ][ matrixColSize [ 0 ]]; for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; }","title":"\u65b9\u6cd5\u4e5d"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_10","text":"\u601d\u8def\uff1a\u5728 \u65b9\u6cd5\u4e5d \u7684\u57fa\u7840\u4e0a\uff0c\u5c06 cache2 \u9012\u5f52\u8f6c\u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache1 = malloc (( matrixSize + 1 ) * sizeof ( int * )); int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache1 [ row ] = calloc ( matrixColSize [ 0 ] + 1 , sizeof ( int )); cache2 [ row ] = malloc (( matrixColSize [ 0 ] + 1 ) * sizeof ( int )); } for ( int row = 0 ; row <= matrixSize ; row ++ ) { for ( int col = 0 ; col <= matrixColSize [ 0 ]; col ++ ) { cache2 [ row ][ col ] = - 1 ; // miss } } for ( int rows = 0 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 0 ; cols <= matrixColSize [ 0 ]; cols ++ ) { if ( rows == 0 || cols == 0 ) { cache2 [ rows ][ cols ] = 0 ; continue ; } if ( matrix [ rows - 1 ][ cols - 1 ] == '0' ) { cache2 [ rows ][ cols ] = 0 ; continue ; } cache2 [ rows ][ cols ] = min3 ( cache2 [ rows - 1 ][ cols ], cache2 [ rows ][ cols - 1 ], cache2 [ rows - 1 ][ cols - 1 ]) + 1 ; } } for ( int rows = 1 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 1 ; cols <= matrixColSize [ 0 ]; cols ++ ) { cache1 [ rows ][ cols ] = max2 ( max2 ( cache1 [ rows - 1 ][ cols ], cache1 [ rows ][ cols - 1 ]), cache2 [ rows ][ cols ]); } } int answer = cache1 [ matrixSize ][ matrixColSize [ 0 ]]; for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache1 [ row ]); free ( cache2 [ row ]); } free ( cache1 ); free ( cache2 ); return answer * answer ; }","title":"\u65b9\u6cd5\u5341"},{"location":"CChallenge/Solutions/27_Maximal_Square/#_11","text":"\u601d\u8def \u53ea\u5f00\u4e00\u4e2a\u6570\u7ec4 cache2[rows][cols] : (matrix[0][0], matrix[rows-1][cols-1]) \u7684\u6700\u5927 size cache2[rows][cols] = min3(...) + 1 \u4ece\u53f3\u4e0b\u89d2\u5f80\u4e09\u4e2a\u65b9\u5411\u6269\u5f20\uff1a\u5de6\u3001\u4e0a\u3001\u5de6\u4e0a \u6709\u70b9\u50cf\u6728\u6876\u7406\u8bba\uff0c\u6269\u5f20\u7684\u5927\u5c0f\u6700\u7ec8\u53d6\u51b3\u4e8e\u6700\u77ed\u7684\u201c\u6728\u677f\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // int min2(int a, int b) // int min3(int a, int b, int c) // int max2(int a, int b) int maximalSquare ( char ** matrix , int matrixSize , int * matrixColSize ) { if ( matrixSize == 0 ) return 0 ; int ** cache2 = malloc (( matrixSize + 1 ) * sizeof ( int * )); for ( int row = 0 ; row <= matrixSize ; row ++ ) { cache2 [ row ] = calloc ( matrixColSize [ 0 ] + 1 , sizeof ( int )); } int answer = 0 ; for ( int rows = 1 ; rows <= matrixSize ; rows ++ ) { for ( int cols = 1 ; cols <= matrixColSize [ 0 ]; cols ++ ) { if ( matrix [ rows - 1 ][ cols - 1 ] == '1' ) { cache2 [ rows ][ cols ] = min3 ( // \u8fd9\u4e2a\u5173\u7cfb\u5f0f\u662f\u6700\u91cd\u8981\u7684 cache2 [ rows - 1 ][ cols ], cache2 [ rows ][ cols - 1 ], cache2 [ rows - 1 ][ cols - 1 ]) + 1 ; } answer = max2 ( answer , cache2 [ rows ][ cols ]); } } for ( int row = 0 ; row < matrixSize ; row ++ ) { free ( cache2 [ row ]); } free ( cache2 ); return answer * answer ; }","title":"\u65b9\u6cd5\u5341\u4e00"},{"location":"CChallenge/Solutions/28_First_Unique_Number/","text":"28. First Unique Number Link Problem Link You have a queue of integers, you need to retrieve the first unique integer in the queue. Implement the FirstUnique class: FirstUnique(int[] nums) Initializes the object with the numbers in the queue. int showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer. void add(int value) insert value to the queue. Example Link Example 1 Link Input: [\"FirstUnique\", \"showFirstUnique\", \"add\", \"showFirstUnique\", \"add\", \"showFirstUnique\", \"add\", \"showFirstUnique\"] [[2, 3, 5], [], [5], [], [2], [], [3], []] Output: [null, 2, null, 2, null, 3, null, -1] Explanation: FirstUnique firstUnique = new FirstUnique([2, 3, 5]) firstUnique.showFirstUnique(); // return 2 firstUnique.add(5); // the queue is now [2, 3, 5, 5] firstUnique.showFirstUnique(); // return 2 firstUnique.add(2); // the queue is now [2, 3, 5, 5, 2] firstUnique.showFirstUnique(); // return 3 firstUnique.add(3); // the queue is now [2, 3, 5, 5, 2, 3] firstUnique.showFirstUnique(); // return -1 Example 2 Link Input: [\"FirstUnique\", \"showFirstUnique\", \"add\", \"add\", \"add\", \"add\", \"add\", \"showFirstUnique\"] [[7, 7, 7, 7, 7, 7], [], [7], [3], [3], [7], [17], []] Output: [null, -1, null, null, null, null, null, 17] Explanation: FirstUnique firstUnique = new FirstUnique([7, 7, 7, 7, 7, 7]) firstUnique.showFirstUnique(); // return -1 firstUnique.add(7); // the queue is now [7, 7, 7, 7, 7, 7, 7] firstUnique.add(3); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3] firstUnique.add(3); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3, 3] firstUnique.add(7); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3, 3, 7] firstUnique.add(17); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3, 3, 7, 17] firstUnique.showFirstUnique(); // return 17 Example 3 Link Input: [\"FirstUnique\", \"showFirstUnique\", \"add\", \"showFirstUnique\"] [[[809]], [], [809], []] Output: [null, 809, null, -1] Explanation: FirstUnique firstUnique = new FirstUnique([809]) firstUnique.showFirstUnique(); // return 809 firstUnique.add(809); // the queue is now [809, 809] firstUnique.showFirstUnique(); // return -1 Constraints Link 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^8 1 <= value <= 10^8 At most 50000 calls will be made to showFirstUnique and add Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 typedef struct { } FirstUnique ; FirstUnique * firstUniqueCreate ( int * nums , int numsSize ) { } int firstUniqueShowFirstUnique ( FirstUnique * obj ) { } void firstUniqueAdd ( FirstUnique * obj , int val ) { } void firstUniqueFree ( FirstUnique * obj ) { } /** * Your FirstUnique struct will be instantianted and called as such: * FirstUnique* obj = firstUniqueCreate(nums, numsSize); * int param_1 = firstUniqueShowFirstUnique(obj); * * firstUniqueAdd(obj, value); * * firstUniqueFree(obj); */ Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #define CAPACITY (100000+50000) typedef struct { int data [ CAPACITY ]; int size ; } FirstUnique ; void firstUniqueAdd ( FirstUnique * obj , int value ) { obj -> data [ obj -> size ] = value ; // obj->size \u53ef\u4ee5\u4ee3\u8868\u65b0\u589e\u7684\u4f4d\u7f6e\u7f16\u53f7 obj -> size ++ ; } FirstUnique * firstUniqueCreate ( int * nums , int numsSize ) { FirstUnique * obj = calloc ( 1 , sizeof ( FirstUnique )); obj -> size = numsSize ; for ( int i = 0 ; i < numsSize ; i ++ ) { firstUniqueAdd ( obj , nums [ i ]); } return obj ; } // \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u662f\u8c01 int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { bool isUnique = true ; // \u5047\u8bbe obj->data[i] \u50a8\u5b58\u7684\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21 for ( int j = 0 ; j < obj -> size ; j ++ ) { if ( i != j && obj -> data [ i ] == obj -> data [ j ]) { isUnique = false ; break ; } } if ( isUnique ) { return obj -> data [ i ]; } } return - 1 ; } void firstUniqueFree ( FirstUnique * obj ) { free ( obj ); } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u904d\u5386\uff0c\u540c\u65f6\u8ba1\u6570\uff0c\u82e5\u503c\u51fa\u73b0\u7684\u6b21\u6570\u552f\u4e00\uff0c\u5219\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #define CAPACITY (100000+50000) // typedef struct {...} FirstUnique; // void firstUniqueAdd(FirstUnique* obj, int value) // FirstUnique* firstUniqueCreate(int* nums, int numsSize) int count ( FirstUnique * obj , int value ) { int cnt = 0 ; for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( obj -> data [ i ] == value ) { cnt ++ ; } } return cnt ; } int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( count ( obj , obj -> data [ i ]) == 1 ) { return obj -> data [ i ]; } } return - 1 ; } // void firstUniqueFree(FirstUnique* obj) \u65b9\u6cd5\u4e09 Link \u601d\u8def \u7ed3\u6784\u4f53\u4e2d\u52a0\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4 table \u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a data \uff0c\u5c31\u5c06\u5176\u503c\u4f5c\u4e3a table \u7684\u7d22\u5f15\uff0c\u65b9\u4fbf\u8ba1\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #define CAPACITY (100000+50000) typedef struct { int table [ 100000001 ]; // table[value]: value \u5728 data \u4e2d\u51fa\u73b0\u4e86\u51e0\u6b21 int data [ CAPACITY ]; int size ; } FirstUnique ; void firstUniqueAdd ( FirstUnique * obj , int value ) { obj -> table [ value ] ++ ; obj -> data [ obj -> size ] = value ; // obj->size \u53ef\u4ee5\u4ee3\u8868\u65b0\u589e\u7684\u4f4d\u7f6e\u7f16\u53f7 obj -> size ++ ; } // FirstUnique* firstUniqueCreate(int* nums, int numsSize) int count ( FirstUnique * obj , int value ) { return obj -> table [ value ]; // table \u53ef\u4ee5\u505a\u6742\u51d1 } int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( count ( obj , obj -> data [ i ]) == 1 ) { return obj -> data [ i ]; } } return - 1 ; } // void firstUniqueFree(FirstUnique* obj) \u65b9\u6cd5\u56db Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e09 \u76f8\u540c\uff0c count \u90e8\u5206\u5c0f\u6539 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #define CAPACITY (100000+50000) // typedef struct {...} FirstUnique; // void firstUniqueAdd(FirstUnique* obj, int value) // FirstUnique* firstUniqueCreate(int* nums, int numsSize) int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( obj -> table [ obj -> data [ i ]] == 1 ) { return obj -> data [ i ]; } } return - 1 ; } // void firstUniqueFree(FirstUnique* obj)","title":"28 First Unique Number"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#28-first-unique-number","text":"","title":"28. First Unique Number"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#problem","text":"You have a queue of integers, you need to retrieve the first unique integer in the queue. Implement the FirstUnique class: FirstUnique(int[] nums) Initializes the object with the numbers in the queue. int showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer. void add(int value) insert value to the queue.","title":"Problem"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#example","text":"","title":"Example"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#example-1","text":"Input: [\"FirstUnique\", \"showFirstUnique\", \"add\", \"showFirstUnique\", \"add\", \"showFirstUnique\", \"add\", \"showFirstUnique\"] [[2, 3, 5], [], [5], [], [2], [], [3], []] Output: [null, 2, null, 2, null, 3, null, -1] Explanation: FirstUnique firstUnique = new FirstUnique([2, 3, 5]) firstUnique.showFirstUnique(); // return 2 firstUnique.add(5); // the queue is now [2, 3, 5, 5] firstUnique.showFirstUnique(); // return 2 firstUnique.add(2); // the queue is now [2, 3, 5, 5, 2] firstUnique.showFirstUnique(); // return 3 firstUnique.add(3); // the queue is now [2, 3, 5, 5, 2, 3] firstUnique.showFirstUnique(); // return -1","title":"Example 1"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#example-2","text":"Input: [\"FirstUnique\", \"showFirstUnique\", \"add\", \"add\", \"add\", \"add\", \"add\", \"showFirstUnique\"] [[7, 7, 7, 7, 7, 7], [], [7], [3], [3], [7], [17], []] Output: [null, -1, null, null, null, null, null, 17] Explanation: FirstUnique firstUnique = new FirstUnique([7, 7, 7, 7, 7, 7]) firstUnique.showFirstUnique(); // return -1 firstUnique.add(7); // the queue is now [7, 7, 7, 7, 7, 7, 7] firstUnique.add(3); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3] firstUnique.add(3); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3, 3] firstUnique.add(7); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3, 3, 7] firstUnique.add(17); // the queue is now [7, 7, 7, 7, 7, 7, 7, 3, 3, 7, 17] firstUnique.showFirstUnique(); // return 17","title":"Example 2"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#example-3","text":"Input: [\"FirstUnique\", \"showFirstUnique\", \"add\", \"showFirstUnique\"] [[[809]], [], [809], []] Output: [null, 809, null, -1] Explanation: FirstUnique firstUnique = new FirstUnique([809]) firstUnique.showFirstUnique(); // return 809 firstUnique.add(809); // the queue is now [809, 809] firstUnique.showFirstUnique(); // return -1","title":"Example 3"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#constraints","text":"1 <= nums.length <= 10^5 1 <= nums[i] <= 10^8 1 <= value <= 10^8 At most 50000 calls will be made to showFirstUnique and add","title":"Constraints"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 typedef struct { } FirstUnique ; FirstUnique * firstUniqueCreate ( int * nums , int numsSize ) { } int firstUniqueShowFirstUnique ( FirstUnique * obj ) { } void firstUniqueAdd ( FirstUnique * obj , int val ) { } void firstUniqueFree ( FirstUnique * obj ) { } /** * Your FirstUnique struct will be instantianted and called as such: * FirstUnique* obj = firstUniqueCreate(nums, numsSize); * int param_1 = firstUniqueShowFirstUnique(obj); * * firstUniqueAdd(obj, value); * * firstUniqueFree(obj); */","title":"Default Code"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#_1","text":"\u601d\u8def\uff1a\u66b4\u529b\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #define CAPACITY (100000+50000) typedef struct { int data [ CAPACITY ]; int size ; } FirstUnique ; void firstUniqueAdd ( FirstUnique * obj , int value ) { obj -> data [ obj -> size ] = value ; // obj->size \u53ef\u4ee5\u4ee3\u8868\u65b0\u589e\u7684\u4f4d\u7f6e\u7f16\u53f7 obj -> size ++ ; } FirstUnique * firstUniqueCreate ( int * nums , int numsSize ) { FirstUnique * obj = calloc ( 1 , sizeof ( FirstUnique )); obj -> size = numsSize ; for ( int i = 0 ; i < numsSize ; i ++ ) { firstUniqueAdd ( obj , nums [ i ]); } return obj ; } // \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u662f\u8c01 int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { bool isUnique = true ; // \u5047\u8bbe obj->data[i] \u50a8\u5b58\u7684\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21 for ( int j = 0 ; j < obj -> size ; j ++ ) { if ( i != j && obj -> data [ i ] == obj -> data [ j ]) { isUnique = false ; break ; } } if ( isUnique ) { return obj -> data [ i ]; } } return - 1 ; } void firstUniqueFree ( FirstUnique * obj ) { free ( obj ); }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#_2","text":"\u601d\u8def\uff1a\u904d\u5386\uff0c\u540c\u65f6\u8ba1\u6570\uff0c\u82e5\u503c\u51fa\u73b0\u7684\u6b21\u6570\u552f\u4e00\uff0c\u5219\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #define CAPACITY (100000+50000) // typedef struct {...} FirstUnique; // void firstUniqueAdd(FirstUnique* obj, int value) // FirstUnique* firstUniqueCreate(int* nums, int numsSize) int count ( FirstUnique * obj , int value ) { int cnt = 0 ; for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( obj -> data [ i ] == value ) { cnt ++ ; } } return cnt ; } int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( count ( obj , obj -> data [ i ]) == 1 ) { return obj -> data [ i ]; } } return - 1 ; } // void firstUniqueFree(FirstUnique* obj)","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#_3","text":"\u601d\u8def \u7ed3\u6784\u4f53\u4e2d\u52a0\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u7ec4 table \u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a data \uff0c\u5c31\u5c06\u5176\u503c\u4f5c\u4e3a table \u7684\u7d22\u5f15\uff0c\u65b9\u4fbf\u8ba1\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #define CAPACITY (100000+50000) typedef struct { int table [ 100000001 ]; // table[value]: value \u5728 data \u4e2d\u51fa\u73b0\u4e86\u51e0\u6b21 int data [ CAPACITY ]; int size ; } FirstUnique ; void firstUniqueAdd ( FirstUnique * obj , int value ) { obj -> table [ value ] ++ ; obj -> data [ obj -> size ] = value ; // obj->size \u53ef\u4ee5\u4ee3\u8868\u65b0\u589e\u7684\u4f4d\u7f6e\u7f16\u53f7 obj -> size ++ ; } // FirstUnique* firstUniqueCreate(int* nums, int numsSize) int count ( FirstUnique * obj , int value ) { return obj -> table [ value ]; // table \u53ef\u4ee5\u505a\u6742\u51d1 } int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( count ( obj , obj -> data [ i ]) == 1 ) { return obj -> data [ i ]; } } return - 1 ; } // void firstUniqueFree(FirstUnique* obj)","title":"\u65b9\u6cd5\u4e09"},{"location":"CChallenge/Solutions/28_First_Unique_Number/#_4","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e09 \u76f8\u540c\uff0c count \u90e8\u5206\u5c0f\u6539 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #define CAPACITY (100000+50000) // typedef struct {...} FirstUnique; // void firstUniqueAdd(FirstUnique* obj, int value) // FirstUnique* firstUniqueCreate(int* nums, int numsSize) int firstUniqueShowFirstUnique ( FirstUnique * obj ) { for ( int i = 0 ; i < obj -> size ; i ++ ) { if ( obj -> table [ obj -> data [ i ]] == 1 ) { return obj -> data [ i ]; } } return - 1 ; } // void firstUniqueFree(FirstUnique* obj)","title":"\u65b9\u6cd5\u56db"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/","text":"29. Binary Tree Maximum Path Sum Link Problem Link Given a non-empty binary tree, find the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The Path must contain at least one node and does not need to go through the root. Example Link Example 1 Link Input: [1, 2, 3] 1 / \\ 2 3 - Output: 6 Example 2 Link Input: [-10, 9, 20, null, null, 15, 7] -10 / \\ 9 20 / \\ 15 7 Output: 42 Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ int maxPathSum1 ( struct TreeNode * root ) { } Solution Link \u65b9\u6cd5\u4e00 Link \u601d\u8def\uff1a\u9012\u5f52 \u7ecf\u8fc7 root \u4e0d\u7ecf\u8fc7 root \u5de6\u5b50\u6811 \u53f3\u5b50\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 int max3 ( int a , int b , int c ) { int max = a ; if ( max < b ) max = b ; if ( max < c ) max = c ; return max ; } // \u53ea\u80fd\u4ece root \u5f00\u59cb\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u53ef\u4ee5\u4e0d\u9009\uff0c\u90fd\u4e0d\u9009\u4e3a\u96f6\uff09 int maxPathSumRoot ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; // \u6709\u9009 root // 1. \u9009\u5de6 int left = maxPathSumRoot ( root -> left ) + root -> val ; // 2. \u9009\u53f3 int right = maxPathSumRoot ( root -> right ) + root -> val ; // \u6ca1\u9009 root int result = 0 ; return max3 ( left , right , result ); } // \u56de\u4f20\u4efb\u610f\u8d77\u70b9\u8d70\u5230\u4efb\u610f\u7ec8\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u4e0d\u53ef\u4ee5\u4e0d\u9009\uff0c\u81f3\u5c11\u9009\u4e00\u4e2a\u8282\u70b9\uff1b\u7a7a\u7684\u8bdd\uff0c\u56de\u4f20 INT_MIN\uff09 int maxPathSum ( struct TreeNode * root ) { if ( root == NULL ) return INT_MIN ; // \u7ecf\u8fc7\u4e2d\u95f4 (root) \u7684\u6700\u5927\u8def\u5f84\u548c int middle = maxPathSumRoot ( root -> left ) + root -> val + maxPathSumRoot ( root -> right ); // \u4e0d\u7ecf\u4e2d\u95f4 (root) \u7684\u6700\u5927\u8def\u5f84\u548c // 1. \u6700\u5927\u8def\u5f84\u53d1\u751f\u5728\u5de6\u8fb9\u5b50\u6811 int left = maxPathSum ( root -> left ); // 2. \u6700\u5927\u8def\u5f84\u53d1\u751f\u5728\u53f3\u8fb9\u5b50\u6811 int right = maxPathSum ( root -> right ); return max3 ( left , middle , right ); } \u65b9\u6cd5\u4e8c Link \u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u5c31\u662f\u5199\u6cd5\u4e0a\u7b80\u5316\u4e86\u4e00\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // int max3(int a, int b, int c) // \u53ea\u80fd\u4ece root \u5f00\u59cb\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u53ef\u4ee5\u4e0d\u9009\uff0c\u90fd\u4e0d\u9009\u4e3a\u96f6\uff09 int maxPathSumRoot ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; return max3 ( maxPathSumRoot ( root -> left ) + root -> val , maxPathSumRoot ( root -> right ) + root -> val , 0 ); } // \u56de\u4f20\u4efb\u610f\u8d77\u70b9\u8d70\u5230\u4efb\u610f\u7ec8\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u4e0d\u53ef\u4ee5\u4e0d\u9009\uff0c\u81f3\u5c11\u9009\u4e00\u4e2a\u8282\u70b9\uff1b\u7a7a\u7684\u8bdd\uff0c\u56de\u4f20 INT_MIN\uff09 int maxPathSum ( struct TreeNode * root ) { if ( root == NULL ) return INT_MIN ; return max3 ( maxPathSumRoot ( root -> left ) + root -> val + maxPathSumRoot ( root -> right ), maxPathSum ( root -> left ), maxPathSum ( root -> right )); }","title":"29 Binary Tree Maximum Path Sum"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#29-binary-tree-maximum-path-sum","text":"","title":"29. Binary Tree Maximum Path Sum"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#problem","text":"Given a non-empty binary tree, find the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The Path must contain at least one node and does not need to go through the root.","title":"Problem"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#example","text":"","title":"Example"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#example-1","text":"Input: [1, 2, 3] 1 / \\ 2 3 - Output: 6","title":"Example 1"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#example-2","text":"Input: [-10, 9, 20, null, null, 15, 7] -10 / \\ 9 20 / \\ 15 7 Output: 42","title":"Example 2"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ int maxPathSum1 ( struct TreeNode * root ) { }","title":"Default Code"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#solution","text":"","title":"Solution"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#_1","text":"\u601d\u8def\uff1a\u9012\u5f52 \u7ecf\u8fc7 root \u4e0d\u7ecf\u8fc7 root \u5de6\u5b50\u6811 \u53f3\u5b50\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 int max3 ( int a , int b , int c ) { int max = a ; if ( max < b ) max = b ; if ( max < c ) max = c ; return max ; } // \u53ea\u80fd\u4ece root \u5f00\u59cb\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u53ef\u4ee5\u4e0d\u9009\uff0c\u90fd\u4e0d\u9009\u4e3a\u96f6\uff09 int maxPathSumRoot ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; // \u6709\u9009 root // 1. \u9009\u5de6 int left = maxPathSumRoot ( root -> left ) + root -> val ; // 2. \u9009\u53f3 int right = maxPathSumRoot ( root -> right ) + root -> val ; // \u6ca1\u9009 root int result = 0 ; return max3 ( left , right , result ); } // \u56de\u4f20\u4efb\u610f\u8d77\u70b9\u8d70\u5230\u4efb\u610f\u7ec8\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u4e0d\u53ef\u4ee5\u4e0d\u9009\uff0c\u81f3\u5c11\u9009\u4e00\u4e2a\u8282\u70b9\uff1b\u7a7a\u7684\u8bdd\uff0c\u56de\u4f20 INT_MIN\uff09 int maxPathSum ( struct TreeNode * root ) { if ( root == NULL ) return INT_MIN ; // \u7ecf\u8fc7\u4e2d\u95f4 (root) \u7684\u6700\u5927\u8def\u5f84\u548c int middle = maxPathSumRoot ( root -> left ) + root -> val + maxPathSumRoot ( root -> right ); // \u4e0d\u7ecf\u4e2d\u95f4 (root) \u7684\u6700\u5927\u8def\u5f84\u548c // 1. \u6700\u5927\u8def\u5f84\u53d1\u751f\u5728\u5de6\u8fb9\u5b50\u6811 int left = maxPathSum ( root -> left ); // 2. \u6700\u5927\u8def\u5f84\u53d1\u751f\u5728\u53f3\u8fb9\u5b50\u6811 int right = maxPathSum ( root -> right ); return max3 ( left , middle , right ); }","title":"\u65b9\u6cd5\u4e00"},{"location":"CChallenge/Solutions/29_Binary_Tree_Maximum_Path_Sum/#_2","text":"\u601d\u8def\uff1a\u4e0e \u65b9\u6cd5\u4e00 \u76f8\u540c\uff0c\u5c31\u662f\u5199\u6cd5\u4e0a\u7b80\u5316\u4e86\u4e00\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // int max3(int a, int b, int c) // \u53ea\u80fd\u4ece root \u5f00\u59cb\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u53ef\u4ee5\u4e0d\u9009\uff0c\u90fd\u4e0d\u9009\u4e3a\u96f6\uff09 int maxPathSumRoot ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; return max3 ( maxPathSumRoot ( root -> left ) + root -> val , maxPathSumRoot ( root -> right ) + root -> val , 0 ); } // \u56de\u4f20\u4efb\u610f\u8d77\u70b9\u8d70\u5230\u4efb\u610f\u7ec8\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u4e0d\u53ef\u4ee5\u4e0d\u9009\uff0c\u81f3\u5c11\u9009\u4e00\u4e2a\u8282\u70b9\uff1b\u7a7a\u7684\u8bdd\uff0c\u56de\u4f20 INT_MIN\uff09 int maxPathSum ( struct TreeNode * root ) { if ( root == NULL ) return INT_MIN ; return max3 ( maxPathSumRoot ( root -> left ) + root -> val + maxPathSumRoot ( root -> right ), maxPathSum ( root -> left ), maxPathSum ( root -> right )); }","title":"\u65b9\u6cd5\u4e8c"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/","text":"30. Check If a String is a Valid Sequence Link Problem Link Given a binary tree where each path going from the root to any leaf form a valid sequence , check if a given string is a valid sequence in such binary tree. We get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree. Example Link Example 1 Link *0 / \\ *1 0 / \\ / *0 1 0 \\ / \\ *1 0 0 Input: root = [0, 1, 0, 0, 1, 0, null, null, 1, 0, 0], arr = [0, 1, 0, 1] Output: true Explanation: The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure).\uff08\u6211\u7528 * \u4ee3\u66ff\u7eff\u8272\uff09 Other valid sequences are: 0 -> 1 -> 1 -> 0 0 -> 0 -> 0 Example 2 Link *0 / \\ 1 *0 / \\ / 0 1 0 \\ / \\ 1 0 0 Input: root = [0, 1, 0, 0, 1, 0, null, null, 1, 0, 0], arr = [0, 0, 1] Output: false Explanation: The path 0 -> 0 -> 1 does not exist, therefore it is not eve a sequence. Example 3 Link *0 / \\ *1 0 / \\ / 0 *1 0 \\ / \\ 1 0 0 Input: root = [0, 1, 0, 0, 1, 0, null, null, 1, 0, 0], arr = [0, 1, 1] Output: false Explanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence. Constraints Link 1 <= arr.length <= 5000 0 <= arr[i] <= 9 Each node's value is between [0-9]. Default Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ bool isValidSequence ( struct TreeNode * root , int * arr , int arrSize ) { } Solution Link \u601d\u8def\uff1a\u9012\u5f52 \u9898\u76ee\u8bf4 root != NULL && arrSize >= 1 \u4f46\u8fd8\u662f\u8981\u8003\u8651\u5230\u4ee5\u4e0b\u51e0\u79cd\u60c5\u5f62\uff08root \u53ef\u4ee5\u662f\u7a7a\u7684\uff0carr \u4e5f\u53ef\u4ee5\u662f\u7a7a\u7684\uff09 root == NULL && arrSize == 0 : return false root == NULL && arrSize != 0 : return false root != NULL && arrSize == 0 : return false root != NULL && arrSize != 0 return root->val == arr[0] && (isValid(root->left) || isValid(root->right)) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool isValid ( struct TreeNode * root , int * arr , int arrSize , int start ) { // root: // arr: [0, 1, 0, 1], arrSize: 4 // start: ^ <- 3 if ( root == NULL ) return false ; if ( arrSize <= start ) return false ; // \u6811\u6839\u7684\u503c\u4e0e\u5b50\u6570\u7ec4\u7684\u5f00\u5934\u4e0d\u540c if ( root -> val != arr [ start ]) return false ; // \u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u4e14\u6570\u7ec4\u521a\u597d\u7528\u5b8c if ( root -> left == NULL && root -> right == NULL ) return start + 1 == arrSize ; // \u8d70\u5230\u7684\u4e0d\u662f\u4e2a\u6811\u53f6 return isValid ( root -> left , arr , arrSize , start + 1 ) || isValid ( root -> right , arr , arrSize , start + 1 ); } bool isValidSequence ( struct TreeNode * root , int * arr , int arrSize ) { return isValid ( root , arr , arrSize , 0 ); }","title":"30 Check If a String is a Valid Sequence"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#30-check-if-a-string-is-a-valid-sequence","text":"","title":"30. Check If a String is a Valid Sequence"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#problem","text":"Given a binary tree where each path going from the root to any leaf form a valid sequence , check if a given string is a valid sequence in such binary tree. We get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.","title":"Problem"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#example","text":"","title":"Example"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#example-1","text":"*0 / \\ *1 0 / \\ / *0 1 0 \\ / \\ *1 0 0 Input: root = [0, 1, 0, 0, 1, 0, null, null, 1, 0, 0], arr = [0, 1, 0, 1] Output: true Explanation: The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure).\uff08\u6211\u7528 * \u4ee3\u66ff\u7eff\u8272\uff09 Other valid sequences are: 0 -> 1 -> 1 -> 0 0 -> 0 -> 0","title":"Example 1"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#example-2","text":"*0 / \\ 1 *0 / \\ / 0 1 0 \\ / \\ 1 0 0 Input: root = [0, 1, 0, 0, 1, 0, null, null, 1, 0, 0], arr = [0, 0, 1] Output: false Explanation: The path 0 -> 0 -> 1 does not exist, therefore it is not eve a sequence.","title":"Example 2"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#example-3","text":"*0 / \\ *1 0 / \\ / 0 *1 0 \\ / \\ 1 0 0 Input: root = [0, 1, 0, 0, 1, 0, null, null, 1, 0, 0], arr = [0, 1, 1] Output: false Explanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.","title":"Example 3"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#constraints","text":"1 <= arr.length <= 5000 0 <= arr[i] <= 9 Each node's value is between [0-9].","title":"Constraints"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#default-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ bool isValidSequence ( struct TreeNode * root , int * arr , int arrSize ) { }","title":"Default Code"},{"location":"CChallenge/Solutions/30_Check_If_a_String_is_a_Valid_Sequence/#solution","text":"\u601d\u8def\uff1a\u9012\u5f52 \u9898\u76ee\u8bf4 root != NULL && arrSize >= 1 \u4f46\u8fd8\u662f\u8981\u8003\u8651\u5230\u4ee5\u4e0b\u51e0\u79cd\u60c5\u5f62\uff08root \u53ef\u4ee5\u662f\u7a7a\u7684\uff0carr \u4e5f\u53ef\u4ee5\u662f\u7a7a\u7684\uff09 root == NULL && arrSize == 0 : return false root == NULL && arrSize != 0 : return false root != NULL && arrSize == 0 : return false root != NULL && arrSize != 0 return root->val == arr[0] && (isValid(root->left) || isValid(root->right)) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bool isValid ( struct TreeNode * root , int * arr , int arrSize , int start ) { // root: // arr: [0, 1, 0, 1], arrSize: 4 // start: ^ <- 3 if ( root == NULL ) return false ; if ( arrSize <= start ) return false ; // \u6811\u6839\u7684\u503c\u4e0e\u5b50\u6570\u7ec4\u7684\u5f00\u5934\u4e0d\u540c if ( root -> val != arr [ start ]) return false ; // \u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u4e14\u6570\u7ec4\u521a\u597d\u7528\u5b8c if ( root -> left == NULL && root -> right == NULL ) return start + 1 == arrSize ; // \u8d70\u5230\u7684\u4e0d\u662f\u4e2a\u6811\u53f6 return isValid ( root -> left , arr , arrSize , start + 1 ) || isValid ( root -> right , arr , arrSize , start + 1 ); } bool isValidSequence ( struct TreeNode * root , int * arr , int arrSize ) { return isValid ( root , arr , arrSize , 0 ); }","title":"Solution"},{"location":"CChallenge/Summarize/01_return/","text":"1. return Link \u6d4b\u8bd5\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <stdio.h> int test_return () { for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 5 ) { return i ; } } // return -1; } int main () { int num = test_return (); printf ( \">>> num = %d \\n \" , num ); return 0 ; } \u7f16\u8bd1\u7ed3\u679c Link york $ gcc -Wall Knowledge.c Knowledge.c: In function 'test_return' : Knowledge.c:10:1: warning: control reaches end of non-void function [ -Wreturn-type ] } \u77e5\u8bc6\u70b9 Link \u51fd\u6570 test_return \u4e2d\u672b\u5c3e\u7684 return -1; \u867d\u7136\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u6700\u597d\u52a0\u4e0a","title":"01 return"},{"location":"CChallenge/Summarize/01_return/#1-return","text":"","title":"1. return"},{"location":"CChallenge/Summarize/01_return/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <stdio.h> int test_return () { for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 5 ) { return i ; } } // return -1; } int main () { int num = test_return (); printf ( \">>> num = %d \\n \" , num ); return 0 ; }","title":"\u6d4b\u8bd5\u4ee3\u7801"},{"location":"CChallenge/Summarize/01_return/#_2","text":"york $ gcc -Wall Knowledge.c Knowledge.c: In function 'test_return' : Knowledge.c:10:1: warning: control reaches end of non-void function [ -Wreturn-type ] }","title":"\u7f16\u8bd1\u7ed3\u679c"},{"location":"CChallenge/Summarize/01_return/#_3","text":"\u51fd\u6570 test_return \u4e2d\u672b\u5c3e\u7684 return -1; \u867d\u7136\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u6700\u597d\u52a0\u4e0a","title":"\u77e5\u8bc6\u70b9"},{"location":"CChallenge/Summarize/04_replace_goto/","text":"4. replace goto Link \u6d4b\u8bd5\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <stdio.h> void moveZeroes ( int * nums , int numsSize ) { int loop = 1 ; while ( loop ) { for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { if ( nums [ i ] == 0 && nums [ i + 1 ] != 0 ) { nums [ i ] = nums [ i + 1 ]; nums [ i + 1 ] = 0 ; break ; } if ( i == numsSize - 2 ) loop = 0 ; } } } int main () { int arr1 [] = { 0 , 1 , 0 , 3 , 12 }; moveZeroes ( arr1 , 5 ); return 0 ; }","title":"04 replace goto"},{"location":"CChallenge/Summarize/04_replace_goto/#4-replace-goto","text":"","title":"4. replace goto"},{"location":"CChallenge/Summarize/04_replace_goto/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <stdio.h> void moveZeroes ( int * nums , int numsSize ) { int loop = 1 ; while ( loop ) { for ( int i = 0 ; i < numsSize - 1 ; i ++ ) { if ( nums [ i ] == 0 && nums [ i + 1 ] != 0 ) { nums [ i ] = nums [ i + 1 ]; nums [ i + 1 ] = 0 ; break ; } if ( i == numsSize - 2 ) loop = 0 ; } } } int main () { int arr1 [] = { 0 , 1 , 0 , 3 , 12 }; moveZeroes ( arr1 , 5 ); return 0 ; }","title":"\u6d4b\u8bd5\u4ee3\u7801"},{"location":"CChallenge/Summarize/05_array_initial/","text":"5. array initial Link \u6d4b\u8bd5\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 #include <stdio.h> int main () { int size = 10 ; int profits [ size ] = { 0 }; printf ( \">>> profits[0] = %d \\n \" , profits [ 0 ]); return 0 ; } \u7f16\u8bd1\u7ed3\u679c york $ gcc -Wall Knowledge.c Knowledge.c: In function 'main' : Knowledge.c:5:5: error: variable-sized object may not be initialized int profits [ size ] = { 0 } ; ^~~ Knowledge.c:5:26: warning: excess elements in array initializer int profits [ size ] = { 0 } ; ^ Knowledge.c:5:26: note: ( near initialization for 'profits' ) \u7ed3\u8bba\uff1a\u4f7f\u7528 int profits[size]; \u8fd9\u79cd\u65b9\u5f0f\u65f6\uff0c\u9700\u8981\u53e6\u8d4b\u521d\u503c","title":"05 array initial"},{"location":"CChallenge/Summarize/05_array_initial/#5-array-initial","text":"","title":"5. array initial"},{"location":"CChallenge/Summarize/05_array_initial/#_1","text":"1 2 3 4 5 6 7 8 9 #include <stdio.h> int main () { int size = 10 ; int profits [ size ] = { 0 }; printf ( \">>> profits[0] = %d \\n \" , profits [ 0 ]); return 0 ; } \u7f16\u8bd1\u7ed3\u679c york $ gcc -Wall Knowledge.c Knowledge.c: In function 'main' : Knowledge.c:5:5: error: variable-sized object may not be initialized int profits [ size ] = { 0 } ; ^~~ Knowledge.c:5:26: warning: excess elements in array initializer int profits [ size ] = { 0 } ; ^ Knowledge.c:5:26: note: ( near initialization for 'profits' ) \u7ed3\u8bba\uff1a\u4f7f\u7528 int profits[size]; \u8fd9\u79cd\u65b9\u5f0f\u65f6\uff0c\u9700\u8981\u53e6\u8d4b\u521d\u503c","title":"\u6d4b\u8bd5\u4ee3\u7801"},{"location":"CChallenge/Summarize/06_12_qsort/","text":"06/12 qsort Link lesson 6 Link \u6d4b\u8bd5\u4ee3\u7801 #include <stdio.h> #include <stdlib.h> // qsort, malloc #include <string.h> int cmpChar ( const void * a , const void * b ) { return * ( const char * ) a - * ( const char * ) b ; // } char * testQsort ( char * str , int strsSize ) { char * sortedStr = malloc ( sizeof ( char ) * ( strsSize + 1 )); // +1 for '\\0' strcpy ( sortedStr , str ); qsort ( sortedStr , strsSize , sizeof ( char ), cmpChar ); return sortedStr ; } int main () { char * str = \"YorkFish\" ; printf ( \">>> before qsort: %s \\n \" , str ); char * sortedStr = testQsort ( str , 8 ); printf ( \">>> after qsort: %s \\n \" , sortedStr ); return 0 ; } \u8fd0\u884c\u7ed3\u679c >>> before qsort: YorkFish >>> after qsort: FYhikors lesson 12 Link \u6d4b\u8bd5\u4ee3\u7801 #include <stdio.h> #include <stdlib.h> int cmp1 ( const void * a , const void * b ) { // a < b => - // a == b => 0 // a > b => + int va = * ( const int * ) a ; int vb = * ( const int * ) b ; if ( va % 2 == 1 && vb % 2 == 1 ) { // \u90fd\u662f\u5947\u6570 return 0 ; // \u4e0d\u6392 } if ( va % 2 == 1 && vb % 2 == 0 ) { // \u4e00\u5947\u4e00\u5076 return - 1 ; // \u5947\u5728\u524d } if ( va % 2 == 0 && vb % 2 == 1 ) { // \u4e00\u5076\u4e00\u5947 return 1 ; // \u5076\u5728\u540e } if ( va % 2 == 0 && vb % 2 == 0 ) { // \u90fd\u662f\u5076\u6570 return 0 ; // \u4e0d\u6392 } return - 1 ; } int cmp2 ( const void * a , const void * b ) { // a < b => - // a == b => 0 // a > b => + int va = * ( const int * ) a ; int vb = * ( const int * ) b ; if ( va % 2 == 1 && vb % 2 == 1 ) { // \u90fd\u662f\u5947\u6570 return va - vb ; // \u5347\u5e8f } if ( va % 2 == 1 && vb % 2 == 0 ) { // \u4e00\u5947\u4e00\u5076 return - 1 ; // \u5947\u5728\u524d\uff0c\u5076\u5728\u540e } if ( va % 2 == 0 && vb % 2 == 1 ) { // \u4e00\u5076\u4e00\u5947 return 1 ; // \u5076\u5728\u540e\uff0c\u5947\u5728\u524d } if ( va % 2 == 0 && vb % 2 == 0 ) { // \u90fd\u662f\u5076\u6570 return vb - va ; // \u964d\u5e8f } return - 1 ; } int main () { int v [ 10 ] = { 1 , 4 , 5 , 2 , 3 , 8 , 6 , 7 , 9 , 10 }; qsort ( v , 10 , sizeof ( int ), cmp1 ); for ( int i = 0 ; i < 10 ; i ++ ) { printf ( \"%d \" , v [ i ]); } printf ( \" \\n \" ); qsort ( v , 10 , sizeof ( int ), cmp2 ); for ( int i = 0 ; i < 10 ; i ++ ) { printf ( \"%d \" , v [ i ]); } printf ( \" \\n \" ); return 0 ; } \u8fd0\u884c\u7ed3\u679c 1 7 5 3 9 6 4 8 2 10 1 3 5 7 9 10 8 6 4 2 \u5176\u5b83 qsort \u6570\u503c\u8f83\u5c11\u65f6\uff0c\u53ef\u80fd\u662f\u63d2\u5165\u6392\u5e8f\uff1b \u591a\u4e00\u70b9\uff0c\u53ef\u80fd\u662f\u5f52\u5e76\u6392\u5e8f\uff1b \u518d\u591a\u4e00\u70b9\uff0c\u53ef\u80fd\u662f\u5feb\u6392","title":"06 12 qsort"},{"location":"CChallenge/Summarize/06_12_qsort/#0612-qsort","text":"","title":"06/12 qsort"},{"location":"CChallenge/Summarize/06_12_qsort/#lesson-6","text":"\u6d4b\u8bd5\u4ee3\u7801 #include <stdio.h> #include <stdlib.h> // qsort, malloc #include <string.h> int cmpChar ( const void * a , const void * b ) { return * ( const char * ) a - * ( const char * ) b ; // } char * testQsort ( char * str , int strsSize ) { char * sortedStr = malloc ( sizeof ( char ) * ( strsSize + 1 )); // +1 for '\\0' strcpy ( sortedStr , str ); qsort ( sortedStr , strsSize , sizeof ( char ), cmpChar ); return sortedStr ; } int main () { char * str = \"YorkFish\" ; printf ( \">>> before qsort: %s \\n \" , str ); char * sortedStr = testQsort ( str , 8 ); printf ( \">>> after qsort: %s \\n \" , sortedStr ); return 0 ; } \u8fd0\u884c\u7ed3\u679c >>> before qsort: YorkFish >>> after qsort: FYhikors","title":"lesson 6"},{"location":"CChallenge/Summarize/06_12_qsort/#lesson-12","text":"\u6d4b\u8bd5\u4ee3\u7801 #include <stdio.h> #include <stdlib.h> int cmp1 ( const void * a , const void * b ) { // a < b => - // a == b => 0 // a > b => + int va = * ( const int * ) a ; int vb = * ( const int * ) b ; if ( va % 2 == 1 && vb % 2 == 1 ) { // \u90fd\u662f\u5947\u6570 return 0 ; // \u4e0d\u6392 } if ( va % 2 == 1 && vb % 2 == 0 ) { // \u4e00\u5947\u4e00\u5076 return - 1 ; // \u5947\u5728\u524d } if ( va % 2 == 0 && vb % 2 == 1 ) { // \u4e00\u5076\u4e00\u5947 return 1 ; // \u5076\u5728\u540e } if ( va % 2 == 0 && vb % 2 == 0 ) { // \u90fd\u662f\u5076\u6570 return 0 ; // \u4e0d\u6392 } return - 1 ; } int cmp2 ( const void * a , const void * b ) { // a < b => - // a == b => 0 // a > b => + int va = * ( const int * ) a ; int vb = * ( const int * ) b ; if ( va % 2 == 1 && vb % 2 == 1 ) { // \u90fd\u662f\u5947\u6570 return va - vb ; // \u5347\u5e8f } if ( va % 2 == 1 && vb % 2 == 0 ) { // \u4e00\u5947\u4e00\u5076 return - 1 ; // \u5947\u5728\u524d\uff0c\u5076\u5728\u540e } if ( va % 2 == 0 && vb % 2 == 1 ) { // \u4e00\u5076\u4e00\u5947 return 1 ; // \u5076\u5728\u540e\uff0c\u5947\u5728\u524d } if ( va % 2 == 0 && vb % 2 == 0 ) { // \u90fd\u662f\u5076\u6570 return vb - va ; // \u964d\u5e8f } return - 1 ; } int main () { int v [ 10 ] = { 1 , 4 , 5 , 2 , 3 , 8 , 6 , 7 , 9 , 10 }; qsort ( v , 10 , sizeof ( int ), cmp1 ); for ( int i = 0 ; i < 10 ; i ++ ) { printf ( \"%d \" , v [ i ]); } printf ( \" \\n \" ); qsort ( v , 10 , sizeof ( int ), cmp2 ); for ( int i = 0 ; i < 10 ; i ++ ) { printf ( \"%d \" , v [ i ]); } printf ( \" \\n \" ); return 0 ; } \u8fd0\u884c\u7ed3\u679c 1 7 5 3 9 6 4 8 2 10 1 3 5 7 9 10 8 6 4 2 \u5176\u5b83 qsort \u6570\u503c\u8f83\u5c11\u65f6\uff0c\u53ef\u80fd\u662f\u63d2\u5165\u6392\u5e8f\uff1b \u591a\u4e00\u70b9\uff0c\u53ef\u80fd\u662f\u5f52\u5e76\u6392\u5e8f\uff1b \u518d\u591a\u4e00\u70b9\uff0c\u53ef\u80fd\u662f\u5feb\u6392","title":"lesson 12"},{"location":"CChallenge/Summarize/09_f%28void%29/","text":"9. f(void) Link \u6d4b\u8bd5\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 11 12 #include <stdio.h> void f1 () { // \u53ef\u4ee5\u4f20\u53c2 } void f2 ( void ) { } int main () { f1 ( 1 , 2 , 3 ); // \u6709\u4e9b\u7f16\u8bd1\u5668\u4f1a\u6709\u8b66\u544a\uff0c\u4f46\u662f\u53ef\u4ee5\u8fd0\u884c // f2(1, 2, 3); // error: too many arguments to function 'f2' }","title":"09 f(void)"},{"location":"CChallenge/Summarize/09_f%28void%29/#9-fvoid","text":"","title":"9. f(void)"},{"location":"CChallenge/Summarize/09_f%28void%29/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 #include <stdio.h> void f1 () { // \u53ef\u4ee5\u4f20\u53c2 } void f2 ( void ) { } int main () { f1 ( 1 , 2 , 3 ); // \u6709\u4e9b\u7f16\u8bd1\u5668\u4f1a\u6709\u8b66\u544a\uff0c\u4f46\u662f\u53ef\u4ee5\u8fd0\u884c // f2(1, 2, 3); // error: too many arguments to function 'f2' }","title":"\u6d4b\u8bd5\u4ee3\u7801"},{"location":"CChallenge/Summarize/09_string/","text":"9. string Link \u4e09\u79cd\u5b9a\u4e49\u65b9\u5f0f Link char S1 [] = \"ab#c\" ; char S2 [] = { 'a' , 'b' , '#' , '#' , '\\0' }; char * S3 = \"a#c\" ; \u53ef\u4ee5\u628a S1 \u4e0e S2 \u770b\u6210\u201c\u6570\u7ec4\u201d\uff0c\u628a S3 \u770b\u6210\u201c\u5b57\u4e32\u201d \u201c\u6570\u7ec4\u201d\u53ef\u4ee5\u6539\u5c40\u90e8\uff0c\u4e0d\u80fd\u6539\u5168\u90e8 \u201c\u5b57\u4e32\u201d\u53ef\u4ee5\u6539\u5168\u90e8\uff0c\u4e0d\u80fd\u6539\u5c40\u90e8 string mutable: ruby, php string immutable: java, javascript, c#, python, go \u4f18\u7f3a\u70b9 Link 1. S1 S2 \u53ef\u4ee5\u66f4\u6539\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26 Link Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <stdio.h> int main () { char S1 [] = \"ab#c\" ; S1 [ 1 ] = 'Y' ; printf ( \">>> S1 = %s \\n \" , S1 ); char S2 [] = { 'a' , 'b' , '#' , '#' , '\\0' }; S2 [ 1 ] = 'Y' ; printf ( \">>> S2 = %s \\n \" , S2 ); char * S3 = \"a#c\" ; // S3[1] = 'Y'; // X \u672a\u5b9a\u4e49\u884c\u4e3a // printf(\">>> S3 = %s\\n\", S3); return 0 ; } \u8fd0\u884c\u7ed3\u679c york $ a.exe >>> S1 = aY#c >>> S2 = aY## 2. S3 \u53ef\u4ee5\u6574\u4f53\u4fee\u6539 Link Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <stdio.h> int main () { char S1 [] = \"ab#c\" ; // S1 = \"york\"; // \u7f16\u8bd1\u5931\u8d25 printf ( \">>> S1 = %s \\n \" , S1 ); char S2 [] = { 'a' , 'b' , '#' , '#' , '\\0' }; // S2 = \"york\"; // \u7f16\u8bd1\u5931\u8d25 printf ( \">>> S2 = %s \\n \" , S2 ); char * S3 = \"a#c\" ; S3 = \"york\" ; printf ( \">>> S3 = %s \\n \" , S3 ); return 0 ; } \u8fd0\u884c\u7ed3\u679c york $ a.exe >>> S1 = ab#c >>> S2 = ab## >>> S3 = york","title":"09 string"},{"location":"CChallenge/Summarize/09_string/#9-string","text":"","title":"9. string"},{"location":"CChallenge/Summarize/09_string/#_1","text":"char S1 [] = \"ab#c\" ; char S2 [] = { 'a' , 'b' , '#' , '#' , '\\0' }; char * S3 = \"a#c\" ; \u53ef\u4ee5\u628a S1 \u4e0e S2 \u770b\u6210\u201c\u6570\u7ec4\u201d\uff0c\u628a S3 \u770b\u6210\u201c\u5b57\u4e32\u201d \u201c\u6570\u7ec4\u201d\u53ef\u4ee5\u6539\u5c40\u90e8\uff0c\u4e0d\u80fd\u6539\u5168\u90e8 \u201c\u5b57\u4e32\u201d\u53ef\u4ee5\u6539\u5168\u90e8\uff0c\u4e0d\u80fd\u6539\u5c40\u90e8 string mutable: ruby, php string immutable: java, javascript, c#, python, go","title":"\u4e09\u79cd\u5b9a\u4e49\u65b9\u5f0f"},{"location":"CChallenge/Summarize/09_string/#_2","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"CChallenge/Summarize/09_string/#1-s1-s2","text":"Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <stdio.h> int main () { char S1 [] = \"ab#c\" ; S1 [ 1 ] = 'Y' ; printf ( \">>> S1 = %s \\n \" , S1 ); char S2 [] = { 'a' , 'b' , '#' , '#' , '\\0' }; S2 [ 1 ] = 'Y' ; printf ( \">>> S2 = %s \\n \" , S2 ); char * S3 = \"a#c\" ; // S3[1] = 'Y'; // X \u672a\u5b9a\u4e49\u884c\u4e3a // printf(\">>> S3 = %s\\n\", S3); return 0 ; } \u8fd0\u884c\u7ed3\u679c york $ a.exe >>> S1 = aY#c >>> S2 = aY##","title":"1. S1 S2 \u53ef\u4ee5\u66f4\u6539\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26"},{"location":"CChallenge/Summarize/09_string/#2-s3","text":"Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <stdio.h> int main () { char S1 [] = \"ab#c\" ; // S1 = \"york\"; // \u7f16\u8bd1\u5931\u8d25 printf ( \">>> S1 = %s \\n \" , S1 ); char S2 [] = { 'a' , 'b' , '#' , '#' , '\\0' }; // S2 = \"york\"; // \u7f16\u8bd1\u5931\u8d25 printf ( \">>> S2 = %s \\n \" , S2 ); char * S3 = \"a#c\" ; S3 = \"york\" ; printf ( \">>> S3 = %s \\n \" , S3 ); return 0 ; } \u8fd0\u884c\u7ed3\u679c york $ a.exe >>> S1 = ab#c >>> S2 = ab## >>> S3 = york","title":"2. S3 \u53ef\u4ee5\u6574\u4f53\u4fee\u6539"},{"location":"CChallenge/Summarize/10_struct_pointer/","text":"10. struct & pointer Link \u6d4b\u8bd5\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <stdio.h> typedef struct { int bar ; } Foo ; typedef struct { int bar ; } Cat ; typedef struct { Cat * cat ; } Zoo ; int main () { Foo foo ; foo . bar = 10 ; Foo * fooPtr = & foo ; ( * fooPtr ). bar = 10 ; ( * ( & foo )). bar = 10 ; Zoo zoo ; Cat tom ; zoo . cat = & tom ; ( * zoo . cat ). bar = 10 ; Zoo * zooPtr = & zoo ; ( * ( * zooPtr ). cat ). bar = 10 ; // (*zooPtr).cat => zooPtr->cat zooPtr -> cat -> bar = 10 ; // \u53ef\u4ee5\u5c06\u5176\u770b\u6210\u8bed\u6cd5\u7cd6 return 0 ; }","title":"10 struct pointer"},{"location":"CChallenge/Summarize/10_struct_pointer/#10-struct-pointer","text":"","title":"10. struct &amp; pointer"},{"location":"CChallenge/Summarize/10_struct_pointer/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <stdio.h> typedef struct { int bar ; } Foo ; typedef struct { int bar ; } Cat ; typedef struct { Cat * cat ; } Zoo ; int main () { Foo foo ; foo . bar = 10 ; Foo * fooPtr = & foo ; ( * fooPtr ). bar = 10 ; ( * ( & foo )). bar = 10 ; Zoo zoo ; Cat tom ; zoo . cat = & tom ; ( * zoo . cat ). bar = 10 ; Zoo * zooPtr = & zoo ; ( * ( * zooPtr ). cat ). bar = 10 ; // (*zooPtr).cat => zooPtr->cat zooPtr -> cat -> bar = 10 ; // \u53ef\u4ee5\u5c06\u5176\u770b\u6210\u8bed\u6cd5\u7cd6 return 0 ; }","title":"\u6d4b\u8bd5\u4ee3\u7801"},{"location":"CChallenge/Summarize/14_modulus_operation/","text":"14. Modulus Operation Link C \u4e0e Python3 \u7684\u6c42\u4f59\u6570\u7ed3\u679c\u4e0d\u540c C \u662f\u53d6\u4f59 Python \u662f\u53d6\u6a21 C Link gcc 8.1.0 \u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 #include <stdio.h> int main () { printf ( \" 5 \u00f7 -2 = %2d ...... %2d \\n \" , 5 /- 2 , 5 %- 2 ); printf ( \"-5 \u00f7 2 = %2d ...... %2d \\n \" , - 5 / 2 , - 5 % 2 ); printf ( \" 2 \u00f7 -5 = %2d ...... %2d \\n \" , 2 /- 5 , 2 %- 5 ); printf ( \"-2 \u00f7 5 = %2d ...... %2d \\n \" , - 2 / 5 , - 2 % 5 ); return 0 ; } \u8fd0\u884c\u7ed3\u679c 5 \u00f7 -2 = -2 ...... 1 -5 \u00f7 2 = -2 ...... -1 2 \u00f7 -5 = 0 ...... 2 -2 \u00f7 5 = 0 ...... -2 \u89c4\u5f8b \u4ee4 a \u00f7 b = c ...... r \u82e5 a \u4e3a\u6b63\uff0c\u5219 bXc <= a \u82e5 a \u4e3a\u8d1f\uff0c\u5219 bXc >= a bXc \u8d8b\u5411\u4e8e 0 \u7b80\u5355\u5730\u8bf4\uff1a\u4f59\u6570\u7684\u7b26\u53f7\u770b\u88ab\u9664\u6570 Python3 Link Python 3.8.3 \u4ee3\u7801 1 2 3 4 print ( \" 5 \u00f7 -2 = %2d ...... %2d \" % ( 5 //- 2 , 5 %- 2 )) print ( \"-5 \u00f7 2 = %2d ...... %2d \" % ( - 5 // 2 , - 5 % 2 )) print ( \" 2 \u00f7 -5 = %2d ...... %2d \" % ( 2 //- 5 , 2 %- 5 )) print ( \"-2 \u00f7 5 = %2d ...... %2d \" % ( - 2 // 5 , - 2 % 5 )) \u8fd0\u884c\u7ed3\u679c 5 \u00f7 -2 = -3 ...... -1 -5 \u00f7 2 = -3 ...... 1 2 \u00f7 -5 = -1 ...... -3 -2 \u00f7 5 = -1 ...... 3 \u89c4\u5f8b \u4ee4 a \u00f7 b = c ...... r \u82e5 a \u4e3a\u6b63\uff0c\u5219 bXc >= a \u82e5 a \u4e3a\u8d1f\uff0c\u5219 bXc <= a bXc \u8fdc\u79bb\u4e8e 0 \u7b80\u5355\u5730\u8bf4\uff1a\u4f59\u6570\u7684\u7b26\u53f7\u770b\u9664\u6570","title":"14 modulus operation"},{"location":"CChallenge/Summarize/14_modulus_operation/#14-modulus-operation","text":"C \u4e0e Python3 \u7684\u6c42\u4f59\u6570\u7ed3\u679c\u4e0d\u540c C \u662f\u53d6\u4f59 Python \u662f\u53d6\u6a21","title":"14. Modulus Operation"},{"location":"CChallenge/Summarize/14_modulus_operation/#c","text":"gcc 8.1.0 \u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 #include <stdio.h> int main () { printf ( \" 5 \u00f7 -2 = %2d ...... %2d \\n \" , 5 /- 2 , 5 %- 2 ); printf ( \"-5 \u00f7 2 = %2d ...... %2d \\n \" , - 5 / 2 , - 5 % 2 ); printf ( \" 2 \u00f7 -5 = %2d ...... %2d \\n \" , 2 /- 5 , 2 %- 5 ); printf ( \"-2 \u00f7 5 = %2d ...... %2d \\n \" , - 2 / 5 , - 2 % 5 ); return 0 ; } \u8fd0\u884c\u7ed3\u679c 5 \u00f7 -2 = -2 ...... 1 -5 \u00f7 2 = -2 ...... -1 2 \u00f7 -5 = 0 ...... 2 -2 \u00f7 5 = 0 ...... -2 \u89c4\u5f8b \u4ee4 a \u00f7 b = c ...... r \u82e5 a \u4e3a\u6b63\uff0c\u5219 bXc <= a \u82e5 a \u4e3a\u8d1f\uff0c\u5219 bXc >= a bXc \u8d8b\u5411\u4e8e 0 \u7b80\u5355\u5730\u8bf4\uff1a\u4f59\u6570\u7684\u7b26\u53f7\u770b\u88ab\u9664\u6570","title":"C"},{"location":"CChallenge/Summarize/14_modulus_operation/#python3","text":"Python 3.8.3 \u4ee3\u7801 1 2 3 4 print ( \" 5 \u00f7 -2 = %2d ...... %2d \" % ( 5 //- 2 , 5 %- 2 )) print ( \"-5 \u00f7 2 = %2d ...... %2d \" % ( - 5 // 2 , - 5 % 2 )) print ( \" 2 \u00f7 -5 = %2d ...... %2d \" % ( 2 //- 5 , 2 %- 5 )) print ( \"-2 \u00f7 5 = %2d ...... %2d \" % ( - 2 // 5 , - 2 % 5 )) \u8fd0\u884c\u7ed3\u679c 5 \u00f7 -2 = -3 ...... -1 -5 \u00f7 2 = -3 ...... 1 2 \u00f7 -5 = -1 ...... -3 -2 \u00f7 5 = -1 ...... 3 \u89c4\u5f8b \u4ee4 a \u00f7 b = c ...... r \u82e5 a \u4e3a\u6b63\uff0c\u5219 bXc >= a \u82e5 a \u4e3a\u8d1f\uff0c\u5219 bXc <= a bXc \u8fdc\u79bb\u4e8e 0 \u7b80\u5355\u5730\u8bf4\uff1a\u4f59\u6570\u7684\u7b26\u53f7\u770b\u9664\u6570","title":"Python3"},{"location":"CChallenge/Summarize/19_dichotomy/","text":"19. dichotomy Link \u4e8c\u5206\u5b9e\u9645\u505a\u8d77\u6765\u5927\u540c\u5c0f\u5f02\uff0c\u800c\u4e14\u201c\u5f02\u201d\u4e5f\u6709\u4e9b\u89c4\u5f8b \u5176\u4e2d\u4e00\u79cd\u601d\u8def Link 1 2 3 4 5 6 7 8 9 10 11 12 left = index_left right = index_right mid = left + ( right - left ) // 2 # \u5076\u6570\u4e2a\uff0c\u53d6\u4e2d\u95f4\u9760\u5de6 while left < right : # ... if Condition1 : left = mid + 1 if Condition2 : right = mid return left \u5176\u4ed6\u601d\u8def Link while left <= right: # ... left = mid + 1 # ... right = mid - 1 while left+1 < right: # ... left = mid + 1 # ... right = mid - 1","title":"19 dichotomy"},{"location":"CChallenge/Summarize/19_dichotomy/#19-dichotomy","text":"\u4e8c\u5206\u5b9e\u9645\u505a\u8d77\u6765\u5927\u540c\u5c0f\u5f02\uff0c\u800c\u4e14\u201c\u5f02\u201d\u4e5f\u6709\u4e9b\u89c4\u5f8b","title":"19. dichotomy"},{"location":"CChallenge/Summarize/19_dichotomy/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 left = index_left right = index_right mid = left + ( right - left ) // 2 # \u5076\u6570\u4e2a\uff0c\u53d6\u4e2d\u95f4\u9760\u5de6 while left < right : # ... if Condition1 : left = mid + 1 if Condition2 : right = mid return left","title":"\u5176\u4e2d\u4e00\u79cd\u601d\u8def"},{"location":"CChallenge/Summarize/19_dichotomy/#_2","text":"while left <= right: # ... left = mid + 1 # ... right = mid - 1 while left+1 < right: # ... left = mid + 1 # ... right = mid - 1","title":"\u5176\u4ed6\u601d\u8def"},{"location":"CodingInterviews/preview/","text":"1. \u8bf4\u660e Link \u6211\u5728 NowCoder \u505a\u9898\u65f6\u7528\u7684\u662f Python2.7.3 \u5171 67 \u9898 \u4e2a\u522b\u9898\u76ee\u652f\u6301 Python3.9 2. \u9898\u76ee\u5217\u8868 Link NowCoder Link \u9898\u53f7\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u5206\u7c7b\u4f1a\u53d8\u52a8 \u9898\u53f7 \u9898\u76ee \u77e5\u8bc6\u70b9 \u96be\u5ea6 JZ01 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u6570\u7ec4 \u67e5\u627e \u8f83\u96be JZ02 \u66ff\u6362\u7a7a\u683c \u5b57\u7b26\u4e32 \u8f83\u96be JZ03 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u94fe\u8868 \u8f83\u96be JZ04 \u91cd\u5efa\u4e8c\u53c9\u6811 \u6811 dfs \u6570\u7ec4 \u4e2d\u7b49 JZ05 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u6808 \u7b80\u5355 JZ06 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \u4e8c\u5206 \u7b80\u5355 JZ07 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u6570\u7ec4 \u4e2d\u7b49 JZ08 \u8df3\u53f0\u9636 \u9012\u5f52 \u4e2d\u7b49 JZ09 \u53d8\u6001\u8df3\u53f0\u9636 \u8d2a\u5fc3 \u7b80\u5355 JZ10 \u77e9\u5f62\u8986\u76d6 \u9012\u5f52 \u4e2d\u7b49 JZ11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 \u6570\u5b66 \u4e2d\u7b49 JZ12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u6570\u5b66 \u4e2d\u7b49 JZ13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u6570\u7ec4 \u8f83\u96be JZ14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 \u94fe\u8868 \u53cc\u6307\u9488 \u8f83\u96be JZ15 \u53cd\u8f6c\u94fe\u8868 \u94fe\u8868 \u4e2d\u7b49 JZ16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u5206\u6cbb \u4e2d\u7b49 JZ17 \u6811\u7684\u5b50\u7ed3\u6784 \u6811 \u8f83\u96be JZ18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u6811 \u7b80\u5355 JZ19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u6570\u7ec4 \u8f83\u96be JZ20 \u5305\u542b min \u51fd\u6570\u7684\u6808 \u6808 \u8f83\u96be JZ21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u6808 \u4e2d\u7b49 JZ22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u961f\u5217 \u6811 \u56f0\u96be JZ23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u6808\u6811 \u8f83\u96be JZ24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u6811 \u8f83\u96be JZ25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u94fe\u8868 \u8f83\u96be JZ26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u5206\u6cbb \u4e2d\u7b49 JZ27 \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u5b57\u7b26\u4e32 \u52a8\u6001\u89c4\u5212 \u8f83\u96be JZ28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u4f4d\u8fd0\u7b97 \u5206\u6cbb \u4e2d\u7b49 JZ29 \u6700\u5c0f\u7684 K \u4e2a\u6570 \u6570\u7ec4 \u9ad8\u7ea7\u7b97\u6cd5 \u8f83\u96be JZ30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5206\u6cbb \u52a8\u6001\u89c4\u5212 \u4e2d\u7b49 JZ31 \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09 \u67e5\u627e \u4e2d\u7b49 JZ32 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u6570\u7ec4 \u8f83\u96be JZ33 \u4e11\u6570 \u6570\u5b66 \u4e8c\u5206 \u8f83\u96be JZ34 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4f4d\u7f6e \u5b57\u7b26\u4e32 \u8f83\u96be JZ35 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u6570\u7ec4 \u56f0\u96be JZ36 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u94fe\u8868 \u4e2d\u7b49 JZ37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u6570\u7ec4 \u4e8c\u5206 \u4e2d\u7b49 JZ38 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u6811 \u7b80\u5355 JZ39 \u5e73\u8861\u4e8c\u53c9\u6811 \u6811 dfs \u4e2d\u7b49 JZ40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u4f4d\u8fd0\u7b97 \u54c8\u5e0c \u4e2d\u7b49 JZ41 \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217(41.2) \u7a77\u4e3e \u4e2d\u7b49 JZ42 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57(41.1) \u53cc\u6307\u9488 \u6570\u7ec4 \u4e2d\u7b49 JZ43 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32(42.2) \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ44 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217(42.1) \u5b57\u7b26\u4e32 \u8f83\u96be JZ45 \u6251\u514b\u724c\u987a\u5b50 \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ46 \u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09 \u94fe\u8868 \u4e2d\u7b49 JZ47 \u6c42 1+2+3+...+n \u6570\u5b66 \u4e2d\u7b49 JZ48 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u6570\u5b66 \u7b80\u5355 JZ49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \u5b57\u7b26\u4e32 \u6570\u5b66 \u8f83\u96be JZ50 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u6570\u7ec4 \u4e2d\u7b49 JZ51 \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \u6570\u7ec4 \u7b80\u5355 JZ52 \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u5b57\u7b26\u4e32 \u8f83\u96be JZ53 \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ54 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26 \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ55 \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \u94fe\u8868 \u4e2d\u7b49 JZ56 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9 \u94fe\u8868 \u8f83\u96be JZ57 \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \u6811 \u4e2d\u7b49 JZ58 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u6811 \u56f0\u96be JZ59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 \u6811 \u6808 \u8f83\u96be JZ60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c \u6811 bfs \u4e2d\u7b49 JZ61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u961f\u5217 \u6811 \u8f83\u96be JZ62 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u4e2a\u7ed3\u70b9 \u6811 \u8f83\u96be JZ63 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u5806\u6392\u5e8f \u4e2d\u7b49 JZ64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u5806 \u53cc\u6307\u9488 \u8f83\u96be JZ65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84 dfs \u56de\u6eaf \u8f83\u96be JZ66 \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \u6570\u7ec4 \u8f83\u96be JZ67 \u526a\u7ef3\u5b50 \u6570\u7ec4 \u8d2a\u5fc3 \u9ad8\u7ea7\u7b97\u6cd5 \u4e2d\u7b49 \u8865\u7801\u53cd\u7801\u539f\u7801 Link 11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 \u67e5\u627e Link 01 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e 31 \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09 \u9012\u5f52 Link 08 \u8df3\u53f0\u9636 10 \u77e9\u5f62\u8986\u76d6 \u5806 Link 64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u961f\u5217 Link 22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u5806\u6392\u5e8f Link 63 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u4e8c\u5206 Link 06 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 33 \u4e11\u6570 37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u5206\u6cbb Link 16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u9ad8\u7ea7\u7b97\u6cd5 Link 29 \u6700\u5c0f\u7684 k \u4e2a\u6570 67 \u526a\u7ef3\u5b50 \u54c8\u5e0c Link 40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u56de\u6eaf Link 65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u8fdb\u5236\u8f6c\u5316 Link 11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 \u94fe\u8868 Link 03 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 15 \u7ffb\u8f6c\u94fe\u8868 25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 36 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 46 \u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09 55 \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 56 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9 \u7a77\u4e3e Link 41 \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u6811 Link 04 \u91cd\u5efa\u4e8c\u53c9\u6811 17 \u6811\u7684\u5b50\u7ed3\u6784 18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf 22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u7eed\u904d\u5386\u5e8f\u5217 24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 38 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 39 \u5e73\u8861\u4e8c\u53c9\u6811 57 \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 58 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c 61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 62 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u4e2a\u7ed3\u70b9 \u6570\u5b66 Link 11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 33 \u4e11\u6570 35 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 47 \u6c42 1+2+3+...+n 48 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \u6570\u7ec4 Link 01 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e 04 \u91cd\u5efa\u4e8c\u53c9\u6811 07 \u6590\u6ce2\u90a3\u5951\u6570\u5217 13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 29 \u6700\u5c0f\u7684 k \u4e2a\u6570 32 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 42 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 50 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 51 \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 66 \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 67 \u526a\u7ef3\u5b50 \u53cc\u6307\u9488 Link 14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 42 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u8d2a\u5fc3 Link 09 \u53d8\u6001\u8df3\u53f0\u9636 67 \u526a\u7ef3\u5b50 \u4f4d\u8fd0\u7b97 Link 28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u6808 Link 05 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 20 \u5305\u542b min \u51fd\u6570\u7684\u6808 21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u7eed\u904d\u5386\u5e8f\u5217 59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 \u5b57\u7b26\u4e32 Link 02 \u66ff\u6362\u7a7a\u683c 27 \u5b57\u7b26\u4e32\u7684\u6392\u5217 34 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4f4d\u7f6e 43 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 44 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217 45 \u6251\u514b\u724c\u987a\u5b50 49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 52 \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d 53 \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 54 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26 bfs Link 60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c dfs Link 04 \u91cd\u5efa\u4e8c\u53c9\u6811 39 \u5e73\u8861\u4e8c\u53c9\u6811 65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84 dp Link 27 \u5b57\u7b26\u4e32\u7684\u6392\u5217 30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5bf9\u6bd4\u7b2c\u4e8c\u7248 Link \u51cf\u5c11\u4e86\u5982\u4e0b\u9898\u76ee\uff08\u6309\u4e66\u4e2d\u9898\u53f7\uff09 01: \u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570 02: \u5b9e\u73b0 Singleton \u6a21\u5f0f 17: \u6253\u5370 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570 18: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 44: \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 46: \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 47: \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c 48: \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 59: \u961f\u5217\u7684\u6700\u5927\u503c 60: n \u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 63: \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 68: \u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148","title":"preview"},{"location":"CodingInterviews/preview/#1","text":"\u6211\u5728 NowCoder \u505a\u9898\u65f6\u7528\u7684\u662f Python2.7.3 \u5171 67 \u9898 \u4e2a\u522b\u9898\u76ee\u652f\u6301 Python3.9","title":"1. \u8bf4\u660e"},{"location":"CodingInterviews/preview/#2","text":"","title":"2. \u9898\u76ee\u5217\u8868"},{"location":"CodingInterviews/preview/#nowcoder","text":"\u9898\u53f7\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u5206\u7c7b\u4f1a\u53d8\u52a8 \u9898\u53f7 \u9898\u76ee \u77e5\u8bc6\u70b9 \u96be\u5ea6 JZ01 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u6570\u7ec4 \u67e5\u627e \u8f83\u96be JZ02 \u66ff\u6362\u7a7a\u683c \u5b57\u7b26\u4e32 \u8f83\u96be JZ03 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u94fe\u8868 \u8f83\u96be JZ04 \u91cd\u5efa\u4e8c\u53c9\u6811 \u6811 dfs \u6570\u7ec4 \u4e2d\u7b49 JZ05 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u6808 \u7b80\u5355 JZ06 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \u4e8c\u5206 \u7b80\u5355 JZ07 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u6570\u7ec4 \u4e2d\u7b49 JZ08 \u8df3\u53f0\u9636 \u9012\u5f52 \u4e2d\u7b49 JZ09 \u53d8\u6001\u8df3\u53f0\u9636 \u8d2a\u5fc3 \u7b80\u5355 JZ10 \u77e9\u5f62\u8986\u76d6 \u9012\u5f52 \u4e2d\u7b49 JZ11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 \u6570\u5b66 \u4e2d\u7b49 JZ12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u6570\u5b66 \u4e2d\u7b49 JZ13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u6570\u7ec4 \u8f83\u96be JZ14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 \u94fe\u8868 \u53cc\u6307\u9488 \u8f83\u96be JZ15 \u53cd\u8f6c\u94fe\u8868 \u94fe\u8868 \u4e2d\u7b49 JZ16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u5206\u6cbb \u4e2d\u7b49 JZ17 \u6811\u7684\u5b50\u7ed3\u6784 \u6811 \u8f83\u96be JZ18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u6811 \u7b80\u5355 JZ19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u6570\u7ec4 \u8f83\u96be JZ20 \u5305\u542b min \u51fd\u6570\u7684\u6808 \u6808 \u8f83\u96be JZ21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u6808 \u4e2d\u7b49 JZ22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u961f\u5217 \u6811 \u56f0\u96be JZ23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u6808\u6811 \u8f83\u96be JZ24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u6811 \u8f83\u96be JZ25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u94fe\u8868 \u8f83\u96be JZ26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u5206\u6cbb \u4e2d\u7b49 JZ27 \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u5b57\u7b26\u4e32 \u52a8\u6001\u89c4\u5212 \u8f83\u96be JZ28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u4f4d\u8fd0\u7b97 \u5206\u6cbb \u4e2d\u7b49 JZ29 \u6700\u5c0f\u7684 K \u4e2a\u6570 \u6570\u7ec4 \u9ad8\u7ea7\u7b97\u6cd5 \u8f83\u96be JZ30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5206\u6cbb \u52a8\u6001\u89c4\u5212 \u4e2d\u7b49 JZ31 \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09 \u67e5\u627e \u4e2d\u7b49 JZ32 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u6570\u7ec4 \u8f83\u96be JZ33 \u4e11\u6570 \u6570\u5b66 \u4e8c\u5206 \u8f83\u96be JZ34 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4f4d\u7f6e \u5b57\u7b26\u4e32 \u8f83\u96be JZ35 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u6570\u7ec4 \u56f0\u96be JZ36 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u94fe\u8868 \u4e2d\u7b49 JZ37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u6570\u7ec4 \u4e8c\u5206 \u4e2d\u7b49 JZ38 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u6811 \u7b80\u5355 JZ39 \u5e73\u8861\u4e8c\u53c9\u6811 \u6811 dfs \u4e2d\u7b49 JZ40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u4f4d\u8fd0\u7b97 \u54c8\u5e0c \u4e2d\u7b49 JZ41 \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217(41.2) \u7a77\u4e3e \u4e2d\u7b49 JZ42 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57(41.1) \u53cc\u6307\u9488 \u6570\u7ec4 \u4e2d\u7b49 JZ43 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32(42.2) \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ44 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217(42.1) \u5b57\u7b26\u4e32 \u8f83\u96be JZ45 \u6251\u514b\u724c\u987a\u5b50 \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ46 \u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09 \u94fe\u8868 \u4e2d\u7b49 JZ47 \u6c42 1+2+3+...+n \u6570\u5b66 \u4e2d\u7b49 JZ48 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u6570\u5b66 \u7b80\u5355 JZ49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \u5b57\u7b26\u4e32 \u6570\u5b66 \u8f83\u96be JZ50 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u6570\u7ec4 \u4e2d\u7b49 JZ51 \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \u6570\u7ec4 \u7b80\u5355 JZ52 \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u5b57\u7b26\u4e32 \u8f83\u96be JZ53 \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ54 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26 \u5b57\u7b26\u4e32 \u4e2d\u7b49 JZ55 \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \u94fe\u8868 \u4e2d\u7b49 JZ56 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9 \u94fe\u8868 \u8f83\u96be JZ57 \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \u6811 \u4e2d\u7b49 JZ58 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u6811 \u56f0\u96be JZ59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 \u6811 \u6808 \u8f83\u96be JZ60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c \u6811 bfs \u4e2d\u7b49 JZ61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u961f\u5217 \u6811 \u8f83\u96be JZ62 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u4e2a\u7ed3\u70b9 \u6811 \u8f83\u96be JZ63 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u5806\u6392\u5e8f \u4e2d\u7b49 JZ64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u5806 \u53cc\u6307\u9488 \u8f83\u96be JZ65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84 dfs \u56de\u6eaf \u8f83\u96be JZ66 \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \u6570\u7ec4 \u8f83\u96be JZ67 \u526a\u7ef3\u5b50 \u6570\u7ec4 \u8d2a\u5fc3 \u9ad8\u7ea7\u7b97\u6cd5 \u4e2d\u7b49","title":"NowCoder"},{"location":"CodingInterviews/preview/#_1","text":"11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570","title":"\u8865\u7801\u53cd\u7801\u539f\u7801"},{"location":"CodingInterviews/preview/#_2","text":"01 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e 31 \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09","title":"\u67e5\u627e"},{"location":"CodingInterviews/preview/#_3","text":"08 \u8df3\u53f0\u9636 10 \u77e9\u5f62\u8986\u76d6","title":"\u9012\u5f52"},{"location":"CodingInterviews/preview/#_4","text":"64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c","title":"\u5806"},{"location":"CodingInterviews/preview/#_5","text":"22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811","title":"\u961f\u5217"},{"location":"CodingInterviews/preview/#_6","text":"63 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570","title":"\u5806\u6392\u5e8f"},{"location":"CodingInterviews/preview/#_7","text":"06 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 33 \u4e11\u6570 37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570","title":"\u4e8c\u5206"},{"location":"CodingInterviews/preview/#_8","text":"16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c","title":"\u5206\u6cbb"},{"location":"CodingInterviews/preview/#_9","text":"29 \u6700\u5c0f\u7684 k \u4e2a\u6570 67 \u526a\u7ef3\u5b50","title":"\u9ad8\u7ea7\u7b97\u6cd5"},{"location":"CodingInterviews/preview/#_10","text":"40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","title":"\u54c8\u5e0c"},{"location":"CodingInterviews/preview/#_11","text":"65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84","title":"\u56de\u6eaf"},{"location":"CodingInterviews/preview/#_12","text":"11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570","title":"\u8fdb\u5236\u8f6c\u5316"},{"location":"CodingInterviews/preview/#_13","text":"03 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 15 \u7ffb\u8f6c\u94fe\u8868 25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 36 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 46 \u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09 55 \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 56 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9","title":"\u94fe\u8868"},{"location":"CodingInterviews/preview/#_14","text":"41 \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217","title":"\u7a77\u4e3e"},{"location":"CodingInterviews/preview/#_15","text":"04 \u91cd\u5efa\u4e8c\u53c9\u6811 17 \u6811\u7684\u5b50\u7ed3\u6784 18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf 22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u7eed\u904d\u5386\u5e8f\u5217 24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 38 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 39 \u5e73\u8861\u4e8c\u53c9\u6811 57 \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 58 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c 61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 62 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u4e2a\u7ed3\u70b9","title":"\u6811"},{"location":"CodingInterviews/preview/#_16","text":"11 \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 33 \u4e11\u6570 35 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 47 \u6c42 1+2+3+...+n 48 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570","title":"\u6570\u5b66"},{"location":"CodingInterviews/preview/#_17","text":"01 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e 04 \u91cd\u5efa\u4e8c\u53c9\u6811 07 \u6590\u6ce2\u90a3\u5951\u6570\u5217 13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 29 \u6700\u5c0f\u7684 k \u4e2a\u6570 32 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 42 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 50 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 51 \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 66 \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 67 \u526a\u7ef3\u5b50","title":"\u6570\u7ec4"},{"location":"CodingInterviews/preview/#_18","text":"14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 42 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c","title":"\u53cc\u6307\u9488"},{"location":"CodingInterviews/preview/#_19","text":"09 \u53d8\u6001\u8df3\u53f0\u9636 67 \u526a\u7ef3\u5b50","title":"\u8d2a\u5fc3"},{"location":"CodingInterviews/preview/#_20","text":"28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","title":"\u4f4d\u8fd0\u7b97"},{"location":"CodingInterviews/preview/#_21","text":"05 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 20 \u5305\u542b min \u51fd\u6570\u7684\u6808 21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u7eed\u904d\u5386\u5e8f\u5217 59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811","title":"\u6808"},{"location":"CodingInterviews/preview/#_22","text":"02 \u66ff\u6362\u7a7a\u683c 27 \u5b57\u7b26\u4e32\u7684\u6392\u5217 34 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4f4d\u7f6e 43 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 44 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217 45 \u6251\u514b\u724c\u987a\u5b50 49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 52 \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d 53 \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 54 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26","title":"\u5b57\u7b26\u4e32"},{"location":"CodingInterviews/preview/#bfs","text":"60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c","title":"bfs"},{"location":"CodingInterviews/preview/#dfs","text":"04 \u91cd\u5efa\u4e8c\u53c9\u6811 39 \u5e73\u8861\u4e8c\u53c9\u6811 65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84","title":"dfs"},{"location":"CodingInterviews/preview/#dp","text":"27 \u5b57\u7b26\u4e32\u7684\u6392\u5217 30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c","title":"dp"},{"location":"CodingInterviews/preview/#_23","text":"\u51cf\u5c11\u4e86\u5982\u4e0b\u9898\u76ee\uff08\u6309\u4e66\u4e2d\u9898\u53f7\uff09 01: \u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570 02: \u5b9e\u73b0 Singleton \u6a21\u5f0f 17: \u6253\u5370 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570 18: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 44: \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57 46: \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 47: \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c 48: \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 59: \u961f\u5217\u7684\u6700\u5927\u503c 60: n \u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 63: \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 68: \u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148","title":"\u5bf9\u6bd4\u7b2c\u4e8c\u7248"},{"location":"CodingInterviews/Python/Difference/11_number_of_one/","text":"11. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 Link \u5f02 \u5728\u6570\u5b57\u4e2d\u4f7f\u7528\u4e0b\u5212\u7ebf Link Python2 >>> 1000_0000 SyntaxError : invalid syntax Python3 >>> 1000_0000 10000000 >>> 0xffff_ffff 4294967295 >>>","title":"11 number of one"},{"location":"CodingInterviews/Python/Difference/11_number_of_one/#11-1","text":"","title":"11. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570"},{"location":"CodingInterviews/Python/Difference/11_number_of_one/#_1","text":"Python2 >>> 1000_0000 SyntaxError : invalid syntax Python3 >>> 1000_0000 10000000 >>> 0xffff_ffff 4294967295 >>>","title":"\u5f02 \u5728\u6570\u5b57\u4e2d\u4f7f\u7528\u4e0b\u5212\u7ebf"},{"location":"CodingInterviews/Python/Difference/19_print_matrix_clockwise/","text":"19. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 Link \u5f02 zip \u8fd4\u56de\u7684\u5bf9\u8c61 Link Python2 >>> zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) [( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 )] >>> Python3 >>> zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) < zip object at 0x000001CB77961300 > >>> >>> list ( zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ])) [( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 )] >>>","title":"19 print matrix clockwise"},{"location":"CodingInterviews/Python/Difference/19_print_matrix_clockwise/#19","text":"","title":"19. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"CodingInterviews/Python/Difference/19_print_matrix_clockwise/#zip","text":"Python2 >>> zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) [( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 )] >>> Python3 >>> zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) < zip object at 0x000001CB77961300 > >>> >>> list ( zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ])) [( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 )] >>>","title":"\u5f02 zip \u8fd4\u56de\u7684\u5bf9\u8c61"},{"location":"CodingInterviews/Python/Difference/32_print_min_num/","text":"32. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 Link \u5f02 sort-cmp Link Python2 Link \u4f8b\u4e00 Link nums = [ 3 , 32 , 321 ] nums = map ( str , nums ) print nums print cmp ( 1 , 2 ) nums . sort ( cmp = lambda x , y : cmp ( x + y , y + x )) # \u7ec4\u5408\u540e\uff0c\u5b57\u5178\u5e8f\u5c0f\u7684\u5728\u524d print nums >>> ['3', '32', '321'] -1 ['321', '32', '3'] \u4f8b\u4e8c Link # \u5347\u5e8f def my_cmp ( a , b ): if a < b : return - 1 # a < b\uff0c\u6392\u5e8f\u540e a \u51fa\u73b0\u5728 b \u4e4b\u524d\uff0c\u8fd4\u56de\u4e00\u4e2a\u5c0f\u4e8e\u96f6\u7684\u503c elif a == b : return 0 else : return 1 nums = [ 3 , 1 , 2 ] nums . sort ( cmp = my_cmp ) print nums >>> [1, 2, 3] Python3 Link Python3 \u6ca1\u6709 cmp()\uff0c\u4e14\u53d6\u6d88\u4e86 sort(), sorted() \u7684 cmp \u53c2\u6570 from functools import cmp_to_key # \u964d\u5e8f def my_cmp ( a , b ): if a < b : return 1 # a < b\uff0c\u6392\u5e8f\u540e a \u51fa\u73b0\u5728 b \u4e4b\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u5927\u4e8e\u96f6\u7684\u503c elif a == b : return 0 else : return - 1 nums = [ 3 , 1 , 2 ] nums . sort ( key = cmp_to_key ( my_cmp )) print ( nums ) >>> [3, 2, 1]","title":"32 print min num"},{"location":"CodingInterviews/Python/Difference/32_print_min_num/#32","text":"","title":"32. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"CodingInterviews/Python/Difference/32_print_min_num/#sort-cmp","text":"","title":"\u5f02 sort-cmp"},{"location":"CodingInterviews/Python/Difference/32_print_min_num/#python2","text":"","title":"Python2"},{"location":"CodingInterviews/Python/Difference/32_print_min_num/#_1","text":"nums = [ 3 , 32 , 321 ] nums = map ( str , nums ) print nums print cmp ( 1 , 2 ) nums . sort ( cmp = lambda x , y : cmp ( x + y , y + x )) # \u7ec4\u5408\u540e\uff0c\u5b57\u5178\u5e8f\u5c0f\u7684\u5728\u524d print nums >>> ['3', '32', '321'] -1 ['321', '32', '3']","title":"\u4f8b\u4e00"},{"location":"CodingInterviews/Python/Difference/32_print_min_num/#_2","text":"# \u5347\u5e8f def my_cmp ( a , b ): if a < b : return - 1 # a < b\uff0c\u6392\u5e8f\u540e a \u51fa\u73b0\u5728 b \u4e4b\u524d\uff0c\u8fd4\u56de\u4e00\u4e2a\u5c0f\u4e8e\u96f6\u7684\u503c elif a == b : return 0 else : return 1 nums = [ 3 , 1 , 2 ] nums . sort ( cmp = my_cmp ) print nums >>> [1, 2, 3]","title":"\u4f8b\u4e8c"},{"location":"CodingInterviews/Python/Difference/32_print_min_num/#python3","text":"Python3 \u6ca1\u6709 cmp()\uff0c\u4e14\u53d6\u6d88\u4e86 sort(), sorted() \u7684 cmp \u53c2\u6570 from functools import cmp_to_key # \u964d\u5e8f def my_cmp ( a , b ): if a < b : return 1 # a < b\uff0c\u6392\u5e8f\u540e a \u51fa\u73b0\u5728 b \u4e4b\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u5927\u4e8e\u96f6\u7684\u503c elif a == b : return 0 else : return - 1 nums = [ 3 , 1 , 2 ] nums . sort ( key = cmp_to_key ( my_cmp )) print ( nums ) >>> [3, 2, 1]","title":"Python3"},{"location":"CodingInterviews/Python/Difference/53_is_numeric/","text":"53. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 Link \u5f02 isdecimal() Link Python2 \u63cf\u8ff0 Link Python2 \u6ca1\u6709\u65b9\u6cd5 str.isdecimal() #!/usr/bin/python2 # AttributeError: 'str' object has no attribute 'isdecimal' Python3 \u63cf\u8ff0 Link isdecimal() \u65b9\u6cd5\u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u53ea\u5305\u542b\u5341\u8fdb\u5236\u5b57\u7b26\u3002 \u8fd9\u79cd\u65b9\u6cd5\u53ea\u5b58\u5728\u4e8e unicode \u5bf9\u8c61\u3002 \u6ce8\u610f \uff1a\u5b9a\u4e49\u4e00\u4e2a\u5341\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u53ea\u9700\u8981\u5728\u5b57\u7b26\u4e32\u524d\u6dfb\u52a0 'u' \u524d\u7f00\u5373\u53ef\u3002 #!/usr/bin/python3 s1 = \"york2020\" s2 = \"2020fish\" s3 = \"12345678\" print ( s1 . isdecimal ()) print ( s2 . isdecimal ()) print ( s3 . isdecimal ()) >>> False False True \u540c isdigit() Link \u68c0\u6d4b\u5b57\u7b26\u4e32\u662f\u5426\u53ea\u7531\u6570\u5b57\u7ec4\u6210\u3002 #!/usr/bin/python s1 = \"123456\" s2 = \"YorkFish\" print ( s1 . isdigit ()) print ( s2 . isdigit ()) >>> True False","title":"53 is numeric"},{"location":"CodingInterviews/Python/Difference/53_is_numeric/#53","text":"","title":"53. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"CodingInterviews/Python/Difference/53_is_numeric/#isdecimal","text":"","title":"\u5f02 isdecimal()"},{"location":"CodingInterviews/Python/Difference/53_is_numeric/#python2","text":"Python2 \u6ca1\u6709\u65b9\u6cd5 str.isdecimal() #!/usr/bin/python2 # AttributeError: 'str' object has no attribute 'isdecimal'","title":"Python2 \u63cf\u8ff0"},{"location":"CodingInterviews/Python/Difference/53_is_numeric/#python3","text":"isdecimal() \u65b9\u6cd5\u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u53ea\u5305\u542b\u5341\u8fdb\u5236\u5b57\u7b26\u3002 \u8fd9\u79cd\u65b9\u6cd5\u53ea\u5b58\u5728\u4e8e unicode \u5bf9\u8c61\u3002 \u6ce8\u610f \uff1a\u5b9a\u4e49\u4e00\u4e2a\u5341\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u53ea\u9700\u8981\u5728\u5b57\u7b26\u4e32\u524d\u6dfb\u52a0 'u' \u524d\u7f00\u5373\u53ef\u3002 #!/usr/bin/python3 s1 = \"york2020\" s2 = \"2020fish\" s3 = \"12345678\" print ( s1 . isdecimal ()) print ( s2 . isdecimal ()) print ( s3 . isdecimal ()) >>> False False True","title":"Python3 \u63cf\u8ff0"},{"location":"CodingInterviews/Python/Difference/53_is_numeric/#isdigit","text":"\u68c0\u6d4b\u5b57\u7b26\u4e32\u662f\u5426\u53ea\u7531\u6570\u5b57\u7ec4\u6210\u3002 #!/usr/bin/python s1 = \"123456\" s2 = \"YorkFish\" print ( s1 . isdigit ()) print ( s2 . isdigit ()) >>> True False","title":"\u540c isdigit()"},{"location":"CodingInterviews/Python/Difference/63_get_median/","text":"63. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 Link \u5f02 \u9664\u6cd5 Link Python2 >>> 3 / 2 1 >>> 3 / 2.0 1.5 >>> 3.0 / 2 1.5 >>> 3 // 2 1 >>> 3 // 2.0 1.0 >>> 3.0 // 2 1.0 >>> from __future__ import division # \u6709\u4e86\u8fd9\u53e5\uff0c2 \u5c31\u4e0e 3 \u4e00\u6837\u4e86 print \"3 / 2 = %s \" % ( 3 / 2 ) print \"3 // 2 = %s \" % ( 3 // 2 ) print \"3 // 2.0 = %s \" % ( 3 // 2.0 ) print \"3.0 // 2 = %s \" % ( 3.0 // 2 ) >>> 3 / 2 = 1.5 3 // 2 = 1 3 // 2.0 = 1.0 3.0 // 2 = 1.0 Python3 >>> 3 / 2 1.5 >>> 3 // 2 1 >>> 3 // 2.0 1.0 >>> 3.0 // 2 1.0 >>> \u5c0f\u7ed3 Link \u7b80\u5355\u5730\u8bf4\uff0cPython2 \u7684 / \u53ea\u6709\u5728\u51fa\u73b0\u6d6e\u70b9\u6570\u65f6\u624d\u751f\u6548","title":"63 get median"},{"location":"CodingInterviews/Python/Difference/63_get_median/#63","text":"","title":"63. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"CodingInterviews/Python/Difference/63_get_median/#_1","text":"Python2 >>> 3 / 2 1 >>> 3 / 2.0 1.5 >>> 3.0 / 2 1.5 >>> 3 // 2 1 >>> 3 // 2.0 1.0 >>> 3.0 // 2 1.0 >>> from __future__ import division # \u6709\u4e86\u8fd9\u53e5\uff0c2 \u5c31\u4e0e 3 \u4e00\u6837\u4e86 print \"3 / 2 = %s \" % ( 3 / 2 ) print \"3 // 2 = %s \" % ( 3 // 2 ) print \"3 // 2.0 = %s \" % ( 3 // 2.0 ) print \"3.0 // 2 = %s \" % ( 3.0 // 2 ) >>> 3 / 2 = 1.5 3 // 2 = 1 3 // 2.0 = 1.0 3.0 // 2 = 1.0 Python3 >>> 3 / 2 1.5 >>> 3 // 2 1 >>> 3 // 2.0 1.0 >>> 3.0 // 2 1.0 >>>","title":"\u5f02 \u9664\u6cd5"},{"location":"CodingInterviews/Python/Difference/63_get_median/#_2","text":"\u7b80\u5355\u5730\u8bf4\uff0cPython2 \u7684 / \u53ea\u6709\u5728\u51fa\u73b0\u6d6e\u70b9\u6570\u65f6\u624d\u751f\u6548","title":"\u5c0f\u7ed3"},{"location":"CodingInterviews/Python/Solutions/01_find_in_2d_array/","text":"1. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e Link \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c \u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002 \u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b Link \u8f93\u5165 7,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]] \u8fd4\u56de\u503c true \u77e5\u8bc6\u70b9 Link \u67e5\u627e \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # array \u4e8c\u7ef4\u5217\u8868 def Find ( self , target , array ): # write code here \u53ef\u884c\u7684\u89e3 Link \u4ece\u53f3\u4e0a\u89d2\u5f80\u5de6\u4e0b\u89d2\u627e 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def Find ( self , target , array ): row = len ( array ) i = 0 j = len ( array [ 0 ]) - 1 while i < row and j >= 0 : if array [ i ][ j ] == target : return True elif array [ i ][ j ] < target : i += 1 else : j -= 1 return False","title":"01 find in 2d array"},{"location":"CodingInterviews/Python/Solutions/01_find_in_2d_array/#1","text":"\u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c \u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002 \u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002","title":"1. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"CodingInterviews/Python/Solutions/01_find_in_2d_array/#_1","text":"\u8f93\u5165 7,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]] \u8fd4\u56de\u503c true","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/01_find_in_2d_array/#_2","text":"\u67e5\u627e \u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/01_find_in_2d_array/#_3","text":"1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # array \u4e8c\u7ef4\u5217\u8868 def Find ( self , target , array ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/01_find_in_2d_array/#_4","text":"\u4ece\u53f3\u4e0a\u89d2\u5f80\u5de6\u4e0b\u89d2\u627e 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def Find ( self , target , array ): row = len ( array ) i = 0 j = len ( array [ 0 ]) - 1 while i < row and j >= 0 : if array [ i ][ j ] == target : return True elif array [ i ][ j ] < target : i += 1 else : j -= 1 return False","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/","text":"2. \u66ff\u6362\u7a7a\u683c Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210 \"%20\"\u3002 \u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3a We Are Happy. \u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3a We%20Are%20Happy\u3002 \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # s \u6e90\u5b57\u7b26\u4e32 def replaceSpace ( self , s ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u4ece\u5934\u904d\u5386\uff0c\u7528\u65b0\u7684\u5b57\u7b26\u4e32\u5b9e\u65f6\u66ff\u6362 1 2 3 4 5 6 7 8 9 class Solution : def replaceSpace ( self , s ): res = '' for c in s : if c == ' ' : res += \"%20\" else : res += c return res \u89e3\u6cd5\u4e8c Link \u601d\u8def\u7528\u201c\u89e3\u6cd5\u4e00\u201d\uff0c\u6539\u7528\u751f\u6210\u5f0f 1 2 3 4 class Solution : def replaceSpace ( self , s ): res = [ c if c != ' ' else \"%20\" for c in s ] return '' . join ( res ) \u89e3\u6cd5\u4e09 Link \u5148\u7528 ' ' \u5206\u5272\uff0c\u518d\u7528 \"%20\" \u7f1d\u5408 1 2 3 class Solution : def replaceSpace ( self , s ): return \"%20\" . join ( s . split ( ' ' )) \u975e\u7b97\u6cd5\u9898\u89e3\u6cd5 Link 1 2 3 class Solution : def replaceSpace ( self , s ): return s . replace ( ' ' , \"%20\" )","title":"02 replace space"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#2","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210 \"%20\"\u3002 \u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3a We Are Happy. \u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3a We%20Are%20Happy\u3002","title":"2. \u66ff\u6362\u7a7a\u683c"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#_1","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#_2","text":"1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # s \u6e90\u5b57\u7b26\u4e32 def replaceSpace ( self , s ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#_4","text":"\u4ece\u5934\u904d\u5386\uff0c\u7528\u65b0\u7684\u5b57\u7b26\u4e32\u5b9e\u65f6\u66ff\u6362 1 2 3 4 5 6 7 8 9 class Solution : def replaceSpace ( self , s ): res = '' for c in s : if c == ' ' : res += \"%20\" else : res += c return res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#_5","text":"\u601d\u8def\u7528\u201c\u89e3\u6cd5\u4e00\u201d\uff0c\u6539\u7528\u751f\u6210\u5f0f 1 2 3 4 class Solution : def replaceSpace ( self , s ): res = [ c if c != ' ' else \"%20\" for c in s ] return '' . join ( res )","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#_6","text":"\u5148\u7528 ' ' \u5206\u5272\uff0c\u518d\u7528 \"%20\" \u7f1d\u5408 1 2 3 class Solution : def replaceSpace ( self , s ): return \"%20\" . join ( s . split ( ' ' ))","title":"\u89e3\u6cd5\u4e09"},{"location":"CodingInterviews/Python/Solutions/02_replace_space/#_7","text":"1 2 3 class Solution : def replaceSpace ( self , s ): return s . replace ( ' ' , \"%20\" )","title":"\u975e\u7b97\u6cd5\u9898\u89e3\u6cd5"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/","text":"3. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2a ArrayList\u3002 \u793a\u4f8b Link \u8f93\u5165 {67,0,24,58} \u8fd4\u56de\u503c [58,24,0,67] \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : # \u8fd4\u56de\u4ece\u5c3e\u90e8\u5230\u5934\u90e8\u7684\u5217\u8868\u503c\u5e8f\u5217\uff0c\u4f8b\u5982[1,2,3] def printListFromTailToHead ( self , listNode ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u4e00\u8fb9\u904d\u5386\u94fe\u8868\uff0c\u4e00\u8fb9\u53d6\u503c\u5b58\u5165\u5217\u8868\uff0c\u6700\u540e\u7ffb\u8f6c\u5217\u8868 1 2 3 4 5 6 7 8 9 10 class Solution : def printListFromTailToHead ( self , listNode ): res = [] p = listNode while p : res . append ( p . val ) # \u82e5\u8fd9\u4e00\u6b65\u7528 insert\uff0c\u5219\u51fa\u4e86\u5faa\u73af\u53ef\u76f4\u63a5\u8fd4\u56de p = p . next res . reverse () # \u82e5\u628a res \u770b\u6210\u6808\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c return res \u89e3\u6cd5\u4e8c Link \u9012\u5f52 1 2 3 4 5 class Solution : def printListFromTailToHead ( self , listNode ): if listNode is None : return [] return self . printListFromTailToHead ( listNode . next ) + [ listNode . val ]","title":"03 print list from tail to head"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/#3","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2a ArrayList\u3002","title":"3. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/#_1","text":"\u8f93\u5165 {67,0,24,58} \u8fd4\u56de\u503c [58,24,0,67]","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/#_2","text":"\u94fe\u8868","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/#_3","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : # \u8fd4\u56de\u4ece\u5c3e\u90e8\u5230\u5934\u90e8\u7684\u5217\u8868\u503c\u5e8f\u5217\uff0c\u4f8b\u5982[1,2,3] def printListFromTailToHead ( self , listNode ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/#_5","text":"\u4e00\u8fb9\u904d\u5386\u94fe\u8868\uff0c\u4e00\u8fb9\u53d6\u503c\u5b58\u5165\u5217\u8868\uff0c\u6700\u540e\u7ffb\u8f6c\u5217\u8868 1 2 3 4 5 6 7 8 9 10 class Solution : def printListFromTailToHead ( self , listNode ): res = [] p = listNode while p : res . append ( p . val ) # \u82e5\u8fd9\u4e00\u6b65\u7528 insert\uff0c\u5219\u51fa\u4e86\u5faa\u73af\u53ef\u76f4\u63a5\u8fd4\u56de p = p . next res . reverse () # \u82e5\u628a res \u770b\u6210\u6808\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c return res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/03_print_list_from_tail_to_head/#_6","text":"\u9012\u5f52 1 2 3 4 5 class Solution : def printListFromTailToHead ( self , listNode ): if listNode is None : return [] return self . printListFromTailToHead ( listNode . next ) + [ listNode . val ]","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/04_reconstruct_binary_tree/","text":"4. \u91cd\u5efa\u4e8c\u53c9\u6811 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\u8f93\u5165 \u524d\u5e8f\u904d\u5386\u5e8f\u5217 {1, 2, 4, 7, 3, 5, 6, 8} \u548c \u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 {4, 7, 2, 1, 5, 3, 8, 6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002 \u793a\u4f8b Link \u8f93\u5165 [1,2,3,4,5,6,7],[3,2,4,1,6,5,7] \u8fd4\u56de\u503c {1,2,5,3,4,6,7} \u77e5\u8bc6\u70b9 Link \u6811 dfs \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u6784\u9020\u7684TreeNode\u6839\u8282\u70b9 def reConstructBinaryTree ( self , pre , tin ): # write code here \u53ef\u884c\u7684\u89e3 Link pre[0] \u662f\u6839\u7ed3\u70b9 \u5728 tin \u4e2d\u627e\u5230\u6839\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u5de6\u8fb9\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u662f\u53f3\u5b50\u6811 \u6839\u636e\u6839\u7ed3\u70b9\u5728 tin \u4e2d\u7684\u7d22\u5f15\uff0c\u5f97\u51fa\u5de6\u53f3\u5b50\u6811\u7684\u957f\u5ea6\uff0c\u4ece\u800c\u5f97\u5230 pre \u5de6\u53f3\u5b50\u6811 \u9012\u5f52\u5730\u5efa\u7acb\u4e8c\u53c9\u6811 1 2 3 4 5 6 7 8 9 10 11 class Solution : def reConstructBinaryTree ( self , pre , tin ): if pre == [] or tin == [] or len ( pre ) != len ( tin ): return None root = TreeNode ( pre [ 0 ]) pos = tin . index ( pre [ 0 ]) root . left = self . reConstructBinaryTree ( pre [ 1 : pos + 1 ], tin [: pos ]) root . right = self . reConstructBinaryTree ( pre [ pos + 1 :], tin [ pos + 1 :]) return root","title":"04 reconstruct binary tree"},{"location":"CodingInterviews/Python/Solutions/04_reconstruct_binary_tree/#4","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\u8f93\u5165 \u524d\u5e8f\u904d\u5386\u5e8f\u5217 {1, 2, 4, 7, 3, 5, 6, 8} \u548c \u4e2d\u5e8f\u904d\u5386\u5e8f\u5217 {4, 7, 2, 1, 5, 3, 8, 6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002","title":"4. \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"CodingInterviews/Python/Solutions/04_reconstruct_binary_tree/#_1","text":"\u8f93\u5165 [1,2,3,4,5,6,7],[3,2,4,1,6,5,7] \u8fd4\u56de\u503c {1,2,5,3,4,6,7}","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/04_reconstruct_binary_tree/#_2","text":"\u6811 dfs \u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/04_reconstruct_binary_tree/#_3","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u6784\u9020\u7684TreeNode\u6839\u8282\u70b9 def reConstructBinaryTree ( self , pre , tin ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/04_reconstruct_binary_tree/#_4","text":"pre[0] \u662f\u6839\u7ed3\u70b9 \u5728 tin \u4e2d\u627e\u5230\u6839\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u5de6\u8fb9\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u662f\u53f3\u5b50\u6811 \u6839\u636e\u6839\u7ed3\u70b9\u5728 tin \u4e2d\u7684\u7d22\u5f15\uff0c\u5f97\u51fa\u5de6\u53f3\u5b50\u6811\u7684\u957f\u5ea6\uff0c\u4ece\u800c\u5f97\u5230 pre \u5de6\u53f3\u5b50\u6811 \u9012\u5f52\u5730\u5efa\u7acb\u4e8c\u53c9\u6811 1 2 3 4 5 6 7 8 9 10 11 class Solution : def reConstructBinaryTree ( self , pre , tin ): if pre == [] or tin == [] or len ( pre ) != len ( tin ): return None root = TreeNode ( pre [ 0 ]) pos = tin . index ( pre [ 0 ]) root . left = self . reConstructBinaryTree ( pre [ 1 : pos + 1 ], tin [: pos ]) root . right = self . reConstructBinaryTree ( pre [ pos + 1 :], tin [ pos + 1 :]) return root","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/05_two_stacks_implement_queue/","text":"5. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 Link \u9898\u76ee\u63cf\u8ff0 \u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684 Push \u548c Pop \u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3a int \u7c7b\u578b\u3002 \u77e5\u8bc6\u70b9 Link \u6808 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 # -*- coding:utf-8 -*- class Solution : def push ( self , node ): # write code here def pop ( self ): # return xx \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u4e00\u4e2a\u6808\u5f53\u961f\u5217\uff0c\u53e6\u4e00\u4e2a\u4f5c\u8f85\u52a9 \u6709\u70b9\u50cf\u201c\u6c49\u8bfa\u5854\u201d\uff0c\u90fd\u662f\u501f\u52a9\u5176\u4ed6\u7684\u201c\u5854\u201d\u5f97\u5230\u6700\u4e0b\u9762\u7684\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def __init__ ( self ): self . stk = [] self . cache = [] def push ( self , node ): self . stk . append ( node ) def pop ( self ): while self . stk : self . cache . append ( self . stk . pop ()) res = None if self . cache != []: res = self . cache . pop () while self . cache : self . stk . append ( self . cache . pop ()) return res \u89e3\u6cd5\u4e8c Link \u4e00\u4e2a\u6808\u8d1f\u8d23\u5165\u961f\uff0c\u53e6\u4e00\u4e2a\u8d1f\u8d23\u51fa\u961f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def __init__ ( self ): self . acceptStack = [] self . outputStack = [] def push ( self , node ): self . acceptStack . append ( node ) def pop ( self ): if self . outputStack == []: while self . acceptStack : self . outputStack . append ( self . acceptStack . pop ()) if self . outputStack != []: return self . outputStack . pop () else : return None","title":"05 two stacks implement queue"},{"location":"CodingInterviews/Python/Solutions/05_two_stacks_implement_queue/#5","text":"\u9898\u76ee\u63cf\u8ff0 \u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684 Push \u548c Pop \u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3a int \u7c7b\u578b\u3002","title":"5. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"CodingInterviews/Python/Solutions/05_two_stacks_implement_queue/#_1","text":"\u6808","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/05_two_stacks_implement_queue/#_2","text":"1 2 3 4 5 6 # -*- coding:utf-8 -*- class Solution : def push ( self , node ): # write code here def pop ( self ): # return xx","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/05_two_stacks_implement_queue/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/05_two_stacks_implement_queue/#_4","text":"\u4e00\u4e2a\u6808\u5f53\u961f\u5217\uff0c\u53e6\u4e00\u4e2a\u4f5c\u8f85\u52a9 \u6709\u70b9\u50cf\u201c\u6c49\u8bfa\u5854\u201d\uff0c\u90fd\u662f\u501f\u52a9\u5176\u4ed6\u7684\u201c\u5854\u201d\u5f97\u5230\u6700\u4e0b\u9762\u7684\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def __init__ ( self ): self . stk = [] self . cache = [] def push ( self , node ): self . stk . append ( node ) def pop ( self ): while self . stk : self . cache . append ( self . stk . pop ()) res = None if self . cache != []: res = self . cache . pop () while self . cache : self . stk . append ( self . cache . pop ()) return res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/05_two_stacks_implement_queue/#_5","text":"\u4e00\u4e2a\u6808\u8d1f\u8d23\u5165\u961f\uff0c\u53e6\u4e00\u4e2a\u8d1f\u8d23\u51fa\u961f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def __init__ ( self ): self . acceptStack = [] self . outputStack = [] def push ( self , node ): self . acceptStack . append ( node ) def pop ( self ): if self . outputStack == []: while self . acceptStack : self . outputStack . append ( self . acceptStack . pop ()) if self . outputStack != []: return self . outputStack . pop () else : return None","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/","text":"6. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 Link \u9898\u76ee\u63cf\u8ff0 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u9012\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 NOTE: \u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e 0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a 0\uff0c\u8bf7\u8fd4\u56de 0\u3002 \u793a\u4f8b Link \u8f93\u5165 {3, 4, 5, 1, 2} \u8fd4\u56de\u503c 1 \u77e5\u8bc6\u70b9 Link \u4e8c\u5206 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def minNumberInRotateArray ( self , rotateArray ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u904d\u5386 1 2 3 4 5 6 7 8 9 class Solution : def minNumberInRotateArray ( self , rotateArray ): if rotateArray == []: return 0 for i in range ( len ( rotateArray ) - 1 ): if rotateArray [ i + 1 ] < rotateArray [ i ]: return rotateArray [ i + 1 ] return rotateArray [ 0 ] \u89e3\u6cd5\u4e8c Link \u4e8c\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def minNumberInRotateArray ( self , rotateArray ): \"\"\" array1 = [4, 5, 1, 2, 3] array2 = [5, 1, 2, 3, 4] array3 = [3, 4, 5, 1, 2] \"\"\" if rotateArray == []: return 0 left = 0 right = len ( rotateArray ) - 1 while left <= right : mid = left + ( right - left ) // 2 if rotateArray [ mid ] < rotateArray [ mid - 1 ]: return rotateArray [ mid ] elif rotateArray [ mid ] < rotateArray [ right ]: right = mid - 1 else : left = mid + 1 return rotateArray [ 0 ] \u975e\u7b97\u6cd5\u9898\u89e3\u6cd5 Link 1 2 3 4 5 class Solution : def minNumberInRotateArray ( self , rotateArray ): if rotateArray == []: return 0 return min ( rotateArray )","title":"06 min num in rotate array"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#6","text":"\u9898\u76ee\u63cf\u8ff0 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u9012\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 NOTE: \u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e 0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a 0\uff0c\u8bf7\u8fd4\u56de 0\u3002","title":"6. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#_1","text":"\u8f93\u5165 {3, 4, 5, 1, 2} \u8fd4\u56de\u503c 1","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#_2","text":"\u4e8c\u5206","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def minNumberInRotateArray ( self , rotateArray ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#_5","text":"\u904d\u5386 1 2 3 4 5 6 7 8 9 class Solution : def minNumberInRotateArray ( self , rotateArray ): if rotateArray == []: return 0 for i in range ( len ( rotateArray ) - 1 ): if rotateArray [ i + 1 ] < rotateArray [ i ]: return rotateArray [ i + 1 ] return rotateArray [ 0 ]","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#_6","text":"\u4e8c\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def minNumberInRotateArray ( self , rotateArray ): \"\"\" array1 = [4, 5, 1, 2, 3] array2 = [5, 1, 2, 3, 4] array3 = [3, 4, 5, 1, 2] \"\"\" if rotateArray == []: return 0 left = 0 right = len ( rotateArray ) - 1 while left <= right : mid = left + ( right - left ) // 2 if rotateArray [ mid ] < rotateArray [ mid - 1 ]: return rotateArray [ mid ] elif rotateArray [ mid ] < rotateArray [ right ]: right = mid - 1 else : left = mid + 1 return rotateArray [ 0 ]","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/06_min_num_in_rotate_array/#_7","text":"1 2 3 4 5 class Solution : def minNumberInRotateArray ( self , rotateArray ): if rotateArray == []: return 0 return min ( rotateArray )","title":"\u975e\u7b97\u6cd5\u9898\u89e3\u6cd5"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/","text":"7. \u6590\u6ce2\u90a3\u5951\u6570\u5217 Link \u9898\u76ee\u63cf\u8ff0 \u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c \u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570 n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c n \u9879\uff08\u4ece 0 \u5f00\u59cb\uff0c\u7b2c 0 \u9879\u4e3a 0\uff0c\u7b2c 1 \u9879\u662f 1\uff09\u3002 n <= 39 \u793a\u4f8b Link \u8f93\u5165 4 \u8fd4\u56de\u503c 3 \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Fibonacci ( self , n ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 class Solution : def Fibonacci ( self , n ): a , b = 0 , 1 for _ in range ( n ): a , b = b , a + b return a \u5176\u4ed6\u89e3\u6cd5 Link dp Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def Fibonacci ( self , n ): memo = [ 0 ] * ( n + 1 ) def fib ( n , memo ): if n == 0 or memo [ n ]: return memo [ n ] if n == 1 or n == 2 : res = 1 else : res = fib ( n - 1 , memo ) + fib ( n - 2 , memo ) memo [ n ] = res return res return fib ( n , memo ) \u6570\u7ec4 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def Fibonacci ( self , n ): if n == 0 : return 0 if n == 1 or n == 2 : return 1 bottom_up = [ 0 ] * ( n + 1 ) bottom_up [ 1 ] = 1 bottom_up [ 2 ] = 1 for i in range ( 3 , n + 1 ): bottom_up [ i ] = bottom_up [ i - 1 ] + bottom_up [ i - 2 ] return bottom_up [ n ]","title":"07 fibonacci"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#7","text":"\u9898\u76ee\u63cf\u8ff0 \u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c \u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570 n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c n \u9879\uff08\u4ece 0 \u5f00\u59cb\uff0c\u7b2c 0 \u9879\u4e3a 0\uff0c\u7b2c 1 \u9879\u662f 1\uff09\u3002 n <= 39","title":"7. \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#_1","text":"\u8f93\u5165 4 \u8fd4\u56de\u503c 3","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#_2","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Fibonacci ( self , n ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#_4","text":"1 2 3 4 5 6 class Solution : def Fibonacci ( self , n ): a , b = 0 , 1 for _ in range ( n ): a , b = b , a + b return a","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#_5","text":"","title":"\u5176\u4ed6\u89e3\u6cd5"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#dp","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def Fibonacci ( self , n ): memo = [ 0 ] * ( n + 1 ) def fib ( n , memo ): if n == 0 or memo [ n ]: return memo [ n ] if n == 1 or n == 2 : res = 1 else : res = fib ( n - 1 , memo ) + fib ( n - 2 , memo ) memo [ n ] = res return res return fib ( n , memo )","title":"dp"},{"location":"CodingInterviews/Python/Solutions/07_fibonacci/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def Fibonacci ( self , n ): if n == 0 : return 0 if n == 1 or n == 2 : return 1 bottom_up = [ 0 ] * ( n + 1 ) bottom_up [ 1 ] = 1 bottom_up [ 2 ] = 1 for i in range ( 3 , n + 1 ): bottom_up [ i ] = bottom_up [ i - 1 ] + bottom_up [ i - 2 ] return bottom_up [ n ]","title":"\u6570\u7ec4"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/","text":"8. \u8df3\u53f0\u9636 Link \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002 \u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002 \u793a\u4f8b Link \u793a\u4f8b1 Link \u8f93\u5165 1 \u8fd4\u56de\u503c 1 \u793a\u4f8b2 Link \u8f93\u5165 4 \u8fd4\u56de\u503c 5 \u77e5\u8bc6\u70b9 Link \u9012\u5f52 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def jumpFloor ( self , number ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89c4\u5f8b\u7b26\u5408\u201c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u201d 1 2 3 4 5 6 7 8 9 10 11 class Solution : def jumpFloor ( self , number ): if number < 1 : return 0 if number == 1 or number == 2 : return number a , b = 1 , 2 for i in range ( 3 , number + 1 ): a , b = b , a + b return b","title":"08 jump floorI"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/#8","text":"\u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002 \u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002","title":"8. \u8df3\u53f0\u9636"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/#_1","text":"","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/#1","text":"\u8f93\u5165 1 \u8fd4\u56de\u503c 1","title":"\u793a\u4f8b1"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/#2","text":"\u8f93\u5165 4 \u8fd4\u56de\u503c 5","title":"\u793a\u4f8b2"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/#_2","text":"\u9012\u5f52","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def jumpFloor ( self , number ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/08_jump_floorI/#_4","text":"\u89c4\u5f8b\u7b26\u5408\u201c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u201d 1 2 3 4 5 6 7 8 9 10 11 class Solution : def jumpFloor ( self , number ): if number < 1 : return 0 if number == 1 or number == 2 : return number a , b = 1 , 2 for i in range ( 3 , number + 1 ): a , b = b , a + b return b","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/","text":"9. \u53d8\u6001\u8df3\u53f0\u9636 Link \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a n \u7ea7\u3002 \u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u793a\u4f8b Link \u8f93\u5165 3 \u8fd4\u56de\u503c 4 \u77e5\u8bc6\u70b9 Link \u8d2a\u5fc3 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def jumpFloorII ( self , number ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u627e\u89c4\u5f8b 1 2 3 class Solution : def jumpFloorII ( self , number ): return pow ( 2 , number - 1 ) \u89e3\u6cd5\u4e8c Link \u5217\u5f0f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def jumpFloorII ( self , number ): \"\"\" f(n) = f(n-1) + f(n-2) + ... + f(2) + f(1), n >1 f(n-1) = f(n-2) + f(n-3) + ... + f(1) => f(n) = f(n-1) + [f(n-2) + ... + f(1)] = 2 * f(n-1) => f(n) = 2^1 * 2*f(n-2) = 2^2 * 2*f(n-3) = 2^(n-2) * 2*f(1) = 2^(n-1) \"\"\" if number < 1 : return 0 res = 1 for _ in range ( number - 1 ): res *= 2 return res","title":"09 jump floorII"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/#9","text":"\u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a n \u7ea7\u3002 \u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002","title":"9. \u53d8\u6001\u8df3\u53f0\u9636"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/#_1","text":"\u8f93\u5165 3 \u8fd4\u56de\u503c 4","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/#_2","text":"\u8d2a\u5fc3","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def jumpFloorII ( self , number ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/#_5","text":"\u627e\u89c4\u5f8b 1 2 3 class Solution : def jumpFloorII ( self , number ): return pow ( 2 , number - 1 )","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/09_jump_floorII/#_6","text":"\u5217\u5f0f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def jumpFloorII ( self , number ): \"\"\" f(n) = f(n-1) + f(n-2) + ... + f(2) + f(1), n >1 f(n-1) = f(n-2) + f(n-3) + ... + f(1) => f(n) = f(n-1) + [f(n-2) + ... + f(1)] = 2 * f(n-1) => f(n) = 2^1 * 2*f(n-2) = 2^2 * 2*f(n-3) = 2^(n-2) * 2*f(1) = 2^(n-1) \"\"\" if number < 1 : return 0 res = 1 for _ in range ( number - 1 ): res *= 2 return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/10_rectangle_cover/","text":"10. \u77e9\u5f62\u8986\u76d6 Link \u9898\u76ee\u63cf\u8ff0 \u6211\u4eec\u53ef\u4ee5\u7528 2*1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002 \u8bf7\u95ee\u7528 n \u4e2a 2*1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2*n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f \u6bd4\u5982 n=3 \u65f6\uff0c2*3 \u7684\u77e9\u5f62\u5757\u6709 3 \u79cd\u8986\u76d6\u65b9\u6cd5\uff1a \u793a\u4f8b Link \u8f93\u5165 4 \u8fd4\u56de\u503c 5 \u77e5\u8bc6\u70b9 Link \u9012\u5f52 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def rectCover ( self , number ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 class Solution : def rectCover ( self , number ): if number == 0 : return 0 a , b = 0 , 1 for _ in range ( number ): a , b = b , a + b return b","title":"10 rectangle cover"},{"location":"CodingInterviews/Python/Solutions/10_rectangle_cover/#10","text":"\u9898\u76ee\u63cf\u8ff0 \u6211\u4eec\u53ef\u4ee5\u7528 2*1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002 \u8bf7\u95ee\u7528 n \u4e2a 2*1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2*n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f \u6bd4\u5982 n=3 \u65f6\uff0c2*3 \u7684\u77e9\u5f62\u5757\u6709 3 \u79cd\u8986\u76d6\u65b9\u6cd5\uff1a","title":"10. \u77e9\u5f62\u8986\u76d6"},{"location":"CodingInterviews/Python/Solutions/10_rectangle_cover/#_1","text":"\u8f93\u5165 4 \u8fd4\u56de\u503c 5","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/10_rectangle_cover/#_2","text":"\u9012\u5f52","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/10_rectangle_cover/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def rectCover ( self , number ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/10_rectangle_cover/#_4","text":"1 2 3 4 5 6 7 8 9 class Solution : def rectCover ( self , number ): if number == 0 : return 0 a , b = 0 , 1 for _ in range ( number ): a , b = b , a + b return b","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/","text":"11. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002 \u793a\u4f8b Link \u8f93\u5165 10 \u8fd4\u56de\u503c 2 \u77e5\u8bc6\u70b9 Link \u8fdb\u5236\u8f6c\u5316 \u8865\u7801\u53cd\u7801\u539f\u7801 \u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def NumberOf1 ( self , n ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link 1 2 3 class Solution : def NumberOf1 ( self , n ): return bin ( n & 0xffffffff ) . count ( '1' ) # n & 2^32 \u89e3\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 class Solution : def NumberOf1 ( self , n ): cnt = 0 mask = 1 for _ in range ( 32 ): if n & mask != 0 : cnt += 1 mask <<= 1 return cnt \u89e3\u6cd5\u4e09 Link 1 2 3 4 5 6 7 8 class Solution : def NumberOf1 ( self , n ): cnt = 0 while n : cnt += 1 n &= n - 1 # \u5c06\u6700\u4f4e\u4f4d\u7684 1 \u7f6e\u96f6 n &= 0xffffffff return cnt \u89e3\u6cd5\u56db Link 1 2 3 4 5 6 7 8 class Solution : def NumberOf1 ( self , n ): cnt = 0 while n : cnt += 1 n -= n & - n # \u5c06\u6700\u4f4e\u4f4d\u7684 1 \u7f6e\u96f6 n &= 0xffffffff return cnt","title":"11 number of one"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#11-1","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002","title":"11. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_1","text":"\u8f93\u5165 10 \u8fd4\u56de\u503c 2","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_2","text":"\u8fdb\u5236\u8f6c\u5316 \u8865\u7801\u53cd\u7801\u539f\u7801 \u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def NumberOf1 ( self , n ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_5","text":"1 2 3 class Solution : def NumberOf1 ( self , n ): return bin ( n & 0xffffffff ) . count ( '1' ) # n & 2^32","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_6","text":"1 2 3 4 5 6 7 8 9 class Solution : def NumberOf1 ( self , n ): cnt = 0 mask = 1 for _ in range ( 32 ): if n & mask != 0 : cnt += 1 mask <<= 1 return cnt","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_7","text":"1 2 3 4 5 6 7 8 class Solution : def NumberOf1 ( self , n ): cnt = 0 while n : cnt += 1 n &= n - 1 # \u5c06\u6700\u4f4e\u4f4d\u7684 1 \u7f6e\u96f6 n &= 0xffffffff return cnt","title":"\u89e3\u6cd5\u4e09"},{"location":"CodingInterviews/Python/Solutions/11_number_of_one/#_8","text":"1 2 3 4 5 6 7 8 class Solution : def NumberOf1 ( self , n ): cnt = 0 while n : cnt += 1 n -= n & - n # \u5c06\u6700\u4f4e\u4f4d\u7684 1 \u7f6e\u96f6 n &= 0xffffffff return cnt","title":"\u89e3\u6cd5\u56db"},{"location":"CodingInterviews/Python/Solutions/12_power/","text":"12. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 Link \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent\u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u4fdd\u8bc1 base \u548c exponent \u4e0d\u540c\u65f6\u4e3a 0\u3002 \u793a\u4f8b Link \u8f93\u5165 2,3 \u8fd4\u56de\u503c 8.00000 \u77e5\u8bc6\u70b9 Link \u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Power ( self , base , exponent ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 class Solution : def Power ( self , base , exponent ): if exponent == 0 : return 1 if base == 0 : return 0 res = 1 for _ in range ( abs ( exponent )): res *= base return 1 / res if exponent < 0 else res \u89e3\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def Power ( self , base , exponent ): if exponent == 0 : return 1 elif base == 0 : return 0 exp = abs ( exponent ) tmp = base res = 1 while exp : if exp & 1 == 1 : res *= tmp exp >>= 1 tmp *= tmp return res if exponent > 0 else 1 / res \u975e\u7b97\u6cd5\u9898\u89e3\u6cd5 Link 1 2 3 class Solution : def Power ( self , base , exponent ): return base ** exponent","title":"12 power"},{"location":"CodingInterviews/Python/Solutions/12_power/#12","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent\u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u4fdd\u8bc1 base \u548c exponent \u4e0d\u540c\u65f6\u4e3a 0\u3002","title":"12. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"CodingInterviews/Python/Solutions/12_power/#_1","text":"\u8f93\u5165 2,3 \u8fd4\u56de\u503c 8.00000","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/12_power/#_2","text":"\u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/12_power/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Power ( self , base , exponent ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/12_power/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/12_power/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 class Solution : def Power ( self , base , exponent ): if exponent == 0 : return 1 if base == 0 : return 0 res = 1 for _ in range ( abs ( exponent )): res *= base return 1 / res if exponent < 0 else res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/12_power/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def Power ( self , base , exponent ): if exponent == 0 : return 1 elif base == 0 : return 0 exp = abs ( exponent ) tmp = base res = 1 while exp : if exp & 1 == 1 : res *= tmp exp >>= 1 tmp *= tmp return res if exponent > 0 else 1 / res","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/12_power/#_7","text":"1 2 3 class Solution : def Power ( self , base , exponent ): return base ** exponent","title":"\u975e\u7b97\u6cd5\u9898\u89e3\u6cd5"},{"location":"CodingInterviews/Python/Solutions/13_reorder_array/","text":"13. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c \u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c \u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def reOrderArray ( self , array ): # write code here \u53ef\u884c\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 class Solution : def reOrderArray ( self , array ): odd = [] even = [] for num in array : if num % 2 == 1 : odd . append ( num ) else : even . append ( num ) return odd + even","title":"13 reorder array"},{"location":"CodingInterviews/Python/Solutions/13_reorder_array/#13","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c \u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c \u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002","title":"13. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"CodingInterviews/Python/Solutions/13_reorder_array/#_1","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/13_reorder_array/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def reOrderArray ( self , array ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/13_reorder_array/#_3","text":"1 2 3 4 5 6 7 8 9 10 class Solution : def reOrderArray ( self , array ): odd = [] even = [] for num in array : if num % 2 == 1 : odd . append ( num ) else : even . append ( num ) return odd + even","title":"\u53ef\u884c\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/14_find_kth_to_tail/","text":"14. \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9\u3002 \u793a\u4f8b Link \u8f93\u5165 1,{1,2,3,4,5} \u8fd4\u56de\u503c {5} \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u53cc\u6307\u9488 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def FindKthToTail ( self , head , k ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def FindKthToTail ( self , head , k ): first = head for _ in range ( k ): if first is None : return None first = first . next second = head while first : first = first . next second = second . next return second","title":"14 find kth to tail"},{"location":"CodingInterviews/Python/Solutions/14_find_kth_to_tail/#14-k","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9\u3002","title":"14. \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u7ed3\u70b9"},{"location":"CodingInterviews/Python/Solutions/14_find_kth_to_tail/#_1","text":"\u8f93\u5165 1,{1,2,3,4,5} \u8fd4\u56de\u503c {5}","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/14_find_kth_to_tail/#_2","text":"\u94fe\u8868 \u53cc\u6307\u9488","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/14_find_kth_to_tail/#_3","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def FindKthToTail ( self , head , k ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/14_find_kth_to_tail/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def FindKthToTail ( self , head , k ): first = head for _ in range ( k ): if first is None : return None first = first . next second = head while first : first = first . next second = second . next return second","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/","text":"15. \u7ffb\u8f6c\u94fe\u8868 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002 \u793a\u4f8b Link \u8f93\u5165 {1, 2, 3} \u8fd4\u56de\u503c {3, 2, 1} \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : # \u8fd4\u56deListNode def ReverseList ( self , pHead ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u4ece\u5934\u904d\u5386\uff0c\u540c\u65f6\u6539\u53d8\u94fe\u8868\u6307\u5411 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def ReverseList ( self , pHead ): if pHead is None or pHead . next is None : return pHead pre = None cur = pHead while cur . next : nxt = cur . next cur . next = pre pre = cur cur = nxt cur . next = pre return cur \u89e3\u6cd5\u4e8c Link \u9012\u5f52 1 2 3 4 5 6 7 8 9 class Solution : def ReverseList ( self , pHead ): if pHead is None or pHead . next is None : return pHead newHead = self . ReverseList ( pHead . next ) pHead . next . next = pHead pHead . next = None return newHead","title":"15 reverse linkedlist"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/#15","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002","title":"15. \u7ffb\u8f6c\u94fe\u8868"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/#_1","text":"\u8f93\u5165 {1, 2, 3} \u8fd4\u56de\u503c {3, 2, 1}","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/#_2","text":"\u94fe\u8868","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/#_3","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : # \u8fd4\u56deListNode def ReverseList ( self , pHead ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/#_5","text":"\u4ece\u5934\u904d\u5386\uff0c\u540c\u65f6\u6539\u53d8\u94fe\u8868\u6307\u5411 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def ReverseList ( self , pHead ): if pHead is None or pHead . next is None : return pHead pre = None cur = pHead while cur . next : nxt = cur . next cur . next = pre pre = cur cur = nxt cur . next = pre return cur","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/15_reverse_linkedlist/#_6","text":"\u9012\u5f52 1 2 3 4 5 6 7 8 9 class Solution : def ReverseList ( self , pHead ): if pHead is None or pHead . next is None : return pHead newHead = self . ReverseList ( pHead . next ) pHead . next . next = pHead pHead . next = None return newHead","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/16_merge_two_sorted_linkedlist/","text":"16. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u793a\u4f8b Link \u8f93\u5165 {1,3,5},{2,4,6} \u8fd4\u56de\u503c {1,2,3,4,5,6} \u77e5\u8bc6\u70b9 Link \u5206\u6cbb \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : # \u8fd4\u56de\u5408\u5e76\u540e\u5217\u8868 def Merge ( self , pHead1 , pHead2 ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : # \u8fd4\u56de\u5408\u5e76\u540e\u5217\u8868 def Merge ( self , pHead1 , pHead2 ): if pHead1 is None : return pHead2 if pHead2 is None : return pHead1 dummy = ListNode ( 0 ) cur = dummy while pHead1 and pHead2 : if pHead1 . val < pHead2 . val : cur . next = pHead1 pHead1 = pHead1 . next else : cur . next = pHead2 pHead2 = pHead2 . next cur = cur . next if pHead1 : cur . next = pHead1 if pHead2 : cur . next = pHead2 return dummy . next","title":"16 merge two sorted linkedlist"},{"location":"CodingInterviews/Python/Solutions/16_merge_two_sorted_linkedlist/#16","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002","title":"16. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868"},{"location":"CodingInterviews/Python/Solutions/16_merge_two_sorted_linkedlist/#_1","text":"\u8f93\u5165 {1,3,5},{2,4,6} \u8fd4\u56de\u503c {1,2,3,4,5,6}","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/16_merge_two_sorted_linkedlist/#_2","text":"\u5206\u6cbb","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/16_merge_two_sorted_linkedlist/#_3","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : # \u8fd4\u56de\u5408\u5e76\u540e\u5217\u8868 def Merge ( self , pHead1 , pHead2 ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/16_merge_two_sorted_linkedlist/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : # \u8fd4\u56de\u5408\u5e76\u540e\u5217\u8868 def Merge ( self , pHead1 , pHead2 ): if pHead1 is None : return pHead2 if pHead2 is None : return pHead1 dummy = ListNode ( 0 ) cur = dummy while pHead1 and pHead2 : if pHead1 . val < pHead2 . val : cur . next = pHead1 pHead1 = pHead1 . next else : cur . next = pHead2 pHead2 = pHead2 . next cur = cur . next if pHead1 : cur . next = pHead1 if pHead2 : cur . next = pHead2 return dummy . next","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/17_has_subtree/","text":"17. \u6811\u7684\u5b50\u7ed3\u6784 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811 A\uff0cB\uff0c\u5224\u65ad B \u662f\u4e0d\u662f A \u7684\u5b50\u7ed3\u6784\u3002\uff08ps: \u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09 \u793a\u4f8b Link \u8f93\u5165 {8,8,#,9,#,2,#,5},{8,9,#,2} \u8fd4\u56de\u503c true \u77e5\u8bc6\u70b9 Link \u4e8c\u53c9\u6811 \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def HasSubtree ( self , pRoot1 , pRoot2 ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def HasSubtree ( self , pRoot1 , pRoot2 ): if pRoot1 is None or pRoot2 is None : return False def isEqual ( r1 , r2 ): if r2 is None : # r1 \u4e0b\u9762\u6bd4 r2 \u591a\u7684\u90e8\u5206\u53ef\u4ee5\u4e0d\u7ba1 return True elif r1 is None : return False elif r1 . val != r2 . val : return False return isEqual ( r1 . left , r2 . left ) and isEqual ( r1 . right , r2 . right ) return ( isEqual ( pRoot1 , pRoot2 ) or isEqual ( pRoot1 . left , pRoot2 ) or isEqual ( pRoot1 . right , pRoot2 ))","title":"17 has subtree"},{"location":"CodingInterviews/Python/Solutions/17_has_subtree/#17","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811 A\uff0cB\uff0c\u5224\u65ad B \u662f\u4e0d\u662f A \u7684\u5b50\u7ed3\u6784\u3002\uff08ps: \u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09","title":"17. \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"CodingInterviews/Python/Solutions/17_has_subtree/#_1","text":"\u8f93\u5165 {8,8,#,9,#,2,#,5},{8,9,#,2} \u8fd4\u56de\u503c true","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/17_has_subtree/#_2","text":"\u4e8c\u53c9\u6811 \u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/17_has_subtree/#_3","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def HasSubtree ( self , pRoot1 , pRoot2 ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/17_has_subtree/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def HasSubtree ( self , pRoot1 , pRoot2 ): if pRoot1 is None or pRoot2 is None : return False def isEqual ( r1 , r2 ): if r2 is None : # r1 \u4e0b\u9762\u6bd4 r2 \u591a\u7684\u90e8\u5206\u53ef\u4ee5\u4e0d\u7ba1 return True elif r1 is None : return False elif r1 . val != r2 . val : return False return isEqual ( r1 . left , r2 . left ) and isEqual ( r1 . right , r2 . right ) return ( isEqual ( pRoot1 , pRoot2 ) or isEqual ( pRoot1 . left , pRoot2 ) or isEqual ( pRoot1 . right , pRoot2 ))","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/18_mirror_image_of_binary_tree/","text":"18. \u4e8c\u53c9\u6811\u7684\u955c\u50cf Link \u9898\u76ee\u63cf\u8ff0 \u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u793a\u4f8b Link \u6e90\u4e8c\u53c9\u6811 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811 8 / \\ 10 6 / \\ / \\ 11 9 7 5 \u77e5\u8bc6\u70b9 Link \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u955c\u50cf\u6811\u7684\u6839\u8282\u70b9 def Mirror ( self , root ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 class Solution : def Mirror ( self , root ): if root is None : return None root . left , root . right = root . right , root . left self . Mirror ( root . left ) self . Mirror ( root . right ) return root","title":"18 mirror image of binary tree"},{"location":"CodingInterviews/Python/Solutions/18_mirror_image_of_binary_tree/#18","text":"\u9898\u76ee\u63cf\u8ff0 \u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002","title":"18. \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"CodingInterviews/Python/Solutions/18_mirror_image_of_binary_tree/#_1","text":"\u6e90\u4e8c\u53c9\u6811 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811 8 / \\ 10 6 / \\ / \\ 11 9 7 5","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/18_mirror_image_of_binary_tree/#_2","text":"\u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/18_mirror_image_of_binary_tree/#_3","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u955c\u50cf\u6811\u7684\u6839\u8282\u70b9 def Mirror ( self , root ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/18_mirror_image_of_binary_tree/#_4","text":"1 2 3 4 5 6 7 8 9 class Solution : def Mirror ( self , root ): if root is None : return None root . left , root . right = root . right , root . left self . Mirror ( root . left ) self . Mirror ( root . right ) return root","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/","text":"19. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b 4X4 \u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b57 1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10\u3002 \u793a\u4f8b Link \u8f93\u5165 [[1,2],[3,4]] \u8fd4\u56de\u503c [1,2,4,3] \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # matrix\u7c7b\u578b\u4e3a\u4e8c\u7ef4\u5217\u8868\uff0c\u9700\u8981\u8fd4\u56de\u5217\u8868 def printMatrix ( self , matrix ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u201c\u4e0a\u201d\u3001\u201c\u53f3\u201d\u3001\u201c\u4e0b\u201d\u3001\u201c\u5de6\u201d\u4f9d\u6b21\u6253\u5370 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def printMatrix ( self , matrix ): row = len ( matrix ) col = len ( matrix [ 0 ]) if row == 0 or col == 0 : return times = row * col res = [ 0 ] * times row_start , row_stop = 0 , row - 1 col_start , col_stop = 0 , col - 1 idx = 0 while idx < times : if row_start > row_stop : break for j in range ( col_start , col_stop + 1 ): res [ idx ] = matrix [ row_start ][ j ] idx += 1 row_start += 1 if col_start > col_stop : break for j in range ( row_start , row_stop + 1 ): res [ idx ] = matrix [ j ][ col_stop ] idx += 1 col_stop -= 1 if row_start > row_stop : break for j in range ( col_stop , col_start - 1 , - 1 ): res [ idx ] = matrix [ row_stop ][ j ] idx += 1 row_stop -= 1 if col_start > col_stop : break for j in range ( row_stop , row_start - 1 , - 1 ): res [ idx ] = matrix [ j ][ col_start ] idx += 1 col_start += 1 return res \u89e3\u6cd5\u4e8c Link \u501f\u52a9\u201c\u504f\u79fb\u91cf\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def printMatrix ( self , matrix ): # -- y # | # x dx = [ 0 , 1 , 0 , - 1 ] dy = [ 1 , 0 , - 1 , 0 ] x , y = 0 , 0 d = 0 # direction row = len ( matrix ) col = len ( matrix [ 0 ]) times = row * col res = [[ 0 ] * col for _ in range ( row )] ans = [ 0 ] * times for i in range ( times ): res [ x ][ y ] = matrix [ x ][ y ] ans [ i ] = res [ x ][ y ] temp_x = x + dx [ d ] temp_y = y + dy [ d ] if ( temp_x < 0 or temp_x == row or temp_y < 0 or temp_y == col or res [ temp_x ][ temp_y ]): d = ( d + 1 ) % 4 temp_x = x + dx [ d ] temp_y = y + dy [ d ] x , y = temp_x , temp_y return ans \u89e3\u6cd5\u4e09 Link \u501f\u52a9 list \u7684 pop \u4e0e reverse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def printMatrix ( self , matrix ): res = [] while matrix : res += matrix . pop ( 0 ) # -> if matrix and matrix [ 0 ]: # v for row in matrix : res . append ( row . pop ()) if matrix : # <- res += matrix . pop ()[:: - 1 ] if matrix and matrix [ 0 ]: # ^ for row in matrix [:: - 1 ]: res . append ( row . pop ( 0 )) return res \u89e3\u6cd5\u56db Link \u501f\u52a9 zip \u5b9e\u73b0\u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 1 2 3 4 5 6 7 8 9 class Solution : def printMatrix ( self , matrix ): res = [] while matrix : res += matrix . pop ( 0 ) if matrix : # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 matrix = zip ( * matrix )[:: - 1 ] # Python3 \u7528 list(zip(*matrix))[::-1] return res","title":"19 print matrix clockwise"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#19","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b 4X4 \u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b57 1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10\u3002","title":"19. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_1","text":"\u8f93\u5165 [[1,2],[3,4]] \u8fd4\u56de\u503c [1,2,4,3]","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_2","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_3","text":"1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # matrix\u7c7b\u578b\u4e3a\u4e8c\u7ef4\u5217\u8868\uff0c\u9700\u8981\u8fd4\u56de\u5217\u8868 def printMatrix ( self , matrix ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_5","text":"\u201c\u4e0a\u201d\u3001\u201c\u53f3\u201d\u3001\u201c\u4e0b\u201d\u3001\u201c\u5de6\u201d\u4f9d\u6b21\u6253\u5370 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def printMatrix ( self , matrix ): row = len ( matrix ) col = len ( matrix [ 0 ]) if row == 0 or col == 0 : return times = row * col res = [ 0 ] * times row_start , row_stop = 0 , row - 1 col_start , col_stop = 0 , col - 1 idx = 0 while idx < times : if row_start > row_stop : break for j in range ( col_start , col_stop + 1 ): res [ idx ] = matrix [ row_start ][ j ] idx += 1 row_start += 1 if col_start > col_stop : break for j in range ( row_start , row_stop + 1 ): res [ idx ] = matrix [ j ][ col_stop ] idx += 1 col_stop -= 1 if row_start > row_stop : break for j in range ( col_stop , col_start - 1 , - 1 ): res [ idx ] = matrix [ row_stop ][ j ] idx += 1 row_stop -= 1 if col_start > col_stop : break for j in range ( row_stop , row_start - 1 , - 1 ): res [ idx ] = matrix [ j ][ col_start ] idx += 1 col_start += 1 return res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_6","text":"\u501f\u52a9\u201c\u504f\u79fb\u91cf\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def printMatrix ( self , matrix ): # -- y # | # x dx = [ 0 , 1 , 0 , - 1 ] dy = [ 1 , 0 , - 1 , 0 ] x , y = 0 , 0 d = 0 # direction row = len ( matrix ) col = len ( matrix [ 0 ]) times = row * col res = [[ 0 ] * col for _ in range ( row )] ans = [ 0 ] * times for i in range ( times ): res [ x ][ y ] = matrix [ x ][ y ] ans [ i ] = res [ x ][ y ] temp_x = x + dx [ d ] temp_y = y + dy [ d ] if ( temp_x < 0 or temp_x == row or temp_y < 0 or temp_y == col or res [ temp_x ][ temp_y ]): d = ( d + 1 ) % 4 temp_x = x + dx [ d ] temp_y = y + dy [ d ] x , y = temp_x , temp_y return ans","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_7","text":"\u501f\u52a9 list \u7684 pop \u4e0e reverse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def printMatrix ( self , matrix ): res = [] while matrix : res += matrix . pop ( 0 ) # -> if matrix and matrix [ 0 ]: # v for row in matrix : res . append ( row . pop ()) if matrix : # <- res += matrix . pop ()[:: - 1 ] if matrix and matrix [ 0 ]: # ^ for row in matrix [:: - 1 ]: res . append ( row . pop ( 0 )) return res","title":"\u89e3\u6cd5\u4e09"},{"location":"CodingInterviews/Python/Solutions/19_print_matrix_clockwise/#_8","text":"\u501f\u52a9 zip \u5b9e\u73b0\u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 1 2 3 4 5 6 7 8 9 class Solution : def printMatrix ( self , matrix ): res = [] while matrix : res += matrix . pop ( 0 ) if matrix : # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 matrix = zip ( * matrix )[:: - 1 ] # Python3 \u7528 list(zip(*matrix))[::-1] return res","title":"\u89e3\u6cd5\u56db"},{"location":"CodingInterviews/Python/Solutions/20_stack_with_min_val/","text":"20. \u5305\u542b min \u51fd\u6570\u7684\u6808 Link \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff09\u3002 \u77e5\u8bc6\u70b9 Link \u6808 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- class Solution : def push ( self , node ): # write code here def pop ( self ): # write code here def top ( self ): # write code here def min ( self ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution : def __init__ ( self ): self . stk = [] self . store = [] def push ( self , node ): self . stk . append ( node ) if self . store == []: self . store . append ( node ) else : if node < self . store [ - 1 ]: self . store . append ( node ) else : self . store . append ( self . store [ - 1 ]) def pop ( self ): if self . stk == []: return None self . store . pop () return self . stk . pop () def top ( self ): if self . stk == []: return None return self . stk [ - 1 ] def min ( self ): return self . store [ - 1 ]","title":"20 stack with min val"},{"location":"CodingInterviews/Python/Solutions/20_stack_with_min_val/#20-min","text":"\u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff09\u3002","title":"20. \u5305\u542b min \u51fd\u6570\u7684\u6808"},{"location":"CodingInterviews/Python/Solutions/20_stack_with_min_val/#_1","text":"\u6808","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/20_stack_with_min_val/#_2","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- class Solution : def push ( self , node ): # write code here def pop ( self ): # write code here def top ( self ): # write code here def min ( self ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/20_stack_with_min_val/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution : def __init__ ( self ): self . stk = [] self . store = [] def push ( self , node ): self . stk . append ( node ) if self . store == []: self . store . append ( node ) else : if node < self . store [ - 1 ]: self . store . append ( node ) else : self . store . append ( self . store [ - 1 ]) def pop ( self ): if self . stk == []: return None self . store . pop () return self . stk . pop () def top ( self ): if self . stk == []: return None return self . stk [ - 1 ] def min ( self ): return self . store [ - 1 ]","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/21_is_pop_order/","text":"21. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002 \u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002 \u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c \u4f46 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09 \u77e5\u8bc6\u70b9 Link \u6808 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def IsPopOrder ( self , pushV , popV ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def IsPopOrder ( self , pushV , popV ): if pushV is None or len ( pushV ) != len ( popV ): return None stk = [] idx = 0 for num in pushV : stk . append ( num ) while stk and stk [ - 1 ] == popV [ idx ]: stk . pop () idx += 1 return idx == len ( popV )","title":"21 is pop order"},{"location":"CodingInterviews/Python/Solutions/21_is_pop_order/#21","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002 \u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002 \u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c \u4f46 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09","title":"21. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"CodingInterviews/Python/Solutions/21_is_pop_order/#_1","text":"\u6808","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/21_is_pop_order/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def IsPopOrder ( self , pushV , popV ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/21_is_pop_order/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def IsPopOrder ( self , pushV , popV ): if pushV is None or len ( pushV ) != len ( popV ): return None stk = [] idx = 0 for num in pushV : stk . append ( num ) while stk and stk [ - 1 ] == popV [ idx ]: stk . pop () idx += 1 return idx == len ( popV )","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/22_print_from_top_to_bottom/","text":"22. \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 Link \u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 \u793a\u4f8b Link \u8f93\u5165 {5,4,#,3,#,2,#,1} \u8fd4\u56de\u503c [5,4,3,2,1] \u77e5\u8bc6\u70b9 Link \u961f\u5217 \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u4ece\u4e0a\u5230\u4e0b\u6bcf\u4e2a\u8282\u70b9\u503c\u5217\u8868\uff0c\u4f8b\uff1a[1,2,3] def PrintFromTopToBottom ( self , root ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def PrintFromTopToBottom ( self , root ): if root is None or root == []: return [] queue = [ root ] res = [] while queue : node = queue . pop ( 0 ) res . append ( node . val ) if node . left : queue . append ( node . left ) if node . right : queue . append ( node . right ) return res","title":"22 print from top to bottom"},{"location":"CodingInterviews/Python/Solutions/22_print_from_top_to_bottom/#22","text":"\u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002","title":"22. \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"CodingInterviews/Python/Solutions/22_print_from_top_to_bottom/#_1","text":"\u8f93\u5165 {5,4,#,3,#,2,#,1} \u8fd4\u56de\u503c [5,4,3,2,1]","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/22_print_from_top_to_bottom/#_2","text":"\u961f\u5217 \u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/22_print_from_top_to_bottom/#_3","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u4ece\u4e0a\u5230\u4e0b\u6bcf\u4e2a\u8282\u70b9\u503c\u5217\u8868\uff0c\u4f8b\uff1a[1,2,3] def PrintFromTopToBottom ( self , root ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/22_print_from_top_to_bottom/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def PrintFromTopToBottom ( self , root ): if root is None or root == []: return [] queue = [ root ] res = [] while queue : node = queue . pop ( 0 ) res . append ( node . val ) if node . left : queue . append ( node . left ) if node . right : queue . append ( node . right ) return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/23_verify_sequence_of_bst/","text":"23. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u7eed\u904d\u5386\u5e8f\u5217 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002 \u5982\u679c\u662f\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u793a\u4f8b Link \u8f93\u5165\uff1a [4,8,6,12,16,14,10] \u8fd4\u56de\u503c\uff1a true \u77e5\u8bc6\u70b9 Link \u6808 \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def VerifySquenceOfBST ( self , sequence ): # write code here \u53ef\u884c\u7684\u89e3 Link \u9012\u5f52\u5730\u5c06\u5de6\u53f3\u5b50\u6811\u5206\u5f00\u5e76\u5224\u65ad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def VerifySquenceOfBST ( self , sequence ): if sequence == []: return False root = sequence . pop () idx = None # save right node for i in range ( len ( sequence )): if idx is None and root < sequence [ i ]: idx = i if idx is not None and sequence [ i ] < root : return False if sequence [: idx ] == []: left = True else : left = self . VerifySquenceOfBST ( sequence [: idx ]) if sequence [ idx :] == []: right = True else : right = self . VerifySquenceOfBST ( sequence [ idx :]) return left and right","title":"23 verify sequence of bst"},{"location":"CodingInterviews/Python/Solutions/23_verify_sequence_of_bst/#23","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002 \u5982\u679c\u662f\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002","title":"23. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u7eed\u904d\u5386\u5e8f\u5217"},{"location":"CodingInterviews/Python/Solutions/23_verify_sequence_of_bst/#_1","text":"\u8f93\u5165\uff1a [4,8,6,12,16,14,10] \u8fd4\u56de\u503c\uff1a true","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/23_verify_sequence_of_bst/#_2","text":"\u6808 \u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/23_verify_sequence_of_bst/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def VerifySquenceOfBST ( self , sequence ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/23_verify_sequence_of_bst/#_4","text":"\u9012\u5f52\u5730\u5c06\u5de6\u53f3\u5b50\u6811\u5206\u5f00\u5e76\u5224\u65ad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def VerifySquenceOfBST ( self , sequence ): if sequence == []: return False root = sequence . pop () idx = None # save right node for i in range ( len ( sequence )): if idx is None and root < sequence [ i ]: idx = i if idx is not None and sequence [ i ] < root : return False if sequence [: idx ] == []: left = True else : left = self . VerifySquenceOfBST ( sequence [: idx ]) if sequence [ idx :] == []: right = True else : right = self . VerifySquenceOfBST ( sequence [ idx :]) return left and right","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/24_find_path/","text":"24. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002 \u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002 \u77e5\u8bc6\u70b9 Link \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u4e8c\u7ef4\u5217\u8868\uff0c\u5185\u90e8\u6bcf\u4e2a\u5217\u8868\u8868\u793a\u627e\u5230\u7684\u8def\u5f84 def FindPath ( self , root , expectNumber ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def FindPath ( self , root , expectNumber ): if root is None : return [] res = [] route = [ root ] routes = [[ root . val ]] while route : node = route . pop ( 0 ) tempRoute = routes . pop ( 0 ) if ( node . left is None and node . right is None and sum ( tempRoute ) == expectNumber ): res . insert ( 0 , tempRoute ) # \u6211\u89c9\u5f97\u4e0d\u662f\u5b57\u5178\u5e8f continue if node . left : route . append ( node . left ) temp = tempRoute [:] temp . append ( node . left . val ) routes . append ( temp ) if node . right : route . append ( node . right ) temp = tempRoute [:] temp . append ( node . right . val ) routes . append ( temp ) return res","title":"24 find path"},{"location":"CodingInterviews/Python/Solutions/24_find_path/#24","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002 \u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002","title":"24. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"CodingInterviews/Python/Solutions/24_find_path/#_1","text":"\u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/24_find_path/#_2","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u4e8c\u7ef4\u5217\u8868\uff0c\u5185\u90e8\u6bcf\u4e2a\u5217\u8868\u8868\u793a\u627e\u5230\u7684\u8def\u5f84 def FindPath ( self , root , expectNumber ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/24_find_path/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def FindPath ( self , root , expectNumber ): if root is None : return [] res = [] route = [ root ] routes = [[ root . val ]] while route : node = route . pop ( 0 ) tempRoute = routes . pop ( 0 ) if ( node . left is None and node . right is None and sum ( tempRoute ) == expectNumber ): res . insert ( 0 , tempRoute ) # \u6211\u89c9\u5f97\u4e0d\u662f\u5b57\u5178\u5e8f continue if node . left : route . append ( node . left ) temp = tempRoute [:] temp . append ( node . left . val ) routes . append ( temp ) if node . right : route . append ( node . right ) temp = tempRoute [:] temp . append ( node . right . val ) routes . append ( temp ) return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/25_clone/","text":"25. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c \u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488 random \u6307\u5411\u4e00\u4e2a\u968f\u673a\u8282\u70b9\uff09\uff0c \u8bf7\u5bf9\u6b64\u94fe\u8868\u8fdb\u884c\u6df1\u62f7\u8d1d\uff0c\u5e76\u8fd4\u56de\u62f7\u8d1d\u540e\u7684\u5934\u7ed3\u70b9\u3002 \uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09 \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class RandomListNode: # def __init__(self, x): # self.label = x # self.next = None # self.random = None class Solution : # \u8fd4\u56de RandomListNode def Clone ( self , pHead ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def Clone ( self , pHead ): if pHead is None : return None # 1->2->3->N => 1->1->2->2->3->3->N cur = pHead while cur : node = RandomListNode ( cur . label ) node . next = cur . next cur . next = node cur = node . next # copy random point cur = pHead while cur : if cur . random : # cur.next \u4e0e cur.random.next \u90fd\u662f copy node cur . next . random = cur . random . next cur = cur . next . next # 1->1->2->2->3->3->N => 1->2->3->N cur = pHead res = pHead . next tmp = pHead . next while cur : cur . next = cur . next . next if tmp . next : tmp . next = tmp . next . next tmp = tmp . next cur = cur . next return res \u975e\u7b97\u6cd5\u9898\u89e3\u6cd5 Link 1 2 3 class Solution : def Clone ( self , pHead ): return __import__ ( 'copy' ) . deepcopy ( pHead )","title":"25 clone"},{"location":"CodingInterviews/Python/Solutions/25_clone/#25","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c \u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488 random \u6307\u5411\u4e00\u4e2a\u968f\u673a\u8282\u70b9\uff09\uff0c \u8bf7\u5bf9\u6b64\u94fe\u8868\u8fdb\u884c\u6df1\u62f7\u8d1d\uff0c\u5e76\u8fd4\u56de\u62f7\u8d1d\u540e\u7684\u5934\u7ed3\u70b9\u3002 \uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09","title":"25. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"CodingInterviews/Python/Solutions/25_clone/#_1","text":"\u94fe\u8868","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/25_clone/#_2","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class RandomListNode: # def __init__(self, x): # self.label = x # self.next = None # self.random = None class Solution : # \u8fd4\u56de RandomListNode def Clone ( self , pHead ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/25_clone/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def Clone ( self , pHead ): if pHead is None : return None # 1->2->3->N => 1->1->2->2->3->3->N cur = pHead while cur : node = RandomListNode ( cur . label ) node . next = cur . next cur . next = node cur = node . next # copy random point cur = pHead while cur : if cur . random : # cur.next \u4e0e cur.random.next \u90fd\u662f copy node cur . next . random = cur . random . next cur = cur . next . next # 1->1->2->2->3->3->N => 1->2->3->N cur = pHead res = pHead . next tmp = pHead . next while cur : cur . next = cur . next . next if tmp . next : tmp . next = tmp . next . next tmp = tmp . next cur = cur . next return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/25_clone/#_4","text":"1 2 3 class Solution : def Clone ( self , pHead ): return __import__ ( 'copy' ) . deepcopy ( pHead )","title":"\u975e\u7b97\u6cd5\u9898\u89e3\u6cd5"},{"location":"CodingInterviews/Python/Solutions/26_convert/","text":"26. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002 \u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411 \u77e5\u8bc6\u70b9 Link \u5206\u6cbb \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def Convert ( self , pRootOfTree ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def Convert ( self , pRootOfTree ): if pRootOfTree is None : return None leftNode = self . Convert ( pRootOfTree . left ) rightNode = self . Convert ( pRootOfTree . right ) if leftNode : res = leftNode while leftNode . right : leftNode = leftNode . right else : res = pRootOfTree pRootOfTree . left = leftNode pRootOfTree . right = rightNode if leftNode : leftNode . right = pRootOfTree if rightNode : rightNode . left = pRootOfTree return res","title":"26 convert"},{"location":"CodingInterviews/Python/Solutions/26_convert/#26","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002 \u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411","title":"26. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"CodingInterviews/Python/Solutions/26_convert/#_1","text":"\u5206\u6cbb","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/26_convert/#_2","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def Convert ( self , pRootOfTree ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/26_convert/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def Convert ( self , pRootOfTree ): if pRootOfTree is None : return None leftNode = self . Convert ( pRootOfTree . left ) rightNode = self . Convert ( pRootOfTree . right ) if leftNode : res = leftNode while leftNode . right : leftNode = leftNode . right else : res = pRootOfTree pRootOfTree . left = leftNode pRootOfTree . right = rightNode if leftNode : leftNode . right = pRootOfTree if rightNode : rightNode . left = pRootOfTree return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/27_permutation/","text":"27. \u5b57\u7b26\u4e32\u7684\u6392\u5217 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002 \u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 abc\uff0c\u5219\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u7531\u5b57\u7b26 a,b,c \u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32 abc,acb,bac,bca,cab \u548c cba\u3002 \u8f93\u5165\u63cf\u8ff0 Link \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 9\uff08\u53ef\u80fd\u6709\u5b57\u7b26\u91cd\u590d\uff09\uff0c\u5b57\u7b26\u53ea\u5305\u62ec\u5927\u5c0f\u5199\u5b57\u6bcd\u3002 \u793a\u4f8b Link \u8f93\u5165\uff1a \"ab\" \u8fd4\u56de\u503c\uff1a [\"ab\", \"ba\"] \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u52a8\u6001\u89c4\u5212 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Permutation ( self , ss ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution : def Permutation ( self , ss ): if ss == '' : return [] def dfs ( letters , curIdx , start ): if curIdx == size : res . append ( '' . join ( temp )) return for i in range ( start , size ): if mark [ i ] == 0 : mark [ i ] = 1 temp [ i ] = letters [ curIdx ] if ( curIdx + 1 < size and letters [ curIdx ] != letters [ curIdx + 1 ]): dfs ( letters , curIdx + 1 , 0 ) else : dfs ( letters , curIdx + 1 , i + 1 ) # abbc mark [ i ] = 0 size = len ( ss ) letters = sorted ( ss ) temp = [ None ] * size mark = [ 0 ] * size res = [] dfs ( letters , 0 , 0 ) return sorted ( res ) \u89e3\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def Permutation ( self , ss ): if len ( ss ) < 2 : return ss . split () def dfs ( letters , start ): if start == size : res . append ( '' . join ( letters )) return for i in range ( start , size ): if i > start and letters [ i ] == letters [ start ]: continue letters [ i ], letters [ start ] = letters [ start ], letters [ i ] dfs ( letters [:], start + 1 ) # abbc size = len ( ss ) letters = sorted ( ss ) res = [] dfs ( letters , 0 ) return res","title":"27 permutation"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#27","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002 \u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 abc\uff0c\u5219\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u7531\u5b57\u7b26 a,b,c \u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32 abc,acb,bac,bca,cab \u548c cba\u3002","title":"27. \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#_1","text":"\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 9\uff08\u53ef\u80fd\u6709\u5b57\u7b26\u91cd\u590d\uff09\uff0c\u5b57\u7b26\u53ea\u5305\u62ec\u5927\u5c0f\u5199\u5b57\u6bcd\u3002","title":"\u8f93\u5165\u63cf\u8ff0"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#_2","text":"\u8f93\u5165\uff1a \"ab\" \u8fd4\u56de\u503c\uff1a [\"ab\", \"ba\"]","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#_3","text":"\u5b57\u7b26\u4e32 \u52a8\u6001\u89c4\u5212","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#_4","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Permutation ( self , ss ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#_5","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution : def Permutation ( self , ss ): if ss == '' : return [] def dfs ( letters , curIdx , start ): if curIdx == size : res . append ( '' . join ( temp )) return for i in range ( start , size ): if mark [ i ] == 0 : mark [ i ] = 1 temp [ i ] = letters [ curIdx ] if ( curIdx + 1 < size and letters [ curIdx ] != letters [ curIdx + 1 ]): dfs ( letters , curIdx + 1 , 0 ) else : dfs ( letters , curIdx + 1 , i + 1 ) # abbc mark [ i ] = 0 size = len ( ss ) letters = sorted ( ss ) temp = [ None ] * size mark = [ 0 ] * size res = [] dfs ( letters , 0 , 0 ) return sorted ( res )","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/27_permutation/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def Permutation ( self , ss ): if len ( ss ) < 2 : return ss . split () def dfs ( letters , start ): if start == size : res . append ( '' . join ( letters )) return for i in range ( start , size ): if i > start and letters [ i ] == letters [ start ]: continue letters [ i ], letters [ start ] = letters [ start ], letters [ i ] dfs ( letters [:], start + 1 ) # abbc size = len ( ss ) letters = sorted ( ss ) res = [] dfs ( letters , 0 ) return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/28_more_than_half_num/","text":"28. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 Link \u9898\u76ee\u63cf\u8ff0 \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4 {1,2,3,2,2,2,5,4,2}\u3002 \u7531\u4e8e\u6570\u5b57 2 \u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e86 5 \u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa 2\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa 0\u3002 \u793a\u4f8b Link \u8f93\u5165\uff1a [1,2,3,2,2,2,5,4,2] \u8fd4\u56de\u503c\uff1a 2 \u77e5\u8bc6\u70b9 Link \u4f4d\u8fd0\u7b97 \u5206\u6cbb \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def MoreThanHalfNum_Solution ( self , numbers ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def MoreThanHalfNum_Solution ( self , numbers ): if numbers == []: return 0 num = numbers [ 0 ] cnt = 1 for i in range ( 1 , len ( numbers )): if cnt == 0 : num = numbers [ i ] cnt = 1 continue if num == numbers [ i ]: cnt += 1 else : cnt -= 1 return numbers . count ( num ) > len ( numbers ) // 2 and num or 0","title":"28 more than half num"},{"location":"CodingInterviews/Python/Solutions/28_more_than_half_num/#28","text":"\u9898\u76ee\u63cf\u8ff0 \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002 \u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4 {1,2,3,2,2,2,5,4,2}\u3002 \u7531\u4e8e\u6570\u5b57 2 \u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e86 5 \u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa 2\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa 0\u3002","title":"28. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"CodingInterviews/Python/Solutions/28_more_than_half_num/#_1","text":"\u8f93\u5165\uff1a [1,2,3,2,2,2,5,4,2] \u8fd4\u56de\u503c\uff1a 2","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/28_more_than_half_num/#_2","text":"\u4f4d\u8fd0\u7b97 \u5206\u6cbb","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/28_more_than_half_num/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def MoreThanHalfNum_Solution ( self , numbers ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/28_more_than_half_num/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def MoreThanHalfNum_Solution ( self , numbers ): if numbers == []: return 0 num = numbers [ 0 ] cnt = 1 for i in range ( 1 , len ( numbers )): if cnt == 0 : num = numbers [ i ] cnt = 1 continue if num == numbers [ i ]: cnt += 1 else : cnt -= 1 return numbers . count ( num ) > len ( numbers ) // 2 and num or 0","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/29_get_least_nums/","text":"29. \u6700\u5c0f\u7684 k \u4e2a\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165 n \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 K \u4e2a\u6570\u3002 \u4f8b\u5982\u8f93\u5165 4,5,1,6,2,7,3,8 \u8fd9 8 \u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u7684 4 \u4e2a\u6570\u5b57\u662f 1,2,3,4\u3002 \u793a\u4f8b Link \u8f93\u5165 [4,5,1,6,2,7,3,8],4 \u8fd4\u56de\u503c [1,2,3,4] \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ad8\u7ea7\u7b97\u6cd5 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def GetLeastNumbers_Solution ( self , tinput , k ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution : def GetLeastNumbers_Solution ( self , tinput , k ): if len ( tinput ) < k or k <= 0 : return [] def createMaxHeap ( num ): \"\"\"create or add\"\"\" maxHeap . append ( num ) curIdx = len ( maxHeap ) - 1 while curIdx > 0 : parentIdx = curIdx - 1 >> 1 print ( curIdx , parentIdx ) if maxHeap [ parentIdx ] < maxHeap [ curIdx ]: maxHeap [ parentIdx ], maxHeap [ curIdx ] = \\ maxHeap [ curIdx ], maxHeap [ parentIdx ] curIdx = parentIdx else : break def adjustMaxHeap ( num ): if num < maxHeap [ 0 ]: maxHeap [ 0 ] = num idx = 0 largerIdx = 0 while idx < k : leftIdx = idx * 2 + 1 rightIdx = idx * 2 + 2 if rightIdx < k : if maxHeap [ rightIdx ] < maxHeap [ leftIdx ]: largerIdx = leftIdx else : largerIdx = rightIdx elif leftIdx < k : largerIdx = leftIdx else : break if maxHeap [ idx ] < maxHeap [ largerIdx ]: maxHeap [ idx ], maxHeap [ largerIdx ] = \\ maxHeap [ largerIdx ], maxHeap [ idx ] idx = largerIdx maxHeap = [] for i in range ( k ): createMaxHeap ( tinput [ i ]) for i in range ( k , len ( tinput )): adjustMaxHeap ( tinput [ i ]) return sorted ( maxHeap )","title":"29 get least nums"},{"location":"CodingInterviews/Python/Solutions/29_get_least_nums/#29-k","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165 n \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 K \u4e2a\u6570\u3002 \u4f8b\u5982\u8f93\u5165 4,5,1,6,2,7,3,8 \u8fd9 8 \u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u7684 4 \u4e2a\u6570\u5b57\u662f 1,2,3,4\u3002","title":"29. \u6700\u5c0f\u7684 k \u4e2a\u6570"},{"location":"CodingInterviews/Python/Solutions/29_get_least_nums/#_1","text":"\u8f93\u5165 [4,5,1,6,2,7,3,8],4 \u8fd4\u56de\u503c [1,2,3,4]","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/29_get_least_nums/#_2","text":"\u6570\u7ec4 \u9ad8\u7ea7\u7b97\u6cd5","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/29_get_least_nums/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def GetLeastNumbers_Solution ( self , tinput , k ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/29_get_least_nums/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution : def GetLeastNumbers_Solution ( self , tinput , k ): if len ( tinput ) < k or k <= 0 : return [] def createMaxHeap ( num ): \"\"\"create or add\"\"\" maxHeap . append ( num ) curIdx = len ( maxHeap ) - 1 while curIdx > 0 : parentIdx = curIdx - 1 >> 1 print ( curIdx , parentIdx ) if maxHeap [ parentIdx ] < maxHeap [ curIdx ]: maxHeap [ parentIdx ], maxHeap [ curIdx ] = \\ maxHeap [ curIdx ], maxHeap [ parentIdx ] curIdx = parentIdx else : break def adjustMaxHeap ( num ): if num < maxHeap [ 0 ]: maxHeap [ 0 ] = num idx = 0 largerIdx = 0 while idx < k : leftIdx = idx * 2 + 1 rightIdx = idx * 2 + 2 if rightIdx < k : if maxHeap [ rightIdx ] < maxHeap [ leftIdx ]: largerIdx = leftIdx else : largerIdx = rightIdx elif leftIdx < k : largerIdx = leftIdx else : break if maxHeap [ idx ] < maxHeap [ largerIdx ]: maxHeap [ idx ], maxHeap [ largerIdx ] = \\ maxHeap [ largerIdx ], maxHeap [ idx ] idx = largerIdx maxHeap = [] for i in range ( k ): createMaxHeap ( tinput [ i ]) for i in range ( k , len ( tinput )): adjustMaxHeap ( tinput [ i ]) return sorted ( maxHeap )","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/30_find_greatest_sum_of_subarray/","text":"30. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c Link \u9898\u76ee\u63cf\u8ff0 HZ \u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002 \u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e\uff0c\u4ed6\u53c8\u53d1\u8bdd\u4e86\uff1a \u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d\uff0c\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\uff0c\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019\uff0c\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570\uff0c\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570\uff0c\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f \u4f8b\u5982\uff1a{6,-3,-2,7,-15,1,2,2} \u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a 8 \uff08\u4ece\u7b2c 0 \u4e2a\u5f00\u59cb\uff0c\u5230\u7b2c 3 \u4e2a\u4e3a\u6b62\uff09\u3002 \u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f\uff08\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f 1\uff09 \u793a\u4f8b Link \u8f93\u5165\uff1a [1,-2,3,10,-4,7,2,-5] \u8fd4\u56de\u503c\uff1a 18 \u77e5\u8bc6\u70b9 Link \u5206\u6cbb \u52a8\u6001\u89c4\u5212 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FindGreatestSumOfSubArray ( self , array ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def FindGreatestSumOfSubArray ( self , array ): if array == []: return None res = array [ 0 ] tmp = array [ 0 ] for i in range ( 1 , len ( array )): if tmp < 0 : tmp = array [ i ] else : tmp += array [ i ] if res < tmp : res = tmp return res","title":"30 find greatest sum of subarray"},{"location":"CodingInterviews/Python/Solutions/30_find_greatest_sum_of_subarray/#30","text":"\u9898\u76ee\u63cf\u8ff0 HZ \u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002 \u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e\uff0c\u4ed6\u53c8\u53d1\u8bdd\u4e86\uff1a \u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d\uff0c\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\uff0c\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019\uff0c\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570\uff0c\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570\uff0c\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f \u4f8b\u5982\uff1a{6,-3,-2,7,-15,1,2,2} \u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a 8 \uff08\u4ece\u7b2c 0 \u4e2a\u5f00\u59cb\uff0c\u5230\u7b2c 3 \u4e2a\u4e3a\u6b62\uff09\u3002 \u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f\uff08\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f 1\uff09","title":"30. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"CodingInterviews/Python/Solutions/30_find_greatest_sum_of_subarray/#_1","text":"\u8f93\u5165\uff1a [1,-2,3,10,-4,7,2,-5] \u8fd4\u56de\u503c\uff1a 18","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/30_find_greatest_sum_of_subarray/#_2","text":"\u5206\u6cbb \u52a8\u6001\u89c4\u5212","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/30_find_greatest_sum_of_subarray/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FindGreatestSumOfSubArray ( self , array ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/30_find_greatest_sum_of_subarray/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def FindGreatestSumOfSubArray ( self , array ): if array == []: return None res = array [ 0 ] tmp = array [ 0 ] for i in range ( 1 , len ( array )): if tmp < 0 : tmp = array [ i ] else : tmp += array [ i ] if res < tmp : res = tmp return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/31_num_of_1_between_1_and_n/","text":"31. \u4ece 1 \u5230 n \u6574\u6570\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u6c42\u51fa 1\\~13 \u7684\u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u7b97\u51fa 100\\~1300 \u7684\u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff1f \u4e3a\u6b64\u4ed6\u7279\u522b\u6570\u4e86\u4e00\u4e0b 1\\~13 \u4e2d\u5305\u542b 1 \u7684\u6570\u5b57\u6709 1\u300110\u300111\u300112\u300113 \u56e0\u6b64\u5171\u51fa\u73b0 6 \u6b21\uff0c \u4f46\u662f\u5bf9\u4e8e\u540e\u9762\u95ee\u9898\u4ed6\u5c31\u6ca1\u8f99\u4e86\u3002 ACMer \u5e0c\u671b\u4f60\u4eec\u5e2e\u5e2e\u4ed6\uff0c\u5e76\u628a\u95ee\u9898\u66f4\u52a0\u666e\u904d\u5316\uff0c \u53ef\u4ee5\u5f88\u5feb\u7684\u6c42\u51fa\u4efb\u610f\u975e\u8d1f\u6574\u6570\u533a\u95f4\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09\u3002 \u77e5\u8bc6\u70b9 Link \u67e5\u627e \u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def NumberOf1Between1AndN_Solution ( self , n ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u6309\u201c\u4e2a\u5341\u767e\u5343\u4e07\u3002\u3002\u3002\u201d\u4e00\u4e2a\u4e2a\u62ce\u51fa\u6765\uff0c\u5206\u6790\u8be5\u4e3a\u56fa\u5b9a\u7684\u60c5\u51b5\u6709\u591a\u5c11\u4e2a 1\uff0c\u6240\u6709\u7ed3\u679c\u52a0\u8d77\u6765\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def NumberOf1Between1AndN_Solution ( self , n ): if n < 1 : return 0 head = mid = tail = 1 val = 1 res = 0 while head != 0 : head = n // val // 10 mid = n // val % 10 tail = n % val if mid == 0 : # 123(0)5 -> 0~122 increment = head * val # tail \u591a\u4e00\u4f4d\uff0chead \u591a\u4e58 10 elif mid > 1 : # 123(4)5 -> 0~123 increment = ( head + 1 ) * val else : # 123(1)5 -> 0~12300, 12300~12315 -> 0~122, 0~5 increment = head * val + tail + 1 res += increment val *= 10 return res \u89e3\u6cd5\u4e8c Link \u5c06\u201c\u89e3\u6cd5\u4e00\u201d\u7684\u4e09\u4e2a\u516c\u5f0f\u603b\u7ed3\u6210\u4e00\u4e2a (n // m + 8) // 10 * m : head \u53ea\u6709\u5728 mid>1 \u65f6\u624d\u52a0 1 (n // m % 10 == 1) * (n % m + 1) : tail \u53ea\u6709\u5728 mid=1 \u65f6\u624d\u52a0 1 2 3 4 5 6 7 8 class Solution : def NumberOf1Between1AndN_Solution ( self , n ): res = 0 m = 1 while m <= n : res += ( n // m + 8 ) // 10 * m + ( n // m % 10 == 1 ) * ( n % m + 1 ) m *= 10 return res","title":"31 num of 1 between 1 and n"},{"location":"CodingInterviews/Python/Solutions/31_num_of_1_between_1_and_n/#31-1-n","text":"\u9898\u76ee\u63cf\u8ff0 \u6c42\u51fa 1\\~13 \u7684\u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u7b97\u51fa 100\\~1300 \u7684\u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff1f \u4e3a\u6b64\u4ed6\u7279\u522b\u6570\u4e86\u4e00\u4e0b 1\\~13 \u4e2d\u5305\u542b 1 \u7684\u6570\u5b57\u6709 1\u300110\u300111\u300112\u300113 \u56e0\u6b64\u5171\u51fa\u73b0 6 \u6b21\uff0c \u4f46\u662f\u5bf9\u4e8e\u540e\u9762\u95ee\u9898\u4ed6\u5c31\u6ca1\u8f99\u4e86\u3002 ACMer \u5e0c\u671b\u4f60\u4eec\u5e2e\u5e2e\u4ed6\uff0c\u5e76\u628a\u95ee\u9898\u66f4\u52a0\u666e\u904d\u5316\uff0c \u53ef\u4ee5\u5f88\u5feb\u7684\u6c42\u51fa\u4efb\u610f\u975e\u8d1f\u6574\u6570\u533a\u95f4\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece 1 \u5230 n \u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff09\u3002","title":"31. \u4ece 1 \u5230 n \u6574\u6570\u4e2d\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"CodingInterviews/Python/Solutions/31_num_of_1_between_1_and_n/#_1","text":"\u67e5\u627e \u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/31_num_of_1_between_1_and_n/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def NumberOf1Between1AndN_Solution ( self , n ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/31_num_of_1_between_1_and_n/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/31_num_of_1_between_1_and_n/#_4","text":"\u6309\u201c\u4e2a\u5341\u767e\u5343\u4e07\u3002\u3002\u3002\u201d\u4e00\u4e2a\u4e2a\u62ce\u51fa\u6765\uff0c\u5206\u6790\u8be5\u4e3a\u56fa\u5b9a\u7684\u60c5\u51b5\u6709\u591a\u5c11\u4e2a 1\uff0c\u6240\u6709\u7ed3\u679c\u52a0\u8d77\u6765\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def NumberOf1Between1AndN_Solution ( self , n ): if n < 1 : return 0 head = mid = tail = 1 val = 1 res = 0 while head != 0 : head = n // val // 10 mid = n // val % 10 tail = n % val if mid == 0 : # 123(0)5 -> 0~122 increment = head * val # tail \u591a\u4e00\u4f4d\uff0chead \u591a\u4e58 10 elif mid > 1 : # 123(4)5 -> 0~123 increment = ( head + 1 ) * val else : # 123(1)5 -> 0~12300, 12300~12315 -> 0~122, 0~5 increment = head * val + tail + 1 res += increment val *= 10 return res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/31_num_of_1_between_1_and_n/#_5","text":"\u5c06\u201c\u89e3\u6cd5\u4e00\u201d\u7684\u4e09\u4e2a\u516c\u5f0f\u603b\u7ed3\u6210\u4e00\u4e2a (n // m + 8) // 10 * m : head \u53ea\u6709\u5728 mid>1 \u65f6\u624d\u52a0 1 (n // m % 10 == 1) * (n % m + 1) : tail \u53ea\u6709\u5728 mid=1 \u65f6\u624d\u52a0 1 2 3 4 5 6 7 8 class Solution : def NumberOf1Between1AndN_Solution ( self , n ): res = 0 m = 1 while m <= n : res += ( n // m + 8 ) // 10 * m + ( n // m % 10 == 1 ) * ( n % m + 1 ) m *= 10 return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/32_print_min_num/","text":"32. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u4f8b\u5982\u8f93\u5165\u6570\u7ec4 {3,32,321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a 321323\u3002 \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def PrintMinNumber ( self , numbers ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def PrintMinNumber ( self , numbers ): if numbers == []: return '' size = len ( numbers ) nums = list ( map ( str , numbers )) for i in range ( size - 1 ): flag = i for j in range ( i + 1 , size ): if nums [ j ] + nums [ flag ] < nums [ flag ] + nums [ j ]: flag = j if flag != i : nums [ i ], nums [ flag ] = nums [ flag ], nums [ i ] return '' . join ( nums ) . lstrip ( '0' ) or '0'","title":"32 print min num"},{"location":"CodingInterviews/Python/Solutions/32_print_min_num/#32","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u4f8b\u5982\u8f93\u5165\u6570\u7ec4 {3,32,321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a 321323\u3002","title":"32. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"CodingInterviews/Python/Solutions/32_print_min_num/#_1","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/32_print_min_num/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def PrintMinNumber ( self , numbers ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/32_print_min_num/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def PrintMinNumber ( self , numbers ): if numbers == []: return '' size = len ( numbers ) nums = list ( map ( str , numbers )) for i in range ( size - 1 ): flag = i for j in range ( i + 1 , size ): if nums [ j ] + nums [ flag ] < nums [ flag ] + nums [ j ]: flag = j if flag != i : nums [ i ], nums [ flag ] = nums [ flag ], nums [ i ] return '' . join ( nums ) . lstrip ( '0' ) or '0'","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/33_ugly_num/","text":"33. \u4e11\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u628a\u53ea\u5305\u542b\u8d28\u56e0\u5b50 2\u30013 \u548c 5 \u7684\u6570\u79f0\u4f5c\u4e11\u6570(Ugly Number)\u3002 \u4f8b\u5982 6\u30018 \u90fd\u662f\u4e11\u6570\uff0c\u4f46 14 \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u8d28\u56e0\u5b50 7\u3002 \u4e60\u60ef\u4e0a\u6211\u4eec\u628a 1 \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002 \u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c N \u4e2a\u4e11\u6570\u3002 \u793a\u4f8b Link \u8f93\u5165 7 \u8fd4\u56de\u503c 8 \u77e5\u8bc6\u70b9 Link \u6570\u5b66 \u4e8c\u5206 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def GetUglyNumber_Solution ( self , index ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def GetUglyNumber_Solution ( self , index ): if index <= 0 : return 0 res = [ 1 ] * index idx2 = idx3 = idx5 = 0 cnt = 1 while cnt < index : minVal = min ( 2 * res [ idx2 ], 3 * res [ idx3 ], 5 * res [ idx5 ]) res [ cnt ] = minVal cnt += 1 if minVal == 2 * res [ idx2 ]: idx2 += 1 # \u4e0b\u9762\u4e24\u4e2a\u4e0d\u80fd\u7528 elif\uff0c\u56e0\u4e3a\u65e0\u6cd5\u8df3\u8fc7\u91cd\u590d\u7684\u6570\uff0c\u5982\u201c2 \u7684 3 \u500d\u201d\u4e0e\u201c3 \u7684 2 \u500d\u201d if minVal == 3 * res [ idx3 ]: idx3 += 1 if minVal == 5 * res [ idx5 ]: idx5 += 1 return res [ - 1 ]","title":"33 ugly num"},{"location":"CodingInterviews/Python/Solutions/33_ugly_num/#33","text":"\u9898\u76ee\u63cf\u8ff0 \u628a\u53ea\u5305\u542b\u8d28\u56e0\u5b50 2\u30013 \u548c 5 \u7684\u6570\u79f0\u4f5c\u4e11\u6570(Ugly Number)\u3002 \u4f8b\u5982 6\u30018 \u90fd\u662f\u4e11\u6570\uff0c\u4f46 14 \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u8d28\u56e0\u5b50 7\u3002 \u4e60\u60ef\u4e0a\u6211\u4eec\u628a 1 \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002 \u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c N \u4e2a\u4e11\u6570\u3002","title":"33. \u4e11\u6570"},{"location":"CodingInterviews/Python/Solutions/33_ugly_num/#_1","text":"\u8f93\u5165 7 \u8fd4\u56de\u503c 8","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/33_ugly_num/#_2","text":"\u6570\u5b66 \u4e8c\u5206","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/33_ugly_num/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def GetUglyNumber_Solution ( self , index ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/33_ugly_num/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def GetUglyNumber_Solution ( self , index ): if index <= 0 : return 0 res = [ 1 ] * index idx2 = idx3 = idx5 = 0 cnt = 1 while cnt < index : minVal = min ( 2 * res [ idx2 ], 3 * res [ idx3 ], 5 * res [ idx5 ]) res [ cnt ] = minVal cnt += 1 if minVal == 2 * res [ idx2 ]: idx2 += 1 # \u4e0b\u9762\u4e24\u4e2a\u4e0d\u80fd\u7528 elif\uff0c\u56e0\u4e3a\u65e0\u6cd5\u8df3\u8fc7\u91cd\u590d\u7684\u6570\uff0c\u5982\u201c2 \u7684 3 \u500d\u201d\u4e0e\u201c3 \u7684 2 \u500d\u201d if minVal == 3 * res [ idx3 ]: idx3 += 1 if minVal == 5 * res [ idx5 ]: idx5 += 1 return res [ - 1 ]","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/34_first_not_repeating_char/","text":"34. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 Link \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\uff080 <= \u5b57\u7b26\u4e32\u957f\u5ea6 <= 10000\uff0c\u5168\u90e8\u7531\u5b57\u6bcd\u7ec4\u6210\uff09\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c \u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56de -1\uff08\u9700\u8981\u533a\u5206\u5927\u5c0f\u5199\uff09\u3002 \uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09 \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FirstNotRepeatingChar ( self , s ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 class Solution : def FirstNotRepeatingChar ( self , s ): if s == '' : return - 1 res = {} for c in s : res [ c ] = res . get ( c , 0 ) + 1 for i in range ( len ( s )): if res [ s [ i ]] == 1 : return i \u89e3\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def FirstNotRepeatingChar ( self , s ): if s == '' : return - 1 d1 = {} d2 = {} for c in s : if c not in d2 : if c not in d1 : d1 [ c ] = True else : d2 [ c ] = True for i in range ( len ( s )): if s [ i ] not in d2 : return i","title":"34 first not repeating char"},{"location":"CodingInterviews/Python/Solutions/34_first_not_repeating_char/#34","text":"\u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\uff080 <= \u5b57\u7b26\u4e32\u957f\u5ea6 <= 10000\uff0c\u5168\u90e8\u7531\u5b57\u6bcd\u7ec4\u6210\uff09\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c \u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56de -1\uff08\u9700\u8981\u533a\u5206\u5927\u5c0f\u5199\uff09\u3002 \uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09","title":"34. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26"},{"location":"CodingInterviews/Python/Solutions/34_first_not_repeating_char/#_1","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/34_first_not_repeating_char/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FirstNotRepeatingChar ( self , s ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/34_first_not_repeating_char/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/34_first_not_repeating_char/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 class Solution : def FirstNotRepeatingChar ( self , s ): if s == '' : return - 1 res = {} for c in s : res [ c ] = res . get ( c , 0 ) + 1 for i in range ( len ( s )): if res [ s [ i ]] == 1 : return i","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/34_first_not_repeating_char/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def FirstNotRepeatingChar ( self , s ): if s == '' : return - 1 d1 = {} d2 = {} for c in s : if c not in d2 : if c not in d1 : d1 [ c ] = True else : d2 [ c ] = True for i in range ( len ( s )): if s [ i ] not in d2 : return i","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/35_inverse_pairs/","text":"35. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 Link \u9898\u76ee\u63cf\u8ff0 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570 P\u3002 \u5e76\u5c06 P \u5bf9 1000000007 \u53d6\u6a21\u7684\u7ed3\u679c\u8f93\u51fa\u3002\u5373\u8f93\u51fa P%1000000007 \u8f93\u5165\u63cf\u8ff0 \u9898\u76ee\u4fdd\u8bc1\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u6ca1\u6709\u7684\u76f8\u540c\u7684\u6570\u5b57 \u6570\u636e\u8303\u56f4\uff1a \u5bf9\u4e8e 50% \u7684\u6570\u636e\uff0csize <= 10^4 \u5bf9\u4e8e 75% \u7684\u6570\u636e\uff0csize <= 10^5 \u5bf9\u4e8e 100% \u7684\u6570\u636e\uff0csize <= 2*10^5 \u793a\u4f8b Link \u8f93\u5165 [1,2,3,4,5,6,7,0] \u8fd4\u56de\u503c 7 \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def InversePairs ( self , data ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution : def InversePairs ( self , data ): # \u5355\u8c03\u4e0d\u51cf\u6570\u7ec4\u6ca1\u6709\u9006\u5e8f\u5bf9\uff0c\u5176\u4f59\u7684\u90fd\u6709 # \u7ed9\u6570\u7ec4\u6392\u5e8f\u53ef\u4ee5\u987a\u4fbf\u7b97\u51fa\u9006\u5e8f\u5bf9 if len ( data ) < 2 : return 0 # start mid stop # 0, 1, 2, 3, 4, 5, 6, 7 def mergeAndCount ( data , start , mid , stop , tmp ): for i in range ( start , stop + 1 ): tmp [ i ] = data [ i ] i = start j = mid + 1 count = 0 for k in range ( start , stop + 1 ): if i == mid + 1 : # i \u89c1\u5e95\u4e86\uff0c\u5c31\u7528 j data [ k ] = tmp [ j ] j += 1 elif j == stop + 1 : # j \u89c1\u5e95\u4e86\uff0c\u5c31\u7528 i data [ k ] = tmp [ i ] i += 1 elif tmp [ i ] <= tmp [ j ]: data [ k ] = tmp [ i ] i += 1 else : data [ k ] = tmp [ j ] j += 1 count += mid - i + 1 # [i, mid] \u90fd\u80fd\u4e0e j \u7ec4\u6210\u9006\u5e8f\u5bf9 return count # start mid stop # 0, 1, 2, 3, 4, 5, 6, 7 def mergeSort ( data , start , stop , tmp ): if start == stop : return 0 mid = start + ( stop - start ) // 2 leftPairs = mergeSort ( data , start , mid , tmp ) rightPairs = mergeSort ( data , mid + 1 , stop , tmp ) if data [ mid ] <= data [ mid + 1 ]: return leftPairs + rightPairs crossPairs = mergeAndCount ( data , start , mid , stop , tmp ) return leftPairs + rightPairs + crossPairs tmp = [ 0 ] * len ( data ) cnt = mergeSort ( data [:], 0 , len ( data ) - 1 , tmp ) return cnt % 1000000007","title":"35 inverse pairs"},{"location":"CodingInterviews/Python/Solutions/35_inverse_pairs/#35","text":"\u9898\u76ee\u63cf\u8ff0 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002 \u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570 P\u3002 \u5e76\u5c06 P \u5bf9 1000000007 \u53d6\u6a21\u7684\u7ed3\u679c\u8f93\u51fa\u3002\u5373\u8f93\u51fa P%1000000007 \u8f93\u5165\u63cf\u8ff0 \u9898\u76ee\u4fdd\u8bc1\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u6ca1\u6709\u7684\u76f8\u540c\u7684\u6570\u5b57 \u6570\u636e\u8303\u56f4\uff1a \u5bf9\u4e8e 50% \u7684\u6570\u636e\uff0csize <= 10^4 \u5bf9\u4e8e 75% \u7684\u6570\u636e\uff0csize <= 10^5 \u5bf9\u4e8e 100% \u7684\u6570\u636e\uff0csize <= 2*10^5","title":"35. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"CodingInterviews/Python/Solutions/35_inverse_pairs/#_1","text":"\u8f93\u5165 [1,2,3,4,5,6,7,0] \u8fd4\u56de\u503c 7","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/35_inverse_pairs/#_2","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/35_inverse_pairs/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def InversePairs ( self , data ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/35_inverse_pairs/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution : def InversePairs ( self , data ): # \u5355\u8c03\u4e0d\u51cf\u6570\u7ec4\u6ca1\u6709\u9006\u5e8f\u5bf9\uff0c\u5176\u4f59\u7684\u90fd\u6709 # \u7ed9\u6570\u7ec4\u6392\u5e8f\u53ef\u4ee5\u987a\u4fbf\u7b97\u51fa\u9006\u5e8f\u5bf9 if len ( data ) < 2 : return 0 # start mid stop # 0, 1, 2, 3, 4, 5, 6, 7 def mergeAndCount ( data , start , mid , stop , tmp ): for i in range ( start , stop + 1 ): tmp [ i ] = data [ i ] i = start j = mid + 1 count = 0 for k in range ( start , stop + 1 ): if i == mid + 1 : # i \u89c1\u5e95\u4e86\uff0c\u5c31\u7528 j data [ k ] = tmp [ j ] j += 1 elif j == stop + 1 : # j \u89c1\u5e95\u4e86\uff0c\u5c31\u7528 i data [ k ] = tmp [ i ] i += 1 elif tmp [ i ] <= tmp [ j ]: data [ k ] = tmp [ i ] i += 1 else : data [ k ] = tmp [ j ] j += 1 count += mid - i + 1 # [i, mid] \u90fd\u80fd\u4e0e j \u7ec4\u6210\u9006\u5e8f\u5bf9 return count # start mid stop # 0, 1, 2, 3, 4, 5, 6, 7 def mergeSort ( data , start , stop , tmp ): if start == stop : return 0 mid = start + ( stop - start ) // 2 leftPairs = mergeSort ( data , start , mid , tmp ) rightPairs = mergeSort ( data , mid + 1 , stop , tmp ) if data [ mid ] <= data [ mid + 1 ]: return leftPairs + rightPairs crossPairs = mergeAndCount ( data , start , mid , stop , tmp ) return leftPairs + rightPairs + crossPairs tmp = [ 0 ] * len ( data ) cnt = mergeSort ( data [:], 0 , len ( data ) - 1 , tmp ) return cnt % 1000000007","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/36_find_first_common_node/","text":"36. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 \uff08\u6ce8\u610f\u56e0\u4e3a\u4f20\u5165\u6570\u636e\u662f\u94fe\u8868\uff0c\u6240\u4ee5\u9519\u8bef\u6d4b\u8bd5\u6570\u636e\u7684\u63d0\u793a\u662f\u7528\u5176\u4ed6\u65b9\u5f0f\u663e\u793a\u7684\uff0c\u4fdd\u8bc1\u4f20\u5165\u6570\u636e\u662f\u6b63\u786e\u7684\uff09 \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def FindFirstCommonNode ( self , pHead1 , pHead2 ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def FindFirstCommonNode ( self , pHead1 , pHead2 ): if pHead1 is None or pHead2 is None : return None cur1 = pHead1 cur2 = pHead2 while cur1 != cur2 : if cur1 : cur1 = cur1 . next else : cur1 = pHead2 if cur2 : cur2 = cur2 . next else : cur2 = pHead1 return cur1","title":"36 find first common node"},{"location":"CodingInterviews/Python/Solutions/36_find_first_common_node/#36","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 \uff08\u6ce8\u610f\u56e0\u4e3a\u4f20\u5165\u6570\u636e\u662f\u94fe\u8868\uff0c\u6240\u4ee5\u9519\u8bef\u6d4b\u8bd5\u6570\u636e\u7684\u63d0\u793a\u662f\u7528\u5176\u4ed6\u65b9\u5f0f\u663e\u793a\u7684\uff0c\u4fdd\u8bc1\u4f20\u5165\u6570\u636e\u662f\u6b63\u786e\u7684\uff09","title":"36. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9"},{"location":"CodingInterviews/Python/Solutions/36_find_first_common_node/#_1","text":"\u94fe\u8868","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/36_find_first_common_node/#_2","text":"1 2 3 4 5 6 7 8 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def FindFirstCommonNode ( self , pHead1 , pHead2 ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/36_find_first_common_node/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def FindFirstCommonNode ( self , pHead1 , pHead2 ): if pHead1 is None or pHead2 is None : return None cur1 = pHead1 cur2 = pHead2 while cur1 != cur2 : if cur1 : cur1 = cur1 . next else : cur1 = pHead2 if cur2 : cur2 = cur2 . next else : cur2 = pHead1 return cur1","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/","text":"37. \u6570\u5b57\u5728\u5347\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u5347\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u793a\u4f8b Link \u8f93\u5165 [1,2,3,3,3,3,4,5],3 \u8fd4\u56de\u503c 4 \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u4e8c\u5206 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def GetNumberOfK ( self , data , k ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u5148\u4e8c\u5206\u627e k\uff0c\u5728\u5411\u5de6\u53f3\u4e24\u8fb9\u641c\u7d22 k \u7684\u8fb9\u754c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def GetNumberOfK ( self , data , k ): if data == [] or k > data [ - 1 ]: return 0 left = 0 right = len ( data ) - 1 while left < right : mid = left + ( right - left ) // 2 if data [ mid ] < k : left = mid + 1 else : right = mid if data [ left ] != k : return 0 while left - 1 > 0 and data [ left - 1 ] == k : left -= 1 while right + 1 < len ( data ) and data [ right + 1 ] == k : right += 1 return right - left + 1 \u89e3\u6cd5\u4e8c Link \u5de6\u8fb9\u754c\u7528 k-0.5 \u627e\uff0c\u53f3\u8fb9\u754c\u7528 k+0.5 \u627e \u4e24\u4e2a\u6ce8\u610f\u70b9 [\u5de6\u8fb9\u754c, \u53f3\u8fb9\u754c) \u82e5 k == data[-1]\uff0c\u53f3\u8fb9\u754c\u9700\u8981\u52a0\u4e00\uff0c\u6b63\u597d\u4e3a len(data) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def GetNumberOfK ( self , data , k ): if data == [] or k > data [ - 1 ]: return 0 def binSearch ( data , num ): left = 0 right = len ( data ) - 1 while left < right : mid = left + ( right - left ) // 2 if data [ mid ] < num : left = mid + 1 else : right = mid return left if data [ - 1 ] == k : stop = len ( data ) else : stop = binSearch ( data , k + 0.5 ) return stop - binSearch ( data , k - 0.5 )","title":"37 get num of k"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/#37","text":"\u9898\u76ee\u63cf\u8ff0 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u5347\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002","title":"37. \u6570\u5b57\u5728\u5347\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/#_1","text":"\u8f93\u5165 [1,2,3,3,3,3,4,5],3 \u8fd4\u56de\u503c 4","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/#_2","text":"\u6570\u7ec4 \u4e8c\u5206","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def GetNumberOfK ( self , data , k ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/#_5","text":"\u5148\u4e8c\u5206\u627e k\uff0c\u5728\u5411\u5de6\u53f3\u4e24\u8fb9\u641c\u7d22 k \u7684\u8fb9\u754c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def GetNumberOfK ( self , data , k ): if data == [] or k > data [ - 1 ]: return 0 left = 0 right = len ( data ) - 1 while left < right : mid = left + ( right - left ) // 2 if data [ mid ] < k : left = mid + 1 else : right = mid if data [ left ] != k : return 0 while left - 1 > 0 and data [ left - 1 ] == k : left -= 1 while right + 1 < len ( data ) and data [ right + 1 ] == k : right += 1 return right - left + 1","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/37_get_num_of_k/#_6","text":"\u5de6\u8fb9\u754c\u7528 k-0.5 \u627e\uff0c\u53f3\u8fb9\u754c\u7528 k+0.5 \u627e \u4e24\u4e2a\u6ce8\u610f\u70b9 [\u5de6\u8fb9\u754c, \u53f3\u8fb9\u754c) \u82e5 k == data[-1]\uff0c\u53f3\u8fb9\u754c\u9700\u8981\u52a0\u4e00\uff0c\u6b63\u597d\u4e3a len(data) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def GetNumberOfK ( self , data , k ): if data == [] or k > data [ - 1 ]: return 0 def binSearch ( data , num ): left = 0 right = len ( data ) - 1 while left < right : mid = left + ( right - left ) // 2 if data [ mid ] < num : left = mid + 1 else : right = mid return left if data [ - 1 ] == k : stop = len ( data ) else : stop = binSearch ( data , k + 0.5 ) return stop - binSearch ( data , k - 0.5 )","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/38_tree_depth/","text":"38. \u6811\u7684\u6df1\u5ea6 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u77e5\u8bc6\u70b9 Link \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def TreeDepth ( self , pRoot ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 class Solution : def TreeDepth ( self , pRoot ): if pRoot is None : return 0 return max ( self . TreeDepth ( pRoot . left ), self . TreeDepth ( pRoot . right )) + 1","title":"38 tree depth"},{"location":"CodingInterviews/Python/Solutions/38_tree_depth/#38","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002","title":"38. \u6811\u7684\u6df1\u5ea6"},{"location":"CodingInterviews/Python/Solutions/38_tree_depth/#_1","text":"\u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/38_tree_depth/#_2","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def TreeDepth ( self , pRoot ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/38_tree_depth/#_3","text":"1 2 3 4 5 6 class Solution : def TreeDepth ( self , pRoot ): if pRoot is None : return 0 return max ( self . TreeDepth ( pRoot . left ), self . TreeDepth ( pRoot . right )) + 1","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/","text":"39. \u5e73\u8861\u4e8c\u53c9\u6811 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8be5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5176\u5e73\u8861\u6027\uff0c\u4e0d\u9700\u8981\u8003\u8651\u5176\u662f\u4e0d\u662f\u6392\u5e8f\u4e8c\u53c9\u6811\u3002 \u793a\u4f8b Link \u8f93\u5165 {1,2,3,4,5,6,7} \u8fd4\u56de\u503c true \u77e5\u8bc6\u70b9 Link \u6811 dfs \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def IsBalanced_Solution ( self , pRoot ): # write code here \u5e73\u8861\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u7a7a\u6811\u6216 \u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811 \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u6d4b\u6df1\u5ea6\u7684\u540c\u65f6\u68c0\u6d4b\u5e73\u8861 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def IsBalanced_Solution ( self , pRoot ): if pRoot is None : return True def getDepth ( node ): if node is None : return 0 l = getDepth ( node . left ) r = getDepth ( node . right ) if abs ( l - r ) > 1 : self . isBalance = False return max ( l , r ) + 1 self . isBalance = True getDepth ( pRoot ) return self . isBalance \u89e3\u6cd5\u4e8c Link dfs\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u9897\u5b50\u6811\u4e0d\u5e73\u8861\uff0c\u7acb\u5373\u4e00\u5c42\u5c42\u9000\u51fa\u6765 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def IsBalanced_Solution ( self , pRoot ): return self . dfs ( pRoot ) != - 1 def dfs ( self , node ): if node is None : return 0 l = self . dfs ( node . left ) if l == - 1 : return - 1 r = self . dfs ( node . right ) if r == - 1 : return - 1 if abs ( l - r ) > 1 : return - 1 return max ( l , r ) + 1","title":"39 is balanced"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/#39","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8be5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5176\u5e73\u8861\u6027\uff0c\u4e0d\u9700\u8981\u8003\u8651\u5176\u662f\u4e0d\u662f\u6392\u5e8f\u4e8c\u53c9\u6811\u3002","title":"39. \u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/#_1","text":"\u8f93\u5165 {1,2,3,4,5,6,7} \u8fd4\u56de\u503c true","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/#_2","text":"\u6811 dfs","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/#_3","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def IsBalanced_Solution ( self , pRoot ): # write code here \u5e73\u8861\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u7a7a\u6811\u6216 \u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/#_5","text":"\u6d4b\u6df1\u5ea6\u7684\u540c\u65f6\u68c0\u6d4b\u5e73\u8861 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def IsBalanced_Solution ( self , pRoot ): if pRoot is None : return True def getDepth ( node ): if node is None : return 0 l = getDepth ( node . left ) r = getDepth ( node . right ) if abs ( l - r ) > 1 : self . isBalance = False return max ( l , r ) + 1 self . isBalance = True getDepth ( pRoot ) return self . isBalance","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/39_is_balanced/#_6","text":"dfs\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u9897\u5b50\u6811\u4e0d\u5e73\u8861\uff0c\u7acb\u5373\u4e00\u5c42\u5c42\u9000\u51fa\u6765 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def IsBalanced_Solution ( self , pRoot ): return self . dfs ( pRoot ) != - 1 def dfs ( self , node ): if node is None : return 0 l = self . dfs ( node . left ) if l == - 1 : return - 1 r = self . dfs ( node . right ) if r == - 1 : return - 1 if abs ( l - r ) > 1 : return - 1 return max ( l , r ) + 1","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/40_find_nums_appear_once/","text":"40. \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 Link \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u77e5\u8bc6\u70b9 Link \u4f4d\u8fd0\u7b97 \u54c8\u5e0c \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # \u8fd4\u56de[a,b] \u5176\u4e2dab\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 def FindNumsAppearOnce ( self , array ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def FindNumsAppearOnce ( self , array ): if array == [] or len ( array ) % 2 == 1 : return None axorb = array [ 0 ] for i in range ( 1 , len ( array )): axorb ^= array [ i ] mask = 1 # mask \u53ef\u4ee5\u533a\u5206\u4e24\u4e2a\u5355\u72ec\u7684\u6570\uff0c\u5176\u4ed6\u7684\u6570\u4f1a\u6210\u53cc\u5730\u201c\u7ad9\u961f\u201d\u5e76\u6d88\u6389 while axorb % 2 == 0 : axorb >>= 1 mask <<= 1 teamA = None teamB = None for num in array : if num & mask == 0 : if teamA is None : teamA = num else : teamA ^= num else : if teamB is None : teamB = num else : teamB ^= num return teamA , teamB","title":"40 find nums_appear_once"},{"location":"CodingInterviews/Python/Solutions/40_find_nums_appear_once/#40","text":"\u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002","title":"40. \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"CodingInterviews/Python/Solutions/40_find_nums_appear_once/#_1","text":"\u4f4d\u8fd0\u7b97 \u54c8\u5e0c","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/40_find_nums_appear_once/#_2","text":"1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # \u8fd4\u56de[a,b] \u5176\u4e2dab\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57 def FindNumsAppearOnce ( self , array ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/40_find_nums_appear_once/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def FindNumsAppearOnce ( self , array ): if array == [] or len ( array ) % 2 == 1 : return None axorb = array [ 0 ] for i in range ( 1 , len ( array )): axorb ^= array [ i ] mask = 1 # mask \u53ef\u4ee5\u533a\u5206\u4e24\u4e2a\u5355\u72ec\u7684\u6570\uff0c\u5176\u4ed6\u7684\u6570\u4f1a\u6210\u53cc\u5730\u201c\u7ad9\u961f\u201d\u5e76\u6d88\u6389 while axorb % 2 == 0 : axorb >>= 1 mask <<= 1 teamA = None teamB = None for num in array : if num & mask == 0 : if teamA is None : teamA = num else : teamA ^= num else : if teamB is None : teamB = num else : teamB ^= num return teamA , teamB","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/","text":"41. \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 Link \u9898\u76ee\u63cf\u8ff0 \u5c0f\u660e\u5f88\u559c\u6b22\u6570\u5b66\uff0c\u6709\u4e00\u5929\u4ed6\u5728\u505a\u6570\u5b66\u4f5c\u4e1a\u65f6\uff0c\u8981\u6c42\u8ba1\u7b97\u51fa 9\\~16 \u7684\u548c\uff0c\u4ed6\u9a6c\u4e0a\u5c31\u5199\u51fa\u4e86\u6b63\u786e\u7b54\u6848\u662f 100\u3002 \u4f46\u662f\u4ed6\u5e76\u4e0d\u6ee1\u8db3\u4e8e\u6b64\uff0c\u4ed6\u5728\u60f3\u7a76\u7adf\u6709\u591a\u5c11\u79cd\u8fde\u7eed\u7684\u6b63\u6570\u5e8f\u5217\u7684\u548c\u4e3a 100 \uff08\u81f3\u5c11\u5305\u62ec\u4e24\u4e2a\u6570\uff09\u3002 \u6ca1\u591a\u4e45\uff0c\u4ed6\u5c31\u5f97\u5230\u53e6\u4e00\u7ec4\u8fde\u7eed\u6b63\u6570\u548c\u4e3a 100 \u7684\u5e8f\u5217\uff1a18,19,20,21,22\u3002 \u73b0\u5728\u628a\u95ee\u9898\u4ea4\u7ed9\u4f60\uff0c\u4f60\u80fd\u4e0d\u80fd\u4e5f\u5f88\u5feb\u7684\u627e\u51fa\u6240\u6709\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff1fGood Luck! \u8fd4\u56de\u503c\u63cf\u8ff0 \u8f93\u51fa\u6240\u6709\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002 \u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f \u77e5\u8bc6\u70b9 Link \u7a77\u4e3e \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FindContinuousSequence ( self , tsum ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link n//2 + (n//2+1) >= n \u7a77\u4e3e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def FindContinuousSequence ( self , tsum ): if tsum < 3 : # 3: [[1, 2]] return [] res = [] nums = range ( 1 , ( tsum + 1 ) // 2 + 1 ) for start in nums : num = tmpSum = start while tmpSum < tsum : num += 1 tmpSum += num if tmpSum == tsum : res . append ([ n for n in range ( start , num + 1 )]) break return res \u89e3\u6cd5\u4e8c Link \u4e0e\u201c\u89e3\u6cd5\u4e00\u201d\u6ca1\u4ec0\u4e48\u533a\u522b 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def FindContinuousSequence ( self , tsum ): res = [] nums = list ( range ( 1 , ( tsum + 1 ) // 2 + 1 )) for start in nums : num = tmpSum = start while tmpSum < tsum : num += 1 tmpSum += num if tmpSum == tsum : res . append ( nums [ start - 1 : num ]) break return res \u89e3\u6cd5\u4e09 Link \u7528\u5de6\u53f3\u6307\u9488\u786e\u5b9a\u8fb9\u754c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def FindContinuousSequence ( self , tsum ): l , r = 1 , 2 tmpSum = 3 res = [] while l < r : if tmpSum > tsum : tmpSum -= l l += 1 else : if tmpSum == tsum : res . append ([ i for i in range ( l , r + 1 )]) r += 1 tmpSum += r return res","title":"41 find continuous_sequence"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/#41-s","text":"\u9898\u76ee\u63cf\u8ff0 \u5c0f\u660e\u5f88\u559c\u6b22\u6570\u5b66\uff0c\u6709\u4e00\u5929\u4ed6\u5728\u505a\u6570\u5b66\u4f5c\u4e1a\u65f6\uff0c\u8981\u6c42\u8ba1\u7b97\u51fa 9\\~16 \u7684\u548c\uff0c\u4ed6\u9a6c\u4e0a\u5c31\u5199\u51fa\u4e86\u6b63\u786e\u7b54\u6848\u662f 100\u3002 \u4f46\u662f\u4ed6\u5e76\u4e0d\u6ee1\u8db3\u4e8e\u6b64\uff0c\u4ed6\u5728\u60f3\u7a76\u7adf\u6709\u591a\u5c11\u79cd\u8fde\u7eed\u7684\u6b63\u6570\u5e8f\u5217\u7684\u548c\u4e3a 100 \uff08\u81f3\u5c11\u5305\u62ec\u4e24\u4e2a\u6570\uff09\u3002 \u6ca1\u591a\u4e45\uff0c\u4ed6\u5c31\u5f97\u5230\u53e6\u4e00\u7ec4\u8fde\u7eed\u6b63\u6570\u548c\u4e3a 100 \u7684\u5e8f\u5217\uff1a18,19,20,21,22\u3002 \u73b0\u5728\u628a\u95ee\u9898\u4ea4\u7ed9\u4f60\uff0c\u4f60\u80fd\u4e0d\u80fd\u4e5f\u5f88\u5feb\u7684\u627e\u51fa\u6240\u6709\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff1fGood Luck! \u8fd4\u56de\u503c\u63cf\u8ff0 \u8f93\u51fa\u6240\u6709\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002 \u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f","title":"41. \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/#_1","text":"\u7a77\u4e3e","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FindContinuousSequence ( self , tsum ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/#_4","text":"n//2 + (n//2+1) >= n \u7a77\u4e3e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def FindContinuousSequence ( self , tsum ): if tsum < 3 : # 3: [[1, 2]] return [] res = [] nums = range ( 1 , ( tsum + 1 ) // 2 + 1 ) for start in nums : num = tmpSum = start while tmpSum < tsum : num += 1 tmpSum += num if tmpSum == tsum : res . append ([ n for n in range ( start , num + 1 )]) break return res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/#_5","text":"\u4e0e\u201c\u89e3\u6cd5\u4e00\u201d\u6ca1\u4ec0\u4e48\u533a\u522b 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def FindContinuousSequence ( self , tsum ): res = [] nums = list ( range ( 1 , ( tsum + 1 ) // 2 + 1 )) for start in nums : num = tmpSum = start while tmpSum < tsum : num += 1 tmpSum += num if tmpSum == tsum : res . append ( nums [ start - 1 : num ]) break return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/41_find_continuous_sequence/#_6","text":"\u7528\u5de6\u53f3\u6307\u9488\u786e\u5b9a\u8fb9\u754c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def FindContinuousSequence ( self , tsum ): l , r = 1 , 2 tmpSum = 3 res = [] while l < r : if tmpSum > tsum : tmpSum -= l l += 1 else : if tmpSum == tsum : res . append ([ i for i in range ( l , r + 1 )]) r += 1 tmpSum += r return res","title":"\u89e3\u6cd5\u4e09"},{"location":"CodingInterviews/Python/Solutions/42_find_nums_with_sum/","text":"42. \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 Link \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57 S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662f S\uff0c \u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8e S\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002 \u8fd4\u56de\u503c\u63cf\u8ff0 \u5bf9\u5e94\u6bcf\u4e2a\u6d4b\u8bd5\u6848\u4f8b\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\uff0c\u5c0f\u7684\u5148\u8f93\u51fa\u3002 \u77e5\u8bc6\u70b9 Link \u6570\u5b66 \u6570\u7ec4 \u53cc\u6307\u9488 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FindNumbersWithSum ( self , array , tsum ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def FindNumbersWithSum ( self , array , tsum ): left = 0 right = len ( array ) - 1 while left < right : twoSum = array [ left ] + array [ right ] if twoSum == tsum : return [ array [ left ], array [ right ]] elif twoSum < tsum : left += 1 else : right -= 1 return []","title":"42 find nums_with_sum"},{"location":"CodingInterviews/Python/Solutions/42_find_nums_with_sum/#42-s","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57 S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662f S\uff0c \u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8e S\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002 \u8fd4\u56de\u503c\u63cf\u8ff0 \u5bf9\u5e94\u6bcf\u4e2a\u6d4b\u8bd5\u6848\u4f8b\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\uff0c\u5c0f\u7684\u5148\u8f93\u51fa\u3002","title":"42. \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"CodingInterviews/Python/Solutions/42_find_nums_with_sum/#_1","text":"\u6570\u5b66 \u6570\u7ec4 \u53cc\u6307\u9488","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/42_find_nums_with_sum/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def FindNumbersWithSum ( self , array , tsum ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/42_find_nums_with_sum/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def FindNumbersWithSum ( self , array , tsum ): left = 0 right = len ( array ) - 1 while left < right : twoSum = array [ left ] + array [ right ] if twoSum == tsum : return [ array [ left ], array [ right ]] elif twoSum < tsum : left += 1 else : right -= 1 return []","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/43_left_rotate_string/","text":"43. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 Link \u9898\u76ee\u63cf\u8ff0 \u6c47\u7f16\u8bed\u8a00\u4e2d\u6709\u4e00\u79cd\u79fb\u4f4d\u6307\u4ee4\u53eb\u505a\u5faa\u73af\u5de6\u79fb(ROL)\uff0c \u73b0\u5728\u6709\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u7528\u5b57\u7b26\u4e32\u6a21\u62df\u8fd9\u4e2a\u6307\u4ee4\u7684\u8fd0\u7b97\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217 S\uff0c\u8bf7\u4f60\u628a\u5176\u5faa\u73af\u5de6\u79fb K \u4f4d\u540e\u7684\u5e8f\u5217\u8f93\u51fa\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u5e8f\u5217 S=\"abcXYZdef\"\uff0c\u8981\u6c42\u8f93\u51fa\u5faa\u73af\u5de6\u79fb 3 \u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5373 \"XYZdefabc\"\u3002 \u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1fOK\uff0c\u641e\u5b9a\u5b83\uff01 \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def LeftRotateString ( self , s , n ): # write code here \u53ef\u884c\u7684\u89e3 Link \u4e09\u6b21\u7ffb\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def LeftRotateString ( self , s , n ): if s == '' : return '' def myReverse ( letters , start , stop ): # [start, stop] while start < stop : letters [ start ], letters [ stop ] = letters [ stop ], letters [ start ] start += 1 stop -= 1 letters = list ( s ) size = len ( s ) n = n % size myReverse ( letters , 0 , n - 1 ) myReverse ( letters , n , size - 1 ) myReverse ( letters , 0 , size - 1 ) return '' . join ( letters ) \u975e\u7b97\u6cd5\u9898\u89e3\u6cd5 Link 1 2 3 class Solution : def LeftRotateString ( self , s , n ): return s [ n :] + s [: n ]","title":"43 left rotate_string"},{"location":"CodingInterviews/Python/Solutions/43_left_rotate_string/#43","text":"\u9898\u76ee\u63cf\u8ff0 \u6c47\u7f16\u8bed\u8a00\u4e2d\u6709\u4e00\u79cd\u79fb\u4f4d\u6307\u4ee4\u53eb\u505a\u5faa\u73af\u5de6\u79fb(ROL)\uff0c \u73b0\u5728\u6709\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u7528\u5b57\u7b26\u4e32\u6a21\u62df\u8fd9\u4e2a\u6307\u4ee4\u7684\u8fd0\u7b97\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217 S\uff0c\u8bf7\u4f60\u628a\u5176\u5faa\u73af\u5de6\u79fb K \u4f4d\u540e\u7684\u5e8f\u5217\u8f93\u51fa\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u5e8f\u5217 S=\"abcXYZdef\"\uff0c\u8981\u6c42\u8f93\u51fa\u5faa\u73af\u5de6\u79fb 3 \u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5373 \"XYZdefabc\"\u3002 \u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1fOK\uff0c\u641e\u5b9a\u5b83\uff01","title":"43. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"CodingInterviews/Python/Solutions/43_left_rotate_string/#_1","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/43_left_rotate_string/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def LeftRotateString ( self , s , n ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/43_left_rotate_string/#_3","text":"\u4e09\u6b21\u7ffb\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def LeftRotateString ( self , s , n ): if s == '' : return '' def myReverse ( letters , start , stop ): # [start, stop] while start < stop : letters [ start ], letters [ stop ] = letters [ stop ], letters [ start ] start += 1 stop -= 1 letters = list ( s ) size = len ( s ) n = n % size myReverse ( letters , 0 , n - 1 ) myReverse ( letters , n , size - 1 ) myReverse ( letters , 0 , size - 1 ) return '' . join ( letters )","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/43_left_rotate_string/#_4","text":"1 2 3 class Solution : def LeftRotateString ( self , s , n ): return s [ n :] + s [: n ]","title":"\u975e\u7b97\u6cd5\u9898\u89e3\u6cd5"},{"location":"CodingInterviews/Python/Solutions/44_reverse_sentence/","text":"44. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f Link \u9898\u76ee\u63cf\u8ff0 \u725b\u5ba2\u6700\u8fd1\u6765\u4e86\u4e00\u4e2a\u65b0\u5458\u5de5 Fish\uff0c\u6bcf\u5929\u65e9\u6668\u603b\u662f\u4f1a\u62ff\u7740\u4e00\u672c\u82f1\u6587\u6742\u5fd7\uff0c\u5199\u4e9b\u53e5\u5b50\u5728\u672c\u5b50\u4e0a\u3002 \u540c\u4e8b Cat \u5bf9 Fish \u5199\u7684\u5185\u5bb9\u9887\u611f\u5174\u8da3\uff0c\u6709\u4e00\u5929\u4ed6\u5411 Fish \u501f\u6765\u7ffb\u770b\uff0c\u4f46\u5374\u8bfb\u4e0d\u61c2\u5b83\u7684\u610f\u601d\u3002 \u4f8b\u5982\uff0c\"student. a am I\"\u3002 \u540e\u6765\u624d\u610f\u8bc6\u5230\uff0c\u8fd9\u5bb6\u4f19\u539f\u6765\u628a\u53e5\u5b50\u5355\u8bcd\u7684\u987a\u5e8f\u7ffb\u8f6c\u4e86\uff0c\u6b63\u786e\u7684\u53e5\u5b50\u5e94\u8be5\u662f \"I am a student.\"\u3002 Cat \u5bf9\u4e00\u4e00\u7684\u7ffb\u8f6c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u53ef\u4e0d\u5728\u884c\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4e48\uff1f \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def ReverseSentence ( self , s ): # write code here \u53ef\u884c\u7684\u89e3 Link \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def ReverseSentence ( self , s ): if s == '' : return '' res = '' tmp = '' for c in s : if c != ' ' : tmp += c else : res = tmp + ' ' + res tmp = '' res = tmp + ' ' + res return res [: - 1 ] # \u725b\u5ba2\u7f51\u4e0d\u5ffd\u7565\u672b\u5c3e\u7684\u7a7a\u683c\uff0c\u6240\u4ee5\u624b\u52a8\u5220\u9664 \u65b9\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 class Solution : def ReverseSentence ( self , s ): if s == '' : return '' tmp = s . split ( ' ' ) tmp . reverse () return ' ' . join ( tmp ) \u7f29\u5199 1 2 3 class Solution : def ReverseSentence ( self , s ): return ' ' . join ( s . split ( ' ' )[:: - 1 ]) if s != '' else s","title":"44 reverse sentence"},{"location":"CodingInterviews/Python/Solutions/44_reverse_sentence/#44","text":"\u9898\u76ee\u63cf\u8ff0 \u725b\u5ba2\u6700\u8fd1\u6765\u4e86\u4e00\u4e2a\u65b0\u5458\u5de5 Fish\uff0c\u6bcf\u5929\u65e9\u6668\u603b\u662f\u4f1a\u62ff\u7740\u4e00\u672c\u82f1\u6587\u6742\u5fd7\uff0c\u5199\u4e9b\u53e5\u5b50\u5728\u672c\u5b50\u4e0a\u3002 \u540c\u4e8b Cat \u5bf9 Fish \u5199\u7684\u5185\u5bb9\u9887\u611f\u5174\u8da3\uff0c\u6709\u4e00\u5929\u4ed6\u5411 Fish \u501f\u6765\u7ffb\u770b\uff0c\u4f46\u5374\u8bfb\u4e0d\u61c2\u5b83\u7684\u610f\u601d\u3002 \u4f8b\u5982\uff0c\"student. a am I\"\u3002 \u540e\u6765\u624d\u610f\u8bc6\u5230\uff0c\u8fd9\u5bb6\u4f19\u539f\u6765\u628a\u53e5\u5b50\u5355\u8bcd\u7684\u987a\u5e8f\u7ffb\u8f6c\u4e86\uff0c\u6b63\u786e\u7684\u53e5\u5b50\u5e94\u8be5\u662f \"I am a student.\"\u3002 Cat \u5bf9\u4e00\u4e00\u7684\u7ffb\u8f6c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u53ef\u4e0d\u5728\u884c\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4e48\uff1f","title":"44. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f"},{"location":"CodingInterviews/Python/Solutions/44_reverse_sentence/#_1","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/44_reverse_sentence/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def ReverseSentence ( self , s ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/44_reverse_sentence/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/44_reverse_sentence/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def ReverseSentence ( self , s ): if s == '' : return '' res = '' tmp = '' for c in s : if c != ' ' : tmp += c else : res = tmp + ' ' + res tmp = '' res = tmp + ' ' + res return res [: - 1 ] # \u725b\u5ba2\u7f51\u4e0d\u5ffd\u7565\u672b\u5c3e\u7684\u7a7a\u683c\uff0c\u6240\u4ee5\u624b\u52a8\u5220\u9664","title":"\u65b9\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/44_reverse_sentence/#_5","text":"1 2 3 4 5 6 7 8 class Solution : def ReverseSentence ( self , s ): if s == '' : return '' tmp = s . split ( ' ' ) tmp . reverse () return ' ' . join ( tmp ) \u7f29\u5199 1 2 3 class Solution : def ReverseSentence ( self , s ): return ' ' . join ( s . split ( ' ' )[:: - 1 ]) if s != '' else s","title":"\u65b9\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/45_is_continuous/","text":"45. \u6251\u514b\u724c\u987a\u5b50 Link \u9898\u76ee\u63cf\u8ff0 LL \u4eca\u5929\u5fc3\u60c5\u7279\u522b\u597d\uff0c\u56e0\u4e3a\u4ed6\u53bb\u4e70\u4e86\u4e00\u526f\u6251\u514b\u724c\uff0c\u53d1\u73b0\u91cc\u9762\u5c45\u7136\u6709 2 \u4e2a\u5927\u738b\uff0c2 \u4e2a\u5c0f\u738b\uff08\u4e00\u526f\u724c\u539f\u672c\u662f 54 \u5f20 ^_^\uff09... \u4ed6\u968f\u673a\u4ece\u4e2d\u62bd\u51fa\u4e86 5 \u5f20\u724c\uff0c\u60f3\u6d4b\u6d4b\u81ea\u5df1\u7684\u624b\u6c14\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u62bd\u5230\u987a\u5b50\uff0c\u5982\u679c\u62bd\u5230\u7684\u8bdd\uff0c\u4ed6\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\uff0c\u563f\u563f\uff01\uff01 \u201c\u7ea2\u5fc3A\uff0c\u9ed1\u68433\uff0c\u5c0f\u738b\uff0c\u5927\u738b\uff0c\u65b9\u72475\u201d\uff0c\"Oh My God!\" \u4e0d\u662f\u987a\u5b50..... LL \u4e0d\u9ad8\u5174\u4e86\uff0c\u4ed6\u60f3\u4e86\u60f3\uff0c\u51b3\u5b9a\u5927\\\u5c0f \u738b\u53ef\u4ee5\u770b\u6210\u4efb\u4f55\u6570\u5b57\uff0c\u5e76\u4e14 A \u770b\u4f5c 1\uff0cJ \u4e3a 11\uff0cQ \u4e3a 12\uff0cK \u4e3a 13\u3002 \u4e0a\u9762\u7684 5 \u5f20\u724c\u5c31\u53ef\u4ee5\u53d8\u6210 \"1,2,3,4,5\" \uff08\u5927\u5c0f\u738b\u5206\u522b\u770b\u4f5c 2 \u548c 4\uff09\uff0c\"So Lucky!\"\u3002LL \u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\u5566\u3002 \u73b0\u5728\uff0c\u8981\u6c42\u4f60\u4f7f\u7528\u8fd9\u5e45\u724c\u6a21\u62df\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u544a\u8bc9\u6211\u4eec LL \u7684\u8fd0\u6c14\u5982\u4f55\uff0c \u5982\u679c\u724c\u80fd\u7ec4\u6210\u987a\u5b50\u5c31\u8f93\u51fa true\uff0c\u5426\u5219\u5c31\u8f93\u51fa false\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5927\u5c0f\u738b\u662f 0\u3002 \u793a\u4f8b Link \u8f93\u5165 [0,3,2,6,4] \u8fd4\u56de\u503c true \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def IsContinuous ( self , numbers ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def IsContinuous ( self , numbers ): if numbers == []: return False numbers . sort () kings = numbers . count ( 0 ) start = kings + 1 for i in range ( start , len ( numbers )): while numbers [ i ] != numbers [ i - 1 ] + 1 : if kings > 0 : numbers [ i - 1 ] += 1 kings -= 1 else : return False return True","title":"45 is continuous"},{"location":"CodingInterviews/Python/Solutions/45_is_continuous/#45","text":"\u9898\u76ee\u63cf\u8ff0 LL \u4eca\u5929\u5fc3\u60c5\u7279\u522b\u597d\uff0c\u56e0\u4e3a\u4ed6\u53bb\u4e70\u4e86\u4e00\u526f\u6251\u514b\u724c\uff0c\u53d1\u73b0\u91cc\u9762\u5c45\u7136\u6709 2 \u4e2a\u5927\u738b\uff0c2 \u4e2a\u5c0f\u738b\uff08\u4e00\u526f\u724c\u539f\u672c\u662f 54 \u5f20 ^_^\uff09... \u4ed6\u968f\u673a\u4ece\u4e2d\u62bd\u51fa\u4e86 5 \u5f20\u724c\uff0c\u60f3\u6d4b\u6d4b\u81ea\u5df1\u7684\u624b\u6c14\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u62bd\u5230\u987a\u5b50\uff0c\u5982\u679c\u62bd\u5230\u7684\u8bdd\uff0c\u4ed6\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\uff0c\u563f\u563f\uff01\uff01 \u201c\u7ea2\u5fc3A\uff0c\u9ed1\u68433\uff0c\u5c0f\u738b\uff0c\u5927\u738b\uff0c\u65b9\u72475\u201d\uff0c\"Oh My God!\" \u4e0d\u662f\u987a\u5b50..... LL \u4e0d\u9ad8\u5174\u4e86\uff0c\u4ed6\u60f3\u4e86\u60f3\uff0c\u51b3\u5b9a\u5927\\\u5c0f \u738b\u53ef\u4ee5\u770b\u6210\u4efb\u4f55\u6570\u5b57\uff0c\u5e76\u4e14 A \u770b\u4f5c 1\uff0cJ \u4e3a 11\uff0cQ \u4e3a 12\uff0cK \u4e3a 13\u3002 \u4e0a\u9762\u7684 5 \u5f20\u724c\u5c31\u53ef\u4ee5\u53d8\u6210 \"1,2,3,4,5\" \uff08\u5927\u5c0f\u738b\u5206\u522b\u770b\u4f5c 2 \u548c 4\uff09\uff0c\"So Lucky!\"\u3002LL \u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\u5566\u3002 \u73b0\u5728\uff0c\u8981\u6c42\u4f60\u4f7f\u7528\u8fd9\u5e45\u724c\u6a21\u62df\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u544a\u8bc9\u6211\u4eec LL \u7684\u8fd0\u6c14\u5982\u4f55\uff0c \u5982\u679c\u724c\u80fd\u7ec4\u6210\u987a\u5b50\u5c31\u8f93\u51fa true\uff0c\u5426\u5219\u5c31\u8f93\u51fa false\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5927\u5c0f\u738b\u662f 0\u3002","title":"45. \u6251\u514b\u724c\u987a\u5b50"},{"location":"CodingInterviews/Python/Solutions/45_is_continuous/#_1","text":"\u8f93\u5165 [0,3,2,6,4] \u8fd4\u56de\u503c true","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/45_is_continuous/#_2","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/45_is_continuous/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def IsContinuous ( self , numbers ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/45_is_continuous/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def IsContinuous ( self , numbers ): if numbers == []: return False numbers . sort () kings = numbers . count ( 0 ) start = kings + 1 for i in range ( start , len ( numbers )): while numbers [ i ] != numbers [ i - 1 ] + 1 : if kings > 0 : numbers [ i - 1 ] += 1 kings -= 1 else : return False return True","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/","text":"46. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u6bcf\u5e74\u516d\u4e00\u513f\u7ae5\u8282\uff0c\u725b\u5ba2\u90fd\u4f1a\u51c6\u5907\u4e00\u4e9b\u5c0f\u793c\u7269\u53bb\u770b\u671b\u5b64\u513f\u9662\u7684\u5c0f\u670b\u53cb\uff0c\u4eca\u5e74\u4ea6\u662f\u5982\u6b64\u3002 HF \u4f5c\u4e3a\u725b\u5ba2\u7684\u8d44\u6df1\u5143\u8001\uff0c\u81ea\u7136\u4e5f\u51c6\u5907\u4e86\u4e00\u4e9b\u5c0f\u6e38\u620f\u3002\u5176\u4e2d\uff0c\u6709\u4e2a\u6e38\u620f\u662f\u8fd9\u6837\u7684\uff1a \u9996\u5148\uff0c\u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e\uff0c\u4ed6\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570 m\uff0c\u8ba9\u7f16\u53f7 \u4e3a 0 \u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002 \u6bcf\u6b21\u558a\u5230 m-1 \u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269\uff0c\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d\uff0c \u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u7ee7\u7eed 0...m-1 \u62a5\u6570 .... \u8fd9\u6837\u4e0b\u53bb .... \u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14\uff0c\u5e76\u4e14\u62ff\u5230\u725b\u5ba2\u540d\u8d35\u7684\u201c\u540d\u4fa6\u63a2\u67ef\u5357\u201d\u5178\u85cf\u7248\uff08\u540d\u989d\u6709\u9650\u54e6!!^_^\uff09\u3002 \u8bf7\u4f60\u8bd5\u7740\u60f3\u4e0b\uff0c\u54ea\u4e2a\u5c0f\u670b\u53cb\u4f1a\u5f97\u5230\u8fd9\u4efd\u793c\u54c1\u5462\uff1f\uff08\u6ce8\uff1a\u5c0f\u670b\u53cb\u7684\u7f16\u53f7\u662f\u4ece 0 \u5230 n-1\uff09 \u5982\u679c\u6ca1\u6709\u5c0f\u670b\u53cb\uff0c\u8bf7\u8fd4\u56de -1\u3002 \u793a\u4f8b Link \u8f93\u5165 5, 3 \u8fd4\u56de\u503c 3 \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def LastRemaining_Solution ( self , n , m ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u7528\u4e00\u4e2a list \u6807\u8bb0\u5269\u4f59\u7684\u5c0f\u670b\u53cb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def LastRemaining_Solution ( self , n , m ): if n < 1 : return - 1 playing = [ True ] * n i = 0 cnt = 0 rest = n while True : if playing [ i ]: cnt += 1 if cnt == ( m - 1 ) % rest + 1 : cnt = 0 playing [ i ] = False rest -= 1 if rest == 0 : return i i += 1 if i == n : i = 0 \u89e3\u6cd5\u4e8c Link \u63a8\u516c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def LastRemaining_Solution ( self , n , m ): \"\"\" f(n) = (f(n-1) + m) % (n-1 peoples) # n \u4e2a\u4eba\u7684\u60c5\u51b5\uff0c\u83b7\u80dc\u8005\u7684\u7d22\u5f15 n: 0, 1, ..., m-2, [m-1], m, m+1, ..., (winner), ..., n-1 n-1: m, m+1, ..., (winner), ..., n-1, 0, 1, ..., m-2 ... 1: 0 <- winner \u6839\u636e (winner) \u5728 x-1 \u4eba\u7684\u7d22\u5f15\uff0c\u8ba1\u7b97\u5176\u5728 x \u4eba\u7684\u7d22\u5f15\uff0c\u76f4\u5230 n \u4eba\u7684\u7d22\u5f15 \"\"\" if n < 1 : return - 1 res = 0 for size in range ( 2 , n + 1 ): res = ( res + m ) % size return res \u89e3\u6cd5\u4e09 Link \u7528\u94fe\u8868\u6a21\u62df\u5c0f\u670b\u53cb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class ListNode : def __init__ ( self , x ): self . val = x self . next = None class Solution : def LastRemaining_Solution ( self , n , m ): if n < 1 : return - 1 dummy = ListNode ( 0 ) tail = dummy for i in range ( n ): node = ListNode ( i ) tail . next = node tail = node tail . next = dummy . next return self . lastRemaining ( dummy . next , tail , m ) def lastRemaining ( self , head , tail , m ): cur = head pre = tail while cur . next is not cur : for i in range ( m - 1 ): pre = pre . next cur = cur . next pre . next = cur . next cur = cur . next return cur . val","title":"46 last remaining"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#46","text":"\u9898\u76ee\u63cf\u8ff0 \u6bcf\u5e74\u516d\u4e00\u513f\u7ae5\u8282\uff0c\u725b\u5ba2\u90fd\u4f1a\u51c6\u5907\u4e00\u4e9b\u5c0f\u793c\u7269\u53bb\u770b\u671b\u5b64\u513f\u9662\u7684\u5c0f\u670b\u53cb\uff0c\u4eca\u5e74\u4ea6\u662f\u5982\u6b64\u3002 HF \u4f5c\u4e3a\u725b\u5ba2\u7684\u8d44\u6df1\u5143\u8001\uff0c\u81ea\u7136\u4e5f\u51c6\u5907\u4e86\u4e00\u4e9b\u5c0f\u6e38\u620f\u3002\u5176\u4e2d\uff0c\u6709\u4e2a\u6e38\u620f\u662f\u8fd9\u6837\u7684\uff1a \u9996\u5148\uff0c\u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e\uff0c\u4ed6\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570 m\uff0c\u8ba9\u7f16\u53f7 \u4e3a 0 \u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002 \u6bcf\u6b21\u558a\u5230 m-1 \u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269\uff0c\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d\uff0c \u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u7ee7\u7eed 0...m-1 \u62a5\u6570 .... \u8fd9\u6837\u4e0b\u53bb .... \u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14\uff0c\u5e76\u4e14\u62ff\u5230\u725b\u5ba2\u540d\u8d35\u7684\u201c\u540d\u4fa6\u63a2\u67ef\u5357\u201d\u5178\u85cf\u7248\uff08\u540d\u989d\u6709\u9650\u54e6!!^_^\uff09\u3002 \u8bf7\u4f60\u8bd5\u7740\u60f3\u4e0b\uff0c\u54ea\u4e2a\u5c0f\u670b\u53cb\u4f1a\u5f97\u5230\u8fd9\u4efd\u793c\u54c1\u5462\uff1f\uff08\u6ce8\uff1a\u5c0f\u670b\u53cb\u7684\u7f16\u53f7\u662f\u4ece 0 \u5230 n-1\uff09 \u5982\u679c\u6ca1\u6709\u5c0f\u670b\u53cb\uff0c\u8bf7\u8fd4\u56de -1\u3002","title":"46. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#_1","text":"\u8f93\u5165 5, 3 \u8fd4\u56de\u503c 3","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#_2","text":"\u94fe\u8868 \u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def LastRemaining_Solution ( self , n , m ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#_5","text":"\u7528\u4e00\u4e2a list \u6807\u8bb0\u5269\u4f59\u7684\u5c0f\u670b\u53cb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def LastRemaining_Solution ( self , n , m ): if n < 1 : return - 1 playing = [ True ] * n i = 0 cnt = 0 rest = n while True : if playing [ i ]: cnt += 1 if cnt == ( m - 1 ) % rest + 1 : cnt = 0 playing [ i ] = False rest -= 1 if rest == 0 : return i i += 1 if i == n : i = 0","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#_6","text":"\u63a8\u516c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def LastRemaining_Solution ( self , n , m ): \"\"\" f(n) = (f(n-1) + m) % (n-1 peoples) # n \u4e2a\u4eba\u7684\u60c5\u51b5\uff0c\u83b7\u80dc\u8005\u7684\u7d22\u5f15 n: 0, 1, ..., m-2, [m-1], m, m+1, ..., (winner), ..., n-1 n-1: m, m+1, ..., (winner), ..., n-1, 0, 1, ..., m-2 ... 1: 0 <- winner \u6839\u636e (winner) \u5728 x-1 \u4eba\u7684\u7d22\u5f15\uff0c\u8ba1\u7b97\u5176\u5728 x \u4eba\u7684\u7d22\u5f15\uff0c\u76f4\u5230 n \u4eba\u7684\u7d22\u5f15 \"\"\" if n < 1 : return - 1 res = 0 for size in range ( 2 , n + 1 ): res = ( res + m ) % size return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/46_last_remaining/#_7","text":"\u7528\u94fe\u8868\u6a21\u62df\u5c0f\u670b\u53cb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class ListNode : def __init__ ( self , x ): self . val = x self . next = None class Solution : def LastRemaining_Solution ( self , n , m ): if n < 1 : return - 1 dummy = ListNode ( 0 ) tail = dummy for i in range ( n ): node = ListNode ( i ) tail . next = node tail = node tail . next = dummy . next return self . lastRemaining ( dummy . next , tail , m ) def lastRemaining ( self , head , tail , m ): cur = head pre = tail while cur . next is not cur : for i in range ( m - 1 ): pre = pre . next cur = cur . next pre . next = cur . next cur = cur . next return cur . val","title":"\u89e3\u6cd5\u4e09"},{"location":"CodingInterviews/Python/Solutions/47_sum/","text":"47. \u6c42 1 + 2 + 3 + ... + n Link \u9898\u76ee\u63cf\u8ff0 \u6c42 1+2+3+...+n\uff0c \u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5(A?B:C)\u3002 \u77e5\u8bc6\u70b9 Link \u8fdb\u5236\u8f6c\u5316 \u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Sum_Solution ( self , n ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link 1 2 3 class Solution : def Sum_Solution ( self , n ): return sum ( range ( 1 , n + 1 )) \u89e3\u6cd5\u4e8c Link 1 2 3 class Solution : def Sum_Solution ( self , n ): return __import__ ( \"functools\" ) . reduce ( lambda x , y : x + y , range ( n + 1 )) \u89e3\u6cd5\u4e09 Link 1 2 3 class Solution : def Sum_Solution ( self , n ): return n and ( n + self . Sum_Solution ( n - 1 ))","title":"47 sum"},{"location":"CodingInterviews/Python/Solutions/47_sum/#47-1-2-3-n","text":"\u9898\u76ee\u63cf\u8ff0 \u6c42 1+2+3+...+n\uff0c \u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5(A?B:C)\u3002","title":"47. \u6c42 1 + 2 + 3 + ... + n"},{"location":"CodingInterviews/Python/Solutions/47_sum/#_1","text":"\u8fdb\u5236\u8f6c\u5316 \u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/47_sum/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Sum_Solution ( self , n ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/47_sum/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/47_sum/#_4","text":"1 2 3 class Solution : def Sum_Solution ( self , n ): return sum ( range ( 1 , n + 1 ))","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/47_sum/#_5","text":"1 2 3 class Solution : def Sum_Solution ( self , n ): return __import__ ( \"functools\" ) . reduce ( lambda x , y : x + y , range ( n + 1 ))","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/47_sum/#_6","text":"1 2 3 class Solution : def Sum_Solution ( self , n ): return n and ( n + self . Sum_Solution ( n - 1 ))","title":"\u89e3\u6cd5\u4e09"},{"location":"CodingInterviews/Python/Solutions/48_add/","text":"48. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u5de6\u52a0\u6cd5 Link \u9898\u76ee\u63cf\u8ff0 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528 +\u3001-\u3001*\u3001/ \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u77e5\u8bc6\u70b9 Link \u8fdb\u5236\u8f6c\u5316 \u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Add ( self , num1 , num2 ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def Add ( self , num1 , num2 ): \"\"\" num1 ^ num2: \u4e0d\u8ba1\u8fdb\u4f4d\u7684\u76f8\u52a0 (num1 & num2) << 1: \u8fdb\u4f4d \u5faa\u73af\u81f3\u8fdb\u4f4d\u4e3a\u96f6 ~(num1 ^ 0xffffffff): \u6a21\u4eff C\uff0c\u5f53 num1 \u4e3a\u8d1f\u6570\u65f6\uff0c\u628a\u5b83\u4ece\u65e0\u7b26\u53f7\u6570\u8f6c\u4e3a\u6709\u7b26\u53f7\u6570 C \u7684 int \u7684\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\uff0cPython \u6ca1\u6709 \"\"\" while num2 != 0 : num1 , num2 = \\ ( num1 ^ num2 ) & 0xffffffff , (( num1 & num2 ) << 1 ) & 0xffffffff return num1 if num1 <= 0x7fffffff else ~ ( num1 ^ 0xffffffff )","title":"48 add"},{"location":"CodingInterviews/Python/Solutions/48_add/#48","text":"\u9898\u76ee\u63cf\u8ff0 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528 +\u3001-\u3001*\u3001/ \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002","title":"48. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u5de6\u52a0\u6cd5"},{"location":"CodingInterviews/Python/Solutions/48_add/#_1","text":"\u8fdb\u5236\u8f6c\u5316 \u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/48_add/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def Add ( self , num1 , num2 ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/48_add/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def Add ( self , num1 , num2 ): \"\"\" num1 ^ num2: \u4e0d\u8ba1\u8fdb\u4f4d\u7684\u76f8\u52a0 (num1 & num2) << 1: \u8fdb\u4f4d \u5faa\u73af\u81f3\u8fdb\u4f4d\u4e3a\u96f6 ~(num1 ^ 0xffffffff): \u6a21\u4eff C\uff0c\u5f53 num1 \u4e3a\u8d1f\u6570\u65f6\uff0c\u628a\u5b83\u4ece\u65e0\u7b26\u53f7\u6570\u8f6c\u4e3a\u6709\u7b26\u53f7\u6570 C \u7684 int \u7684\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\uff0cPython \u6ca1\u6709 \"\"\" while num2 != 0 : num1 , num2 = \\ ( num1 ^ num2 ) & 0xffffffff , (( num1 & num2 ) << 1 ) & 0xffffffff return num1 if num1 <= 0x7fffffff else ~ ( num1 ^ 0xffffffff )","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/49_str_to_int/","text":"49. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 \u6570\u503c\u4e3a 0 \u6216\u8005\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de 0\u3002 \u8f93\u5165\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u62ec\u6570\u5b57\u5b57\u6bcd\u7b26\u53f7\uff0c\u53ef\u4ee5\u4e3a\u7a7a \u8fd4\u56de\u503c\u63cf\u8ff0 \u5982\u679c\u662f\u5408\u6cd5\u7684\u6570\u503c\u8868\u8fbe\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u8fd4\u56de 0 \u793a\u4f8b Link \u8f93\u5165 +2147483647 1a33 \u8fd4\u56de\u503c 2147483647 0 \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def StrToInt ( self , s ): # write code here \u53ef\u884c\u7684\u89e3 Link \u53bb\u5de6\u53f3\u7a7a\u683c \u8bb0\u5f55\u7b26\u53f7 \u8f6c\u5b57\u7b26\u4e3a\u6570\u5b57 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def StrToInt ( self , s ): if s == '' : return 0 string = s . strip () num = 0 start = 0 symbol = 1 if string [ 0 ] == '+' : start += 1 elif string [ 0 ] == '-' : start += 1 symbol = - 1 for i in range ( start , len ( string )): if '0' <= string [ i ] <= '9' : num = num * 10 + ord ( string [ i ]) - 48 else : return 0 return num * symbol","title":"49 str to int"},{"location":"CodingInterviews/Python/Solutions/49_str_to_int/#49","text":"\u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 \u6570\u503c\u4e3a 0 \u6216\u8005\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de 0\u3002 \u8f93\u5165\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u62ec\u6570\u5b57\u5b57\u6bcd\u7b26\u53f7\uff0c\u53ef\u4ee5\u4e3a\u7a7a \u8fd4\u56de\u503c\u63cf\u8ff0 \u5982\u679c\u662f\u5408\u6cd5\u7684\u6570\u503c\u8868\u8fbe\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u8fd4\u56de 0","title":"49. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},{"location":"CodingInterviews/Python/Solutions/49_str_to_int/#_1","text":"\u8f93\u5165 +2147483647 1a33 \u8fd4\u56de\u503c 2147483647 0","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/49_str_to_int/#_2","text":"\u5b57\u7b26\u4e32 \u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/49_str_to_int/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def StrToInt ( self , s ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/49_str_to_int/#_4","text":"\u53bb\u5de6\u53f3\u7a7a\u683c \u8bb0\u5f55\u7b26\u53f7 \u8f6c\u5b57\u7b26\u4e3a\u6570\u5b57 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def StrToInt ( self , s ): if s == '' : return 0 string = s . strip () num = 0 start = 0 symbol = 1 if string [ 0 ] == '+' : start += 1 elif string [ 0 ] == '-' : start += 1 symbol = - 1 for i in range ( start , len ( string )): if '0' <= string [ i ] <= '9' : num = num * 10 + ord ( string [ i ]) - 48 else : return 0 return num * symbol","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/50_duplicate/","text":"50. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 Link \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0 \u5230 n-1 \u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002 \u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a 7 \u7684\u6570\u7ec4 {2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57 2\u3002 \u8fd4\u56de\u63cf\u8ff0 \u5982\u679c\u6570\u7ec4\u4e2d\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u51fd\u6570\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u628a\u91cd\u590d\u7684\u6570\u5b57\u653e\u5230\u53c2\u6570 duplication[0] \u4e2d\u3002 \uff08ps: duplication \u5df2\u7ecf\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u4f7f\u7528\u3002\uff09 \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 # -*- coding:utf-8 -*- class Solution : # \u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f~\u627e\u5230\u4efb\u610f\u91cd\u590d\u7684\u4e00\u4e2a\u503c\u5e76\u8d4b\u503c\u5230duplication[0] # \u51fd\u6570\u8fd4\u56deTrue/False def duplicate ( self , numbers , duplication ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 class Solution : def duplicate ( self , numbers , duplication ): table = set () for num in numbers : if num not in table : table . add ( num ) else : duplication [ 0 ] = num return True return False","title":"50 duplicate"},{"location":"CodingInterviews/Python/Solutions/50_duplicate/#50","text":"\u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0 \u5230 n-1 \u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002 \u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a 7 \u7684\u6570\u7ec4 {2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57 2\u3002 \u8fd4\u56de\u63cf\u8ff0 \u5982\u679c\u6570\u7ec4\u4e2d\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u51fd\u6570\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u628a\u91cd\u590d\u7684\u6570\u5b57\u653e\u5230\u53c2\u6570 duplication[0] \u4e2d\u3002 \uff08ps: duplication \u5df2\u7ecf\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u4f7f\u7528\u3002\uff09","title":"50. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"CodingInterviews/Python/Solutions/50_duplicate/#_1","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/50_duplicate/#_2","text":"1 2 3 4 5 6 # -*- coding:utf-8 -*- class Solution : # \u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f~\u627e\u5230\u4efb\u610f\u91cd\u590d\u7684\u4e00\u4e2a\u503c\u5e76\u8d4b\u503c\u5230duplication[0] # \u51fd\u6570\u8fd4\u56deTrue/False def duplicate ( self , numbers , duplication ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/50_duplicate/#_3","text":"1 2 3 4 5 6 7 8 9 10 class Solution : def duplicate ( self , numbers , duplication ): table = set () for num in numbers : if num not in table : table . add ( num ) else : duplication [ 0 ] = num return True return False","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/51_multiply/","text":"51. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 Link \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0,1,...,n-1]\uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0,1,...,n-1]\uff0c \u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]\u3002 \u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \uff08\u6ce8\u610f\uff1a\u89c4\u5b9a B[0] = A[1] * A[2] * ... * A[n-1], B[n-1] = A[0] * A[1] * ... * A[n-2]\uff09 \u5bf9\u4e8e A \u957f\u5ea6\u4e3a 1 \u7684\u60c5\u51b5\uff0cB \u65e0\u610f\u4e49\uff0c\u6545\u800c\u65e0\u6cd5\u6784\u5efa\uff0c\u56e0\u6b64\u8be5\u60c5\u51b5\u4e0d\u4f1a\u5b58\u5728\u3002 \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def multiply ( self , A ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u4ee4 left[i] = A[0] * A[1] * ... * A[i - 1], right[i] = A[i + 1] * A[i + 1] * ... * A[-1], \u5176\u4e2d left[0] = 1, right[len(A) - 1] = 1 B[i] = left[i] * right[i] 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def multiply ( self , A ): n = len ( A ) left = [ 1 ] * n right = [ 1 ] * n B = [ 0 ] * n for i in range ( n - 1 ): left [ i + 1 ] = left [ i ] * A [ i ] right [ n - 2 - i ] = right [ n - 1 - i ] * A [ n - 1 - i ] for i in range ( n ): B [ i ] = left [ i ] * right [ i ] return B \u89e3\u6cd5\u4e8c Link \u6539\u8fdb\u201c\u89e3\u6cd5\u4e00\u201d right \u76f4\u63a5\u5199\u5728 B \u4e2d left \u7528\u4e00\u4e2a\u53d8\u91cf\u4ee3\u66ff 1 2 3 4 5 6 7 8 9 10 class Solution : def multiply ( self , A ): B = [ 1 ] * len ( A ) for i in range ( len ( A ) - 2 , - 1 , - 1 ): # B: right B [ i ] = B [ i + 1 ] * A [ i + 1 ] left = A [ 0 ] for i in range ( 1 , len ( A )): B [ i ] *= left left *= A [ i ] return B","title":"51 multiply"},{"location":"CodingInterviews/Python/Solutions/51_multiply/#51","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0,1,...,n-1]\uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0,1,...,n-1]\uff0c \u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]\u3002 \u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \uff08\u6ce8\u610f\uff1a\u89c4\u5b9a B[0] = A[1] * A[2] * ... * A[n-1], B[n-1] = A[0] * A[1] * ... * A[n-2]\uff09 \u5bf9\u4e8e A \u957f\u5ea6\u4e3a 1 \u7684\u60c5\u51b5\uff0cB \u65e0\u610f\u4e49\uff0c\u6545\u800c\u65e0\u6cd5\u6784\u5efa\uff0c\u56e0\u6b64\u8be5\u60c5\u51b5\u4e0d\u4f1a\u5b58\u5728\u3002","title":"51. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4"},{"location":"CodingInterviews/Python/Solutions/51_multiply/#_1","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/51_multiply/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def multiply ( self , A ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/51_multiply/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/51_multiply/#_4","text":"\u4ee4 left[i] = A[0] * A[1] * ... * A[i - 1], right[i] = A[i + 1] * A[i + 1] * ... * A[-1], \u5176\u4e2d left[0] = 1, right[len(A) - 1] = 1 B[i] = left[i] * right[i] 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def multiply ( self , A ): n = len ( A ) left = [ 1 ] * n right = [ 1 ] * n B = [ 0 ] * n for i in range ( n - 1 ): left [ i + 1 ] = left [ i ] * A [ i ] right [ n - 2 - i ] = right [ n - 1 - i ] * A [ n - 1 - i ] for i in range ( n ): B [ i ] = left [ i ] * right [ i ] return B","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/51_multiply/#_5","text":"\u6539\u8fdb\u201c\u89e3\u6cd5\u4e00\u201d right \u76f4\u63a5\u5199\u5728 B \u4e2d left \u7528\u4e00\u4e2a\u53d8\u91cf\u4ee3\u66ff 1 2 3 4 5 6 7 8 9 10 class Solution : def multiply ( self , A ): B = [ 1 ] * len ( A ) for i in range ( len ( A ) - 2 , - 1 , - 1 ): # B: right B [ i ] = B [ i + 1 ] * A [ i + 1 ] left = A [ 0 ] for i in range ( 1 , len ( A )): B [ i ] *= left left *= A [ i ] return B","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/52_match/","text":"52. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b 0 \u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u793a\u4f8b Link \u8f93\u5165 \"aaa\",\"a*a\" \u8fd4\u56de\u503c true \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # s, pattern\u90fd\u662f\u5b57\u7b26\u4e32 def match ( self , s , pattern ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def match ( self , s , pattern ): len_s = len ( s ) len_p = len ( pattern ) if len_s == len_p == 0 : return True elif len_s != 0 and len_p == 0 : return False elif len_s == 0 and len_p != 0 : if len_p > 1 and pattern [ 1 ] == '*' : return self . match ( s , pattern [ 2 :]) # \u4e0d\u7528 else : return False else : if len_p > 1 and pattern [ 1 ] == '*' : if s [ 0 ] != pattern [ 0 ] and pattern [ 0 ] != '.' : return self . match ( s , pattern [ 2 :]) # \u4e0d\u7528 else : return ( self . match ( s , pattern [ 2 :]) # \u4e0d\u7528 or self . match ( s [ 1 :], pattern [ 2 :]) # \u7528\u4e00\u6b21 or self . match ( s [ 1 :], pattern )) # \u7528 n \u6b21 else : if s [ 0 ] == pattern [ 0 ] or pattern [ 0 ] == '.' : return self . match ( s [ 1 :], pattern [ 1 :]) # \u7528\u4e00\u6b21 else : return False \u89e3\u6cd5\u4e8c Link dp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : # s, pattern\u90fd\u662f\u5b57\u7b26\u4e32 def match ( self , s , pattern ): # f[i][j]: pattern[j:] \u662f\u5426\u80fd\u5339\u914d s[i:] def dp ( x , y , s , p ): if f [ x ][ y ] != - 1 : return f [ x ][ y ] if y == m : f [ x ][ y ] = x == n return f [ x ][ y ] firstMatch = x < n and ( s [ x ] == p [ y ] or p [ y ] == '.' ) if y + 1 < m and p [ y + 1 ] == '*' : f [ x ][ y ] = ( dp ( x , y + 2 , s , p ) # \u4e0d\u7528 or firstMatch and dp ( x + 1 , y , s , p )) # \u7528 n \u6b21 else : f [ x ][ y ] = firstMatch and dp ( x + 1 , y + 1 , s , p ) # \u7528\u4e00\u6b21 return f [ x ][ y ] n = len ( s ) m = len ( pattern ) f = [[ - 1 ] * ( m + 1 ) for _ in range ( n + 1 )] return dp ( 0 , 0 , s , pattern )","title":"52 match"},{"location":"CodingInterviews/Python/Solutions/52_match/#52","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b 0 \u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002","title":"52. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"CodingInterviews/Python/Solutions/52_match/#_1","text":"\u8f93\u5165 \"aaa\",\"a*a\" \u8fd4\u56de\u503c true","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/52_match/#_2","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/52_match/#_3","text":"1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # s, pattern\u90fd\u662f\u5b57\u7b26\u4e32 def match ( self , s , pattern ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/52_match/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/52_match/#_5","text":"\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def match ( self , s , pattern ): len_s = len ( s ) len_p = len ( pattern ) if len_s == len_p == 0 : return True elif len_s != 0 and len_p == 0 : return False elif len_s == 0 and len_p != 0 : if len_p > 1 and pattern [ 1 ] == '*' : return self . match ( s , pattern [ 2 :]) # \u4e0d\u7528 else : return False else : if len_p > 1 and pattern [ 1 ] == '*' : if s [ 0 ] != pattern [ 0 ] and pattern [ 0 ] != '.' : return self . match ( s , pattern [ 2 :]) # \u4e0d\u7528 else : return ( self . match ( s , pattern [ 2 :]) # \u4e0d\u7528 or self . match ( s [ 1 :], pattern [ 2 :]) # \u7528\u4e00\u6b21 or self . match ( s [ 1 :], pattern )) # \u7528 n \u6b21 else : if s [ 0 ] == pattern [ 0 ] or pattern [ 0 ] == '.' : return self . match ( s [ 1 :], pattern [ 1 :]) # \u7528\u4e00\u6b21 else : return False","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/52_match/#_6","text":"dp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : # s, pattern\u90fd\u662f\u5b57\u7b26\u4e32 def match ( self , s , pattern ): # f[i][j]: pattern[j:] \u662f\u5426\u80fd\u5339\u914d s[i:] def dp ( x , y , s , p ): if f [ x ][ y ] != - 1 : return f [ x ][ y ] if y == m : f [ x ][ y ] = x == n return f [ x ][ y ] firstMatch = x < n and ( s [ x ] == p [ y ] or p [ y ] == '.' ) if y + 1 < m and p [ y + 1 ] == '*' : f [ x ][ y ] = ( dp ( x , y + 2 , s , p ) # \u4e0d\u7528 or firstMatch and dp ( x + 1 , y , s , p )) # \u7528 n \u6b21 else : f [ x ][ y ] = firstMatch and dp ( x + 1 , y + 1 , s , p ) # \u7528\u4e00\u6b21 return f [ x ][ y ] n = len ( s ) m = len ( pattern ) f = [[ - 1 ] * ( m + 1 ) for _ in range ( n + 1 )] return dp ( 0 , 0 , s , pattern )","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/","text":"53. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\",\"5e2\",\"-123\",\"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\",\"1a3.14\",\"1.2.3\",\"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002 \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u7528 e \u5206\u5272\u6570\u5b57\uff0c\u5224\u65ad e \u524d\u6709\u6570\uff0ce \u540e\u6574\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): def isNum ( string ): symbols = [ '+' , '-' ] if string [ 0 ] in symbols : if string [ 1 ] in symbols : return False else : string = string [ 1 :] if '.' not in string : return string . isdigit () else : lst_dot = string . split ( '.' ) if len ( lst_dot ) != 2 : return False else : before = lst_dot [ 0 ] == '' or lst_dot [ 0 ] . isdigit () after = lst_dot [ 1 ] . isdigit () return before and after if s == '' : return False elif len ( s ) == 1 : return s . isdigit () else : s = s . lower () if 'e' not in s : return isNum ( s ) else : lst_e = s . split ( 'e' ) if len ( lst_e ) != 2 : return False elif lst_e [ 0 ] == '' or lst_e [ 1 ] == '' : return False else : if isNum ( lst_e [ 1 ]): num = eval ( lst_e [ 1 ]) else : return False return isNum ( lst_e [ 0 ]) and num == int ( num ) \u89e3\u6cd5\u4e8c Link \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u6839\u636e e , . \u4e0e\u7b26\u53f7\u5224\u65ad e \u4e0d\u80fd\u51fa\u73b0\u5728\u9996\u5c3e e \u524d\u9762\u6700\u591a\u4e00\u4e2a . \uff0c\u540e\u9762\u4e0d\u80fd\u6709 . \u7b26\u53f7\u53ea\u80fd\u51fa\u73b0\u5728\u5f00\u5934\u6216 e \u540e\u4e00\u4f4d\uff0c\u4e14\u4e0d\u80fd\u4ee5\u7b26\u53f7\u7ed3\u5c3e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): s = s . strip () if s == '' : return False idx = 0 if s [ 0 ] == '+' or s [ 0 ] == '-' : if len ( s ) > 1 and ( '0' <= s [ 1 ] <= '9' or s [ 1 ] == '.' ): idx += 1 else : return False # +, -, +x hasE = hasDot = False for i in range ( idx , len ( s )): if '0' <= s [ i ] <= '9' : continue if s [ i ] == '.' : if hasDot or hasE : return False # 123.4.5, 123e4. hasDot = True elif s [ i ] == 'e' or s [ i ] == 'E' : if hasE or i == 0 or i == len ( s ) - 1 : return False # 123e4e, e123, 123e hasE = True elif s [ i ] == '-' or s [ i ] == '+' : if ( s [ i - 1 ] == 'e' or s [ i - 1 ] == 'E' ) and i != len ( s ) - 1 : continue else : return False # 123e+ else : return False # 12+ return True \u975e\u7b97\u6cd5\u9898\u89e3\u6cd5 Link 1 2 3 4 5 6 7 8 class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): try : float ( s ) except : return False return True","title":"53 is numeric"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/#53","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002 \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\",\"5e2\",\"-123\",\"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\",\"1a3.14\",\"1.2.3\",\"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002","title":"53. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/#_1","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/#_2","text":"1 2 3 4 5 # -*- coding:utf-8 -*- class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/#_4","text":"\u7528 e \u5206\u5272\u6570\u5b57\uff0c\u5224\u65ad e \u524d\u6709\u6570\uff0ce \u540e\u6574\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): def isNum ( string ): symbols = [ '+' , '-' ] if string [ 0 ] in symbols : if string [ 1 ] in symbols : return False else : string = string [ 1 :] if '.' not in string : return string . isdigit () else : lst_dot = string . split ( '.' ) if len ( lst_dot ) != 2 : return False else : before = lst_dot [ 0 ] == '' or lst_dot [ 0 ] . isdigit () after = lst_dot [ 1 ] . isdigit () return before and after if s == '' : return False elif len ( s ) == 1 : return s . isdigit () else : s = s . lower () if 'e' not in s : return isNum ( s ) else : lst_e = s . split ( 'e' ) if len ( lst_e ) != 2 : return False elif lst_e [ 0 ] == '' or lst_e [ 1 ] == '' : return False else : if isNum ( lst_e [ 1 ]): num = eval ( lst_e [ 1 ]) else : return False return isNum ( lst_e [ 0 ]) and num == int ( num )","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/#_5","text":"\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u6839\u636e e , . \u4e0e\u7b26\u53f7\u5224\u65ad e \u4e0d\u80fd\u51fa\u73b0\u5728\u9996\u5c3e e \u524d\u9762\u6700\u591a\u4e00\u4e2a . \uff0c\u540e\u9762\u4e0d\u80fd\u6709 . \u7b26\u53f7\u53ea\u80fd\u51fa\u73b0\u5728\u5f00\u5934\u6216 e \u540e\u4e00\u4f4d\uff0c\u4e14\u4e0d\u80fd\u4ee5\u7b26\u53f7\u7ed3\u5c3e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): s = s . strip () if s == '' : return False idx = 0 if s [ 0 ] == '+' or s [ 0 ] == '-' : if len ( s ) > 1 and ( '0' <= s [ 1 ] <= '9' or s [ 1 ] == '.' ): idx += 1 else : return False # +, -, +x hasE = hasDot = False for i in range ( idx , len ( s )): if '0' <= s [ i ] <= '9' : continue if s [ i ] == '.' : if hasDot or hasE : return False # 123.4.5, 123e4. hasDot = True elif s [ i ] == 'e' or s [ i ] == 'E' : if hasE or i == 0 or i == len ( s ) - 1 : return False # 123e4e, e123, 123e hasE = True elif s [ i ] == '-' or s [ i ] == '+' : if ( s [ i - 1 ] == 'e' or s [ i - 1 ] == 'E' ) and i != len ( s ) - 1 : continue else : return False # 123e+ else : return False # 12+ return True","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/53_is_numeric/#_6","text":"1 2 3 4 5 6 7 8 class Solution : # s\u5b57\u7b26\u4e32 def isNumeric ( self , s ): try : float ( s ) except : return False return True","title":"\u975e\u7b97\u6cd5\u9898\u89e3\u6cd5"},{"location":"CodingInterviews/Python/Solutions/54_first_appearing_once/","text":"54. \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u6570\u5b57 Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 \u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26 \"go\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"g\"\u3002 \u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26 \"google\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"l\"\u3002 \u8fd4\u56de\u503c\u63cf\u8ff0 \u5982\u679c\u5f53\u524d\u5b57\u7b26\u6d41\u6ca1\u6709\u5b58\u5728\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de # \u5b57\u7b26\u3002 \u77e5\u8bc6\u70b9 Link \u5b57\u7b26\u4e32 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 # -*- coding:utf-8 -*- class Solution : # \u8fd4\u56de\u5bf9\u5e94char def FirstAppearingOnce ( self ): # write code here def Insert ( self , char ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : # \u8fd4\u56de\u5bf9\u5e94char def __init__ ( self ): self . hashMmap = {} self . strMemory = [] def FirstAppearingOnce ( self ): if self . strMemory == []: return '#' for s in self . strMemory : if self . hashMmap [ s ] == 1 : return s return '#' def Insert ( self , char ): if char == '' or char is None : return else : self . hashMmap [ char ] = self . hashMmap . get ( char , 0 ) + 1 self . strMemory . append ( char )","title":"54 first appearing once"},{"location":"CodingInterviews/Python/Solutions/54_first_appearing_once/#54","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002 \u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26 \"go\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"g\"\u3002 \u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26 \"google\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"l\"\u3002 \u8fd4\u56de\u503c\u63cf\u8ff0 \u5982\u679c\u5f53\u524d\u5b57\u7b26\u6d41\u6ca1\u6709\u5b58\u5728\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de # \u5b57\u7b26\u3002","title":"54. \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"CodingInterviews/Python/Solutions/54_first_appearing_once/#_1","text":"\u5b57\u7b26\u4e32","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/54_first_appearing_once/#_2","text":"1 2 3 4 5 6 7 # -*- coding:utf-8 -*- class Solution : # \u8fd4\u56de\u5bf9\u5e94char def FirstAppearingOnce ( self ): # write code here def Insert ( self , char ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/54_first_appearing_once/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : # \u8fd4\u56de\u5bf9\u5e94char def __init__ ( self ): self . hashMmap = {} self . strMemory = [] def FirstAppearingOnce ( self ): if self . strMemory == []: return '#' for s in self . strMemory : if self . hashMmap [ s ] == 1 : return s return '#' def Insert ( self , char ): if char == '' or char is None : return else : self . hashMmap [ char ] = self . hashMmap . get ( char , 0 ) + 1 self . strMemory . append ( char )","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/55_entry_node_of_loop/","text":"55. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 Link \u9898\u76ee\u63cf\u8ff0 \u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\uff0c\u5426\u5219\uff0c\u8f93\u51fa null\u3002 \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def EntryNodeOfLoop ( self , pHead ): # write code here \u53ef\u884c\u7684\u89e3 Link \u6709\u4e24\u79cd\u89e3\u91ca\u65b9\u6cd5 \u7ed3\u8bba\u5c31\u662f\uff1a\u5982\u679c\u6709\u73af\uff0c\u5feb\u6162\u6307\u9488\u7684\u76f8\u9047\u70b9\u5230\u5165\u53e3\u7684\u8ddd\u79bb==\u5f00\u5934\u5230\u5165\u53e3\u7684\u8ddd\u79bb \u89e3\u6cd5\u4e00 Link \u5feb\u6162\u6307\u9488 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def EntryNodeOfLoop ( self , pHead ): if pHead is None : return None fast = pHead slow = pHead while fast and fast . next : fast = fast . next . next slow = slow . next if fast is slow : break else : return None fast = pHead while fast is not slow : fast = fast . next slow = slow . next return fast \u89e3\u6cd5\u4e8c Link \u4e0e\u201c\u89e3\u6cd5\u4e00\u201d\u6ca1\u4ec0\u4e48\u533a\u522b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def EntryNodeOfLoop ( self , pHead ): slow = fast = pHead while fast : slow = slow . next fast = fast . next if fast : fast = fast . next if fast and fast is slow : fast = pHead while fast is not slow : fast = fast . next slow = slow . next break return fast","title":"55 entry node of loop"},{"location":"CodingInterviews/Python/Solutions/55_entry_node_of_loop/#55","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\uff0c\u5426\u5219\uff0c\u8f93\u51fa null\u3002","title":"55. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9"},{"location":"CodingInterviews/Python/Solutions/55_entry_node_of_loop/#_1","text":"\u94fe\u8868","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/55_entry_node_of_loop/#_2","text":"1 2 3 4 5 6 7 8 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def EntryNodeOfLoop ( self , pHead ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/55_entry_node_of_loop/#_3","text":"\u6709\u4e24\u79cd\u89e3\u91ca\u65b9\u6cd5 \u7ed3\u8bba\u5c31\u662f\uff1a\u5982\u679c\u6709\u73af\uff0c\u5feb\u6162\u6307\u9488\u7684\u76f8\u9047\u70b9\u5230\u5165\u53e3\u7684\u8ddd\u79bb==\u5f00\u5934\u5230\u5165\u53e3\u7684\u8ddd\u79bb","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/55_entry_node_of_loop/#_4","text":"\u5feb\u6162\u6307\u9488 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def EntryNodeOfLoop ( self , pHead ): if pHead is None : return None fast = pHead slow = pHead while fast and fast . next : fast = fast . next . next slow = slow . next if fast is slow : break else : return None fast = pHead while fast is not slow : fast = fast . next slow = slow . next return fast","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/55_entry_node_of_loop/#_5","text":"\u4e0e\u201c\u89e3\u6cd5\u4e00\u201d\u6ca1\u4ec0\u4e48\u533a\u522b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def EntryNodeOfLoop ( self , pHead ): slow = fast = pHead while fast : slow = slow . next fast = fast . next if fast : fast = fast . next if fast and fast is slow : fast = pHead while fast is not slow : fast = fast . next slow = slow . next break return fast","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/56_delete_duplication/","text":"56. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u7ed3\u70b9 Link \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934\u6307\u9488\u3002 \u4f8b\u5982\uff0c\u94fe\u8868 1->2->3->3->4->4->5 \u5904\u7406\u540e\u4e3a 1->2->5 \u77e5\u8bc6\u70b9 Link \u94fe\u8868 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def deleteDuplication ( self , pHead ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def deleteDuplication ( self , pHead ): dummy = ListNode ( - 1 ) dummy . next = pHead pre = dummy while pre . next : cur = pre . next if cur . next and cur . val == cur . next . val : while cur . next and cur . next . val == cur . val : cur = cur . next pre . next = cur . next else : pre = cur return dummy . next","title":"56 delete duplication"},{"location":"CodingInterviews/Python/Solutions/56_delete_duplication/#56","text":"\u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934\u6307\u9488\u3002 \u4f8b\u5982\uff0c\u94fe\u8868 1->2->3->3->4->4->5 \u5904\u7406\u540e\u4e3a 1->2->5","title":"56. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u7ed3\u70b9"},{"location":"CodingInterviews/Python/Solutions/56_delete_duplication/#_1","text":"\u94fe\u8868","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/56_delete_duplication/#_2","text":"1 2 3 4 5 6 7 8 # -*- coding:utf-8 -*- # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def deleteDuplication ( self , pHead ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/56_delete_duplication/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def deleteDuplication ( self , pHead ): dummy = ListNode ( - 1 ) dummy . next = pHead pre = dummy while pre . next : cur = pre . next if cur . next and cur . val == cur . next . val : while cur . next and cur . next . val == cur . val : cur = cur . next pre . next = cur . next else : pre = cur return dummy . next","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/57_get_next/","text":"57. \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 Link \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5e76\u4e14\u8fd4\u56de\u3002 \u6ce8\u610f\uff0c\u6811\u4e2d\u7684\u7ed3\u70b9\u4e0d\u4ec5\u5305\u542b\u5de6\u53f3\u5b50\u7ed3\u70b9\uff0c\u540c\u65f6\u5305\u542b\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 \u77e5\u8bc6\u70b9 Link \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeLinkNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None # self.next = None class Solution : def GetNext ( self , pNode ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution ( object ): def getNext ( self , pNode ): \"\"\" \u5bfb\u627e\u53f3\u5b50\u6811 1. \u82e5\u5b58\u5728\uff0c\u5c31\u4e00\u76f4\u627e\u5230\u8be5\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8fb9 2. \u4e0d\u5b58\u5728\uff0c\u5c31\u5411\u4e0a\u5bfb\u627e\u7236\u7ed3\u70b9\uff0c\u4e00\u76f4\u627e\u5230\u67d0\u7ed3\u70b9\u662f\u5176\u7236\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u6253\u5370\u6b64\u7236\u7ed3\u70b9 \"\"\" if pNode . right : tmp = pNode . right while tmp . left : tmp = tmp . left return tmp else : tmp = pNode while tmp . next : if tmp . next . left is tmp : return tmp . next tmp = tmp . next return None","title":"57 get next"},{"location":"CodingInterviews/Python/Solutions/57_get_next/#57","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5e76\u4e14\u8fd4\u56de\u3002 \u6ce8\u610f\uff0c\u6811\u4e2d\u7684\u7ed3\u70b9\u4e0d\u4ec5\u5305\u542b\u5de6\u53f3\u5b50\u7ed3\u70b9\uff0c\u540c\u65f6\u5305\u542b\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002","title":"57. \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"},{"location":"CodingInterviews/Python/Solutions/57_get_next/#_1","text":"\u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/57_get_next/#_2","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeLinkNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None # self.next = None class Solution : def GetNext ( self , pNode ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/57_get_next/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution ( object ): def getNext ( self , pNode ): \"\"\" \u5bfb\u627e\u53f3\u5b50\u6811 1. \u82e5\u5b58\u5728\uff0c\u5c31\u4e00\u76f4\u627e\u5230\u8be5\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8fb9 2. \u4e0d\u5b58\u5728\uff0c\u5c31\u5411\u4e0a\u5bfb\u627e\u7236\u7ed3\u70b9\uff0c\u4e00\u76f4\u627e\u5230\u67d0\u7ed3\u70b9\u662f\u5176\u7236\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u6253\u5370\u6b64\u7236\u7ed3\u70b9 \"\"\" if pNode . right : tmp = pNode . right while tmp . left : tmp = tmp . left return tmp else : tmp = pNode while tmp . next : if tmp . next . left is tmp : return tmp . next tmp = tmp . next return None","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/58_is_symmetrical/","text":"58. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u540c\u6b64\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u662f\u540c\u6837\u7684\uff0c\u5b9a\u4e49\u5176\u4e3a\u5bf9\u79f0\u7684\u3002 \u77e5\u8bc6\u70b9 Link \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def isSymmetrical ( self , pRoot ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def isSymmetrical ( self , pRoot ): def judgeSym ( nodeL , nodeR ): if nodeL is None and nodeR is None : return True elif nodeL is None or nodeR is None : return False elif nodeL . val != nodeR . val : return False else : return ( judgeSym ( nodeL . left , nodeR . right ) and judgeSym ( nodeL . right , nodeR . left )) if pRoot is None : return True return judgeSym ( pRoot . left , pRoot . right ) \u89e3\u6cd5\u4e8c Link \u6808 \u6bcf\u6b21\u5c06\u5de6\u6811\u7684\u6700\u5de6\u8fb9\u4e0e\u53f3\u6811\u7684\u6700\u53f3\u8fb9\u6210\u5bf9\u5730\u538b\u6808\uff0c\u51fa\u6808\u65f6\u5c31\u53ef\u4ee5\u6210\u5bf9\u5730\u6bd4\u8f83 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def isSymmetrical ( self , pRoot ): if pRoot is None : return True stack = [] stack . extend ([ pRoot . right , pRoot . left ]) while stack : nodeL = stack . pop () nodeR = stack . pop () if nodeL is None and nodeR is None : continue elif nodeL is None or nodeR is None : return False elif nodeL . val != nodeR . val : return False stack . extend ([ nodeR . right , nodeL . left , nodeR . left , nodeL . right ]) return True","title":"58 is symmetrical"},{"location":"CodingInterviews/Python/Solutions/58_is_symmetrical/#58","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u540c\u6b64\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u662f\u540c\u6837\u7684\uff0c\u5b9a\u4e49\u5176\u4e3a\u5bf9\u79f0\u7684\u3002","title":"58. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"CodingInterviews/Python/Solutions/58_is_symmetrical/#_1","text":"\u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/58_is_symmetrical/#_2","text":"1 2 3 4 5 6 7 8 9 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def isSymmetrical ( self , pRoot ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/58_is_symmetrical/#_3","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/58_is_symmetrical/#_4","text":"\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def isSymmetrical ( self , pRoot ): def judgeSym ( nodeL , nodeR ): if nodeL is None and nodeR is None : return True elif nodeL is None or nodeR is None : return False elif nodeL . val != nodeR . val : return False else : return ( judgeSym ( nodeL . left , nodeR . right ) and judgeSym ( nodeL . right , nodeR . left )) if pRoot is None : return True return judgeSym ( pRoot . left , pRoot . right )","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/58_is_symmetrical/#_5","text":"\u6808 \u6bcf\u6b21\u5c06\u5de6\u6811\u7684\u6700\u5de6\u8fb9\u4e0e\u53f3\u6811\u7684\u6700\u53f3\u8fb9\u6210\u5bf9\u5730\u538b\u6808\uff0c\u51fa\u6808\u65f6\u5c31\u53ef\u4ee5\u6210\u5bf9\u5730\u6bd4\u8f83 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def isSymmetrical ( self , pRoot ): if pRoot is None : return True stack = [] stack . extend ([ pRoot . right , pRoot . left ]) while stack : nodeL = stack . pop () nodeR = stack . pop () if nodeL is None and nodeR is None : continue elif nodeL is None or nodeR is None : return False elif nodeL . val != nodeR . val : return False stack . extend ([ nodeR . right , nodeL . left , nodeR . left , nodeL . right ]) return True","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/59_z_print/","text":"59. \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811\uff0c \u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u81f3\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c \u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u77e5\u8bc6\u70b9 Link \u6808 \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def Print ( self , pRoot ): # write code here \u53ef\u884c\u7684\u89e3 Link \u7528\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u88c5\u5947\u6570\u5c42\uff0c\u53e6\u4e00\u4e2a\u88c5\u5076\u6570\u5c42 class Solution : def Print ( self , pRoot ): if pRoot is None : return [] stack1 = [ pRoot ] stack2 = [] res = [] while stack1 or stack2 : if stack1 : tmpRes = [] while stack1 : tmpNode = stack1 . pop () tmpRes . append ( tmpNode . val ) if tmpNode . left : stack2 . append ( tmpNode . left ) if tmpNode . right : stack2 . append ( tmpNode . right ) res . append ( tmpRes ) if stack2 : tmpRes = [] while stack2 : tmpNode = stack2 . pop () tmpRes . append ( tmpNode . val ) if tmpNode . right : stack1 . append ( tmpNode . right ) if tmpNode . left : stack1 . append ( tmpNode . left ) res . append ( tmpRes ) return res","title":"59 z print"},{"location":"CodingInterviews/Python/Solutions/59_z_print/#59","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811\uff0c \u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u81f3\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c \u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"59. \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"CodingInterviews/Python/Solutions/59_z_print/#_1","text":"\u6808 \u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/59_z_print/#_2","text":"# -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def Print ( self , pRoot ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/59_z_print/#_3","text":"\u7528\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u88c5\u5947\u6570\u5c42\uff0c\u53e6\u4e00\u4e2a\u88c5\u5076\u6570\u5c42 class Solution : def Print ( self , pRoot ): if pRoot is None : return [] stack1 = [ pRoot ] stack2 = [] res = [] while stack1 or stack2 : if stack1 : tmpRes = [] while stack1 : tmpNode = stack1 . pop () tmpRes . append ( tmpNode . val ) if tmpNode . left : stack2 . append ( tmpNode . left ) if tmpNode . right : stack2 . append ( tmpNode . right ) res . append ( tmpRes ) if stack2 : tmpRes = [] while stack2 : tmpNode = stack2 . pop () tmpRes . append ( tmpNode . val ) if tmpNode . right : stack1 . append ( tmpNode . right ) if tmpNode . left : stack1 . append ( tmpNode . left ) res . append ( tmpRes ) return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/60_print_line_by_line/","text":"60. \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c Link \u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7ed3\u70b9\u4ece\u5de6\u81f3\u53f3\u8f93\u51fa\u3002\u6bcf\u4e00\u5c42\u8f93\u51fa\u4e00\u884c\u3002 \u793a\u4f8b Link \u8f93\u5165 {8,6,10,5,7,9,11} \u8fd4\u56de\u503c [[8],[6,10],[5,7,9,11]] \u77e5\u8bc6\u70b9 Link \u6811 bfs \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u4e8c\u7ef4\u5217\u8868[[1,2],[4,5]] def Print ( self , pRoot ): # write code here \u53ef\u884c\u7684\u89e3 Link \u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u88c5\u5947\u6570\u5c42\uff0c\u53e6\u4e00\u4e2a\u88c5\u5076\u6570\u5c42 \u56e0\u4e3a\u4e0d\u662f\u201c\u4e4b\u5b57\u5f62\u201d\u6253\u5370\uff0c\u6240\u4ee5\u4e0d\u7528\u533a\u5206\u538b\u6808\u987a\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def Print ( self , pRoot ): if pRoot is None : return [] def getNodes ( up , down ): res = [] while up : node = up . pop ( 0 ) res . append ( node . val ) if node . left : down . append ( node . left ) if node . right : down . append ( node . right ) return res queue1 = [ pRoot ] queue2 = [] res = [] while queue1 or queue2 : if queue1 : res . append ( getNodes ( queue1 , queue2 )) if queue2 : res . append ( getNodes ( queue2 , queue1 )) return res","title":"60 print line by line"},{"location":"CodingInterviews/Python/Solutions/60_print_line_by_line/#60","text":"\u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7ed3\u70b9\u4ece\u5de6\u81f3\u53f3\u8f93\u51fa\u3002\u6bcf\u4e00\u5c42\u8f93\u51fa\u4e00\u884c\u3002","title":"60. \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c"},{"location":"CodingInterviews/Python/Solutions/60_print_line_by_line/#_1","text":"\u8f93\u5165 {8,6,10,5,7,9,11} \u8fd4\u56de\u503c [[8],[6,10],[5,7,9,11]]","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/60_print_line_by_line/#_2","text":"\u6811 bfs","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/60_print_line_by_line/#_3","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u4e8c\u7ef4\u5217\u8868[[1,2],[4,5]] def Print ( self , pRoot ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/60_print_line_by_line/#_4","text":"\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u88c5\u5947\u6570\u5c42\uff0c\u53e6\u4e00\u4e2a\u88c5\u5076\u6570\u5c42 \u56e0\u4e3a\u4e0d\u662f\u201c\u4e4b\u5b57\u5f62\u201d\u6253\u5370\uff0c\u6240\u4ee5\u4e0d\u7528\u533a\u5206\u538b\u6808\u987a\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def Print ( self , pRoot ): if pRoot is None : return [] def getNodes ( up , down ): res = [] while up : node = up . pop ( 0 ) res . append ( node . val ) if node . left : down . append ( node . left ) if node . right : down . append ( node . right ) return res queue1 = [ pRoot ] queue2 = [] res = [] while queue1 or queue2 : if queue1 : res . append ( getNodes ( queue1 , queue2 )) if queue2 : res . append ( getNodes ( queue2 , queue1 )) return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/61_serialize_and_deserialize/","text":"61. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 _ \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u662f\u6307\uff1a\u628a\u4e00\u68f5\u4e8c\u53c9\u6811\u6309\u7167\u67d0\u79cd\u904d\u5386\u65b9\u5f0f\u7684\u7ed3\u679c\u4ee5\u67d0\u79cd\u683c\u5f0f\u4fdd\u5b58\u4e3a\u5b57\u7b26\u4e32\uff0c \u4ece\u800c\u4f7f\u5f97\u5185\u5b58\u4e2d\u5efa\u7acb\u8d77\u6765\u7684\u4e8c\u53c9\u6811\u53ef\u4ee5\u6301\u4e45\u4fdd\u5b58\u3002 \u5e8f\u5217\u5316\u53ef\u4ee5\u57fa\u4e8e\u5148\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u3001\u5c42\u5e8f\u7684\u4e8c\u53c9\u6811\u904d\u5386\u65b9\u5f0f\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u5e8f\u5217\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \u5e8f\u5217\u5316\u65f6\u901a\u8fc7\u67d0\u79cd\u7b26\u53f7\u8868\u793a\u7a7a\u8282\u70b9(#)\uff0c\u4ee5 ! \u8868\u793a\u4e00\u4e2a\u7ed3\u70b9\u503c\u7684\u7ed3\u675f(value!)\u3002 _ \u4e8c\u53c9\u6811\u7684\u53cd\u5e8f\u5217\u5316\u662f\u6307\uff1a\u6839\u636e\u67d0\u79cd\u904d\u5386\u987a\u5e8f\u5f97\u5230\u7684\u5e8f\u5217\u5316\u5b57\u7b26\u4e32\u7ed3\u679c str\uff0c\u91cd\u6784\u4e8c\u53c9\u6811\u3002 _ \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u53ea\u6709\u6839\u8282\u70b9\u4e3a 1 \u7684\u4e8c\u53c9\u6811\u5e8f\u5217\u5316\u4e3a \"1,\"\uff0c\u7136\u540e\u901a\u8fc7\u81ea\u5df1\u7684\u51fd\u6570\u6765\u89e3\u6790\u56de\u8fd9\u4e2a\u4e8c\u53c9\u6811 \u793a\u4f8b Link \u8f93\u5165 {8,6,10,5,7,9,11} \u8fd4\u56de\u503c {8,6,10,5,7,9,11} \u77e5\u8bc6\u70b9 Link \u961f\u5217 \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 11 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def Serialize ( self , root ): # write code here def Deserialize ( self , s ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution : def Serialize ( self , root ): def preOrder ( root ): \"\"\"\u5148\u5e8f\u904d\u5386\uff0c\u6570\u5b57\u8f6c\u5b57\u7b26\u4e32\uff0cNone \u8f6c #\"\"\" if root is None : resList . append ( '#' ) return resList . append ( str ( root . val )) preOrder ( root . left ) preOrder ( root . right ) resList = [] preOrder ( root ) return ' ' . join ( resList ) def Deserialize ( self , s ): def dePreOrder (): if resList == []: return None rootVal = resList . pop ( 0 ) if rootVal == '#' : return None node = TreeNode ( int ( rootVal )) nodeL = dePreOrder () nodeR = dePreOrder () node . left = nodeL node . right = nodeR return node resList = s . split () return dePreOrder ()","title":"61 serialize and deserialize"},{"location":"CodingInterviews/Python/Solutions/61_serialize_and_deserialize/#61","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 _ \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u662f\u6307\uff1a\u628a\u4e00\u68f5\u4e8c\u53c9\u6811\u6309\u7167\u67d0\u79cd\u904d\u5386\u65b9\u5f0f\u7684\u7ed3\u679c\u4ee5\u67d0\u79cd\u683c\u5f0f\u4fdd\u5b58\u4e3a\u5b57\u7b26\u4e32\uff0c \u4ece\u800c\u4f7f\u5f97\u5185\u5b58\u4e2d\u5efa\u7acb\u8d77\u6765\u7684\u4e8c\u53c9\u6811\u53ef\u4ee5\u6301\u4e45\u4fdd\u5b58\u3002 \u5e8f\u5217\u5316\u53ef\u4ee5\u57fa\u4e8e\u5148\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u3001\u5c42\u5e8f\u7684\u4e8c\u53c9\u6811\u904d\u5386\u65b9\u5f0f\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u5e8f\u5217\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \u5e8f\u5217\u5316\u65f6\u901a\u8fc7\u67d0\u79cd\u7b26\u53f7\u8868\u793a\u7a7a\u8282\u70b9(#)\uff0c\u4ee5 ! \u8868\u793a\u4e00\u4e2a\u7ed3\u70b9\u503c\u7684\u7ed3\u675f(value!)\u3002 _ \u4e8c\u53c9\u6811\u7684\u53cd\u5e8f\u5217\u5316\u662f\u6307\uff1a\u6839\u636e\u67d0\u79cd\u904d\u5386\u987a\u5e8f\u5f97\u5230\u7684\u5e8f\u5217\u5316\u5b57\u7b26\u4e32\u7ed3\u679c str\uff0c\u91cd\u6784\u4e8c\u53c9\u6811\u3002 _ \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u53ea\u6709\u6839\u8282\u70b9\u4e3a 1 \u7684\u4e8c\u53c9\u6811\u5e8f\u5217\u5316\u4e3a \"1,\"\uff0c\u7136\u540e\u901a\u8fc7\u81ea\u5df1\u7684\u51fd\u6570\u6765\u89e3\u6790\u56de\u8fd9\u4e2a\u4e8c\u53c9\u6811","title":"61. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"CodingInterviews/Python/Solutions/61_serialize_and_deserialize/#_1","text":"\u8f93\u5165 {8,6,10,5,7,9,11} \u8fd4\u56de\u503c {8,6,10,5,7,9,11}","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/61_serialize_and_deserialize/#_2","text":"\u961f\u5217 \u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/61_serialize_and_deserialize/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def Serialize ( self , root ): # write code here def Deserialize ( self , s ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/61_serialize_and_deserialize/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution : def Serialize ( self , root ): def preOrder ( root ): \"\"\"\u5148\u5e8f\u904d\u5386\uff0c\u6570\u5b57\u8f6c\u5b57\u7b26\u4e32\uff0cNone \u8f6c #\"\"\" if root is None : resList . append ( '#' ) return resList . append ( str ( root . val )) preOrder ( root . left ) preOrder ( root . right ) resList = [] preOrder ( root ) return ' ' . join ( resList ) def Deserialize ( self , s ): def dePreOrder (): if resList == []: return None rootVal = resList . pop ( 0 ) if rootVal == '#' : return None node = TreeNode ( int ( rootVal )) nodeL = dePreOrder () nodeR = dePreOrder () node . left = nodeL node . right = nodeR return node resList = s . split () return dePreOrder ()","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/62_kth_node/","text":"62. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u4e2a\u7ed3\u70b9 Link \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2c k \u5c0f\u7684\u7ed3\u70b9\u3002 \u793a\u4f8b Link \u8f93\u5165 {5,3,7,2,4,6,8},3 \u8fd4\u56de\u503c {4} \u77e5\u8bc6\u70b9 Link \u6811 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u5bf9\u5e94\u8282\u70b9TreeNode def KthNode ( self , pRoot , k ): # write code here \u53ef\u884c\u7684\u89e3 Link \u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u641c\u7d22\u6811\u5c31\u662f\u987a\u5e8f\u904d\u5386\u7ed3\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def KthNode ( self , pRoot , k ): def midOrder ( pRoot ): if pRoot is None : return None midOrder ( pRoot . left ) res . append ( pRoot ) midOrder ( pRoot . right ) res = [] midOrder ( pRoot ) if len ( res ) < k or k < 1 : return None return res [ k - 1 ]","title":"62 kth node"},{"location":"CodingInterviews/Python/Solutions/62_kth_node/#62-k","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2c k \u5c0f\u7684\u7ed3\u70b9\u3002","title":"62. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u4e2a\u7ed3\u70b9"},{"location":"CodingInterviews/Python/Solutions/62_kth_node/#_1","text":"\u8f93\u5165 {5,3,7,2,4,6,8},3 \u8fd4\u56de\u503c {4}","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/62_kth_node/#_2","text":"\u6811","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/62_kth_node/#_3","text":"1 2 3 4 5 6 7 8 9 10 # -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : # \u8fd4\u56de\u5bf9\u5e94\u8282\u70b9TreeNode def KthNode ( self , pRoot , k ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/62_kth_node/#_4","text":"\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u641c\u7d22\u6811\u5c31\u662f\u987a\u5e8f\u904d\u5386\u7ed3\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def KthNode ( self , pRoot , k ): def midOrder ( pRoot ): if pRoot is None : return None midOrder ( pRoot . left ) res . append ( pRoot ) midOrder ( pRoot . right ) res = [] midOrder ( pRoot ) if len ( res ) < k or k < 1 : return None return res [ k - 1 ]","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/63_get_median/","text":"63. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 Link \u9898\u76ee\u63cf\u8ff0 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002 \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u6211\u4eec\u4f7f\u7528 Insert() \u65b9\u6cd5\u8bfb\u53d6\u6570\u636e\u6d41\uff0c\u4f7f\u7528 GetMedian() \u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u8bfb\u53d6\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u3002 \u77e5\u8bc6\u70b9 Link \u8fdb\u5236\u8f6c\u5316 \u6392\u5e8f \u5806 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 5 6 # -*- coding:utf-8 -*- class Solution : def Insert ( self , num ): # write code here def GetMedian ( self ): # write code here \u53ef\u884c\u7684\u89e3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class Solution : def __init__ ( self ): \"\"\" \u6700\u5c0f\u503c\u653e\u5927\u9876\u5806 \u6700\u5927\u503c\u653e\u5c0f\u9876\u5806 \"\"\" self . littleValMaxHeap = [] self . bigValMinHeap = [] self . maxHeapCount = 0 self . minHeapCount = 0 def Insert ( self , num ): def cmpMinHeap ( t , p ): return t < p def cmpMaxHeap ( t , p ): return p < t if self . minHeapCount < self . maxHeapCount : self . minHeapCount += 1 if num < self . littleValMaxHeap [ 0 ]: self . createHeap ( self . bigValMinHeap , self . littleValMaxHeap [ 0 ], cmpMinHeap ) self . adjustHeap ( self . littleValMaxHeap , num , cmpMaxHeap ) else : self . createHeap ( self . bigValMinHeap , num , cmpMinHeap ) else : self . maxHeapCount += 1 if len ( self . littleValMaxHeap ) == 0 : self . createHeap ( self . littleValMaxHeap , num , cmpMaxHeap ) elif self . bigValMinHeap [ 0 ] < num : self . createHeap ( self . littleValMaxHeap , self . bigValMinHeap [ 0 ], cmpMaxHeap ) self . adjustHeap ( self . bigValMinHeap , num , cmpMinHeap ) else : self . createHeap ( self . littleValMaxHeap , num , cmpMaxHeap ) def GetMedian ( self , n = None ): # add \"n=None\" because of bad setting if self . maxHeapCount == 0 : return - 1 elif self . minHeapCount < self . maxHeapCount : return self . littleValMaxHeap [ 0 ] else : return ( self . littleValMaxHeap [ 0 ] + self . bigValMinHeap [ 0 ]) / 2.0 def createHeap ( self , heap , num , cmpFun ): heap . append ( num ) tmpIdx = len ( heap ) - 1 while tmpIdx > 0 : parentIdx = ( tmpIdx - 1 ) >> 1 if cmpFun ( heap [ tmpIdx ], heap [ parentIdx ]): heap [ tmpIdx ], heap [ parentIdx ] = heap [ parentIdx ], heap [ tmpIdx ] tmpIdx = parentIdx else : break def adjustHeap ( self , heap , num , cmpFun ): size = len ( heap ) heap [ 0 ] = num tmpIdx = 0 while tmpIdx < size : leftIdx = tmpIdx * 2 + 1 rightIdx = tmpIdx * 2 + 2 if rightIdx < size : if cmpFun ( heap [ leftIdx ], heap [ rightIdx ]): target = leftIdx else : target = rightIdx elif leftIdx < size : target = leftIdx else : break if cmpFun ( heap [ target ], heap [ tmpIdx ]): heap [ target ], heap [ tmpIdx ] = heap [ tmpIdx ], heap [ target ] tmpIdx = target else : break Tip Python \u4e2d\u6709\u6700\u5c0f\u5806\u7684\u6a21\u5757\uff1a from heapq import heapify, nsmallest","title":"63 get median"},{"location":"CodingInterviews/Python/Solutions/63_get_median/#63","text":"\u9898\u76ee\u63cf\u8ff0 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002 \u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u6211\u4eec\u4f7f\u7528 Insert() \u65b9\u6cd5\u8bfb\u53d6\u6570\u636e\u6d41\uff0c\u4f7f\u7528 GetMedian() \u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u8bfb\u53d6\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u3002","title":"63. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"CodingInterviews/Python/Solutions/63_get_median/#_1","text":"\u8fdb\u5236\u8f6c\u5316 \u6392\u5e8f \u5806","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/63_get_median/#_2","text":"1 2 3 4 5 6 # -*- coding:utf-8 -*- class Solution : def Insert ( self , num ): # write code here def GetMedian ( self ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/63_get_median/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class Solution : def __init__ ( self ): \"\"\" \u6700\u5c0f\u503c\u653e\u5927\u9876\u5806 \u6700\u5927\u503c\u653e\u5c0f\u9876\u5806 \"\"\" self . littleValMaxHeap = [] self . bigValMinHeap = [] self . maxHeapCount = 0 self . minHeapCount = 0 def Insert ( self , num ): def cmpMinHeap ( t , p ): return t < p def cmpMaxHeap ( t , p ): return p < t if self . minHeapCount < self . maxHeapCount : self . minHeapCount += 1 if num < self . littleValMaxHeap [ 0 ]: self . createHeap ( self . bigValMinHeap , self . littleValMaxHeap [ 0 ], cmpMinHeap ) self . adjustHeap ( self . littleValMaxHeap , num , cmpMaxHeap ) else : self . createHeap ( self . bigValMinHeap , num , cmpMinHeap ) else : self . maxHeapCount += 1 if len ( self . littleValMaxHeap ) == 0 : self . createHeap ( self . littleValMaxHeap , num , cmpMaxHeap ) elif self . bigValMinHeap [ 0 ] < num : self . createHeap ( self . littleValMaxHeap , self . bigValMinHeap [ 0 ], cmpMaxHeap ) self . adjustHeap ( self . bigValMinHeap , num , cmpMinHeap ) else : self . createHeap ( self . littleValMaxHeap , num , cmpMaxHeap ) def GetMedian ( self , n = None ): # add \"n=None\" because of bad setting if self . maxHeapCount == 0 : return - 1 elif self . minHeapCount < self . maxHeapCount : return self . littleValMaxHeap [ 0 ] else : return ( self . littleValMaxHeap [ 0 ] + self . bigValMinHeap [ 0 ]) / 2.0 def createHeap ( self , heap , num , cmpFun ): heap . append ( num ) tmpIdx = len ( heap ) - 1 while tmpIdx > 0 : parentIdx = ( tmpIdx - 1 ) >> 1 if cmpFun ( heap [ tmpIdx ], heap [ parentIdx ]): heap [ tmpIdx ], heap [ parentIdx ] = heap [ parentIdx ], heap [ tmpIdx ] tmpIdx = parentIdx else : break def adjustHeap ( self , heap , num , cmpFun ): size = len ( heap ) heap [ 0 ] = num tmpIdx = 0 while tmpIdx < size : leftIdx = tmpIdx * 2 + 1 rightIdx = tmpIdx * 2 + 2 if rightIdx < size : if cmpFun ( heap [ leftIdx ], heap [ rightIdx ]): target = leftIdx else : target = rightIdx elif leftIdx < size : target = leftIdx else : break if cmpFun ( heap [ target ], heap [ tmpIdx ]): heap [ target ], heap [ tmpIdx ] = heap [ tmpIdx ], heap [ target ] tmpIdx = target else : break Tip Python \u4e2d\u6709\u6700\u5c0f\u5806\u7684\u6a21\u5757\uff1a from heapq import heapify, nsmallest","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/","text":"64. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c Link \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u6570\u503c\u7684\u6700\u5927\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4 {2,3,4,2,6,2,5,1} \u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f 3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u5728 6 \u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c \u4ed6\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a {4,4,6,6,6,5}\uff1b \u9488\u5bf9\u6570\u7ec4 {2,3,4,2,6,2,5,1} \u7684\u6ed1\u52a8\u7a97\u53e3\u6709\u4ee5\u4e0b6\u4e2a\uff1a {[2,3,4],2,6,2,5,1}, {2,[3,4,2],6,2,5,1}, {2,3,[4,2,6],2,5,1}, {2,3,4,[2,6,2],5,1}, {2,3,4,2,[6,2,5],1}, {2,3,4,2,6,[2,5,1]}\u3002 \u7a97\u53e3\u5927\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u7a7a \u793a\u4f8b Link \u8f93\u5165 [2,3,4,2,6,2,5,1],3 \u8fd4\u56de\u503c [4,4,6,6,6,5] \u77e5\u8bc6\u70b9 Link \u5806 \u53cc\u6307\u9488 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def maxInWindows ( self , num , size ): # write code here \u53ef\u884c\u7684\u89e3 Link \u89e3\u6cd5\u4e00 Link \u7b97\u597d\u8303\u56f4\uff0c\u7528 size \u53bb\u5207\u7247 1 2 3 4 5 6 7 8 9 10 11 class Solution : def maxInWindows ( self , num , size ): if num == []: return [] if len ( num ) < size : return [ max ( num )] res = [] for i in range ( len ( num ) - size + 1 ): res . append ( max ( num [ i : i + size ])) return res \u89e3\u6cd5\u4e8c Link \u7b97\u597d\u8303\u56f4\uff0c\u5220\u53bb\u5de6\u8fb9\uff0c\u52a0\u5165\u53f3\u8fb9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def maxInWindows ( self , num , size ): if num == []: return [] if len ( num ) < size : return [ max ( num )] res = [] queue = num [: size ] res . append ( max ( queue )) for i in range ( size , len ( num )): queue . pop ( 0 ) queue . append ( num [ i ]) res . append ( max ( queue )) return res","title":"64 max in_windows"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/#64","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u6570\u503c\u7684\u6700\u5927\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4 {2,3,4,2,6,2,5,1} \u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f 3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u5728 6 \u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c \u4ed6\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a {4,4,6,6,6,5}\uff1b \u9488\u5bf9\u6570\u7ec4 {2,3,4,2,6,2,5,1} \u7684\u6ed1\u52a8\u7a97\u53e3\u6709\u4ee5\u4e0b6\u4e2a\uff1a {[2,3,4],2,6,2,5,1}, {2,[3,4,2],6,2,5,1}, {2,3,[4,2,6],2,5,1}, {2,3,4,[2,6,2],5,1}, {2,3,4,2,[6,2,5],1}, {2,3,4,2,6,[2,5,1]}\u3002 \u7a97\u53e3\u5927\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u7a7a","title":"64. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/#_1","text":"\u8f93\u5165 [2,3,4,2,6,2,5,1],3 \u8fd4\u56de\u503c [4,4,6,6,6,5]","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/#_2","text":"\u5806 \u53cc\u6307\u9488","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/#_3","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def maxInWindows ( self , num , size ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/#_4","text":"","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/#_5","text":"\u7b97\u597d\u8303\u56f4\uff0c\u7528 size \u53bb\u5207\u7247 1 2 3 4 5 6 7 8 9 10 11 class Solution : def maxInWindows ( self , num , size ): if num == []: return [] if len ( num ) < size : return [ max ( num )] res = [] for i in range ( len ( num ) - size + 1 ): res . append ( max ( num [ i : i + size ])) return res","title":"\u89e3\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Solutions/64_max_in_windows/#_6","text":"\u7b97\u597d\u8303\u56f4\uff0c\u5220\u53bb\u5de6\u8fb9\uff0c\u52a0\u5165\u53f3\u8fb9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def maxInWindows ( self , num , size ): if num == []: return [] if len ( num ) < size : return [ max ( num )] res = [] queue = num [: size ] res . append ( max ( queue )) for i in range ( size , len ( num )): queue . pop ( 0 ) queue . append ( num [ i ]) res . append ( max ( queue )) return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Solutions/65_has_path/","text":"65. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 Link \u9898\u76ee\u63cf\u8ff0 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002 \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u8fdb\u5165\u8be5\u683c\u5b50\u3002 \u4f8b\u5982 [[a, b, c, e], [s, f, c, s], [a, d, e, e]] \u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32 \"bcced\" \u7684\u8def\u5f84\uff0c\u4f46\u662f\u77e9\u9635\u4e2d\u4e0d\u5305\u542b \"abcb\" \u8def\u5f84\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 b \u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002 \u77e5\u8bc6\u70b9 Link dfs \u56de\u6eaf \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def hasPath ( self , matrix , rows , cols , path ): # write code here \u53ef\u884c\u7684\u89e3 Link \u904d\u5386\u77e9\u9635\uff0c\u5f00\u5934\u5bf9\u4e0a\u540e\uff0c\u201c\u4e0a\u4e0b\u5de6\u53f3\u201d\u8d70 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def hasPath ( self , matrix , rows , cols , path ): if path == '' or rows * cols < len ( path ): return False def findPath ( matrix , i , j , path ): if path == '' : return True if ( i < 0 or i == rows or j < 0 or j == cols or matrix [ i ][ j ] != path [ 0 ]): return False matrix [ i ][ j ] = '#' isFound = ( findPath ( matrix , i - 1 , j , path [ 1 :]) or findPath ( matrix , i + 1 , j , path [ 1 :]) or findPath ( matrix , i , j - 1 , path [ 1 :]) or findPath ( matrix , i , j + 1 , path [ 1 :])) matrix [ i ][ j ] = path [ 0 ] return isFound newMatrix = [[ 0 ] * cols for _ in range ( rows )] cnt = 0 for i in range ( rows ): # \u7ed9\u7684\u662f\u5b57\u7b26\u4e32\uff0c\u8f6c\u6210\u77e9\u9635\uff1b\u4e0d\u8f6c\u4e5f\u884c\uff0c\u7528 i * row + j \u5bf9\u5e94 for j in range ( cols ): newMatrix [ i ][ j ] = matrix [ cnt ] cnt += 1 for i in range ( rows ): for j in range ( cols ): if newMatrix [ i ][ j ] == path [ 0 ]: if findPath ( newMatrix , i , j , path ): return True return False","title":"65 has path"},{"location":"CodingInterviews/Python/Solutions/65_has_path/#65","text":"\u9898\u76ee\u63cf\u8ff0 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002 \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u8fdb\u5165\u8be5\u683c\u5b50\u3002 \u4f8b\u5982 [[a, b, c, e], [s, f, c, s], [a, d, e, e]] \u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32 \"bcced\" \u7684\u8def\u5f84\uff0c\u4f46\u662f\u77e9\u9635\u4e2d\u4e0d\u5305\u542b \"abcb\" \u8def\u5f84\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 b \u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002","title":"65. \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"CodingInterviews/Python/Solutions/65_has_path/#_1","text":"dfs \u56de\u6eaf","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/65_has_path/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def hasPath ( self , matrix , rows , cols , path ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/65_has_path/#_3","text":"\u904d\u5386\u77e9\u9635\uff0c\u5f00\u5934\u5bf9\u4e0a\u540e\uff0c\u201c\u4e0a\u4e0b\u5de6\u53f3\u201d\u8d70 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def hasPath ( self , matrix , rows , cols , path ): if path == '' or rows * cols < len ( path ): return False def findPath ( matrix , i , j , path ): if path == '' : return True if ( i < 0 or i == rows or j < 0 or j == cols or matrix [ i ][ j ] != path [ 0 ]): return False matrix [ i ][ j ] = '#' isFound = ( findPath ( matrix , i - 1 , j , path [ 1 :]) or findPath ( matrix , i + 1 , j , path [ 1 :]) or findPath ( matrix , i , j - 1 , path [ 1 :]) or findPath ( matrix , i , j + 1 , path [ 1 :])) matrix [ i ][ j ] = path [ 0 ] return isFound newMatrix = [[ 0 ] * cols for _ in range ( rows )] cnt = 0 for i in range ( rows ): # \u7ed9\u7684\u662f\u5b57\u7b26\u4e32\uff0c\u8f6c\u6210\u77e9\u9635\uff1b\u4e0d\u8f6c\u4e5f\u884c\uff0c\u7528 i * row + j \u5bf9\u5e94 for j in range ( cols ): newMatrix [ i ][ j ] = matrix [ cnt ] cnt += 1 for i in range ( rows ): for j in range ( cols ): if newMatrix [ i ][ j ] == path [ 0 ]: if findPath ( newMatrix , i , j , path ): return True return False","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/66_moving_count/","text":"66. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 Link \u9898\u76ee\u63cf\u8ff0 \u5730\u4e0a\u6709\u4e00\u4e2a m \u884c\u548c n \u5217\u7684\u65b9\u683c\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 0,0 \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\uff0c \u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e k \u7684\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c(35,37)\uff0c\u56e0\u4e3a 3+5+3+7 = 18\u3002 \u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c(35,38)\uff0c\u56e0\u4e3a 3+5+3+8 = 19\u3002 \u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u77e5\u8bc6\u70b9 Link \u6570\u7ec4 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def movingCount ( self , threshold , rows , cols ): # write code here \u53ef\u884c\u7684\u89e3 Link \u501f\u52a9\u961f\u5217\uff0c\u7528\u201c\u504f\u79fb\u91cf\u201d\u628a\u6240\u6709\u683c\u5b50\u8d70\u4e00\u904d \u683c\u5b50\u7684\u884c\u5217\u6570\u7684\u5404\u4f4d\u4e4b\u548c\u5c0f\u4e8e\u7b49\u4e8e threshold\uff0c\u4e0d\u4e00\u5b9a\u8d70\u5f97\u5230\uff0c\u6ee1\u8db3\u9898\u610f\u7684\u533a\u57df\u662f\u8fde\u8d77\u6765\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def getSingleSum ( self , num ): res = 0 while num : res += num % 10 num //= 10 return res def getSum ( self , x , y ): return self . getSingleSum ( x ) + self . getSingleSum ( y ) def movingCount ( self , threshold , rows , cols ): if threshold < 0 or rows < 0 or cols < 0 : return 0 used = [[ False ] * cols for _ in range ( rows )] dx , dy = [ - 1 , 0 , 1 , 0 ], [ 0 , 1 , 0 , - 1 ] q = [( 0 , 0 )] res = 0 while q : x , y = q . pop ( 0 ) if ( used [ x ][ y ] or threshold < self . getSum ( x , y )): continue res += 1 used [ x ][ y ] = True for i in range ( 4 ): tmpX = x + dx [ i ] tmpY = y + dy [ i ] if 0 <= tmpX < rows and 0 <= tmpY < cols : q . append (( tmpX , tmpY )) return res","title":"66 moving count"},{"location":"CodingInterviews/Python/Solutions/66_moving_count/#66","text":"\u9898\u76ee\u63cf\u8ff0 \u5730\u4e0a\u6709\u4e00\u4e2a m \u884c\u548c n \u5217\u7684\u65b9\u683c\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 0,0 \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\uff0c \u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e k \u7684\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c(35,37)\uff0c\u56e0\u4e3a 3+5+3+7 = 18\u3002 \u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c(35,38)\uff0c\u56e0\u4e3a 3+5+3+8 = 19\u3002 \u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f","title":"66. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"CodingInterviews/Python/Solutions/66_moving_count/#_1","text":"\u6570\u7ec4","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/66_moving_count/#_2","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def movingCount ( self , threshold , rows , cols ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/66_moving_count/#_3","text":"\u501f\u52a9\u961f\u5217\uff0c\u7528\u201c\u504f\u79fb\u91cf\u201d\u628a\u6240\u6709\u683c\u5b50\u8d70\u4e00\u904d \u683c\u5b50\u7684\u884c\u5217\u6570\u7684\u5404\u4f4d\u4e4b\u548c\u5c0f\u4e8e\u7b49\u4e8e threshold\uff0c\u4e0d\u4e00\u5b9a\u8d70\u5f97\u5230\uff0c\u6ee1\u8db3\u9898\u610f\u7684\u533a\u57df\u662f\u8fde\u8d77\u6765\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def getSingleSum ( self , num ): res = 0 while num : res += num % 10 num //= 10 return res def getSum ( self , x , y ): return self . getSingleSum ( x ) + self . getSingleSum ( y ) def movingCount ( self , threshold , rows , cols ): if threshold < 0 or rows < 0 or cols < 0 : return 0 used = [[ False ] * cols for _ in range ( rows )] dx , dy = [ - 1 , 0 , 1 , 0 ], [ 0 , 1 , 0 , - 1 ] q = [( 0 , 0 )] res = 0 while q : x , y = q . pop ( 0 ) if ( used [ x ][ y ] or threshold < self . getSum ( x , y )): continue res += 1 used [ x ][ y ] = True for i in range ( 4 ): tmpX = x + dx [ i ] tmpY = y + dy [ i ] if 0 <= tmpX < rows and 0 <= tmpY < cols : q . append (( tmpX , tmpY )) return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Solutions/67_cut_rope/","text":"67. \u526a\u7ef3\u5b50 Link \u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u7684 m \u6bb5\uff08m\u3001n \u90fd\u662f\u6574\u6570\uff0cn>1 \u5e76\u4e14 m>1\uff0cm<=n\uff09\uff0c \u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[1],...,k[m]\u3002 \u8bf7\u95ee k[1]x...xk[m] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f \u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f 8 \u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a 2\u30013\u30013 \u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f 18\u3002 \u8f93\u5165\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6570 n\uff0c\u610f\u4e49\u89c1\u9898\u9762\u3002(2 <= n <= 60) \u8fd4\u56de\u503c\u63cf\u8ff0 Link \u8f93\u51fa\u7b54\u6848\u3002 \u793a\u4f8b Link \u8f93\u5165\uff1a 8 \u8fd4\u56de\u503c\uff1a 18 \u77e5\u8bc6\u70b9 Link \u8d2a\u5fc3 \u6570\u7ec4 \u6570\u91cf\u5173\u7cfb \u9ad8\u7ea7\u7b97\u6cd5 \u7ec4\u5408\u6570\u5b66 \u9ed8\u8ba4\u4ee3\u7801 Link 1 2 3 4 # -*- coding:utf-8 -*- class Solution : def cutRope ( self , number ): # write code here \u53ef\u884c\u7684\u89e3 Link \u7ed3\u8bba\uff1a\u62c6\u5206\u51fa\u5c3d\u53ef\u80fd\u591a\u7684 3\uff0c\u82e5\u6709\u4f59\u6570\uff0c\u7ec4\u5408\u6210\u5c3d\u53ef\u80fd\u5c11\u7684 2 \u7b80\u5355\u8bc1\u660e \u82e5\u62c6\u51fa\u6765\u7684\u6570 n >= 5\uff0c\u5219 (n - 3) * 3 - n = 2n - 9 >= 1\uff0c\u77db\u76fe\uff0c\u6545 n < 5 \u82e5 n = 4\uff0c\u526a\u4e0d\u526a\u770b\u9700\u8981 \u82e5 n = 3 \u6216 n = 2\uff0c\u526a\u4e86\u5c31\u5c0f\u4e86 \u6240\u4ee5 3 \u5c3d\u53ef\u80fd\u591a\uff0c\u82e5\u5269\u4e0b 2\uff0c\u4e0d\u505a\u53d8\u52a8\uff0c\u82e5\u5269\u4e0b 1\uff0c\u5c3d\u91cf\u501f\u4e2a 3 \u6765\uff0c\u8f6c\u6210\u4e24\u4e2a 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def cutRope ( self , number ): if number < 3 : return 1 * ( number - 1 ) res = 1 if number % 3 == 2 : number -= 2 res *= 2 elif number % 3 == 1 : number -= 4 res *= 4 while number : res *= 3 number -= 3 return res","title":"67 cut rope"},{"location":"CodingInterviews/Python/Solutions/67_cut_rope/#67","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u7684 m \u6bb5\uff08m\u3001n \u90fd\u662f\u6574\u6570\uff0cn>1 \u5e76\u4e14 m>1\uff0cm<=n\uff09\uff0c \u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[1],...,k[m]\u3002 \u8bf7\u95ee k[1]x...xk[m] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f \u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f 8 \u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a 2\u30013\u30013 \u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f 18\u3002 \u8f93\u5165\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6570 n\uff0c\u610f\u4e49\u89c1\u9898\u9762\u3002(2 <= n <= 60)","title":"67. \u526a\u7ef3\u5b50"},{"location":"CodingInterviews/Python/Solutions/67_cut_rope/#_1","text":"\u8f93\u51fa\u7b54\u6848\u3002","title":"\u8fd4\u56de\u503c\u63cf\u8ff0"},{"location":"CodingInterviews/Python/Solutions/67_cut_rope/#_2","text":"\u8f93\u5165\uff1a 8 \u8fd4\u56de\u503c\uff1a 18","title":"\u793a\u4f8b"},{"location":"CodingInterviews/Python/Solutions/67_cut_rope/#_3","text":"\u8d2a\u5fc3 \u6570\u7ec4 \u6570\u91cf\u5173\u7cfb \u9ad8\u7ea7\u7b97\u6cd5 \u7ec4\u5408\u6570\u5b66","title":"\u77e5\u8bc6\u70b9"},{"location":"CodingInterviews/Python/Solutions/67_cut_rope/#_4","text":"1 2 3 4 # -*- coding:utf-8 -*- class Solution : def cutRope ( self , number ): # write code here","title":"\u9ed8\u8ba4\u4ee3\u7801"},{"location":"CodingInterviews/Python/Solutions/67_cut_rope/#_5","text":"\u7ed3\u8bba\uff1a\u62c6\u5206\u51fa\u5c3d\u53ef\u80fd\u591a\u7684 3\uff0c\u82e5\u6709\u4f59\u6570\uff0c\u7ec4\u5408\u6210\u5c3d\u53ef\u80fd\u5c11\u7684 2 \u7b80\u5355\u8bc1\u660e \u82e5\u62c6\u51fa\u6765\u7684\u6570 n >= 5\uff0c\u5219 (n - 3) * 3 - n = 2n - 9 >= 1\uff0c\u77db\u76fe\uff0c\u6545 n < 5 \u82e5 n = 4\uff0c\u526a\u4e0d\u526a\u770b\u9700\u8981 \u82e5 n = 3 \u6216 n = 2\uff0c\u526a\u4e86\u5c31\u5c0f\u4e86 \u6240\u4ee5 3 \u5c3d\u53ef\u80fd\u591a\uff0c\u82e5\u5269\u4e0b 2\uff0c\u4e0d\u505a\u53d8\u52a8\uff0c\u82e5\u5269\u4e0b 1\uff0c\u5c3d\u91cf\u501f\u4e2a 3 \u6765\uff0c\u8f6c\u6210\u4e24\u4e2a 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def cutRope ( self , number ): if number < 3 : return 1 * ( number - 1 ) res = 1 if number % 3 == 2 : number -= 2 res *= 2 elif number % 3 == 1 : number -= 4 res *= 4 while number : res *= 3 number -= 3 return res","title":"\u53ef\u884c\u7684\u89e3"},{"location":"CodingInterviews/Python/Summarize/02_replace_space/","text":"2. \u66ff\u6362\u7a7a\u683c Link \u4f8b\u4e00 Link >>> \" yorkfisih\" . split () [ 'yorkfisih' ] >>> >>> \" yorkfisih\" . split ( ' ' ) [ '' , 'yorkfisih' ] >>> \u8bf4\u660e Link \u539f\u578b\uff1a str.split(sep=None, maxsplit=-1) \u82e5\u4e0d\u6307\u5b9a sep \u8fde\u7eed\u7684\u7a7a\u683c\u4f1a\u88ab\u89c6\u4e3a\u5355\u4e2a\u5206\u9694\u7b26 \u82e5\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u6216\u672b\u5c3e\u542b\u6709\u7a7a\u683c\uff0c\u5176\u7ed3\u679c\u5c06\u4e0d\u5305\u542b\u5f00\u5934\u6216\u672b\u5c3e\u7684\u7a7a\u5b57\u7b26\u4e32 \u4f8b\u4e8c Link >>> '' . split ( ' ' ) [ '' ] >>> ' ' . split ( ' ' ) [ '' , '' ] >>> ' ' . split ( ' ' ) [ '' , '' , '' ] >>> \u8bf4\u660e Link n \u4e2a\u7a7a\u683c\u4f1a\u88ab\u5206\u4e3a n+1 \u4e2a\u90e8\u5206","title":"02 replace space"},{"location":"CodingInterviews/Python/Summarize/02_replace_space/#2","text":"","title":"2. \u66ff\u6362\u7a7a\u683c"},{"location":"CodingInterviews/Python/Summarize/02_replace_space/#_1","text":">>> \" yorkfisih\" . split () [ 'yorkfisih' ] >>> >>> \" yorkfisih\" . split ( ' ' ) [ '' , 'yorkfisih' ] >>>","title":"\u4f8b\u4e00"},{"location":"CodingInterviews/Python/Summarize/02_replace_space/#_2","text":"\u539f\u578b\uff1a str.split(sep=None, maxsplit=-1) \u82e5\u4e0d\u6307\u5b9a sep \u8fde\u7eed\u7684\u7a7a\u683c\u4f1a\u88ab\u89c6\u4e3a\u5355\u4e2a\u5206\u9694\u7b26 \u82e5\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u6216\u672b\u5c3e\u542b\u6709\u7a7a\u683c\uff0c\u5176\u7ed3\u679c\u5c06\u4e0d\u5305\u542b\u5f00\u5934\u6216\u672b\u5c3e\u7684\u7a7a\u5b57\u7b26\u4e32","title":"\u8bf4\u660e"},{"location":"CodingInterviews/Python/Summarize/02_replace_space/#_3","text":">>> '' . split ( ' ' ) [ '' ] >>> ' ' . split ( ' ' ) [ '' , '' ] >>> ' ' . split ( ' ' ) [ '' , '' , '' ] >>>","title":"\u4f8b\u4e8c"},{"location":"CodingInterviews/Python/Summarize/02_replace_space/#_4","text":"n \u4e2a\u7a7a\u683c\u4f1a\u88ab\u5206\u4e3a n+1 \u4e2a\u90e8\u5206","title":"\u8bf4\u660e"},{"location":"CodingInterviews/Python/Summarize/11_number_of_one/","text":"26. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 Link \u8865\u7801 Link \u6570\u5b57\u4ee5\u8865\u7801\u7684\u5f62\u5f0f\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d \u4e00\u4e2a\u6574\u6570\u8865\u7801\u7684\u8865\u7801\u7b49\u4e8e\u81ea\u5df1 +0 \u4e0e -0 \u7684\u8865\u7801\u5747\u4e3a 0 \u6b63\u6570 n \u7684\u8865\u7801\uff1a n \u8d1f\u6570 -n \u7684\u8865\u7801\uff1a n \u7684\u53cd\u7801 +1 \u6b63\u6570\u4e0e\u8d1f\u6570 Link \u6b63\u6574\u6570\u7684\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801\u5b8c\u5168\u4e00\u6837 \u4e00\u4e2a\u8d1f\u6574\u6570\u7684\u539f\u7801\u52a0\u5176\u8865\u7801\u7b49\u4e8e\u6a21 \u201c\u6a21\u201d\u662f\u6307\u4e00\u4e2a\u8ba1\u91cf\u7cfb\u7edf\u7684\u8ba1\u6570\u8303\u56f4 \u5982\uff0c\u516b\u4f4d\u4e8c\u8fdb\u5236\u53ef\u8868\u793a -128 ~ 127 \u5171 256 \u4e2a\u6570\u5b57\uff0c\u5219\u5176\u6a21\u4e3a 256 low bit Link n & -n low bit \u7f6e\u96f6 Link n &= n - 1 n -= n & -n","title":"11 number of one"},{"location":"CodingInterviews/Python/Summarize/11_number_of_one/#26-1","text":"","title":"26. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570"},{"location":"CodingInterviews/Python/Summarize/11_number_of_one/#_1","text":"\u6570\u5b57\u4ee5\u8865\u7801\u7684\u5f62\u5f0f\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d \u4e00\u4e2a\u6574\u6570\u8865\u7801\u7684\u8865\u7801\u7b49\u4e8e\u81ea\u5df1 +0 \u4e0e -0 \u7684\u8865\u7801\u5747\u4e3a 0 \u6b63\u6570 n \u7684\u8865\u7801\uff1a n \u8d1f\u6570 -n \u7684\u8865\u7801\uff1a n \u7684\u53cd\u7801 +1","title":"\u8865\u7801"},{"location":"CodingInterviews/Python/Summarize/11_number_of_one/#_2","text":"\u6b63\u6574\u6570\u7684\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801\u5b8c\u5168\u4e00\u6837 \u4e00\u4e2a\u8d1f\u6574\u6570\u7684\u539f\u7801\u52a0\u5176\u8865\u7801\u7b49\u4e8e\u6a21 \u201c\u6a21\u201d\u662f\u6307\u4e00\u4e2a\u8ba1\u91cf\u7cfb\u7edf\u7684\u8ba1\u6570\u8303\u56f4 \u5982\uff0c\u516b\u4f4d\u4e8c\u8fdb\u5236\u53ef\u8868\u793a -128 ~ 127 \u5171 256 \u4e2a\u6570\u5b57\uff0c\u5219\u5176\u6a21\u4e3a 256","title":"\u6b63\u6570\u4e0e\u8d1f\u6570"},{"location":"CodingInterviews/Python/Summarize/11_number_of_one/#low-bit","text":"n & -n","title":"low bit"},{"location":"CodingInterviews/Python/Summarize/11_number_of_one/#low-bit_1","text":"n &= n - 1 n -= n & -n","title":"low bit \u7f6e\u96f6"},{"location":"CodingInterviews/Python/Summarize/19_print_matrix_clockwise/","text":"19. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 Link \u5c06\u77e9\u9635\u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 Link \u65b9\u6cd5\u4e00 Link >>> matrix = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] >>> matrix = list ( zip ( * matrix ))[:: - 1 ] >>> matrix [( 3 , 6 , 9 ), ( 2 , 5 , 8 ), ( 1 , 4 , 7 )] >>> \u65b9\u6cd5\u4e8c Link >>> matrix = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] >>> matrix = [[ row [ col ] for row in matrix ] for col in reversed ( range ( len ( matrix [ 0 ])))] >>> matrix [[ 3 , 6 , 9 ], [ 2 , 5 , 8 ], [ 1 , 4 , 7 ]] >>>","title":"19 print matrix clockwise"},{"location":"CodingInterviews/Python/Summarize/19_print_matrix_clockwise/#19","text":"","title":"19. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"CodingInterviews/Python/Summarize/19_print_matrix_clockwise/#90","text":"","title":"\u5c06\u77e9\u9635\u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6"},{"location":"CodingInterviews/Python/Summarize/19_print_matrix_clockwise/#_1","text":">>> matrix = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] >>> matrix = list ( zip ( * matrix ))[:: - 1 ] >>> matrix [( 3 , 6 , 9 ), ( 2 , 5 , 8 ), ( 1 , 4 , 7 )] >>>","title":"\u65b9\u6cd5\u4e00"},{"location":"CodingInterviews/Python/Summarize/19_print_matrix_clockwise/#_2","text":">>> matrix = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] >>> matrix = [[ row [ col ] for row in matrix ] for col in reversed ( range ( len ( matrix [ 0 ])))] >>> matrix [[ 3 , 6 , 9 ], [ 2 , 5 , 8 ], [ 1 , 4 , 7 ]] >>>","title":"\u65b9\u6cd5\u4e8c"},{"location":"CodingInterviews/Python/Summarize/23_verify_sequence_of_bst/","text":"23. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 Link list slice Link >>> a = [ 1 , 2 , 3 ] >>> a [: None ] [ 1 , 2 , 3 ] >>> a [ None :] [ 1 , 2 , 3 ] >>>","title":"23 verify sequence of bst"},{"location":"CodingInterviews/Python/Summarize/23_verify_sequence_of_bst/#23","text":"","title":"23. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"CodingInterviews/Python/Summarize/23_verify_sequence_of_bst/#list-slice","text":">>> a = [ 1 , 2 , 3 ] >>> a [: None ] [ 1 , 2 , 3 ] >>> a [ None :] [ 1 , 2 , 3 ] >>>","title":"list slice"},{"location":"PythonChallenge/preview/","text":"\u7b80\u5355\u68b3\u7406 Link \u5173\u5361 \u9898\u76ee \u7b2c00\u5173 \u5e42\u8fd0\u7b97 \u7b2c01\u5173 chr(), ord() maketrans(), translate() \u7b2c02\u5173 collections.Counter \u7b2c03\u5173 \u6b63\u5219\u8868\u8fbe\u5f0f \u7b2c04\u5173 \u722c\u866b + \u6b63\u5219 \u7b2c05\u5173 pickle \u6a21\u5757 \u7b2c06\u5173 Zip \u6a21\u5757 + \u6b63\u5219 \u7b2c07\u5173 Pillow \u6a21\u5757\uff1aRGB \u503c\u63d0\u53d6 \u7b2c08\u5173 bz2 \u52a0\u5bc6\u6a21\u5757 \u7b2c09\u5173 PIL.Image, PIL.ImageDraw\uff1a\u63cf\u70b9\u753b\u56fe \u7b2c10\u5173 \u52a8\u6001\u89c4\u5212\u57fa\u7840 \u7b2c11\u5173 PIL.Image\uff1a\u56fe\u7247\u62c6\u5206 \u7b2c12\u5173 crul, \u6587\u4ef6\u5934 \u7b2c13\u5173 xmlrpc \u6a21\u5757 \u7b2c14\u5173 PIL.Image, PIL.ImageChops\uff1a\u56de\u578b\u56fe\u7247\u590d\u539f \u7b2c15\u5173 datetime \u6a21\u5757\uff1a\u65e5\u671f\u68c0\u7d22 \u7b2c16\u5173 PIL.Image\uff1a\u9519\u4f4d\u56fe\u50cf\u590d\u539f \u7b2c17\u5173 urllib.parse\uff1a\u7f16\u7801\u4e0e\u89e3\u7801 \u7b2c18\u5173 binascii \u6a21\u5757 difflib \u6a21\u5757\uff1a\u5206\u79bb\u6587\u4ef6\u6216\u5b57\u7b26\u4e32\u4e2d\u76f8\u540c\u548c\u4e0d\u540c\u7684\u90e8\u5206 gzip \u6a21\u5757 \u7b2c19\u5173 base64 \u6a21\u5757\uff1a\u90ae\u4ef6\u5f62\u5f0f\u52a0\u5bc6 email \u6a21\u5757\uff1a\u63d0\u53d6 email \u4fe1\u606f os \u6a21\u5757\uff1a\u5bf9\u6587\u4ef6\u6267\u884c\u76f8\u5bf9\u547d\u4ee4 struct \u6a21\u5757\uff1a\u6570\u636e\u89e3\u5305 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6\u4e0e\u5199\u5165 \u7b2c20\u5173 requests \u6a21\u5757\uff1a\u6d4f\u89c8\u5668\u5934\u90e8\u4fe1\u606f\u6a21\u62df\u548c\u670d\u52a1\u5668\u5934\u90e8\u4fe1\u606f\u8bbf\u95ee zipfile \u6a21\u5757 \u7b2c21\u5173 zlib \u6a21\u5757 bz2 \u6a21\u5757 \u7b2c22\u5173 PIL.Image\uff1agif \u56fe\u50cf\u5e27\u6570\u636e\u8bfb\u53d6 \u7b2c23\u5173 this \u6a21\u5757\uff1aPython \u4e4b\u7985 \u7b2c24\u5173 \u8ff7\u5bab\u89e3\u6cd5 PIL.Image\uff1a\u50cf\u7d20\u63d0\u53d6 \u7b2c25\u5173 PIL.Image\uff1a\u56fe\u7247\u5199\u5165\u548c\u590d\u539f\u62fc\u63a5 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6 \u7b2c26\u5173 hashlib \u6a21\u5757\uff1amd5 \u9a8c\u8bc1\uff0c\u7834\u635f\u6587\u4ef6\u4fee\u590d \u7b2c27\u5173 PIL.Image\uff1a\u8c03\u8272\u677f\u4fe1\u606f\uff0c\u5173\u952e\u5b57 \u7b2c28\u5173 PIL.Image\uff1aRGB \u4e09\u901a\u9053\u5206\u79bb \u7b2c29\u5173 PIL.Image\uff1a\u56fe\u50cf\u6807\u6ce8\u680f \u7b2c30\u5173 csv \u4fe1\u606f\u8bfb\u53d6 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362\uff0c\u56fe\u50cf\u8bc6\u522b \u7b2c31\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362 mandelbrot \u56fe\u50cf\u6784\u9020\uff0c\u56fe\u50cf\u8bc6\u522b arecibo \u4fe1\u606f \u7b2c32\u5173 \u9012\u5f52\uff0c\u7eb5\u5411\u4e0e\u6a2a\u5411\u76f8\u4e92\u7b5b\u9009 \u7b2c33\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u63d0\u53d6","title":"preview"},{"location":"PythonChallenge/preview/#_1","text":"\u5173\u5361 \u9898\u76ee \u7b2c00\u5173 \u5e42\u8fd0\u7b97 \u7b2c01\u5173 chr(), ord() maketrans(), translate() \u7b2c02\u5173 collections.Counter \u7b2c03\u5173 \u6b63\u5219\u8868\u8fbe\u5f0f \u7b2c04\u5173 \u722c\u866b + \u6b63\u5219 \u7b2c05\u5173 pickle \u6a21\u5757 \u7b2c06\u5173 Zip \u6a21\u5757 + \u6b63\u5219 \u7b2c07\u5173 Pillow \u6a21\u5757\uff1aRGB \u503c\u63d0\u53d6 \u7b2c08\u5173 bz2 \u52a0\u5bc6\u6a21\u5757 \u7b2c09\u5173 PIL.Image, PIL.ImageDraw\uff1a\u63cf\u70b9\u753b\u56fe \u7b2c10\u5173 \u52a8\u6001\u89c4\u5212\u57fa\u7840 \u7b2c11\u5173 PIL.Image\uff1a\u56fe\u7247\u62c6\u5206 \u7b2c12\u5173 crul, \u6587\u4ef6\u5934 \u7b2c13\u5173 xmlrpc \u6a21\u5757 \u7b2c14\u5173 PIL.Image, PIL.ImageChops\uff1a\u56de\u578b\u56fe\u7247\u590d\u539f \u7b2c15\u5173 datetime \u6a21\u5757\uff1a\u65e5\u671f\u68c0\u7d22 \u7b2c16\u5173 PIL.Image\uff1a\u9519\u4f4d\u56fe\u50cf\u590d\u539f \u7b2c17\u5173 urllib.parse\uff1a\u7f16\u7801\u4e0e\u89e3\u7801 \u7b2c18\u5173 binascii \u6a21\u5757 difflib \u6a21\u5757\uff1a\u5206\u79bb\u6587\u4ef6\u6216\u5b57\u7b26\u4e32\u4e2d\u76f8\u540c\u548c\u4e0d\u540c\u7684\u90e8\u5206 gzip \u6a21\u5757 \u7b2c19\u5173 base64 \u6a21\u5757\uff1a\u90ae\u4ef6\u5f62\u5f0f\u52a0\u5bc6 email \u6a21\u5757\uff1a\u63d0\u53d6 email \u4fe1\u606f os \u6a21\u5757\uff1a\u5bf9\u6587\u4ef6\u6267\u884c\u76f8\u5bf9\u547d\u4ee4 struct \u6a21\u5757\uff1a\u6570\u636e\u89e3\u5305 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6\u4e0e\u5199\u5165 \u7b2c20\u5173 requests \u6a21\u5757\uff1a\u6d4f\u89c8\u5668\u5934\u90e8\u4fe1\u606f\u6a21\u62df\u548c\u670d\u52a1\u5668\u5934\u90e8\u4fe1\u606f\u8bbf\u95ee zipfile \u6a21\u5757 \u7b2c21\u5173 zlib \u6a21\u5757 bz2 \u6a21\u5757 \u7b2c22\u5173 PIL.Image\uff1agif \u56fe\u50cf\u5e27\u6570\u636e\u8bfb\u53d6 \u7b2c23\u5173 this \u6a21\u5757\uff1aPython \u4e4b\u7985 \u7b2c24\u5173 \u8ff7\u5bab\u89e3\u6cd5 PIL.Image\uff1a\u50cf\u7d20\u63d0\u53d6 \u7b2c25\u5173 PIL.Image\uff1a\u56fe\u7247\u5199\u5165\u548c\u590d\u539f\u62fc\u63a5 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6 \u7b2c26\u5173 hashlib \u6a21\u5757\uff1amd5 \u9a8c\u8bc1\uff0c\u7834\u635f\u6587\u4ef6\u4fee\u590d \u7b2c27\u5173 PIL.Image\uff1a\u8c03\u8272\u677f\u4fe1\u606f\uff0c\u5173\u952e\u5b57 \u7b2c28\u5173 PIL.Image\uff1aRGB \u4e09\u901a\u9053\u5206\u79bb \u7b2c29\u5173 PIL.Image\uff1a\u56fe\u50cf\u6807\u6ce8\u680f \u7b2c30\u5173 csv \u4fe1\u606f\u8bfb\u53d6 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362\uff0c\u56fe\u50cf\u8bc6\u522b \u7b2c31\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362 mandelbrot \u56fe\u50cf\u6784\u9020\uff0c\u56fe\u50cf\u8bc6\u522b arecibo \u4fe1\u606f \u7b2c32\u5173 \u9012\u5f52\uff0c\u7eb5\u5411\u4e0e\u6a2a\u5411\u76f8\u4e92\u7b5b\u9009 \u7b2c33\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u63d0\u53d6","title":"\u7b80\u5355\u68b3\u7406"},{"location":"PythonChallenge/Knowledge/01/","text":"\u7b2c 1 \u9898 Link \u79fb\u4f4d\u5bc6\u7801 Link translate(atype.maketrans()) translate type maketrans intab outtab ex1 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr ex2 1 2 3 4 5 6 7 8 s = \"map\" intab = bytes ([ i for i in range ( ord ( 'a' ), ord ( 'z' ) + 1 )]) outtab = intab [ 2 :] + intab [: 2 ] transtab = bytes . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr","title":"Ex01"},{"location":"PythonChallenge/Knowledge/01/#1","text":"","title":"\u7b2c 1 \u9898"},{"location":"PythonChallenge/Knowledge/01/#_1","text":"translate(atype.maketrans()) translate type maketrans intab outtab ex1 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr ex2 1 2 3 4 5 6 7 8 s = \"map\" intab = bytes ([ i for i in range ( ord ( 'a' ), ord ( 'z' ) + 1 )]) outtab = intab [ 2 :] + intab [: 2 ] transtab = bytes . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr","title":"\u79fb\u4f4d\u5bc6\u7801"},{"location":"PythonChallenge/Knowledge/02/","text":"\u7b2c 2 \u9898 Link \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570 Link collections.Counter(strings) \u7edf\u8ba1 strings \u4e2d\u6bcf\u79cd\u5b57\u7b26\u51fa\u73b0\u7684\u4e2a\u6570 1 2 3 4 5 6 from collections import Counter print ( Counter ( \"abbcdde\" )) >>> Counter ({ 'b' : 2 , 'd' : 2 , 'a' : 1 , 'c' : 1 , 'e' : 1 })","title":"Ex02"},{"location":"PythonChallenge/Knowledge/02/#2","text":"","title":"\u7b2c 2 \u9898"},{"location":"PythonChallenge/Knowledge/02/#_1","text":"collections.Counter(strings) \u7edf\u8ba1 strings \u4e2d\u6bcf\u79cd\u5b57\u7b26\u51fa\u73b0\u7684\u4e2a\u6570 1 2 3 4 5 6 from collections import Counter print ( Counter ( \"abbcdde\" )) >>> Counter ({ 'b' : 2 , 'd' : 2 , 'a' : 1 , 'c' : 1 , 'e' : 1 })","title":"\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570"},{"location":"PythonChallenge/Knowledge/03/","text":"\u7b2c 3 \u9898 Link \u6b63\u5219 Link re.findall(rules, strings) [a-z] \u4efb\u610f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd [A-Z]{3} \u4efb\u610f\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\uff08\u6ca1\u6709\u95f4\u9694\uff09 1 2 3 4 5 6 from re import findall print ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , \"aBBBcDDDefGGGhIIIjj\" )) >>> [ 'c' , 'h' ]","title":"Ex03"},{"location":"PythonChallenge/Knowledge/03/#3","text":"","title":"\u7b2c 3 \u9898"},{"location":"PythonChallenge/Knowledge/03/#_1","text":"re.findall(rules, strings) [a-z] \u4efb\u610f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd [A-Z]{3} \u4efb\u610f\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\uff08\u6ca1\u6709\u95f4\u9694\uff09 1 2 3 4 5 6 from re import findall print ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , \"aBBBcDDDefGGGhIIIjj\" )) >>> [ 'c' , 'h' ]","title":"\u6b63\u5219"},{"location":"PythonChallenge/Knowledge/04/","text":"\u7b2c 4 \u9898 Link 1. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 Link urllib 1 2 3 4 5 6 7 import urllib.request response = urllib . request . urlopen ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . read ()) >>> b 'and the next nothing is 44827' requests 1 2 3 4 5 6 7 from requests import get response = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . text ) >>> and the next nothing is 44827 2. \u6b63\u5219 Link re.findall(rules, strings) \\d{3,} 3\u4e2a\u6216\u66f4\u591a\u6570\u5b57\uff08\u6ca1\u6709\u95f4\u9694\uff09 \u5b89\u5168\u8d77\u89c1\uff0c\u7528 r\"\\d{3,}\" 1 2 3 4 5 6 from re import findall print ( findall ( r \"\\d{3,}\" , \"abc 12 34567\" )) >>> [ '34567' ] 3. \u5bf9\u6570\u5b57\u7684\u5224\u65ad Link isdigit() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0cbyte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57 False: \u6c49\u5b57\u6570\u5b57 Error: \u65e0 isdecimal() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09 False: \u6c49\u5b57\u6570\u5b57\uff0c\u7f57\u9a6c\u6570\u5b57 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09 isnumeric() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 False: \u65e0 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09","title":"Ex04"},{"location":"PythonChallenge/Knowledge/04/#4","text":"","title":"\u7b2c 4 \u9898"},{"location":"PythonChallenge/Knowledge/04/#1","text":"urllib 1 2 3 4 5 6 7 import urllib.request response = urllib . request . urlopen ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . read ()) >>> b 'and the next nothing is 44827' requests 1 2 3 4 5 6 7 from requests import get response = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . text ) >>> and the next nothing is 44827","title":"1. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9"},{"location":"PythonChallenge/Knowledge/04/#2","text":"re.findall(rules, strings) \\d{3,} 3\u4e2a\u6216\u66f4\u591a\u6570\u5b57\uff08\u6ca1\u6709\u95f4\u9694\uff09 \u5b89\u5168\u8d77\u89c1\uff0c\u7528 r\"\\d{3,}\" 1 2 3 4 5 6 from re import findall print ( findall ( r \"\\d{3,}\" , \"abc 12 34567\" )) >>> [ '34567' ]","title":"2. \u6b63\u5219"},{"location":"PythonChallenge/Knowledge/04/#3","text":"isdigit() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0cbyte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57 False: \u6c49\u5b57\u6570\u5b57 Error: \u65e0 isdecimal() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09 False: \u6c49\u5b57\u6570\u5b57\uff0c\u7f57\u9a6c\u6570\u5b57 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09 isnumeric() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 False: \u65e0 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09","title":"3. \u5bf9\u6570\u5b57\u7684\u5224\u65ad"},{"location":"PythonChallenge/Knowledge/05/","text":"\u7b2c 5 \u9898 Link \u201c\u6ce1\u83dc\u201d Link pickle.dump \u201c\u814c\u5236\u201d 1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close () \u67e5\u770b test.pkl \uff08\u6709\u70b9\u5c34\u5c2c\uff09 \u20acX\u0010 Python Challengeq . pickle.load \u201c\u5f00\u575b\u201d 1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"Ex05"},{"location":"PythonChallenge/Knowledge/05/#5","text":"","title":"\u7b2c 5 \u9898"},{"location":"PythonChallenge/Knowledge/05/#_1","text":"pickle.dump \u201c\u814c\u5236\u201d 1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close () \u67e5\u770b test.pkl \uff08\u6709\u70b9\u5c34\u5c2c\uff09 \u20acX\u0010 Python Challengeq . pickle.load \u201c\u5f00\u575b\u201d 1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"\u201c\u6ce1\u83dc\u201d"},{"location":"PythonChallenge/Knowledge/06/","text":"\u7b2c 6 \u9898 Link 1. \u83b7\u53d6\u538b\u7f29\u5305\u4e2d\u7684 comment Link zipfile.ZipFile open read read getinfo comment file_size compress_size ... ex1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from zipfile import ZipFile channel = ZipFile ( \"channel.zip\" , 'r' ) readme = channel . open ( \"readme.txt\" , 'r' ) print ( readme . read ()) readme . close () t = channel . getinfo ( \"90052.txt\" ) . comment print ( t ) channel . close () >>> ... # \u7701\u7565 b '*' ex2 >>> from zipfile import ZipFile >>> >>> z = ZipFile ( \"channel.zip\" ) >>> z . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> z . getinfo ( \"readme.txt\" ) . comment b '' >>> >>> z . getinfo ( \"90052.txt\" ) . comment b '*' >>> z . getinfo ( \"90052.txt\" ) . file_size 21 >>> z . getinfo ( \"90052.txt\" ) . compress_size 23 >>> 2. bytes & string Link bytes to str 1 2 3 4 5 6 7 s = b \"abc\" print ( str ( s , encoding = \"utf-8\" )) print ( bytes . decode ( s )) >>> abc abc str to bytes 1 2 3 4 5 6 7 s = \"abc\" print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc'","title":"Ex06"},{"location":"PythonChallenge/Knowledge/06/#6","text":"","title":"\u7b2c 6 \u9898"},{"location":"PythonChallenge/Knowledge/06/#1-comment","text":"zipfile.ZipFile open read read getinfo comment file_size compress_size ... ex1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from zipfile import ZipFile channel = ZipFile ( \"channel.zip\" , 'r' ) readme = channel . open ( \"readme.txt\" , 'r' ) print ( readme . read ()) readme . close () t = channel . getinfo ( \"90052.txt\" ) . comment print ( t ) channel . close () >>> ... # \u7701\u7565 b '*' ex2 >>> from zipfile import ZipFile >>> >>> z = ZipFile ( \"channel.zip\" ) >>> z . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> z . getinfo ( \"readme.txt\" ) . comment b '' >>> >>> z . getinfo ( \"90052.txt\" ) . comment b '*' >>> z . getinfo ( \"90052.txt\" ) . file_size 21 >>> z . getinfo ( \"90052.txt\" ) . compress_size 23 >>>","title":"1. \u83b7\u53d6\u538b\u7f29\u5305\u4e2d\u7684 comment"},{"location":"PythonChallenge/Knowledge/06/#2-bytes-string","text":"bytes to str 1 2 3 4 5 6 7 s = b \"abc\" print ( str ( s , encoding = \"utf-8\" )) print ( bytes . decode ( s )) >>> abc abc str to bytes 1 2 3 4 5 6 7 s = \"abc\" print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc'","title":"2. bytes &amp; string"},{"location":"PythonChallenge/Knowledge/07/","text":"\u7b2c 7 \u9898 Link 1. \u83b7\u53d6\u56fe\u7247\u7684\u50cf\u7d20\u4fe1\u606f Link pillow \u542c\u8bf4 PIL \u662f\u5fd7\u613f\u8005\u4eec\u5bf9 pillow \u7684\u7ee7\u627f\u4e0e\u53d1\u5c55 PIL for Python Imaging Library PIL.Image \u53ef\u4ee5\u8bf4\u662f PIL \u91cc\u6700\u91cd\u8981\u7684\u7c7b 1 2 3 4 5 6 7 8 from PIL import Image img = Image . open ( \"oxygen.png\" ) pix = img . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e print ( pix [ 0 , 0 ]) >>> ( 79 , 92 , 23 , 255 ) # R, G, B, A; A=255 \u8868\u793a\u4e0d\u900f\u660e 2. bytes Link 1 2 3 4 5 6 7 # \u7528\u6cd5\u4e0e str \u76f8\u4f3c\uff0c\u5217\u51fa\u6765\u662f\u56e0\u4e3a\u6211\u4ee5\u524d\u51e0\u4e4e\u6ca1\u7528\u8fc7 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' [ 1 , 2 , 3 ]","title":"Ex07"},{"location":"PythonChallenge/Knowledge/07/#7","text":"","title":"\u7b2c 7 \u9898"},{"location":"PythonChallenge/Knowledge/07/#1","text":"pillow \u542c\u8bf4 PIL \u662f\u5fd7\u613f\u8005\u4eec\u5bf9 pillow \u7684\u7ee7\u627f\u4e0e\u53d1\u5c55 PIL for Python Imaging Library PIL.Image \u53ef\u4ee5\u8bf4\u662f PIL \u91cc\u6700\u91cd\u8981\u7684\u7c7b 1 2 3 4 5 6 7 8 from PIL import Image img = Image . open ( \"oxygen.png\" ) pix = img . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e print ( pix [ 0 , 0 ]) >>> ( 79 , 92 , 23 , 255 ) # R, G, B, A; A=255 \u8868\u793a\u4e0d\u900f\u660e","title":"1. \u83b7\u53d6\u56fe\u7247\u7684\u50cf\u7d20\u4fe1\u606f"},{"location":"PythonChallenge/Knowledge/07/#2-bytes","text":"1 2 3 4 5 6 7 # \u7528\u6cd5\u4e0e str \u76f8\u4f3c\uff0c\u5217\u51fa\u6765\u662f\u56e0\u4e3a\u6211\u4ee5\u524d\u51e0\u4e4e\u6ca1\u7528\u8fc7 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' [ 1 , 2 , 3 ]","title":"2. bytes"},{"location":"PythonChallenge/Knowledge/08/","text":"\u7b2c 8 \u9898 Link \u89e3\u538b\u7f29 Link bz2 bz2.decompress 1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"Ex08"},{"location":"PythonChallenge/Knowledge/08/#8","text":"","title":"\u7b2c 8 \u9898"},{"location":"PythonChallenge/Knowledge/08/#_1","text":"bz2 bz2.decompress 1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"\u89e3\u538b\u7f29"},{"location":"PythonChallenge/Knowledge/09/","text":"\u7b2c 9 \u9898 Link PIL.Image & PIL.ImageDraw Link PIL.Image.new(mode, size, color=0) mode \u2013 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ...... PIL.ImageDraw.Draw(im, mode=None) im \u2013 The image to draw in. PIL.ImageDraw.Draw.line(xy, fill=None, width=0, joint=None) xy \u2013 Sequence of either 2-tuples like [(x, y), (x, y), ...] or numeric values like [x, y, x, y, ...] . PIL.ImageDraw.Draw.polygon(xy, fill=None, outline=None) fill \u2013 Color to use for the fill. 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image , ImageDraw rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde img . show () # \u5c55\u793a img . save ( \"result.png\" ) # \u4fdd\u5b58","title":"Ex09"},{"location":"PythonChallenge/Knowledge/09/#9","text":"","title":"\u7b2c 9 \u9898"},{"location":"PythonChallenge/Knowledge/09/#pilimage-pilimagedraw","text":"PIL.Image.new(mode, size, color=0) mode \u2013 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ...... PIL.ImageDraw.Draw(im, mode=None) im \u2013 The image to draw in. PIL.ImageDraw.Draw.line(xy, fill=None, width=0, joint=None) xy \u2013 Sequence of either 2-tuples like [(x, y), (x, y), ...] or numeric values like [x, y, x, y, ...] . PIL.ImageDraw.Draw.polygon(xy, fill=None, outline=None) fill \u2013 Color to use for the fill. 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image , ImageDraw rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde img . show () # \u5c55\u793a img . save ( \"result.png\" ) # \u4fdd\u5b58","title":"PIL.Image &amp; PIL.ImageDraw"},{"location":"PythonChallenge/Knowledge/11/","text":"\u7b2c 11 \u9898 Link PIL.Image Link 1. \u88c1\u526a\u4e0e\u653e\u5927 Link 1 2 3 4 5 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250 2. \u83b7\u53d6\u56fe\u7247\u57fa\u672c\u7684\u53c2\u6570 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size print ( w , h ) print ( img . size [ 0 ], img . size [ 1 ]) print ( img . width , img . height ) print ( img . mode ) >>> 640 480 640 480 640 480 RGB 3. \u83b7\u53d6\u50cf\u7d20\u503c\u4e0e\u5199\u5165\u50cf\u7d20\u503c Link 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image img = Image . open ( \"cave.jpg\" ) new = Image . new ( \"RGB\" , ( 500 , 500 )) pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c print ( pix ) new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> ( 0 , 20 , 0 )","title":"Ex11"},{"location":"PythonChallenge/Knowledge/11/#11","text":"","title":"\u7b2c 11 \u9898"},{"location":"PythonChallenge/Knowledge/11/#pilimage","text":"","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/11/#1","text":"1 2 3 4 5 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250","title":"1. \u88c1\u526a\u4e0e\u653e\u5927"},{"location":"PythonChallenge/Knowledge/11/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size print ( w , h ) print ( img . size [ 0 ], img . size [ 1 ]) print ( img . width , img . height ) print ( img . mode ) >>> 640 480 640 480 640 480 RGB","title":"2. \u83b7\u53d6\u56fe\u7247\u57fa\u672c\u7684\u53c2\u6570"},{"location":"PythonChallenge/Knowledge/11/#3","text":"1 2 3 4 5 6 7 8 9 10 11 from PIL import Image img = Image . open ( \"cave.jpg\" ) new = Image . new ( \"RGB\" , ( 500 , 500 )) pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c print ( pix ) new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> ( 0 , 20 , 0 )","title":"3. \u83b7\u53d6\u50cf\u7d20\u503c\u4e0e\u5199\u5165\u50cf\u7d20\u503c"},{"location":"PythonChallenge/Knowledge/12/","text":"\u7b2c 12 \u9898 Link 1. curl Link \u6309\u4f20\u7edf\uff0c\u4e60\u60ef\u79f0 cURL \u4e3a\u4e0b\u8f7d\u5de5\u5177\uff0c\u652f\u6301\u7684\u901a\u4fe1\u534f\u8bae\u6709\u8bb8\u591a\uff0c HTTPS \u662f\u5176\u4e2d\u4e00\u79cd ps: \u9700\u8981\u5b89\u88c5 \u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ... 2. you get Link ps: \u9700\u8981\u5b89\u88c5 york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file 3. \u6587\u4ef6\u5934 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () for i in range ( 5 ): print ( bytes ( data [ i :: 5 ])) >>> b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b 'GIF87a@ \\x01\\xf0\\x00\\xe7\\x00\\x00\\x00\\x01\\x00 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNG...IHDR -> png GIF -> gif 4. eval Link evil for evaluate \uff0c\u4e0d\u8fc7\u8bfb\u8d77\u6765\u8fd8\u662f evil \u987a 1 2 3 4 5 f0 = open ( \"0.jpg\" , \"wb\" ) f4 = open ( \"4.jpg\" , \"wb\" ) for i in range ( 5 ): eval ( \"f\" + str ( i )) . write ( \"sth.\" )","title":"Ex12"},{"location":"PythonChallenge/Knowledge/12/#12","text":"","title":"\u7b2c 12 \u9898"},{"location":"PythonChallenge/Knowledge/12/#1-curl","text":"\u6309\u4f20\u7edf\uff0c\u4e60\u60ef\u79f0 cURL \u4e3a\u4e0b\u8f7d\u5de5\u5177\uff0c\u652f\u6301\u7684\u901a\u4fe1\u534f\u8bae\u6709\u8bb8\u591a\uff0c HTTPS \u662f\u5176\u4e2d\u4e00\u79cd ps: \u9700\u8981\u5b89\u88c5 \u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ...","title":"1. curl"},{"location":"PythonChallenge/Knowledge/12/#2-you-get","text":"ps: \u9700\u8981\u5b89\u88c5 york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file","title":"2. you get"},{"location":"PythonChallenge/Knowledge/12/#3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () for i in range ( 5 ): print ( bytes ( data [ i :: 5 ])) >>> b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b 'GIF87a@ \\x01\\xf0\\x00\\xe7\\x00\\x00\\x00\\x01\\x00 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNG...IHDR -> png GIF -> gif","title":"3. \u6587\u4ef6\u5934"},{"location":"PythonChallenge/Knowledge/12/#4-eval","text":"evil for evaluate \uff0c\u4e0d\u8fc7\u8bfb\u8d77\u6765\u8fd8\u662f evil \u987a 1 2 3 4 5 f0 = open ( \"0.jpg\" , \"wb\" ) f4 = open ( \"4.jpg\" , \"wb\" ) for i in range ( 5 ): eval ( \"f\" + str ( i )) . write ( \"sth.\" )","title":"4. eval"},{"location":"PythonChallenge/Knowledge/13/","text":"\u7b2c 13 \u9898 Link \u201c\u901a\u4fe1\u201d Link xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY' Python2 Python2 \u4e2d\u4f7f\u7528\u7684\u662f xmlrpclib 1 2 3 4 from xmlrpclib import ServerProxy server = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) server . system . listMethods ()","title":"Ex13"},{"location":"PythonChallenge/Knowledge/13/#13","text":"","title":"\u7b2c 13 \u9898"},{"location":"PythonChallenge/Knowledge/13/#_1","text":"xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY' Python2 Python2 \u4e2d\u4f7f\u7528\u7684\u662f xmlrpclib 1 2 3 4 from xmlrpclib import ServerProxy server = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) server . system . listMethods ()","title":"\u201c\u901a\u4fe1\u201d"},{"location":"PythonChallenge/Knowledge/15/","text":"\u7b2c 15 \u9898 Link \u201c\u4e07\u5e74\u5386\u201d Link datetime datetime.datetime 1 2 3 4 5 6 7 8 9 from datetime import datetime date = datetime ( 2020 , 1 , 1 ) print ( date . year , date . month , date . day ) print ( date . weekday ()) # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 >>> 2020 1 1 2 # 2020-01-01 \u662f\u5468\u4e09","title":"Ex15"},{"location":"PythonChallenge/Knowledge/15/#15","text":"","title":"\u7b2c 15 \u9898"},{"location":"PythonChallenge/Knowledge/15/#_1","text":"datetime datetime.datetime 1 2 3 4 5 6 7 8 9 from datetime import datetime date = datetime ( 2020 , 1 , 1 ) print ( date . year , date . month , date . day ) print ( date . weekday ()) # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 >>> 2020 1 1 2 # 2020-01-01 \u662f\u5468\u4e09","title":"\u201c\u4e07\u5e74\u5386\u201d"},{"location":"PythonChallenge/Knowledge/16/","text":"\u7b2c 16 \u9898 Link PIL.Image Link Image.histogram(mask=None, extrema=None) Returns a histogram for the image. The histogram is returned as a list of pixel counts, one for each pixel value in the source image. If the image has more than one band, the histograms for all bands are concatenated (for example, the histogram for an \u201cRGB\u201d image contains 768 values). 1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"mozart.gif\" ) res = img . histogram () # 0-255 \u5404\u4e2a\u50cf\u7d20\u503c\u51fa\u73b0\u7684\u4e2a\u6570 print ( len ( res )) print ( res [: 10 ]) >>> 256 [ 0 , 0 , 0 , 0 , 1 , 14 , 0 , 36 , 66 , 1684 ] PIL.ImageChops Link Image.crop(box=None) box \u2013 The crop rectangle, as a (left, upper, right, lower)-tuple. 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 row = img . crop ( box ) # \u88c1\u526a row2bytes = row . tobytes () i = row2bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 img . paste ( row , box ) # \u7c98\u8d34","title":"Ex16"},{"location":"PythonChallenge/Knowledge/16/#16","text":"","title":"\u7b2c 16 \u9898"},{"location":"PythonChallenge/Knowledge/16/#pilimage","text":"Image.histogram(mask=None, extrema=None) Returns a histogram for the image. The histogram is returned as a list of pixel counts, one for each pixel value in the source image. If the image has more than one band, the histograms for all bands are concatenated (for example, the histogram for an \u201cRGB\u201d image contains 768 values). 1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"mozart.gif\" ) res = img . histogram () # 0-255 \u5404\u4e2a\u50cf\u7d20\u503c\u51fa\u73b0\u7684\u4e2a\u6570 print ( len ( res )) print ( res [: 10 ]) >>> 256 [ 0 , 0 , 0 , 0 , 1 , 14 , 0 , 36 , 66 , 1684 ]","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/16/#pilimagechops","text":"Image.crop(box=None) box \u2013 The crop rectangle, as a (left, upper, right, lower)-tuple. 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 row = img . crop ( box ) # \u88c1\u526a row2bytes = row . tobytes () i = row2bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 img . paste ( row , box ) # \u7c98\u8d34","title":"PIL.ImageChops"},{"location":"PythonChallenge/Knowledge/17/","text":"\u7b2c 17 \u9898 Link urllib.parse Link unquote_to_bytes \u987e\u540d\u601d\u4e49\uff1a\u5148\u89e3\u7801\uff0c\u540e\u8f6c\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' quote, quote_plus \u8fd9\u4e24\u79cd\u7f16\u7801\u7565\u6709\u533a\u522b 1 2 3 4 5 6 7 8 9 from urllib.parse import quote , quote_plus s = \"123abc!@#+ /\" print ( quote ( s )) print ( quote_plus ( s )) >>> 123 abc % 21 % 40 % 23 % 2 B % 20 / 123 abc % 21 % 40 % 23 % 2 B +% 2 F Python2 2 \u4e0e 3 \u7684 unquote_plus \u4e0d\u540c \u8c03\u7528\u65b9\u5f0f\u4e0d\u540c \u89e3\u7801\u65b9\u5f0f\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python2 # -*- coding: UTF-8 -*- import bz2 import urllib s = \"BZh91AY%26SY %94% 3A %E 2I %00% 00 %21% 19%80P %81% 11 %00% AFg %9E %A0+ %00hE %3DM%B5 %23% D0%D4%D1 %E 2%8D %06% A9 %F A%26S%D4%D3 %21% A1 %E Ai7h%9B%9A%2B%BF %60% 22%C5WX %E 1%ADL %80% E8V%3C%C6%A8%DBH %2632% 18%A8x %01% 08 %21% 8DS%0B%C8%AF%96KO%CA2%B0 %F 1%BD%1Du%A0 %86% 05 %92s %B0 %92% C4Bc %F 1w%24S %85% 09%09C%AE %24% 90\" data = urllib . unquote_plus ( s ) secret = bz2 . decompress ( data ) print ( secret ) >>> is it the 26 th already ? call his father and inform him that \"the flowers are on their way\" . he 'll understand.","title":"Ex17"},{"location":"PythonChallenge/Knowledge/17/#17","text":"","title":"\u7b2c 17 \u9898"},{"location":"PythonChallenge/Knowledge/17/#urllibparse","text":"unquote_to_bytes \u987e\u540d\u601d\u4e49\uff1a\u5148\u89e3\u7801\uff0c\u540e\u8f6c\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' quote, quote_plus \u8fd9\u4e24\u79cd\u7f16\u7801\u7565\u6709\u533a\u522b 1 2 3 4 5 6 7 8 9 from urllib.parse import quote , quote_plus s = \"123abc!@#+ /\" print ( quote ( s )) print ( quote_plus ( s )) >>> 123 abc % 21 % 40 % 23 % 2 B % 20 / 123 abc % 21 % 40 % 23 % 2 B +% 2 F Python2 2 \u4e0e 3 \u7684 unquote_plus \u4e0d\u540c \u8c03\u7528\u65b9\u5f0f\u4e0d\u540c \u89e3\u7801\u65b9\u5f0f\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python2 # -*- coding: UTF-8 -*- import bz2 import urllib s = \"BZh91AY%26SY %94% 3A %E 2I %00% 00 %21% 19%80P %81% 11 %00% AFg %9E %A0+ %00hE %3DM%B5 %23% D0%D4%D1 %E 2%8D %06% A9 %F A%26S%D4%D3 %21% A1 %E Ai7h%9B%9A%2B%BF %60% 22%C5WX %E 1%ADL %80% E8V%3C%C6%A8%DBH %2632% 18%A8x %01% 08 %21% 8DS%0B%C8%AF%96KO%CA2%B0 %F 1%BD%1Du%A0 %86% 05 %92s %B0 %92% C4Bc %F 1w%24S %85% 09%09C%AE %24% 90\" data = urllib . unquote_plus ( s ) secret = bz2 . decompress ( data ) print ( secret ) >>> is it the 26 th already ? call his father and inform him that \"the flowers are on their way\" . he 'll understand.","title":"urllib.parse"},{"location":"PythonChallenge/Knowledge/18/","text":"\u7b2c 18 \u9898 Link \u201c\u627e\u832c\u201d Link difflib & gzip difflib.ndiff(a, b) difflib.Differ().compare(a, b) \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u4ea7\u751f\u7684\u7ed3\u679c\u4e00\u81f4\uff0c\u5747\u6709\u4e09\u79cd\u5f00\u5934 \u4ee5 - \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4ee5 + \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u53f3\u4fa7 \u4ee5\u7a7a\u683c\u5f00\u5934\uff1a\u4e24\u4fa7\u5747\u6709 gzip \u53ef\u4ee5\u6253\u5f00 .gz \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u7684\u56de\u8f66\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare1 = difflib . ndiff ( left , right ) compare2 = difflib . Differ () . compare ( left , right ) binascii unhexlify(bytes), a2b_hex(bytes) hexlify(bytes), b2a_hex(bytes) >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>> str.splitlines([keepends]) \u6309\u7167\u884c('\\r', '\\r\\n', \\n')\u5206\u9694 \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 keepends \u9ed8\u8ba4\u4e3a False \u82e5 keepends=True\uff0c\u5219\u4fdd\u7559\u6362\u884c\u7b26 1 2 3 4 5 6 7 s = \"123 \\n abc \\r\\n 456 \\r \" print ( s . splitlines ()) print ( s . splitlines ( True )) >>> [ '123' , 'abc' , '456' ] [ '123 \\n ' , 'abc \\r\\n ' , '456 \\r ' ]","title":"Ex18"},{"location":"PythonChallenge/Knowledge/18/#18","text":"","title":"\u7b2c 18 \u9898"},{"location":"PythonChallenge/Knowledge/18/#_1","text":"difflib & gzip difflib.ndiff(a, b) difflib.Differ().compare(a, b) \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u4ea7\u751f\u7684\u7ed3\u679c\u4e00\u81f4\uff0c\u5747\u6709\u4e09\u79cd\u5f00\u5934 \u4ee5 - \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4ee5 + \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u53f3\u4fa7 \u4ee5\u7a7a\u683c\u5f00\u5934\uff1a\u4e24\u4fa7\u5747\u6709 gzip \u53ef\u4ee5\u6253\u5f00 .gz \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u7684\u56de\u8f66\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare1 = difflib . ndiff ( left , right ) compare2 = difflib . Differ () . compare ( left , right ) binascii unhexlify(bytes), a2b_hex(bytes) hexlify(bytes), b2a_hex(bytes) >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>> str.splitlines([keepends]) \u6309\u7167\u884c('\\r', '\\r\\n', \\n')\u5206\u9694 \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 keepends \u9ed8\u8ba4\u4e3a False \u82e5 keepends=True\uff0c\u5219\u4fdd\u7559\u6362\u884c\u7b26 1 2 3 4 5 6 7 s = \"123 \\n abc \\r\\n 456 \\r \" print ( s . splitlines ()) print ( s . splitlines ( True )) >>> [ '123' , 'abc' , '456' ] [ '123 \\n ' , 'abc \\r\\n ' , '456 \\r ' ]","title":"\u201c\u627e\u832c\u201d"},{"location":"PythonChallenge/Knowledge/19/","text":"\u7b2c 19 \u9898 Link base64 Link base46.b64decode(s, altchars=None, validate=False) \u89e3\u7801 Base64 \u7f16\u7801\u5b57\u8282 1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @' RIFF... \u662f .wav \u7684\u6587\u4ef6\u5934 email Link documentataion: https://docs.python.org/3/library/email.html 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False os Link os.popen(cmd, mode='r', buffering=-1) Supply os.popen() 1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux re Link re.findall(rules, strings, re.S) re.S \u6307\u591a\u884c\u641c\u7d22 . \u4efb\u610f\u5143\u7d20 * \u4efb\u610f\u4e2a\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 import re s = \"\"\"123 <!-- abc def ghi --> 456\"\"\" print ( re . findall ( \"<!-- \\n (.*) \\n -->\" , s , re . S )) >>> [ 'abc \\n def \\n ghi' ] struct Link struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 ) wave Link documentation: https://docs.python.org/3/library/wave.html wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) \u4e00\u4e9b\u53c2\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps \u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5 Link \u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close ()","title":"Ex19"},{"location":"PythonChallenge/Knowledge/19/#19","text":"","title":"\u7b2c 19 \u9898"},{"location":"PythonChallenge/Knowledge/19/#base64","text":"base46.b64decode(s, altchars=None, validate=False) \u89e3\u7801 Base64 \u7f16\u7801\u5b57\u8282 1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @' RIFF... \u662f .wav \u7684\u6587\u4ef6\u5934","title":"base64"},{"location":"PythonChallenge/Knowledge/19/#email","text":"documentataion: https://docs.python.org/3/library/email.html 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False","title":"email"},{"location":"PythonChallenge/Knowledge/19/#os","text":"os.popen(cmd, mode='r', buffering=-1) Supply os.popen() 1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux","title":"os"},{"location":"PythonChallenge/Knowledge/19/#re","text":"re.findall(rules, strings, re.S) re.S \u6307\u591a\u884c\u641c\u7d22 . \u4efb\u610f\u5143\u7d20 * \u4efb\u610f\u4e2a\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 import re s = \"\"\"123 <!-- abc def ghi --> 456\"\"\" print ( re . findall ( \"<!-- \\n (.*) \\n -->\" , s , re . S )) >>> [ 'abc \\n def \\n ghi' ]","title":"re"},{"location":"PythonChallenge/Knowledge/19/#struct","text":"struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 )","title":"struct"},{"location":"PythonChallenge/Knowledge/19/#wave","text":"documentation: https://docs.python.org/3/library/wave.html wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) \u4e00\u4e9b\u53c2\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps","title":"wave"},{"location":"PythonChallenge/Knowledge/19/#19_1","text":"\u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close ()","title":"\u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5"},{"location":"PythonChallenge/Knowledge/20/","text":"\u7b2c 20 \u9898 Link \u53cd\u590d\u6536\u96c6 cookie Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a user name and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...' Http Response Code Link \u5e38\u89c1\u7684 Status Code Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9 \u8865\u5145 Link \u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095 zipfile Link 1 2 3 4 5 6 7 8 9 10 11 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 txt = zp . read ( \"readme.txt\" ) # \u83b7\u53d6\u538b\u7f29\u5305\u5185\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9 print ( txt ) >>> [ 'readme.txt' , 'package.pack' ] b \"Yes! This is really level 21 in here. \\n And yes, After you solve it, you'll be in level 22! \\n\\n Now for the level: \\n\\n * We used to play this game when we were kids \\n * When I had no idea what to do, I looked backwards. \\n \" Others Link \u4e8c\u8fdb\u5236\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 repr() \u6253\u5370 .zip \u6587\u4ef6\u7684\u6587\u4ef6\u5934\uff1a PK Linux \u4e0b\uff0c\u53ef\u4ee5\u8fd9\u6837\u67e5\u770b\u6587\u4ef6\u7c7b\u578b\uff1a york$ file unreal.dat Python 2 \u4e0e 3 \u7684\u5f02\u540c Link \u6bd4\u8f83\u660e\u663e\u7684\u4e0d\u540c \u9664\u6cd5 print \u9ed8\u8ba4\u5b57\u7b26 \u4e34\u65f6\u7684\u89e3\u51b3\u529e\u6cd5 \u4f7f\u7528 __future__ # python2 from __future__ import division , print_function , unicode_literals","title":"Ex20"},{"location":"PythonChallenge/Knowledge/20/#20","text":"","title":"\u7b2c 20 \u9898"},{"location":"PythonChallenge/Knowledge/20/#cookie","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a user name and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...'","title":"\u53cd\u590d\u6536\u96c6 cookie"},{"location":"PythonChallenge/Knowledge/20/#http-response-code","text":"\u5e38\u89c1\u7684 Status Code Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9","title":"Http Response Code"},{"location":"PythonChallenge/Knowledge/20/#_1","text":"\u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095","title":"\u8865\u5145"},{"location":"PythonChallenge/Knowledge/20/#zipfile","text":"1 2 3 4 5 6 7 8 9 10 11 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 txt = zp . read ( \"readme.txt\" ) # \u83b7\u53d6\u538b\u7f29\u5305\u5185\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9 print ( txt ) >>> [ 'readme.txt' , 'package.pack' ] b \"Yes! This is really level 21 in here. \\n And yes, After you solve it, you'll be in level 22! \\n\\n Now for the level: \\n\\n * We used to play this game when we were kids \\n * When I had no idea what to do, I looked backwards. \\n \"","title":"zipfile"},{"location":"PythonChallenge/Knowledge/20/#others","text":"\u4e8c\u8fdb\u5236\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 repr() \u6253\u5370 .zip \u6587\u4ef6\u7684\u6587\u4ef6\u5934\uff1a PK Linux \u4e0b\uff0c\u53ef\u4ee5\u8fd9\u6837\u67e5\u770b\u6587\u4ef6\u7c7b\u578b\uff1a york$ file unreal.dat","title":"Others"},{"location":"PythonChallenge/Knowledge/20/#python-2-3","text":"\u6bd4\u8f83\u660e\u663e\u7684\u4e0d\u540c \u9664\u6cd5 print \u9ed8\u8ba4\u5b57\u7b26 \u4e34\u65f6\u7684\u89e3\u51b3\u529e\u6cd5 \u4f7f\u7528 __future__ # python2 from __future__ import division , print_function , unicode_literals","title":"Python 2 \u4e0e 3 \u7684\u5f02\u540c"},{"location":"PythonChallenge/Knowledge/21/","text":"\u7b2c 21 \u9898 Link zlib Link 1 2 3 4 5 6 7 8 9 10 11 import zlib f = open ( \"package.pack\" , \"rb\" ) data = f . read () f . close () data = zlib . decompress ( data ) print ( data [: 6 ]) >>> b 'x \\x9c\\x00\\x07 @ \\xf8 ' \u538b\u7f29\u6587\u4ef6\u7684\u6587\u4ef6\u5934\u8865\u5145 Link zlib: 78 9c '\\x' \u6307\u5341\u516d\u8fdb\u5236 'x\\x9c' \u6307\u4e24\u4e2a\u6570\uff1ax \u4e0e 9c chr('x') = 120 hex(120) = '0x78' gzip: 1f 8b 08 lzma: 6c 00","title":"Ex21"},{"location":"PythonChallenge/Knowledge/21/#21","text":"","title":"\u7b2c 21 \u9898"},{"location":"PythonChallenge/Knowledge/21/#zlib","text":"1 2 3 4 5 6 7 8 9 10 11 import zlib f = open ( \"package.pack\" , \"rb\" ) data = f . read () f . close () data = zlib . decompress ( data ) print ( data [: 6 ]) >>> b 'x \\x9c\\x00\\x07 @ \\xf8 '","title":"zlib"},{"location":"PythonChallenge/Knowledge/21/#_1","text":"zlib: 78 9c '\\x' \u6307\u5341\u516d\u8fdb\u5236 'x\\x9c' \u6307\u4e24\u4e2a\u6570\uff1ax \u4e0e 9c chr('x') = 120 hex(120) = '0x78' gzip: 1f 8b 08 lzma: 6c 00","title":"\u538b\u7f29\u6587\u4ef6\u7684\u6587\u4ef6\u5934\u8865\u5145"},{"location":"PythonChallenge/Knowledge/22/","text":"\u7b2c 22 \u9898 Link PIL.Image Link \u7528\u5230\u7684\u65b9\u6cd5 Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u5185\u7f6e\u51fd\u6570 divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200","title":"Ex22"},{"location":"PythonChallenge/Knowledge/22/#22","text":"","title":"\u7b2c 22 \u9898"},{"location":"PythonChallenge/Knowledge/22/#pilimage","text":"\u7528\u5230\u7684\u65b9\u6cd5 Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u5185\u7f6e\u51fd\u6570 divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/23/","text":"\u7b2c 23 \u9898 Link this Link 1 2 3 4 5 6 7 8 import this s = \"va gur snpr bs jung?\" print ( '' . join ([ this . d . get ( c , c ) for c in s ])) >>> ... # \u7701\u7565 The Zen of Python in the face of what ?","title":"Ex23"},{"location":"PythonChallenge/Knowledge/23/#23","text":"","title":"\u7b2c 23 \u9898"},{"location":"PythonChallenge/Knowledge/23/#this","text":"1 2 3 4 5 6 7 8 import this s = \"va gur snpr bs jung?\" print ( '' . join ([ this . d . get ( c , c ) for c in s ])) >>> ... # \u7701\u7565 The Zen of Python in the face of what ?","title":"this"},{"location":"PythonChallenge/Knowledge/25/","text":"\u7b2c 25 \u9898 Link requests.Session Link 1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content ) Image.paste & wave Link 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): byte = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), byte ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' ) \u8865\u5145 Link Linux \u4e0b\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8fd9\u4e48\u505a york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"Ex25"},{"location":"PythonChallenge/Knowledge/25/#25","text":"","title":"\u7b2c 25 \u9898"},{"location":"PythonChallenge/Knowledge/25/#requestssession","text":"1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content )","title":"requests.Session"},{"location":"PythonChallenge/Knowledge/25/#imagepaste-wave","text":"1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): byte = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), byte ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' )","title":"Image.paste &amp; wave"},{"location":"PythonChallenge/Knowledge/25/#_1","text":"Linux \u4e0b\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8fd9\u4e48\u505a york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"\u8865\u5145"},{"location":"PythonChallenge/Knowledge/26/","text":"\u7b2c 26 \u9898 Link bytearray Link >>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>> md5 Link york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc","title":"Ex26"},{"location":"PythonChallenge/Knowledge/26/#26","text":"","title":"\u7b2c 26 \u9898"},{"location":"PythonChallenge/Knowledge/26/#bytearray","text":">>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>>","title":"bytearray"},{"location":"PythonChallenge/Knowledge/26/#md5","text":"york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc","title":"md5"},{"location":"PythonChallenge/Knowledge/27/","text":"\u7b2c 27 \u9898 Link keyword.iskeyword Link >>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>>","title":"Ex27"},{"location":"PythonChallenge/Knowledge/27/#27","text":"","title":"\u7b2c 27 \u9898"},{"location":"PythonChallenge/Knowledge/27/#keywordiskeyword","text":">>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>>","title":"keyword.iskeyword"},{"location":"PythonChallenge/Knowledge/29/","text":"\u7b2c 29 \u9898 Link PIL.Image Link Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' ) >>>","title":"Ex29"},{"location":"PythonChallenge/Knowledge/29/#29","text":"","title":"\u7b2c 29 \u9898"},{"location":"PythonChallenge/Knowledge/29/#pilimage","text":"Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' ) >>>","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/30/","text":"\u7b2c 30 \u9898 Link PIL.Image Link Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE . 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c","title":"Ex30"},{"location":"PythonChallenge/Knowledge/30/#30","text":"","title":"\u7b2c 30 \u9898"},{"location":"PythonChallenge/Knowledge/30/#pilimage","text":"Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE . 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/31/","text":"\u7b2c 31 \u9898 Link PIL.Image Link 1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"mandelbrot_clean.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . show ()","title":"Ex31"},{"location":"PythonChallenge/Knowledge/31/#31","text":"","title":"\u7b2c 31 \u9898"},{"location":"PythonChallenge/Knowledge/31/#pilimage","text":"1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"mandelbrot_clean.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . show ()","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/33/","text":"\u7b2c 33 \u9898 Link max Link >>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>>","title":"Ex33"},{"location":"PythonChallenge/Knowledge/33/#33","text":"","title":"\u7b2c 33 \u9898"},{"location":"PythonChallenge/Knowledge/33/#max","text":">>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>>","title":"max"},{"location":"PythonChallenge/Solutions/00_warming_up/","text":"\u7b2c 0 \u9898 warming up Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/0.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link try to change the URL address. 4. \u89e3\u6cd5 Link \u8ba1\u7b97 2 38 1 2 3 >>> 2 ** 38 274877906944 >>> \u66f4\u6539\u5730\u5740\uff1a\u5c06 0.html \u6539\u4e3a 274877906944.html 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/274877906944.html \u8fdb\u5165\u4e0a\u8ff0\u5730\u5740\u540e\uff0c\u7f51\u9875\u4f1a\u81ea\u52a8\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/map.html 6. \u8bf4\u660e Link \u6b64\u6b21\u505a Python Challenge \uff0c\u4ee5\u5b66\u4e60\u3001\u89c1\u8bc6 Python \u4e3a\u4e3b","title":"00 warming up"},{"location":"PythonChallenge/Solutions/00_warming_up/#0-warming-up","text":"","title":"\u7b2c 0 \u9898 warming up"},{"location":"PythonChallenge/Solutions/00_warming_up/#1","text":">>> http://www.pythonchallenge.com/pc/def/0.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/00_warming_up/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/00_warming_up/#3","text":"try to change the URL address.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/00_warming_up/#4","text":"\u8ba1\u7b97 2 38 1 2 3 >>> 2 ** 38 274877906944 >>> \u66f4\u6539\u5730\u5740\uff1a\u5c06 0.html \u6539\u4e3a 274877906944.html","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/00_warming_up/#5","text":"http://www.pythonchallenge.com/pc/def/274877906944.html \u8fdb\u5165\u4e0a\u8ff0\u5730\u5740\u540e\uff0c\u7f51\u9875\u4f1a\u81ea\u52a8\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/map.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/00_warming_up/#6","text":"\u6b64\u6b21\u505a Python Challenge \uff0c\u4ee5\u5b66\u4e60\u3001\u89c1\u8bc6 Python \u4e3a\u4e3b","title":"6. \u8bf4\u660e"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/","text":"\u7b2c 01 \u9898 What about making trans? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/map.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link everybody thinks twice before solving this. g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. 4. \u89e3\u6cd5 Link \u56fe\u4e2d\u793a\u610f\u5c06\u5b57\u6bcd\u5f80\u540e\u79fb\u4e24\u4f4d ... K, L, M ... ... O, P, Q ... ... E, F, G ... \u975e\u5b57\u6bcd\u90e8\u5206\u6ca1\u8bf4\uff0c\u5c31\u4e0d\u505a\u7406\u4f1a 1 2 3 4 5 6 7 s = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\" res = [ e . isalpha () and chr ( 97 + ( ord ( e ) - 97 + 2 ) % 26 ) or e for e in s ] print ( '' . join ( res )) >>> i hope you didnt translate it by hand . thats what computers are for . doing it in by hand is inefficient and that 's why this text is so long. using string.maketrans() is recommended. now apply on the url. \u4e0a\u9762\u7684\u7ed3\u679c\u63d0\u793a\uff1a\u4f7f\u7528 string.maketrans() \u5bf9\u5730\u5740\u8fdb\u884c\u201c\u7ffb\u8bd1\u201d \u4e0d\u8fc7 Python3.4 \u8d77\uff0c maketrans() \u6210\u4e3a\u4e86\u5185\u5efa\u51fd\u6570 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/ocr.html","title":"01 what about making trans"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#01-what-about-making-trans","text":"","title":"\u7b2c 01 \u9898 What about making trans?"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#1","text":">>> http://www.pythonchallenge.com/pc/def/map.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#3","text":"everybody thinks twice before solving this. g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#4","text":"\u56fe\u4e2d\u793a\u610f\u5c06\u5b57\u6bcd\u5f80\u540e\u79fb\u4e24\u4f4d ... K, L, M ... ... O, P, Q ... ... E, F, G ... \u975e\u5b57\u6bcd\u90e8\u5206\u6ca1\u8bf4\uff0c\u5c31\u4e0d\u505a\u7406\u4f1a 1 2 3 4 5 6 7 s = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\" res = [ e . isalpha () and chr ( 97 + ( ord ( e ) - 97 + 2 ) % 26 ) or e for e in s ] print ( '' . join ( res )) >>> i hope you didnt translate it by hand . thats what computers are for . doing it in by hand is inefficient and that 's why this text is so long. using string.maketrans() is recommended. now apply on the url. \u4e0a\u9762\u7684\u7ed3\u679c\u63d0\u793a\uff1a\u4f7f\u7528 string.maketrans() \u5bf9\u5730\u5740\u8fdb\u884c\u201c\u7ffb\u8bd1\u201d \u4e0d\u8fc7 Python3.4 \u8d77\uff0c maketrans() \u6210\u4e3a\u4e86\u5185\u5efa\u51fd\u6570 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#5","text":"http://www.pythonchallenge.com/pc/def/ocr.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/02_ocr/","text":"\u7b2c 2 \u9898 ocr Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/ocr.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link recognize the characters. maybe they are in the book, but MAYBE they are in the page source. 4. \u89e3\u6cd5 Link \u6839\u636e\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u6e90\u7801\uff0c\u6709\u4e00\u77ed\u4e00\u957f\u4e24\u6bb5\u6ce8\u91ca 1 2 3 find rare characters in the mess below: %%$@_$^__#)^)&!_+]!*@&^}@[@%]()%+$&... # \u7565\u53bb\u5343\u4f59\u884c \u65e2\u7136\u662f\u201c\u5bfb\u627e\u7a00\u6709\u5b57\u7b26\u201d\uff0c\u90a3\u4e48\u8fd9\u4e00\u9898\u662f\u201c\u7edf\u8ba1\u8bcd\u9891\u201d\u4e86 \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u7801\u53e6\u5b58\u4e3a ocr.txt 4.1 \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 with open ( \"ocr.txt\" ) as f : d = {} for e in f . read (): d [ e ] = d . get ( e , 0 ) + 1 lst = [ e for e in d . keys ()] lst . sort ( key = lambda x : d [ x ]) print ( '' . join ( lst )) >>> equality ^*& $ { + ! % }[ _ #](@) 4.2 \u65b9\u6cd5\u4e8c Link \u7531\u65b9\u6cd5\u4e00\u7684\u7ed3\u679c\u53ef\u77e5\u9700\u8981\u83b7\u53d6\u7684\u662f\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 1 2 3 4 5 6 7 8 9 from collections import Counter with open ( \"ocr.txt\" ) as f : c = Counter ( f . read ()) res = [ e for e in c if c [ e ] == 1 ] print ( '' . join ( res )) >>> equality 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/equality.html","title":"02 ocr"},{"location":"PythonChallenge/Solutions/02_ocr/#2-ocr","text":"","title":"\u7b2c 2 \u9898 ocr"},{"location":"PythonChallenge/Solutions/02_ocr/#1","text":">>> http://www.pythonchallenge.com/pc/def/ocr.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/02_ocr/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/02_ocr/#3","text":"recognize the characters. maybe they are in the book, but MAYBE they are in the page source.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/02_ocr/#4","text":"\u6839\u636e\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u6e90\u7801\uff0c\u6709\u4e00\u77ed\u4e00\u957f\u4e24\u6bb5\u6ce8\u91ca 1 2 3 find rare characters in the mess below: %%$@_$^__#)^)&!_+]!*@&^}@[@%]()%+$&... # \u7565\u53bb\u5343\u4f59\u884c \u65e2\u7136\u662f\u201c\u5bfb\u627e\u7a00\u6709\u5b57\u7b26\u201d\uff0c\u90a3\u4e48\u8fd9\u4e00\u9898\u662f\u201c\u7edf\u8ba1\u8bcd\u9891\u201d\u4e86 \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u7801\u53e6\u5b58\u4e3a ocr.txt","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/02_ocr/#41","text":"1 2 3 4 5 6 7 8 9 10 11 with open ( \"ocr.txt\" ) as f : d = {} for e in f . read (): d [ e ] = d . get ( e , 0 ) + 1 lst = [ e for e in d . keys ()] lst . sort ( key = lambda x : d [ x ]) print ( '' . join ( lst )) >>> equality ^*& $ { + ! % }[ _ #](@)","title":"4.1 \u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/02_ocr/#42","text":"\u7531\u65b9\u6cd5\u4e00\u7684\u7ed3\u679c\u53ef\u77e5\u9700\u8981\u83b7\u53d6\u7684\u662f\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 1 2 3 4 5 6 7 8 9 from collections import Counter with open ( \"ocr.txt\" ) as f : c = Counter ( f . read ()) res = [ e for e in c if c [ e ] == 1 ] print ( '' . join ( res )) >>> equality","title":"4.2 \u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/02_ocr/#5","text":"http://www.pythonchallenge.com/pc/def/equality.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/03_re/","text":"\u7b2c 3 \u9898 re Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/equality.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 One small letter, surrounded by EXACTLY three big bodyguards on each of its sides. \u7f51\u9875\u6e90\u7801\u6ce8\u91ca 1 kAewtloYgcFQaJNhHVGxXDiQmzjfcpYbzxlWrVcqsmUb... 4. \u89e3\u6cd5 Link \u5bfb\u627e\u8fd9\u6837\u7684\u5c0f\u5199\u5b57\u6bcd\uff1a\u5b83\u5de6\u53f3\u4e24\u8fb9\u6709\u4e14\u4ec5\u6709 3 \u4e2a\u5927\u5199\u5b57\u6bcd \u6807\u9898\u662f re \uff0c\u8fd9\u662f\u4f5c\u8005\u63d0\u793a\u4f7f\u7528\u201c\u6b63\u5219\u201d \u4e0d\u8fc7\uff0c\u4e0d\u7528\u6b63\u5219\u4e5f\u884c \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u5e8f\u7684\u5b57\u7b26\u4e32\u53e6\u5b58\u4e3a bodyguard.txt 4.1 \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 f = open ( \"bodyguard.txt\" ) s = f . read () f . close () n = len ( s ) res = [] target = - 1 left = mid = right = 0 for i in range ( n ): if s [ i ] . islower (): if right == 3 : res . append ( s [ target ]) target = i mid , right = 1 , 0 elif 0 < right < 3 : left = mid = right = 0 elif left == 3 : if not mid : target = i mid = 1 else : left = mid = 0 elif left < 3 : left = 0 elif s [ i ] . isupper (): if right == 3 : left , mid , right = - 1 , 0 , 0 elif 0 < right < 3 : right += 1 elif mid : right = 1 elif left == 3 : left = - 1 elif - 1 < left < 3 : left += 1 print ( '' . join ( res )) >>> linkedlist 4.2 \u65b9\u6cd5\u4e8c Link 1 2 3 4 5 6 7 from re import findall with open ( \"bodyguard.txt\" , 'r' ) as f : # \u5c06\u5b57\u7b26\u4e32\u4fdd\u5b58\u5230\u6587\u4ef6 bodyguard.txt \u4e2d print ( '' . join ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , f . read ()))) >>> linkedlist \u8fdb\u5165 http://www.pythonchallenge.com/pc/def/linkedlist.html \u65b0\u7f51\u9875\u5185\u5199\u7740\uff1a linkedlist.php 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/linkedlist.php","title":"03 re"},{"location":"PythonChallenge/Solutions/03_re/#3-re","text":"","title":"\u7b2c 3 \u9898 re"},{"location":"PythonChallenge/Solutions/03_re/#1","text":">>> http://www.pythonchallenge.com/pc/def/equality.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/03_re/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/03_re/#3","text":"\u7f51\u9875\u5185 One small letter, surrounded by EXACTLY three big bodyguards on each of its sides. \u7f51\u9875\u6e90\u7801\u6ce8\u91ca 1 kAewtloYgcFQaJNhHVGxXDiQmzjfcpYbzxlWrVcqsmUb...","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/03_re/#4","text":"\u5bfb\u627e\u8fd9\u6837\u7684\u5c0f\u5199\u5b57\u6bcd\uff1a\u5b83\u5de6\u53f3\u4e24\u8fb9\u6709\u4e14\u4ec5\u6709 3 \u4e2a\u5927\u5199\u5b57\u6bcd \u6807\u9898\u662f re \uff0c\u8fd9\u662f\u4f5c\u8005\u63d0\u793a\u4f7f\u7528\u201c\u6b63\u5219\u201d \u4e0d\u8fc7\uff0c\u4e0d\u7528\u6b63\u5219\u4e5f\u884c \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u5e8f\u7684\u5b57\u7b26\u4e32\u53e6\u5b58\u4e3a bodyguard.txt","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/03_re/#41","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 f = open ( \"bodyguard.txt\" ) s = f . read () f . close () n = len ( s ) res = [] target = - 1 left = mid = right = 0 for i in range ( n ): if s [ i ] . islower (): if right == 3 : res . append ( s [ target ]) target = i mid , right = 1 , 0 elif 0 < right < 3 : left = mid = right = 0 elif left == 3 : if not mid : target = i mid = 1 else : left = mid = 0 elif left < 3 : left = 0 elif s [ i ] . isupper (): if right == 3 : left , mid , right = - 1 , 0 , 0 elif 0 < right < 3 : right += 1 elif mid : right = 1 elif left == 3 : left = - 1 elif - 1 < left < 3 : left += 1 print ( '' . join ( res )) >>> linkedlist","title":"4.1 \u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/03_re/#42","text":"1 2 3 4 5 6 7 from re import findall with open ( \"bodyguard.txt\" , 'r' ) as f : # \u5c06\u5b57\u7b26\u4e32\u4fdd\u5b58\u5230\u6587\u4ef6 bodyguard.txt \u4e2d print ( '' . join ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , f . read ()))) >>> linkedlist \u8fdb\u5165 http://www.pythonchallenge.com/pc/def/linkedlist.html \u65b0\u7f51\u9875\u5185\u5199\u7740\uff1a linkedlist.php","title":"4.2 \u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/03_re/#5","text":"http://www.pythonchallenge.com/pc/def/linkedlist.php","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/","text":"\u7b2c 4 \u9898 follow the chain Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/linkedlist.php 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca urllib may help. DON'T TRY ALL NOTHINGS, since it will never end. 400 times is more than enough. 4. \u89e3\u6cd5 Link \u56fe\u7247\u53ef\u4ee5\u70b9\u51fb \u70b9\u51fb\u540e\uff0c\u9875\u9762\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345 \u65b0\u9875\u9762\u5185\u5bb9\uff1a and the next nothing is 44827 \u7528\u9875\u9762\u7684 next nothing \u503c\u66ff\u6362\u7f51\u5740\u4e2d nothing \u7684\u503c\uff0c\u4f1a\u8df3\u8f6c\u81f3\u65b0\u9875\u9762\u5e76\u5f97\u5230\u65b0\u7684 next nothing \u503c \u63d0\u793a\u4e2d\u63a8\u8350\u4f7f\u7528 urllib \uff0c\u5e76\u544a\u77e5\u8fd9\u6837\u7684\u7f51\u9875\u6709 400 \u4e2a\u5de6\u53f3\uff0c\u5e76\u4e14\u5faa\u73af \u5bf9\u4e8e Python3 \uff0c request \u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from re import findall from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=\" num = 44827 res = get ( url + str ( num )) try : while True : num = findall ( r \"\\d{3,}\" , res . text )[ 0 ] print ( num ) res = get ( url + num ) except : print ( res . text ) >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 16044 Yes . Divide by two and keep going . \u53d6 16044 \u7684\u4e00\u534a\u4e3a\u503c\uff0c\u7ee7\u7eed\uff08\u6211\u6362\u4e86\u4e2a\u65b9\u6cd5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from requests import get num = 16044 // 2 while True : res = get ( f \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing= { num } \" ) num = res . text . split ()[ - 1 ] if num . isdigit (): print ( num ) else : print ( res . text ) break >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 66831 peak . html 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/peak.html","title":"04 follow the chain"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#4-follow-the-chain","text":"","title":"\u7b2c 4 \u9898 follow the chain"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#1","text":">>> http://www.pythonchallenge.com/pc/def/linkedlist.php","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca urllib may help. DON'T TRY ALL NOTHINGS, since it will never end. 400 times is more than enough.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#4","text":"\u56fe\u7247\u53ef\u4ee5\u70b9\u51fb \u70b9\u51fb\u540e\uff0c\u9875\u9762\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345 \u65b0\u9875\u9762\u5185\u5bb9\uff1a and the next nothing is 44827 \u7528\u9875\u9762\u7684 next nothing \u503c\u66ff\u6362\u7f51\u5740\u4e2d nothing \u7684\u503c\uff0c\u4f1a\u8df3\u8f6c\u81f3\u65b0\u9875\u9762\u5e76\u5f97\u5230\u65b0\u7684 next nothing \u503c \u63d0\u793a\u4e2d\u63a8\u8350\u4f7f\u7528 urllib \uff0c\u5e76\u544a\u77e5\u8fd9\u6837\u7684\u7f51\u9875\u6709 400 \u4e2a\u5de6\u53f3\uff0c\u5e76\u4e14\u5faa\u73af \u5bf9\u4e8e Python3 \uff0c request \u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from re import findall from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=\" num = 44827 res = get ( url + str ( num )) try : while True : num = findall ( r \"\\d{3,}\" , res . text )[ 0 ] print ( num ) res = get ( url + num ) except : print ( res . text ) >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 16044 Yes . Divide by two and keep going . \u53d6 16044 \u7684\u4e00\u534a\u4e3a\u503c\uff0c\u7ee7\u7eed\uff08\u6211\u6362\u4e86\u4e2a\u65b9\u6cd5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from requests import get num = 16044 // 2 while True : res = get ( f \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing= { num } \" ) num = res . text . split ()[ - 1 ] if num . isdigit (): print ( num ) else : print ( res . text ) break >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 66831 peak . html","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#5","text":"http://www.pythonchallenge.com/pc/def/peak.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/05_peak_hell/","text":"\u7b2c 5 \u9898 peak hell Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/peak.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 pronounce it \u7f51\u9875\u6e90\u7801\u6ce8\u91ca peak hell sounds familiar ? 4. \u89e3\u6cd5 Link \u7f51\u9875\u6e90\u7801\u4e2d\u9664\u4e86\u4e00\u6761\u6ce8\u91ca\uff0c\u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a banner.p \u7684\u6e90\u6587\u4ef6\u53ef\u9605\uff08\u4e2a\u4eba\u5efa\u8bae\u590d\u5236\u5730\u5740\u81f3 Edge \u4e0b\u8f7d\uff09 \u5c06\u7f51\u9875\u6807\u9898 peak hell \u8bfb\u5feb\u4e00\u70b9\uff0c\u53d1\u73b0\u50cf pickle \u4f7f\u7528 pickle \u5bf9 banner.p \u89e3\u5bc6 1 2 3 4 5 6 7 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : print ( load ( f )) >>> [[( ' ' , 95 )], [( ' ' , 14 ), ( '#' , 5 ), ( ' ' , 70 ), ( ... \u8f93\u51fa\u7684\u662f\u4e8c\u7ef4\u5217\u8868\uff0c\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u4e2d\u5404\u6709\u4e8c\u5143\u7ec4 1 \u81f3 n \u4e2a\u4e0d\u7b49 \u6bcf\u4e2a\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u7684\u884c\u53c8\u53ef\u4ee5\u7ec4\u6210\u4e00\u6bb5 1 2 3 4 5 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : res = [ '' . join ( i * j for i , j in line ) for line in load ( f )] print ( ' \\n ' . join ( res )) \u8f93\u51fa\u4e00\u5f20\u5b57\u7b26\u753b 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/channel.html","title":"05 peak hell"},{"location":"PythonChallenge/Solutions/05_peak_hell/#5-peak-hell","text":"","title":"\u7b2c 5 \u9898 peak hell"},{"location":"PythonChallenge/Solutions/05_peak_hell/#1","text":">>> http://www.pythonchallenge.com/pc/def/peak.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/05_peak_hell/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/05_peak_hell/#3","text":"\u7f51\u9875\u5185 pronounce it \u7f51\u9875\u6e90\u7801\u6ce8\u91ca peak hell sounds familiar ?","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/05_peak_hell/#4","text":"\u7f51\u9875\u6e90\u7801\u4e2d\u9664\u4e86\u4e00\u6761\u6ce8\u91ca\uff0c\u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a banner.p \u7684\u6e90\u6587\u4ef6\u53ef\u9605\uff08\u4e2a\u4eba\u5efa\u8bae\u590d\u5236\u5730\u5740\u81f3 Edge \u4e0b\u8f7d\uff09 \u5c06\u7f51\u9875\u6807\u9898 peak hell \u8bfb\u5feb\u4e00\u70b9\uff0c\u53d1\u73b0\u50cf pickle \u4f7f\u7528 pickle \u5bf9 banner.p \u89e3\u5bc6 1 2 3 4 5 6 7 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : print ( load ( f )) >>> [[( ' ' , 95 )], [( ' ' , 14 ), ( '#' , 5 ), ( ' ' , 70 ), ( ... \u8f93\u51fa\u7684\u662f\u4e8c\u7ef4\u5217\u8868\uff0c\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u4e2d\u5404\u6709\u4e8c\u5143\u7ec4 1 \u81f3 n \u4e2a\u4e0d\u7b49 \u6bcf\u4e2a\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u7684\u884c\u53c8\u53ef\u4ee5\u7ec4\u6210\u4e00\u6bb5 1 2 3 4 5 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : res = [ '' . join ( i * j for i , j in line ) for line in load ( f )] print ( ' \\n ' . join ( res )) \u8f93\u51fa\u4e00\u5f20\u5b57\u7b26\u753b","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/05_peak_hell/#5","text":"http://www.pythonchallenge.com/pc/def/channel.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/","text":"\u7b2c 6 \u9898 now there are pairs Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/channel.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 \u56fe\u7247\u6b63\u4e0b\u65b9\u6709\u4e2a PayPal-Donate \u7684 Button \u8fd9\u4e0e\u89e3\u8ff7\u65e0\u5173\uff0c\u662f\u7528\u4e8e\u201c\u6253\u8d4f\u201d\u4f5c\u8005\u7684 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca \u2190 zip 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u4e3b\u89d2\u662f\u201c\u62c9\u94fe\u201d\uff0c\u5373 zip \u7f51\u9875\u6e90\u7801\u7b2c\u4e00\u884c\uff0c <html> <!-- <-- zip --> \uff0c\u6697\u793a\u5c06 html \u6539\u4e3a zip \u6539\u5730\u5740\u540e\u53ef\u4e0b\u8f7d\u5230 channel.zip \u89e3\u538b\u53ef\u5f97\u8fd1\u5343\u4e2a\u6587\u4ef6\uff0c\u5176\u4ed6\u5747\u4ee5\u6570\u5b57\u547d\u540d\uff0c\u9664\u4e86 readme.txt \u67e5\u770b readme.txt welcome to my zipped list. hint1: start from 90052 hint2: answer is inside the zip 90052.txt \u4e2d\u5199\u7740 Next nothing is 94191 \u7531\u6b64\u53ef\u89c1\uff0c\u6b64\u9898\u4e0e\u7b2c 4 \u9898\u7c7b\u4f3c\uff0c\u53ea\u662f\u8f7d\u4f53\u4e0d\u540c part2 Link \u67e5\u627e\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 filename = \"90052\" while filename . isdecimal (): f = open ( filename + \".txt\" ) line = f . readline () f . close () filename = line . split ()[ - 1 ] print ( line ) >>> Collect the comments . part3 Link \u4f7f\u7528 zipfile \u83b7\u53d6 comment \u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from zipfile import ZipFile comments = [] filename = \"90052\" channel = ZipFile ( \"channel.zip\" , 'r' ) while filename . isdigit (): filename += \".txt\" f = channel . open ( filename , 'r' ) line = f . readline () f . close () t = channel . getinfo ( filename ) . comment comments . append ( str ( t , encoding = \"utf-8\" )) # bytes -> str filename = bytes . decode ( line . split ()[ - 1 ]) # bytes -> str print ( comments ) >>> [ '*' , '*' , '*' , ... \u628a\u4e0a\u65b9\u7a0b\u5e8f\u7684\u6700\u540e\u4e00\u53e5\u6539\u4e3a print(''.join(comments)) \u5373\u53ef\u770b\u5230\uff08\u51c6\uff09\u7b54\u6848 **************************************************************** **************************************************************** ** ** ** OO OO XX YYYY GG GG EEEEEE NN NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN NN ** ** OO OO XXX XXX YYY YY GG GG EE NN NN ** ** OOOOOOOO XX XX YY GGG EEEEE NNNN ** ** OOOOOOOO XX XX YY GGG EEEEE NN ** ** OO OO XXX XXX YYY YY GG GG EE NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN ** ** OO OO XX YYYY GG GG EEEEEE NN ** ** ** **************************************************************** ************************************************************** \u767b\u5165 http://www.pythonchallenge.com/pc/def/hockey.html \uff0c\u53ef\u5728\u65b0\u7f51\u9875\u5f97\u5230\u4e00\u53e5\u8bdd it's in the air. look at the letters. \u68c0\u67e5\u4e0a\u65b9\u7684 HOCKEY \uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u5b57\u6bcd\u5206\u522b\u7531 O, X, Y, G, E, N \u7ec4\u6210\uff0c\u201c\u6c27\u6c14\u201d\u4e5f\u6b63\u7b26\u5408\u4e0a\u9762\u7684\u63d0\u793a 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/oxygen.html","title":"06 now there are pairs"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#6-now-there-are-pairs","text":"","title":"\u7b2c 6 \u9898 now there are pairs"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#1","text":">>> http://www.pythonchallenge.com/pc/def/channel.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#3","text":"\u7f51\u9875\u5185 \u56fe\u7247\u6b63\u4e0b\u65b9\u6709\u4e2a PayPal-Donate \u7684 Button \u8fd9\u4e0e\u89e3\u8ff7\u65e0\u5173\uff0c\u662f\u7528\u4e8e\u201c\u6253\u8d4f\u201d\u4f5c\u8005\u7684 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca \u2190 zip","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#part1","text":"\u56fe\u4e2d\u4e3b\u89d2\u662f\u201c\u62c9\u94fe\u201d\uff0c\u5373 zip \u7f51\u9875\u6e90\u7801\u7b2c\u4e00\u884c\uff0c <html> <!-- <-- zip --> \uff0c\u6697\u793a\u5c06 html \u6539\u4e3a zip \u6539\u5730\u5740\u540e\u53ef\u4e0b\u8f7d\u5230 channel.zip \u89e3\u538b\u53ef\u5f97\u8fd1\u5343\u4e2a\u6587\u4ef6\uff0c\u5176\u4ed6\u5747\u4ee5\u6570\u5b57\u547d\u540d\uff0c\u9664\u4e86 readme.txt \u67e5\u770b readme.txt welcome to my zipped list. hint1: start from 90052 hint2: answer is inside the zip 90052.txt \u4e2d\u5199\u7740 Next nothing is 94191 \u7531\u6b64\u53ef\u89c1\uff0c\u6b64\u9898\u4e0e\u7b2c 4 \u9898\u7c7b\u4f3c\uff0c\u53ea\u662f\u8f7d\u4f53\u4e0d\u540c","title":"part1"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#part2","text":"\u67e5\u627e\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 filename = \"90052\" while filename . isdecimal (): f = open ( filename + \".txt\" ) line = f . readline () f . close () filename = line . split ()[ - 1 ] print ( line ) >>> Collect the comments .","title":"part2"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#part3","text":"\u4f7f\u7528 zipfile \u83b7\u53d6 comment \u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from zipfile import ZipFile comments = [] filename = \"90052\" channel = ZipFile ( \"channel.zip\" , 'r' ) while filename . isdigit (): filename += \".txt\" f = channel . open ( filename , 'r' ) line = f . readline () f . close () t = channel . getinfo ( filename ) . comment comments . append ( str ( t , encoding = \"utf-8\" )) # bytes -> str filename = bytes . decode ( line . split ()[ - 1 ]) # bytes -> str print ( comments ) >>> [ '*' , '*' , '*' , ... \u628a\u4e0a\u65b9\u7a0b\u5e8f\u7684\u6700\u540e\u4e00\u53e5\u6539\u4e3a print(''.join(comments)) \u5373\u53ef\u770b\u5230\uff08\u51c6\uff09\u7b54\u6848 **************************************************************** **************************************************************** ** ** ** OO OO XX YYYY GG GG EEEEEE NN NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN NN ** ** OO OO XXX XXX YYY YY GG GG EE NN NN ** ** OOOOOOOO XX XX YY GGG EEEEE NNNN ** ** OOOOOOOO XX XX YY GGG EEEEE NN ** ** OO OO XXX XXX YYY YY GG GG EE NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN ** ** OO OO XX YYYY GG GG EEEEEE NN ** ** ** **************************************************************** ************************************************************** \u767b\u5165 http://www.pythonchallenge.com/pc/def/hockey.html \uff0c\u53ef\u5728\u65b0\u7f51\u9875\u5f97\u5230\u4e00\u53e5\u8bdd it's in the air. look at the letters. \u68c0\u67e5\u4e0a\u65b9\u7684 HOCKEY \uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u5b57\u6bcd\u5206\u522b\u7531 O, X, Y, G, E, N \u7ec4\u6210\uff0c\u201c\u6c27\u6c14\u201d\u4e5f\u6b63\u7b26\u5408\u4e0a\u9762\u7684\u63d0\u793a","title":"part3"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#5","text":"http://www.pythonchallenge.com/pc/def/oxygen.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/07_smarty/","text":"\u7b2c 7 \u9898 smarty Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/oxygen.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u8ba9\u4eba\u5728\u610f\u7684\u65e0\u7591\u5c31\u662f\u4e2d\u95f4\u7684\u90a3\u6761\u9a6c\u8d5b\u514b\u4f3c\u7684\u6a2a\u7ebf \u4f7f\u7528\u622a\u56fe\u5de5\u5177\u67e5\u770b\uff0c\u53ef\u53d1\u73b0 \u201c\u9a6c\u8d5b\u514b\u201d\u5904\u6bcf\u79cd\u989c\u8272\u5404\u81ea\u7684 R, G, B \u4e09\u503c\u76f8\u7b49 \u6bcf\u4e2a\u8272\u5757\u5bbd\u7ea6 7 \uff0c\u603b\u957f\u7ea6 609 h = 50 \u8fd9\u4e00\u884c\u7ecf\u8fc7\u6240\u6709\u7684\u8272\u5757 part2 Link \u4f7f\u7528 pillow \u63d0\u53d6\u8be5\u7ebf \u901a\u8fc7 R, G, B \u5206\u79bb\uff0c\u68c0\u9a8c R == G == B 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , g , b , a = pix [ w , 50 ] f . write ( str (( r , g , b , a )) + ' \\n ' ) f . close () part3 Link \u5c06 RGB \u8f6c ASCII \uff0c\u56e0\u4e3a\u4e09\u503c\u76f8\u7b49\uff0c\u6545\u53ea\u63d0\u53d6\u5176\u4e00\u5373\u53ef 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB2ASCII.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , _ , _ , _ = pix [ w , 50 ] f . write ( chr ( r )) f . close () \u67e5\u770b 07_RGB2ASCII.txt smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121] part4 Link \u5bf9\u5217\u8868\u4e2d\u7684\u6570\u5b57\u518d\u505a\u4e00\u6b21 ASCII \u8f6c\u6362 1 2 3 >>> bytes ([ 105 , 110 , 116 , 101 , 103 , 114 , 105 , 116 , 121 ]) b 'integrity' >>> 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/integrity.html","title":"07 smarty"},{"location":"PythonChallenge/Solutions/07_smarty/#7-smarty","text":"","title":"\u7b2c 7 \u9898 smarty"},{"location":"PythonChallenge/Solutions/07_smarty/#1","text":">>> http://www.pythonchallenge.com/pc/def/oxygen.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/07_smarty/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/07_smarty/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/07_smarty/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/07_smarty/#part1","text":"\u56fe\u4e2d\u8ba9\u4eba\u5728\u610f\u7684\u65e0\u7591\u5c31\u662f\u4e2d\u95f4\u7684\u90a3\u6761\u9a6c\u8d5b\u514b\u4f3c\u7684\u6a2a\u7ebf \u4f7f\u7528\u622a\u56fe\u5de5\u5177\u67e5\u770b\uff0c\u53ef\u53d1\u73b0 \u201c\u9a6c\u8d5b\u514b\u201d\u5904\u6bcf\u79cd\u989c\u8272\u5404\u81ea\u7684 R, G, B \u4e09\u503c\u76f8\u7b49 \u6bcf\u4e2a\u8272\u5757\u5bbd\u7ea6 7 \uff0c\u603b\u957f\u7ea6 609 h = 50 \u8fd9\u4e00\u884c\u7ecf\u8fc7\u6240\u6709\u7684\u8272\u5757","title":"part1"},{"location":"PythonChallenge/Solutions/07_smarty/#part2","text":"\u4f7f\u7528 pillow \u63d0\u53d6\u8be5\u7ebf \u901a\u8fc7 R, G, B \u5206\u79bb\uff0c\u68c0\u9a8c R == G == B 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , g , b , a = pix [ w , 50 ] f . write ( str (( r , g , b , a )) + ' \\n ' ) f . close ()","title":"part2"},{"location":"PythonChallenge/Solutions/07_smarty/#part3","text":"\u5c06 RGB \u8f6c ASCII \uff0c\u56e0\u4e3a\u4e09\u503c\u76f8\u7b49\uff0c\u6545\u53ea\u63d0\u53d6\u5176\u4e00\u5373\u53ef 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB2ASCII.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , _ , _ , _ = pix [ w , 50 ] f . write ( chr ( r )) f . close () \u67e5\u770b 07_RGB2ASCII.txt smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]","title":"part3"},{"location":"PythonChallenge/Solutions/07_smarty/#part4","text":"\u5bf9\u5217\u8868\u4e2d\u7684\u6570\u5b57\u518d\u505a\u4e00\u6b21 ASCII \u8f6c\u6362 1 2 3 >>> bytes ([ 105 , 110 , 116 , 101 , 103 , 114 , 105 , 116 , 121 ]) b 'integrity' >>>","title":"part4"},{"location":"PythonChallenge/Solutions/07_smarty/#5","text":"http://www.pythonchallenge.com/pc/def/integrity.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/08_working_hard/","text":"\u7b2c 8 \u9898 working hard? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/integrity.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 Where is the missing link? \u7f51\u9875\u6e90\u7801\u6ce8\u91ca un: 'BZh91AY&SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07<]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084' pw: 'BZh91AY&SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13<]\\xc9\\x14\\xe1BBP\\x91\\xf08' 4. \u89e3\u6cd5 Link part1 Link \u70b9\u51fb\u56fe\u4e2d\u871c\u8702\uff0c\u9875\u9762\u4f1a\u8df3\u8f6c\u5230\u4e00\u4e2a\u767b\u5f55\u754c\u9762 \u53ef\u4ee5\u731c\u6d4b\uff1a\u6e90\u7801\u4e2d\u7684 un \u4e0e pw \u5bf9\u5e94\u8fd9\u91cc\u7684 username \u4e0e password part2 Link \u871c\u8702\u7684\u82f1\u6587 Bee \u4e0e BZ2 \u5f62\u4f3c BZh91... \u6b63\u662f\u4f7f\u7528 bz2 \u538b\u7f29\u540e\u7684\u6587\u4ef6\u5934 1 2 3 4 5 6 7 8 9 10 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" pw = b \"BZh91AY&SY \\x94 $| \\x0e\\x00\\x00\\x00\\x81\\x00\\x03 $ \\x00 ! \\x9a h3M \\x13 <] \\xc9\\x14\\xe1 BBP \\x91\\xf0 8\" print ( \"un:\" , decompress ( un )) print ( \"pw:\" , decompress ( pw )) >>> un : b 'huge' pw : b 'file' 5. \u7b54\u6848 Link \u65b0\u9875\u9762\uff1a http://www.pythonchallenge.com/pc/return/good.html \u8d26\u53f7\uff1a huge \u5bc6\u7801\uff1a file ps \u63a5\u4e0b\u6765\u7684\u51e0\u9898\uff0c\u82e5\u5173\u95ed\u6d4f\u89c8\u5668\u540e\u91cd\u65b0\u6253\u5f00\uff0c\u6bcf\u6b21\u5747\u9700\u8f93\u5165\u4e0a\u8ff0\u7684\u8d26\u53f7\u3001\u5bc6\u7801","title":"08 working hard"},{"location":"PythonChallenge/Solutions/08_working_hard/#8-working-hard","text":"","title":"\u7b2c 8 \u9898 working hard?"},{"location":"PythonChallenge/Solutions/08_working_hard/#1","text":">>> http://www.pythonchallenge.com/pc/def/integrity.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/08_working_hard/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/08_working_hard/#3","text":"\u7f51\u9875\u5185 Where is the missing link? \u7f51\u9875\u6e90\u7801\u6ce8\u91ca un: 'BZh91AY&SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07<]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084' pw: 'BZh91AY&SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13<]\\xc9\\x14\\xe1BBP\\x91\\xf08'","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/08_working_hard/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/08_working_hard/#part1","text":"\u70b9\u51fb\u56fe\u4e2d\u871c\u8702\uff0c\u9875\u9762\u4f1a\u8df3\u8f6c\u5230\u4e00\u4e2a\u767b\u5f55\u754c\u9762 \u53ef\u4ee5\u731c\u6d4b\uff1a\u6e90\u7801\u4e2d\u7684 un \u4e0e pw \u5bf9\u5e94\u8fd9\u91cc\u7684 username \u4e0e password","title":"part1"},{"location":"PythonChallenge/Solutions/08_working_hard/#part2","text":"\u871c\u8702\u7684\u82f1\u6587 Bee \u4e0e BZ2 \u5f62\u4f3c BZh91... \u6b63\u662f\u4f7f\u7528 bz2 \u538b\u7f29\u540e\u7684\u6587\u4ef6\u5934 1 2 3 4 5 6 7 8 9 10 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" pw = b \"BZh91AY&SY \\x94 $| \\x0e\\x00\\x00\\x00\\x81\\x00\\x03 $ \\x00 ! \\x9a h3M \\x13 <] \\xc9\\x14\\xe1 BBP \\x91\\xf0 8\" print ( \"un:\" , decompress ( un )) print ( \"pw:\" , decompress ( pw )) >>> un : b 'huge' pw : b 'file'","title":"part2"},{"location":"PythonChallenge/Solutions/08_working_hard/#5","text":"\u65b0\u9875\u9762\uff1a http://www.pythonchallenge.com/pc/return/good.html \u8d26\u53f7\uff1a huge \u5bc6\u7801\uff1a file ps \u63a5\u4e0b\u6765\u7684\u51e0\u9898\uff0c\u82e5\u5173\u95ed\u6d4f\u89c8\u5668\u540e\u91cd\u65b0\u6253\u5f00\uff0c\u6bcf\u6b21\u5747\u9700\u8f93\u5165\u4e0a\u8ff0\u7684\u8d26\u53f7\u3001\u5bc6\u7801","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/","text":"\u7b2c 9 \u9898 connect the dots Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/good.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca first+second=? first: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801 second: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801 4. \u89e3\u6cd5 Link part1 Link \u4ed4\u7ec6\u89c2\u5bdf first \u4e0e second \uff0c\u53ef\u4ee5\u53d1\u73b0 first \u9996\u5c3e\u5747\u662f 146, 399 second \u9996\uff1a 156, 141 \uff0c\u5c3e\uff1a 156, 136 \u731c\u6d4b first, second \u53ef\u80fd\u662f\u6709\u8bb8\u591a\u4e2a (xi, yi) \u8fd9\u6837\u7684\u5750\u6807\u70b9\u6784\u6210\u7684 \u7528 Python \u4ea4\u4e92\u73af\u5883\u8ba1\u7b97\u4e00\u4e0b\u957f\u5ea6 len(first) = 442, len(second) = 112 \u90fd\u662f\u5076\u6570\uff0c\u7b26\u5408\u5750\u6807\u7684\u60f3\u6cd5 part2 Link \u4f7f\u7528 pillow 1 2 3 4 5 6 7 8 9 10 from PIL import Image , ImageDraw first = [ 146 , 399 , 163 , 403 , 170 , 393 , 169 , 391 , 166 , 386 , 170 , 381 , 170 , 371 , 170 , 355 , 169 , 346 , 167 , 335 , 170 , 329 , 170 , 320 , 170 , 310 , 171 , 301 , 173 , 290 , 178 , 289 , 182 , 287 , 188 , 286 , 190 , 286 , 192 , 291 , 194 , 296 , 195 , 305 , 194 , 307 , 191 , 312 , 190 , 316 , 190 , 321 , 192 , 331 , 193 , 338 , 196 , 341 , 197 , 346 , 199 , 352 , 198 , 360 , 197 , 366 , 197 , 373 , 196 , 380 , 197 , 383 , 196 , 387 , 192 , 389 , 191 , 392 , 190 , 396 , 189 , 400 , 194 , 401 , 201 , 402 , 208 , 403 , 213 , 402 , 216 , 401 , 219 , 397 , 219 , 393 , 216 , 390 , 215 , 385 , 215 , 379 , 213 , 373 , 213 , 365 , 212 , 360 , 210 , 353 , 210 , 347 , 212 , 338 , 213 , 329 , 214 , 319 , 215 , 311 , 215 , 306 , 216 , 296 , 218 , 290 , 221 , 283 , 225 , 282 , 233 , 284 , 238 , 287 , 243 , 290 , 250 , 291 , 255 , 294 , 261 , 293 , 265 , 291 , 271 , 291 , 273 , 289 , 278 , 287 , 279 , 285 , 281 , 280 , 284 , 278 , 284 , 276 , 287 , 277 , 289 , 283 , 291 , 286 , 294 , 291 , 296 , 295 , 299 , 300 , 301 , 304 , 304 , 320 , 305 , 327 , 306 , 332 , 307 , 341 , 306 , 349 , 303 , 354 , 301 , 364 , 301 , 371 , 297 , 375 , 292 , 384 , 291 , 386 , 302 , 393 , 324 , 391 , 333 , 387 , 328 , 375 , 329 , 367 , 329 , 353 , 330 , 341 , 331 , 328 , 336 , 319 , 338 , 310 , 341 , 304 , 341 , 285 , 341 , 278 , 343 , 269 , 344 , 262 , 346 , 259 , 346 , 251 , 349 , 259 , 349 , 264 , 349 , 273 , 349 , 280 , 349 , 288 , 349 , 295 , 349 , 298 , 354 , 293 , 356 , 286 , 354 , 279 , 352 , 268 , 352 , 257 , 351 , 249 , 350 , 234 , 351 , 211 , 352 , 197 , 354 , 185 , 353 , 171 , 351 , 154 , 348 , 147 , 342 , 137 , 339 , 132 , 330 , 122 , 327 , 120 , 314 , 116 , 304 , 117 , 293 , 118 , 284 , 118 , 281 , 122 , 275 , 128 , 265 , 129 , 257 , 131 , 244 , 133 , 239 , 134 , 228 , 136 , 221 , 137 , 214 , 138 , 209 , 135 , 201 , 132 , 192 , 130 , 184 , 131 , 175 , 129 , 170 , 131 , 159 , 134 , 157 , 134 , 160 , 130 , 170 , 125 , 176 , 114 , 176 , 102 , 173 , 103 , 172 , 108 , 171 , 111 , 163 , 115 , 156 , 116 , 149 , 117 , 142 , 116 , 136 , 115 , 129 , 115 , 124 , 115 , 120 , 115 , 115 , 117 , 113 , 120 , 109 , 122 , 102 , 122 , 100 , 121 , 95 , 121 , 89 , 115 , 87 , 110 , 82 , 109 , 84 , 118 , 89 , 123 , 93 , 129 , 100 , 130 , 108 , 132 , 110 , 133 , 110 , 136 , 107 , 138 , 105 , 140 , 95 , 138 , 86 , 141 , 79 , 149 , 77 , 155 , 81 , 162 , 90 , 165 , 97 , 167 , 99 , 171 , 109 , 171 , 107 , 161 , 111 , 156 , 113 , 170 , 115 , 185 , 118 , 208 , 117 , 223 , 121 , 239 , 128 , 251 , 133 , 259 , 136 , 266 , 139 , 276 , 143 , 290 , 148 , 310 , 151 , 332 , 155 , 348 , 156 , 353 , 153 , 366 , 149 , 379 , 147 , 394 , 146 , 399 ] second = [ 156 , 141 , 165 , 135 , 169 , 131 , 176 , 130 , 187 , 134 , 191 , 140 , 191 , 146 , 186 , 150 , 179 , 155 , 175 , 157 , 168 , 157 , 163 , 157 , 159 , 157 , 158 , 164 , 159 , 175 , 159 , 181 , 157 , 191 , 154 , 197 , 153 , 205 , 153 , 210 , 152 , 212 , 147 , 215 , 146 , 218 , 143 , 220 , 132 , 220 , 125 , 217 , 119 , 209 , 116 , 196 , 115 , 185 , 114 , 172 , 114 , 167 , 112 , 161 , 109 , 165 , 107 , 170 , 99 , 171 , 97 , 167 , 89 , 164 , 81 , 162 , 77 , 155 , 81 , 148 , 87 , 140 , 96 , 138 , 105 , 141 , 110 , 136 , 111 , 126 , 113 , 129 , 118 , 117 , 128 , 114 , 137 , 115 , 146 , 114 , 155 , 115 , 158 , 121 , 157 , 128 , 156 , 134 , 157 , 136 , 156 , 136 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( first , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( second , fill = \"white\" ) img . save ( \"09_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247 \u7531\u4e0a\u9762\u7684\u56fe\u7247\u53ef\u77e5 first \u662f\u8eab\u4f53 second \u662f\u5934\u90e8 \u56fe\u4e2d\u4e3a\u725b\uff0c\u56e0\u5934\u4e0a\u6709\u89d2\uff0c\u6545\u4e3a\u201c\u516c\u725b\u201d\uff0c\u5373 bull 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/bull.html","title":"09 connect the dots"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#9-connect-the-dots","text":"","title":"\u7b2c 9 \u9898 connect the dots"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#1","text":">>> http://www.pythonchallenge.com/pc/return/good.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca first+second=? first: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801 second: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#part1","text":"\u4ed4\u7ec6\u89c2\u5bdf first \u4e0e second \uff0c\u53ef\u4ee5\u53d1\u73b0 first \u9996\u5c3e\u5747\u662f 146, 399 second \u9996\uff1a 156, 141 \uff0c\u5c3e\uff1a 156, 136 \u731c\u6d4b first, second \u53ef\u80fd\u662f\u6709\u8bb8\u591a\u4e2a (xi, yi) \u8fd9\u6837\u7684\u5750\u6807\u70b9\u6784\u6210\u7684 \u7528 Python \u4ea4\u4e92\u73af\u5883\u8ba1\u7b97\u4e00\u4e0b\u957f\u5ea6 len(first) = 442, len(second) = 112 \u90fd\u662f\u5076\u6570\uff0c\u7b26\u5408\u5750\u6807\u7684\u60f3\u6cd5","title":"part1"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#part2","text":"\u4f7f\u7528 pillow 1 2 3 4 5 6 7 8 9 10 from PIL import Image , ImageDraw first = [ 146 , 399 , 163 , 403 , 170 , 393 , 169 , 391 , 166 , 386 , 170 , 381 , 170 , 371 , 170 , 355 , 169 , 346 , 167 , 335 , 170 , 329 , 170 , 320 , 170 , 310 , 171 , 301 , 173 , 290 , 178 , 289 , 182 , 287 , 188 , 286 , 190 , 286 , 192 , 291 , 194 , 296 , 195 , 305 , 194 , 307 , 191 , 312 , 190 , 316 , 190 , 321 , 192 , 331 , 193 , 338 , 196 , 341 , 197 , 346 , 199 , 352 , 198 , 360 , 197 , 366 , 197 , 373 , 196 , 380 , 197 , 383 , 196 , 387 , 192 , 389 , 191 , 392 , 190 , 396 , 189 , 400 , 194 , 401 , 201 , 402 , 208 , 403 , 213 , 402 , 216 , 401 , 219 , 397 , 219 , 393 , 216 , 390 , 215 , 385 , 215 , 379 , 213 , 373 , 213 , 365 , 212 , 360 , 210 , 353 , 210 , 347 , 212 , 338 , 213 , 329 , 214 , 319 , 215 , 311 , 215 , 306 , 216 , 296 , 218 , 290 , 221 , 283 , 225 , 282 , 233 , 284 , 238 , 287 , 243 , 290 , 250 , 291 , 255 , 294 , 261 , 293 , 265 , 291 , 271 , 291 , 273 , 289 , 278 , 287 , 279 , 285 , 281 , 280 , 284 , 278 , 284 , 276 , 287 , 277 , 289 , 283 , 291 , 286 , 294 , 291 , 296 , 295 , 299 , 300 , 301 , 304 , 304 , 320 , 305 , 327 , 306 , 332 , 307 , 341 , 306 , 349 , 303 , 354 , 301 , 364 , 301 , 371 , 297 , 375 , 292 , 384 , 291 , 386 , 302 , 393 , 324 , 391 , 333 , 387 , 328 , 375 , 329 , 367 , 329 , 353 , 330 , 341 , 331 , 328 , 336 , 319 , 338 , 310 , 341 , 304 , 341 , 285 , 341 , 278 , 343 , 269 , 344 , 262 , 346 , 259 , 346 , 251 , 349 , 259 , 349 , 264 , 349 , 273 , 349 , 280 , 349 , 288 , 349 , 295 , 349 , 298 , 354 , 293 , 356 , 286 , 354 , 279 , 352 , 268 , 352 , 257 , 351 , 249 , 350 , 234 , 351 , 211 , 352 , 197 , 354 , 185 , 353 , 171 , 351 , 154 , 348 , 147 , 342 , 137 , 339 , 132 , 330 , 122 , 327 , 120 , 314 , 116 , 304 , 117 , 293 , 118 , 284 , 118 , 281 , 122 , 275 , 128 , 265 , 129 , 257 , 131 , 244 , 133 , 239 , 134 , 228 , 136 , 221 , 137 , 214 , 138 , 209 , 135 , 201 , 132 , 192 , 130 , 184 , 131 , 175 , 129 , 170 , 131 , 159 , 134 , 157 , 134 , 160 , 130 , 170 , 125 , 176 , 114 , 176 , 102 , 173 , 103 , 172 , 108 , 171 , 111 , 163 , 115 , 156 , 116 , 149 , 117 , 142 , 116 , 136 , 115 , 129 , 115 , 124 , 115 , 120 , 115 , 115 , 117 , 113 , 120 , 109 , 122 , 102 , 122 , 100 , 121 , 95 , 121 , 89 , 115 , 87 , 110 , 82 , 109 , 84 , 118 , 89 , 123 , 93 , 129 , 100 , 130 , 108 , 132 , 110 , 133 , 110 , 136 , 107 , 138 , 105 , 140 , 95 , 138 , 86 , 141 , 79 , 149 , 77 , 155 , 81 , 162 , 90 , 165 , 97 , 167 , 99 , 171 , 109 , 171 , 107 , 161 , 111 , 156 , 113 , 170 , 115 , 185 , 118 , 208 , 117 , 223 , 121 , 239 , 128 , 251 , 133 , 259 , 136 , 266 , 139 , 276 , 143 , 290 , 148 , 310 , 151 , 332 , 155 , 348 , 156 , 353 , 153 , 366 , 149 , 379 , 147 , 394 , 146 , 399 ] second = [ 156 , 141 , 165 , 135 , 169 , 131 , 176 , 130 , 187 , 134 , 191 , 140 , 191 , 146 , 186 , 150 , 179 , 155 , 175 , 157 , 168 , 157 , 163 , 157 , 159 , 157 , 158 , 164 , 159 , 175 , 159 , 181 , 157 , 191 , 154 , 197 , 153 , 205 , 153 , 210 , 152 , 212 , 147 , 215 , 146 , 218 , 143 , 220 , 132 , 220 , 125 , 217 , 119 , 209 , 116 , 196 , 115 , 185 , 114 , 172 , 114 , 167 , 112 , 161 , 109 , 165 , 107 , 170 , 99 , 171 , 97 , 167 , 89 , 164 , 81 , 162 , 77 , 155 , 81 , 148 , 87 , 140 , 96 , 138 , 105 , 141 , 110 , 136 , 111 , 126 , 113 , 129 , 118 , 117 , 128 , 114 , 137 , 115 , 146 , 114 , 155 , 115 , 158 , 121 , 157 , 128 , 156 , 134 , 157 , 136 , 156 , 136 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( first , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( second , fill = \"white\" ) img . save ( \"09_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247 \u7531\u4e0a\u9762\u7684\u56fe\u7247\u53ef\u77e5 first \u662f\u8eab\u4f53 second \u662f\u5934\u90e8 \u56fe\u4e2d\u4e3a\u725b\uff0c\u56e0\u5934\u4e0a\u6709\u89d2\uff0c\u6545\u4e3a\u201c\u516c\u725b\u201d\uff0c\u5373 bull","title":"part2"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#5","text":"http://www.pythonchallenge.com/pc/return/bull.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/","text":"\u7b2c 10 \u9898 what are you looking at? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/bull.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link len(a[30]) = ? 4. \u89e3\u6cd5 Link \u70b9\u51fb\u5de6\u8fb9\u7684\u725b\uff0c\u9875\u9762\u8df3\u8f6c\uff0c\u5f97\u5230\u4e00\u53e5\uff1a a = [1, 11, 21, 1211, 111221, \u770b\u6765\u662f\u8981\u627e\u89c4\u5f8b\uff0c\u5f97\u5230 a[30] \u7684\u957f\u5ea6 \u89c4\u5f8b a[0] \u4e3a\u521d\u59cb\u503c\uff0c a[n] \u662f\u5bf9 a[n-1] \u7684\u89e3\u91ca a[1] \u7684 11 \u8868\u793a a[0] \u6709 1 \u4e2a 1 a[2] \u7684 21 \u8868\u793a a[1] \u6709 2 \u4e2a 1 a[3] \u7684 1211 \u8868\u793a a[2] \u6709 1 \u4e2a 2 \uff0c1 \u4e2a 1 a[4] \u7684 111221 \u8868\u793a a[3] \u6709 1 \u4e2a 1 \uff0c1 \u4e2a 2 \uff0c2 \u4e2a 1 \u65b9\u6cd5\u6709\u8bb8\u591a\uff0c\u6211\u6765\u4e2a\u629b\u7816\u5f15\u7389 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 num = \"1\" for i in range ( 30 ): s = '' cnt = 1 t = num [ 0 ] for c in num [ 1 :]: if t == c : cnt += 1 else : s += str ( cnt ) + t cnt = 1 t = c s += str ( cnt ) + t num = s print ( len ( num )) >>> 5808 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/5808.html","title":"10 what are you looking at"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#10-what-are-you-looking-at","text":"","title":"\u7b2c 10 \u9898 what are you looking at?"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#1","text":">>> http://www.pythonchallenge.com/pc/return/bull.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#3","text":"len(a[30]) = ?","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#4","text":"\u70b9\u51fb\u5de6\u8fb9\u7684\u725b\uff0c\u9875\u9762\u8df3\u8f6c\uff0c\u5f97\u5230\u4e00\u53e5\uff1a a = [1, 11, 21, 1211, 111221, \u770b\u6765\u662f\u8981\u627e\u89c4\u5f8b\uff0c\u5f97\u5230 a[30] \u7684\u957f\u5ea6 \u89c4\u5f8b a[0] \u4e3a\u521d\u59cb\u503c\uff0c a[n] \u662f\u5bf9 a[n-1] \u7684\u89e3\u91ca a[1] \u7684 11 \u8868\u793a a[0] \u6709 1 \u4e2a 1 a[2] \u7684 21 \u8868\u793a a[1] \u6709 2 \u4e2a 1 a[3] \u7684 1211 \u8868\u793a a[2] \u6709 1 \u4e2a 2 \uff0c1 \u4e2a 1 a[4] \u7684 111221 \u8868\u793a a[3] \u6709 1 \u4e2a 1 \uff0c1 \u4e2a 2 \uff0c2 \u4e2a 1 \u65b9\u6cd5\u6709\u8bb8\u591a\uff0c\u6211\u6765\u4e2a\u629b\u7816\u5f15\u7389 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 num = \"1\" for i in range ( 30 ): s = '' cnt = 1 t = num [ 0 ] for c in num [ 1 :]: if t == c : cnt += 1 else : s += str ( cnt ) + t cnt = 1 t = c s += str ( cnt ) + t num = s print ( len ( num )) >>> 5808","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#5","text":"http://www.pythonchallenge.com/pc/return/5808.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/11_odd_even/","text":"\u7b2c 11 \u9898 odd even Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/5808.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u6b64\u56fe\u50cf\u662f\u4ece\u73bb\u7483\u7a97\u4e0a\u770b\u5230\u7684\uff0c\u6709\u201c\u5012\u5f71\u201d \u6807\u9898\u6697\u793a\u628a\u56fe\u50cf\u6309\u201c\u5947\u5076\u201d\u5206\u6210\u4e24\u5f20 \u81f3\u4e8e\u662f\u4ec0\u4e48\u7684\u5947\u5076\uff0c\u5927\u80c6\u731c\u6d4b\uff1a\u50cf\u7d20\u7684\u5e8f\u53f7\uff08\u4ece 0 \u5f00\u59cb\uff09 part2 Link \u4ece\u9898\u56fe\u4e2d\u53d6\u4e00\u5757\u5e76\u653e\u5927 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) big = small . resize (( 500 , 250 )) big . save ( \"11_crop_resize.png\" ) \u5f97\u5230\u5982\u4e0b\u56fe\u7247 \u5f97\u5230\u5982\u4e0b\u89c4\u5f8b\uff08\u5355\u4f4d\uff1a\u50cf\u7d20\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09 \u5076\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00 \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00 part3 Link \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size one = Image . new ( img . mode , ( w // 2 , h )) two = one . copy () for x in range ( w ): for y in range ( h ): pixel = img . getpixel (( x , y )) if x % 2 == 0 : if y % 2 == 0 : one . putpixel (( x // 2 , y ), pixel ) else : two . putpixel (( x // 2 , y ), pixel ) else : if y % 2 == 0 : two . putpixel (( x // 2 , y ), pixel ) else : one . putpixel (( x // 2 , y ), pixel ) one . save ( \"11_even.png\" ) two . save ( \"11_odd.png\" ) \u56fe even \u56fe odd \u65b9\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size res = Image . new ( img . mode , ( w // 2 , h )) for x in range ( w ): for y in range ( h ): if not x % 2 ^ y % 2 : res . putpixel (( x // 2 , y ), img . getpixel (( x , y ))) res . show () \u5f97\u5230\u7684\u56fe\u7247\u4e0e\u4e0a\u65b9\u7684 even \u4e00\u81f4\uff0c\u800c\u56fe\u4e2d\u7684 evil \u6b63\u662f\u6b64\u9898\u7684\u89e3 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/evil.html","title":"11 odd even"},{"location":"PythonChallenge/Solutions/11_odd_even/#11-odd-even","text":"","title":"\u7b2c 11 \u9898 odd even"},{"location":"PythonChallenge/Solutions/11_odd_even/#1","text":">>> http://www.pythonchallenge.com/pc/return/5808.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/11_odd_even/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/11_odd_even/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/11_odd_even/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/11_odd_even/#part1","text":"\u6b64\u56fe\u50cf\u662f\u4ece\u73bb\u7483\u7a97\u4e0a\u770b\u5230\u7684\uff0c\u6709\u201c\u5012\u5f71\u201d \u6807\u9898\u6697\u793a\u628a\u56fe\u50cf\u6309\u201c\u5947\u5076\u201d\u5206\u6210\u4e24\u5f20 \u81f3\u4e8e\u662f\u4ec0\u4e48\u7684\u5947\u5076\uff0c\u5927\u80c6\u731c\u6d4b\uff1a\u50cf\u7d20\u7684\u5e8f\u53f7\uff08\u4ece 0 \u5f00\u59cb\uff09","title":"part1"},{"location":"PythonChallenge/Solutions/11_odd_even/#part2","text":"\u4ece\u9898\u56fe\u4e2d\u53d6\u4e00\u5757\u5e76\u653e\u5927 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) big = small . resize (( 500 , 250 )) big . save ( \"11_crop_resize.png\" ) \u5f97\u5230\u5982\u4e0b\u56fe\u7247 \u5f97\u5230\u5982\u4e0b\u89c4\u5f8b\uff08\u5355\u4f4d\uff1a\u50cf\u7d20\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09 \u5076\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00 \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00","title":"part2"},{"location":"PythonChallenge/Solutions/11_odd_even/#part3","text":"","title":"part3"},{"location":"PythonChallenge/Solutions/11_odd_even/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size one = Image . new ( img . mode , ( w // 2 , h )) two = one . copy () for x in range ( w ): for y in range ( h ): pixel = img . getpixel (( x , y )) if x % 2 == 0 : if y % 2 == 0 : one . putpixel (( x // 2 , y ), pixel ) else : two . putpixel (( x // 2 , y ), pixel ) else : if y % 2 == 0 : two . putpixel (( x // 2 , y ), pixel ) else : one . putpixel (( x // 2 , y ), pixel ) one . save ( \"11_even.png\" ) two . save ( \"11_odd.png\" ) \u56fe even \u56fe odd","title":"\u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/11_odd_even/#_2","text":"1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size res = Image . new ( img . mode , ( w // 2 , h )) for x in range ( w ): for y in range ( h ): if not x % 2 ^ y % 2 : res . putpixel (( x // 2 , y ), img . getpixel (( x , y ))) res . show () \u5f97\u5230\u7684\u56fe\u7247\u4e0e\u4e0a\u65b9\u7684 even \u4e00\u81f4\uff0c\u800c\u56fe\u4e2d\u7684 evil \u6b63\u662f\u6b64\u9898\u7684\u89e3","title":"\u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/11_odd_even/#5","text":"http://www.pythonchallenge.com/pc/return/evil.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/12_dealing_evil/","text":"\u7b2c 12 \u9898 dealing evil Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/evil.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u5c06\u9898\u56fe\u53e6\u5b58\u4e3a\u65f6\u53d1\u73b0\u6b64\u56fe\u540d\u4e3a evil1.jpg \u56fe\u7247\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/return/evil1.jpg \u5c06 evil1 \u6539\u4e3a evil2 \uff0c\u5f97\u5230\u4e0b\u56fe \u6309\u56fe\u4e2d\u63d0\u793a\uff0c\u5c06\u5730\u5740\u7684\u540e\u7f00\u6539\u4e3a .gfx \uff0c\u53ef\u4ee5\u4e0b\u8f7d\u5230\u4e00\u4e2a evil2.gfx \u7684\u6587\u4ef6 \u641c\u7d22\u5f97\u77e5\uff0c PS \u652f\u6301 .gfx \u683c\u5f0f\uff0c\u6211\u6ca1\u6709 PS \uff0c\u4ece\u7ed3\u679c\u770b\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u6253\u4e0d\u5f00\u7684 part2 Link \u8bd5\u8bd5 evil3 \uff0c\u679c\u7136\u8fd8\u6709\u56fe\u7247 evil4 \u6709\u4e9b\u602a\uff0c\u6ca1\u6709\u56fe\u50cf\uff08\u5b9e\u9645\u4e0a\u5b83\u662f\u6587\u672c\u6587\u4ef6\uff09\uff0c\u4f46\u53ef\u4ee5\u83b7\u53d6\u4fe1\u606f\uff08\u4e0b\u4e00\u9898\u6709\u7528\uff09 evil5 \u662f 404 \uff0c\u6240\u4ee5\u5230\u6b64\u4e3a\u6b62\u4e86 part3 Link \u9898\u56fe\u4e2d\uff0c\u4e3b\u89d2\u5c06\u724c\u5206\u6210\u4e86\u4e94\u5806\uff0c\u8fd9\u662f\u6697\u793a\u6211\u4eec\u5c06 evil2.gfx \u5206\u6210\u4e94\u4efd \u68c0\u67e5\u4e00\u4e0b\u6570\u636e\u662f\u5426\u662f 5 \u7684\u500d\u6570 1 2 3 4 5 6 7 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read () img . close () print ( len ( data )) >>> 67575 \u786e\u5b9a\u8fd9\u4e94\u5f20\u56fe\u7247\u7684\u683c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () array = [ n for n in range ( 30 , 40 )] + [ n for n in range ( 65 , 91 )] + [ n for n in range ( 97 , 123 )] for i in range ( 5 ): print ( '' . join ([ chr ( e ) for e in data [ i :: 5 ] if e in array ])) >>> JFIF PNGIHDR GIFa PNGIHDR JFIF \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNGIHDR -> png GIFa -> gif part4 Link 1 2 3 4 5 6 7 f = open ( \"evil2.gfx\" , \"rb\" ) content = f . read () f . close () names = [ \"12_01.jpg\" , \"12_02.png\" , \"12_03.gif\" , \"12_04.png\" , \"12_05.jpg\" ] for i in range ( 5 ): with open ( names [ i ], \"wb\" ) as f : f . write ( content [ i :: 5 ]) \u56fe\u4e00 \u56fe\u4e8c \u56fe\u4e09 \u56fe\u56db \u56fe\u4e94 part5 Link \u7b2c 4 \u5f20\u56fe\u662f\u7834\u635f\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6709\u4ee5\u4e0b\u4e09\u79cd\u89e3\u91ca \u5bf9\u5e94\u7f51\u9875\u4e2d\u7684\u65e0\u6cd5\u663e\u793a\u7684 evil4 \u4e94\u7ec4\u7b49\u957f\u7684\u6570\u636e\u5408\u6210\u4e0d\u540c\u683c\u5f0f\u7684\u56fe\u7247\u540e\uff0c\u5206\u8fa8\u7387\u5404\u5f02\uff0c\u8fd8\u51fa\u73b0\u4e86\u7834\u635f\u7684\u56fe\u7247\uff0c\u7ed3\u5408\u9898\u56fe\uff0c\u8fd9\u53ef\u80fd\u6697\u793a\u201c\u8d4c\u684c\u201d\u4e0a\u5b58\u5728 evil \u4e5f\u8bb8\u4f5c\u8005\u662f\u60f3\u8ba9\u6211\u4eec\u901a\u8fc7\u56db\u5f20\u6b63\u5e38\u7684\u56fe\u7247\u63a8\u6d4b\u5269\u4e0b\u7684\u8fd9\u5f20 \u7b2c 4 \u5f20\u56fe\u7247\u867d\u7136\u7834\u635f\uff0c\u4f46\u4ecd\u80fd\u8fa8\u8ba4\u51fa\uff0c\u800c\u5c06\u524d\u56db\u5f20\u56fe\u4e2d\u7684\u5b57\u6bcd\u8fde\u8d77\u6765\uff0c\u53ef\u5f97\u5230\uff1a disproportional 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/disproportional.html","title":"12 dealing evil"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#12-dealing-evil","text":"","title":"\u7b2c 12 \u9898 dealing evil"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#1","text":">>> http://www.pythonchallenge.com/pc/return/evil.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part1","text":"\u5c06\u9898\u56fe\u53e6\u5b58\u4e3a\u65f6\u53d1\u73b0\u6b64\u56fe\u540d\u4e3a evil1.jpg \u56fe\u7247\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/return/evil1.jpg \u5c06 evil1 \u6539\u4e3a evil2 \uff0c\u5f97\u5230\u4e0b\u56fe \u6309\u56fe\u4e2d\u63d0\u793a\uff0c\u5c06\u5730\u5740\u7684\u540e\u7f00\u6539\u4e3a .gfx \uff0c\u53ef\u4ee5\u4e0b\u8f7d\u5230\u4e00\u4e2a evil2.gfx \u7684\u6587\u4ef6 \u641c\u7d22\u5f97\u77e5\uff0c PS \u652f\u6301 .gfx \u683c\u5f0f\uff0c\u6211\u6ca1\u6709 PS \uff0c\u4ece\u7ed3\u679c\u770b\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u6253\u4e0d\u5f00\u7684","title":"part1"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part2","text":"\u8bd5\u8bd5 evil3 \uff0c\u679c\u7136\u8fd8\u6709\u56fe\u7247 evil4 \u6709\u4e9b\u602a\uff0c\u6ca1\u6709\u56fe\u50cf\uff08\u5b9e\u9645\u4e0a\u5b83\u662f\u6587\u672c\u6587\u4ef6\uff09\uff0c\u4f46\u53ef\u4ee5\u83b7\u53d6\u4fe1\u606f\uff08\u4e0b\u4e00\u9898\u6709\u7528\uff09 evil5 \u662f 404 \uff0c\u6240\u4ee5\u5230\u6b64\u4e3a\u6b62\u4e86","title":"part2"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part3","text":"\u9898\u56fe\u4e2d\uff0c\u4e3b\u89d2\u5c06\u724c\u5206\u6210\u4e86\u4e94\u5806\uff0c\u8fd9\u662f\u6697\u793a\u6211\u4eec\u5c06 evil2.gfx \u5206\u6210\u4e94\u4efd \u68c0\u67e5\u4e00\u4e0b\u6570\u636e\u662f\u5426\u662f 5 \u7684\u500d\u6570 1 2 3 4 5 6 7 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read () img . close () print ( len ( data )) >>> 67575 \u786e\u5b9a\u8fd9\u4e94\u5f20\u56fe\u7247\u7684\u683c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () array = [ n for n in range ( 30 , 40 )] + [ n for n in range ( 65 , 91 )] + [ n for n in range ( 97 , 123 )] for i in range ( 5 ): print ( '' . join ([ chr ( e ) for e in data [ i :: 5 ] if e in array ])) >>> JFIF PNGIHDR GIFa PNGIHDR JFIF \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNGIHDR -> png GIFa -> gif","title":"part3"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part4","text":"1 2 3 4 5 6 7 f = open ( \"evil2.gfx\" , \"rb\" ) content = f . read () f . close () names = [ \"12_01.jpg\" , \"12_02.png\" , \"12_03.gif\" , \"12_04.png\" , \"12_05.jpg\" ] for i in range ( 5 ): with open ( names [ i ], \"wb\" ) as f : f . write ( content [ i :: 5 ]) \u56fe\u4e00 \u56fe\u4e8c \u56fe\u4e09 \u56fe\u56db \u56fe\u4e94","title":"part4"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part5","text":"\u7b2c 4 \u5f20\u56fe\u662f\u7834\u635f\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6709\u4ee5\u4e0b\u4e09\u79cd\u89e3\u91ca \u5bf9\u5e94\u7f51\u9875\u4e2d\u7684\u65e0\u6cd5\u663e\u793a\u7684 evil4 \u4e94\u7ec4\u7b49\u957f\u7684\u6570\u636e\u5408\u6210\u4e0d\u540c\u683c\u5f0f\u7684\u56fe\u7247\u540e\uff0c\u5206\u8fa8\u7387\u5404\u5f02\uff0c\u8fd8\u51fa\u73b0\u4e86\u7834\u635f\u7684\u56fe\u7247\uff0c\u7ed3\u5408\u9898\u56fe\uff0c\u8fd9\u53ef\u80fd\u6697\u793a\u201c\u8d4c\u684c\u201d\u4e0a\u5b58\u5728 evil \u4e5f\u8bb8\u4f5c\u8005\u662f\u60f3\u8ba9\u6211\u4eec\u901a\u8fc7\u56db\u5f20\u6b63\u5e38\u7684\u56fe\u7247\u63a8\u6d4b\u5269\u4e0b\u7684\u8fd9\u5f20 \u7b2c 4 \u5f20\u56fe\u7247\u867d\u7136\u7834\u635f\uff0c\u4f46\u4ecd\u80fd\u8fa8\u8ba4\u51fa\uff0c\u800c\u5c06\u524d\u56db\u5f20\u56fe\u4e2d\u7684\u5b57\u6bcd\u8fde\u8d77\u6765\uff0c\u53ef\u5f97\u5230\uff1a disproportional","title":"part5"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#5","text":"http://www.pythonchallenge.com/pc/return/disproportional.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/13_call_him/","text":"\u7b2c 13 \u9898 call him Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/disproportional.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link phone that evil 4. \u89e3\u6cd5 Link part1 Link evil \u5728\u201c\u4e5d\u952e\u201d\u4e2d\u7684\u5bf9\u5e94\u7684\u6570\u5b57\u4f9d\u6b21\u4e3a 3 8 4 5 \u5f53\u9f20\u6807\u79fb\u5165 5 \u7684\u8303\u56f4\u65f6\uff0c\u53d1\u73b0 Button \u70b9\u51fb\u540e\uff0c\u7f51\u9875\u8df3\u8f6c\uff0c\u5f97\u5230\u5982\u4e0b <methodResponse> <fault> <value> <struct> <member> <name> faultCode </name> <value> <int> 105 </int> </value> </member> <member> <name> faultString </name> <value> <string> XML error: Invalid document end at line 1, column 1 </string> </value> </member> </struct> </value> </fault> </methodResponse> part2 Link \u4e0a\u65b9\u7684\u4fe1\u606f\u662f\u6697\u793a\u4f7f\u7528 Python \u5904\u7406 XML \u641c\u7d22\u5f97\u77e5 xmlrpc \u5e93 >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # \u4e0a\u4e00\u9898\u8bf4 Bert is evil '555-ITALY' \u5728\u7f8e\u56fd\uff0c\u4ee5 555 \u6253\u5934\u7684\u662f\u7a7a\u53f7\uff0c\u6240\u4ee5\u6b64\u9898\u7684\u89e3\u4e3a italy 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/italy.html","title":"13 call him"},{"location":"PythonChallenge/Solutions/13_call_him/#13-call-him","text":"","title":"\u7b2c 13 \u9898 call him"},{"location":"PythonChallenge/Solutions/13_call_him/#1","text":">>> http://www.pythonchallenge.com/pc/return/disproportional.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/13_call_him/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/13_call_him/#3","text":"phone that evil","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/13_call_him/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/13_call_him/#part1","text":"evil \u5728\u201c\u4e5d\u952e\u201d\u4e2d\u7684\u5bf9\u5e94\u7684\u6570\u5b57\u4f9d\u6b21\u4e3a 3 8 4 5 \u5f53\u9f20\u6807\u79fb\u5165 5 \u7684\u8303\u56f4\u65f6\uff0c\u53d1\u73b0 Button \u70b9\u51fb\u540e\uff0c\u7f51\u9875\u8df3\u8f6c\uff0c\u5f97\u5230\u5982\u4e0b <methodResponse> <fault> <value> <struct> <member> <name> faultCode </name> <value> <int> 105 </int> </value> </member> <member> <name> faultString </name> <value> <string> XML error: Invalid document end at line 1, column 1 </string> </value> </member> </struct> </value> </fault> </methodResponse>","title":"part1"},{"location":"PythonChallenge/Solutions/13_call_him/#part2","text":"\u4e0a\u65b9\u7684\u4fe1\u606f\u662f\u6697\u793a\u4f7f\u7528 Python \u5904\u7406 XML \u641c\u7d22\u5f97\u77e5 xmlrpc \u5e93 >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # \u4e0a\u4e00\u9898\u8bf4 Bert is evil '555-ITALY' \u5728\u7f8e\u56fd\uff0c\u4ee5 555 \u6253\u5934\u7684\u662f\u7a7a\u53f7\uff0c\u6240\u4ee5\u6b64\u9898\u7684\u89e3\u4e3a italy","title":"part2"},{"location":"PythonChallenge/Solutions/13_call_him/#5","text":"http://www.pythonchallenge.com/pc/return/italy.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/14_walk_around/","text":"\u7b2c 14 \u9898 walk around Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/italy.html 2. \u9898\u56fe\u4e0e\u63d0\u793a\u56fe Link \u9898\u56fe \u63d0\u793a\u56fe ps \u82e5\u76f4\u63a5\u4fdd\u5b58\u63d0\u793a\u56fe\uff0c\u4f1a\u5f97\u5230 1000X1 \u50cf\u7d20\u7684\u56fe\u7247\uff0c\u4e0b\u65b9\u7a0b\u5e8f\u7528\u5230\u7684\u4e5f\u662f\u8fd9\u5f20 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca remember: 100*100 = (100+99+99+98) + (.. 4. \u89e3\u6cd5 Link part1 Link \u5c06\u6ce8\u91ca\u4e2d\u7684\u5f0f\u5b50\u8865\u5168 100 * 100 = (100 + 99 + 99 + 98) + ( 98 + 97 + 97 + 96\uff09+ ... + ( 4 + 3 + 3 + 2) + ( 2 + 1 + 1 + 0) \u5c06\u90a3\u5f20 1000X1 \u7684\u56fe\u7247\u50cf\u4e00\u6761\u51ac\u7720\u7684 Python \u4e00\u6837\u201c\u76d8\u8d77\u6765\u201d \u65b9\u5411\uff1a\u6309\u9898\u56fe\u4e2d\u7684\u6765\uff0c\u5373\u987a\u65f6\u9488\u3001\u4ece\u5916\u90e8\u5411\u91cc\u9762 \u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u662f\u6bcf\u6b21\u6392\u7248\u7684\u8fb9\u957f part2 Link \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) i = 0 row_begin = col_begin = 0 row_end = col_end = 99 for _ in range ( 100 * 2 - 1 ): for j in range ( col_begin , col_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_begin , j ), pixel ) i += 1 row_begin += 1 for j in range ( row_begin , row_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_end ), pixel ) i += 1 col_end -= 1 for j in range ( col_end , col_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_end , j ), pixel ) i += 1 row_end -= 1 for j in range ( row_end , row_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_begin ), pixel ) i += 1 col_begin += 1 new . save ( \"14_result.png\" ) \u751f\u6210\u4e00\u5f20\u56fe\u7247 \u65b9\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from PIL import Image img = Image . open ( \"wire.png\" ) delta = [( 1 , 0 ), ( 0 , 1 ), ( - 1 , 0 ), ( 0 , - 1 )] # right, down, left, up res = Image . new ( \"RGB\" , [ 100 , 100 ]) # tuple or list x , y = - 1 , 0 cnt = 0 d = 200 while d / 2 > 0 : for v in delta : steps = d // 2 for s in range ( steps ): x , y = x + v [ 0 ], y + v [ 1 ] res . putpixel (( x , y ), img . getpixel (( cnt , 0 ))) cnt += 1 d -= 1 # (100,) 99, 99, 98... res . save ( \"14_result.jpg\" ) \u8fd9\u6b21\u751f\u6210\u7684\u56fe\u7247\u662f\u6b63\u7684 \u5173\u952e\u5b57\uff1a cat part3 Link \u767b\u5165\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/return/cat.html \u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff08\u6b64\u56fe\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u4e0d\u662f\u4e0b\u4e00\u5173\uff09 \u5916\u52a0\u4e00\u53e5\u63d0\u793a and its name is uzi . you'll hear from him later. \u5173\u952e\u5b57\uff1a uzi \uff0c\u7ecf\u68c0\u9a8c\uff0c\u6b64\u4e3a\u7b54\u6848 other Link part2 \u751f\u6210\u7684\u56fe\u7247\u4e0a\u6709\u7ea2\u70b9\uff0c\u63a2\u7d22\u540e\u53d1\u73b0\uff0c\u8fd9\u4e9b\u662f\u201c\u6e29\u99a8\u63d0\u793a\u201d \u5982\u679c\u662f\u76f4\u63a5\u6309\u884c\u53e0\u52a0\u5f97\u5230\u7684\u56fe\u7247 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) new . putdata ( img . getdata ()) new . show () \u8fd9\u4e9b\u7ea2\u70b9\u4f1a\u62fc\u6210\u7ea2\u5b57\uff1a bit \u767b\u5165 http://www.pythonchallenge.com/pc/return/bit.html \uff0c\u53ea\u80fd\u5f97\u5230 you took the wrong curve. 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/uzi.html","title":"14 walk around"},{"location":"PythonChallenge/Solutions/14_walk_around/#14-walk-around","text":"","title":"\u7b2c 14 \u9898 walk around"},{"location":"PythonChallenge/Solutions/14_walk_around/#1","text":">>> http://www.pythonchallenge.com/pc/return/italy.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/14_walk_around/#2","text":"\u9898\u56fe \u63d0\u793a\u56fe ps \u82e5\u76f4\u63a5\u4fdd\u5b58\u63d0\u793a\u56fe\uff0c\u4f1a\u5f97\u5230 1000X1 \u50cf\u7d20\u7684\u56fe\u7247\uff0c\u4e0b\u65b9\u7a0b\u5e8f\u7528\u5230\u7684\u4e5f\u662f\u8fd9\u5f20","title":"2. \u9898\u56fe\u4e0e\u63d0\u793a\u56fe"},{"location":"PythonChallenge/Solutions/14_walk_around/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca remember: 100*100 = (100+99+99+98) + (..","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/14_walk_around/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/14_walk_around/#part1","text":"\u5c06\u6ce8\u91ca\u4e2d\u7684\u5f0f\u5b50\u8865\u5168 100 * 100 = (100 + 99 + 99 + 98) + ( 98 + 97 + 97 + 96\uff09+ ... + ( 4 + 3 + 3 + 2) + ( 2 + 1 + 1 + 0) \u5c06\u90a3\u5f20 1000X1 \u7684\u56fe\u7247\u50cf\u4e00\u6761\u51ac\u7720\u7684 Python \u4e00\u6837\u201c\u76d8\u8d77\u6765\u201d \u65b9\u5411\uff1a\u6309\u9898\u56fe\u4e2d\u7684\u6765\uff0c\u5373\u987a\u65f6\u9488\u3001\u4ece\u5916\u90e8\u5411\u91cc\u9762 \u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u662f\u6bcf\u6b21\u6392\u7248\u7684\u8fb9\u957f","title":"part1"},{"location":"PythonChallenge/Solutions/14_walk_around/#part2","text":"","title":"part2"},{"location":"PythonChallenge/Solutions/14_walk_around/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) i = 0 row_begin = col_begin = 0 row_end = col_end = 99 for _ in range ( 100 * 2 - 1 ): for j in range ( col_begin , col_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_begin , j ), pixel ) i += 1 row_begin += 1 for j in range ( row_begin , row_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_end ), pixel ) i += 1 col_end -= 1 for j in range ( col_end , col_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_end , j ), pixel ) i += 1 row_end -= 1 for j in range ( row_end , row_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_begin ), pixel ) i += 1 col_begin += 1 new . save ( \"14_result.png\" ) \u751f\u6210\u4e00\u5f20\u56fe\u7247","title":"\u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/14_walk_around/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from PIL import Image img = Image . open ( \"wire.png\" ) delta = [( 1 , 0 ), ( 0 , 1 ), ( - 1 , 0 ), ( 0 , - 1 )] # right, down, left, up res = Image . new ( \"RGB\" , [ 100 , 100 ]) # tuple or list x , y = - 1 , 0 cnt = 0 d = 200 while d / 2 > 0 : for v in delta : steps = d // 2 for s in range ( steps ): x , y = x + v [ 0 ], y + v [ 1 ] res . putpixel (( x , y ), img . getpixel (( cnt , 0 ))) cnt += 1 d -= 1 # (100,) 99, 99, 98... res . save ( \"14_result.jpg\" ) \u8fd9\u6b21\u751f\u6210\u7684\u56fe\u7247\u662f\u6b63\u7684 \u5173\u952e\u5b57\uff1a cat","title":"\u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/14_walk_around/#part3","text":"\u767b\u5165\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/return/cat.html \u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff08\u6b64\u56fe\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u4e0d\u662f\u4e0b\u4e00\u5173\uff09 \u5916\u52a0\u4e00\u53e5\u63d0\u793a and its name is uzi . you'll hear from him later. \u5173\u952e\u5b57\uff1a uzi \uff0c\u7ecf\u68c0\u9a8c\uff0c\u6b64\u4e3a\u7b54\u6848","title":"part3"},{"location":"PythonChallenge/Solutions/14_walk_around/#other","text":"part2 \u751f\u6210\u7684\u56fe\u7247\u4e0a\u6709\u7ea2\u70b9\uff0c\u63a2\u7d22\u540e\u53d1\u73b0\uff0c\u8fd9\u4e9b\u662f\u201c\u6e29\u99a8\u63d0\u793a\u201d \u5982\u679c\u662f\u76f4\u63a5\u6309\u884c\u53e0\u52a0\u5f97\u5230\u7684\u56fe\u7247 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) new . putdata ( img . getdata ()) new . show () \u8fd9\u4e9b\u7ea2\u70b9\u4f1a\u62fc\u6210\u7ea2\u5b57\uff1a bit \u767b\u5165 http://www.pythonchallenge.com/pc/return/bit.html \uff0c\u53ea\u80fd\u5f97\u5230 you took the wrong curve.","title":"other"},{"location":"PythonChallenge/Solutions/14_walk_around/#5","text":"http://www.pythonchallenge.com/pc/return/uzi.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/15_whom/","text":"\u7b2c 15 \u9898 whom Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/uzi.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca he ain't the youngest, he is the second todo: buy flowers for tomorrow 4. \u89e3\u6cd5 Link part1 Link \u5e74\u4efd\u8303\u56f4\uff1a 1xx6 \u8be5\u5e74\u7684 1 \u6708 26 \u65e5\u662f\u5468\u4e00 \u9898\u56fe\u53f3\u4e0b\u89d2\u7684\u4e8c\u6708\u6709 29 \u5929\uff0c\u6240\u4ee5\u8fd9\u4e00\u5e74\u662f\u95f0\u5e74 \u7528\u7a0b\u5e8f\u5f97\u5230\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5e74\u4efd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from datetime import datetime for y in range ( 1006 , 1997 , 10 ): date = datetime ( y , 1 , 26 ) if date . weekday () == 0 : # \u5468\u4e00\u5bf9\u5e94 0 if date . year % 4 == 0 : # 1xx6 \u5e74\u53ea\u9700\u5224\u65ad\u662f\u5426\u4e3a 4 \u7684\u500d\u6570 print ( date . year ) >>> 1176 1356 1576 1756 1976 part2 Link \u56e0\u4e3a\u662f\u7b2c\u4e8c\u5e74\u8f7b\uff0c\u6240\u4ee5\u662f 1756 \u56e0\u4e3a\u7b2c\u4e8c\u5929\u8981\u4e70\u82b1\uff0c\u6240\u4ee5 1756-1-27 \u53ef\u80fd\u662f\u7eaa\u5ff5\u65e5 \u641c\u7d22\u5f97\u77e5\uff1a\u8fd9\u5929\u5965\u5730\u5229\u97f3\u4e50\u5927\u5e08 \u83ab\u624e\u7279 \uff0c\u4e5f\u5c31\u662f mozart 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/mozart.html","title":"15 whom"},{"location":"PythonChallenge/Solutions/15_whom/#15-whom","text":"","title":"\u7b2c 15 \u9898 whom"},{"location":"PythonChallenge/Solutions/15_whom/#1","text":">>> http://www.pythonchallenge.com/pc/return/uzi.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/15_whom/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/15_whom/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca he ain't the youngest, he is the second todo: buy flowers for tomorrow","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/15_whom/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/15_whom/#part1","text":"\u5e74\u4efd\u8303\u56f4\uff1a 1xx6 \u8be5\u5e74\u7684 1 \u6708 26 \u65e5\u662f\u5468\u4e00 \u9898\u56fe\u53f3\u4e0b\u89d2\u7684\u4e8c\u6708\u6709 29 \u5929\uff0c\u6240\u4ee5\u8fd9\u4e00\u5e74\u662f\u95f0\u5e74 \u7528\u7a0b\u5e8f\u5f97\u5230\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5e74\u4efd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from datetime import datetime for y in range ( 1006 , 1997 , 10 ): date = datetime ( y , 1 , 26 ) if date . weekday () == 0 : # \u5468\u4e00\u5bf9\u5e94 0 if date . year % 4 == 0 : # 1xx6 \u5e74\u53ea\u9700\u5224\u65ad\u662f\u5426\u4e3a 4 \u7684\u500d\u6570 print ( date . year ) >>> 1176 1356 1576 1756 1976","title":"part1"},{"location":"PythonChallenge/Solutions/15_whom/#part2","text":"\u56e0\u4e3a\u662f\u7b2c\u4e8c\u5e74\u8f7b\uff0c\u6240\u4ee5\u662f 1756 \u56e0\u4e3a\u7b2c\u4e8c\u5929\u8981\u4e70\u82b1\uff0c\u6240\u4ee5 1756-1-27 \u53ef\u80fd\u662f\u7eaa\u5ff5\u65e5 \u641c\u7d22\u5f97\u77e5\uff1a\u8fd9\u5929\u5965\u5730\u5229\u97f3\u4e50\u5927\u5e08 \u83ab\u624e\u7279 \uff0c\u4e5f\u5c31\u662f mozart","title":"part2"},{"location":"PythonChallenge/Solutions/15_whom/#5","text":"http://www.pythonchallenge.com/pc/return/mozart.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/","text":"\u7b2c 16 \u9898 let me get this straight Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/mozart.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u6709\u8bb8\u591a\u7d2b\u8272\u7ebf\u6bb5\uff0c\u653e\u5927\u540e\u770b\u662f\u8fd9\u6837\u7684 \u7b2c 14 \u9898\u6709 1000X1 \u7684\u56fe\u7247\uff0c\u6b64\u56fe\u4e3a 640X480 \u53ef\u5c06\u6b64\u56fe\u770b\u6210\u662f 480 \u4e2a 640X1 \u7684\u56fe\u7247\u5c42\u53e0\u800c\u6210 \u68c0\u9a8c\u6bcf\u4e2a 640X1 \u533a\u57df\u4e2d\u7d2b\u8272\u7ebf\u6bb5\u7684\u6570\u91cf\uff08\u4f7f\u7528\u622a\u56fe\u5de5\u5177\u6d4b\u91cf\uff0c\u7d2b\u8272\u7ebf\u6bb5\u7ea6 5 \u4e2a\u50cf\u7d20\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from PIL import Image from pprint import pprint def check_lines ( filename ): img = Image . open ( filename ) w , h = img . size res = [] for line_num in range ( h ): line = [] pix = img . getpixel (( 0 , line_num )) cnt = 1 for i in range ( 1 , w ): tmp = img . getpixel (( i , line_num )) if tmp == pix : cnt += 1 else : pix = tmp cnt = 1 if cnt == 5 : line . append ( tmp ) res . append ( line ) return res if __name__ == \"__main__\" : filename = \"mozart.gif\" pprint ( check_lines ( filename )) \u7ed3\u8bba \u6bcf\u884c\u5747\u6709\u8fde\u7eed 5 \u4e2a\u50cf\u7d20\u4e00\u81f4\u7684\u503c \u6709\u4e9b\u884c\u8fd9\u6837\u7684\u503c\u4e0d\u503c\u4e00\u4e2a \u552f\u72ec 195 \u5728\u6bcf\u884c\u90fd\u51fa\u73b0\u4e86\u4e00\u6b21 \u5173\u4e8e 195 \u9898\u56fe\u4e3a .gif \u683c\u5f0f\uff0c\u6b64\u683c\u5f0f\u9664\u4e86\u6709 R, G, B \uff0c\u8fd8\u6709\u201c\u8c03\u8272\u677f\u201d\u4fe1\u606f 0-255 \u5bf9\u5e94 256 \u79cd\u989c\u8272\uff0c 195 \u7684 R, G, B \u5bf9\u5e94 (255, 0, 255) part2 Link \u53ef\u4ee5\u5bf9 part1 \u4e2d\u7684\u7ed3\u8bba\u8fdb\u884c\u68c0\u9a8c >>> from PIL import Image , ImageChops >>> image = Image . open ( \"mozart.gif\" ) >>> h = image . histogram () # [count(0), count(1), ...] >>> for num in h : ... if num and num % image . height == 0 : ... print ( h . index ( num ), num ) ... 195 2400 >>> 2. 640 x 5 = 2400, ok part3 Link \u628a\u6bcf\u4e00\u201c\u6761\u201d 640X1 \u4ee5\u7d2b\u8272\u7ebf\u6bb5\u4e3a\u5f00\u5934\uff0c\u591a\u4f59\u7684\u90e8\u5206\u79fb\u5230\u8be5\u884c\u672b\u5c3e 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) for y in range ( img . size [ 1 ]): box = 0 , y , img . size [ 0 ], y + 1 row = img . crop ( box ) row_bytes = row . tobytes () i = row_bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # like 'crol' in c img . paste ( row , box ) img . save ( \"16_result.gif\" ) \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u7b54\u6848\uff1a romance 5. \u7b54\u6848 Link www.pythonchallenge.com/pc/return/romance.html","title":"16 let me get this straight"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#16-let-me-get-this-straight","text":"","title":"\u7b2c 16 \u9898 let me get this straight"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#1","text":">>> http://www.pythonchallenge.com/pc/return/mozart.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#part1","text":"\u56fe\u4e2d\u6709\u8bb8\u591a\u7d2b\u8272\u7ebf\u6bb5\uff0c\u653e\u5927\u540e\u770b\u662f\u8fd9\u6837\u7684 \u7b2c 14 \u9898\u6709 1000X1 \u7684\u56fe\u7247\uff0c\u6b64\u56fe\u4e3a 640X480 \u53ef\u5c06\u6b64\u56fe\u770b\u6210\u662f 480 \u4e2a 640X1 \u7684\u56fe\u7247\u5c42\u53e0\u800c\u6210 \u68c0\u9a8c\u6bcf\u4e2a 640X1 \u533a\u57df\u4e2d\u7d2b\u8272\u7ebf\u6bb5\u7684\u6570\u91cf\uff08\u4f7f\u7528\u622a\u56fe\u5de5\u5177\u6d4b\u91cf\uff0c\u7d2b\u8272\u7ebf\u6bb5\u7ea6 5 \u4e2a\u50cf\u7d20\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from PIL import Image from pprint import pprint def check_lines ( filename ): img = Image . open ( filename ) w , h = img . size res = [] for line_num in range ( h ): line = [] pix = img . getpixel (( 0 , line_num )) cnt = 1 for i in range ( 1 , w ): tmp = img . getpixel (( i , line_num )) if tmp == pix : cnt += 1 else : pix = tmp cnt = 1 if cnt == 5 : line . append ( tmp ) res . append ( line ) return res if __name__ == \"__main__\" : filename = \"mozart.gif\" pprint ( check_lines ( filename )) \u7ed3\u8bba \u6bcf\u884c\u5747\u6709\u8fde\u7eed 5 \u4e2a\u50cf\u7d20\u4e00\u81f4\u7684\u503c \u6709\u4e9b\u884c\u8fd9\u6837\u7684\u503c\u4e0d\u503c\u4e00\u4e2a \u552f\u72ec 195 \u5728\u6bcf\u884c\u90fd\u51fa\u73b0\u4e86\u4e00\u6b21 \u5173\u4e8e 195 \u9898\u56fe\u4e3a .gif \u683c\u5f0f\uff0c\u6b64\u683c\u5f0f\u9664\u4e86\u6709 R, G, B \uff0c\u8fd8\u6709\u201c\u8c03\u8272\u677f\u201d\u4fe1\u606f 0-255 \u5bf9\u5e94 256 \u79cd\u989c\u8272\uff0c 195 \u7684 R, G, B \u5bf9\u5e94 (255, 0, 255)","title":"part1"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#part2","text":"\u53ef\u4ee5\u5bf9 part1 \u4e2d\u7684\u7ed3\u8bba\u8fdb\u884c\u68c0\u9a8c >>> from PIL import Image , ImageChops >>> image = Image . open ( \"mozart.gif\" ) >>> h = image . histogram () # [count(0), count(1), ...] >>> for num in h : ... if num and num % image . height == 0 : ... print ( h . index ( num ), num ) ... 195 2400 >>> 2. 640 x 5 = 2400, ok","title":"part2"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#part3","text":"\u628a\u6bcf\u4e00\u201c\u6761\u201d 640X1 \u4ee5\u7d2b\u8272\u7ebf\u6bb5\u4e3a\u5f00\u5934\uff0c\u591a\u4f59\u7684\u90e8\u5206\u79fb\u5230\u8be5\u884c\u672b\u5c3e 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) for y in range ( img . size [ 1 ]): box = 0 , y , img . size [ 0 ], y + 1 row = img . crop ( box ) row_bytes = row . tobytes () i = row_bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # like 'crol' in c img . paste ( row , box ) img . save ( \"16_result.gif\" ) \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u7b54\u6848\uff1a romance","title":"part3"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#5","text":"www.pythonchallenge.com/pc/return/romance.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/17_eat/","text":"\u7b2c 17 \u9898 eat? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/romance.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u6b64\u9898\u56fe\u7684\u5de6\u4e0b\u89d2\u4e3a\u7b2c 4 \u9898\u7684\u9898\u56fe 4. \u89e3\u6cd5 Link part1 Link \u56de\u5230\u7b2c 4 \u9898\uff1a http://www.pythonchallenge.com/pc/def/linkedlist.php \u997c\u5e72\u7684\u82f1\u6587\uff1a cookie \u672c\u9898\u7684\u9898\u56fe\u540d\u4e3a cookies \u6839\u636e\u4f5c\u8005\u7684\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u7684 cookie part2 Link \u70b9\u51fb\u7b2c 4 \u9898\u7684\u9898\u56fe \u5c06 nothing \u6539\u4e3a busynothing http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=12345 \u7f51\u9875\u8df3\u8f6c\uff0c\u5e76\u5f97\u5230\u5982\u4e0b\u4fe1\u606f If you came here from level 4 - go back! You should follow the obvious chain... and the next busynothing is 44827 \u66f4\u6539 busynothing \u7684\u503c\uff0c\u67e5\u770b\u65b0\u7f51\u9875\u7684 cookie \uff0c\u5176\u503c\u4e3a B \u770b\u6765\u662f\u8981\u6536\u96c6 cookies part3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=\" num = \"12345\" lst = [] while num . isdecimal (): res = get ( url + num ) lst . append ( res . cookies . get ( \"info\" )) num = res . text . split ()[ - 1 ] print ( num ) print ( res . text ) tmp = '' . join ( lst ) print ( tmp ) with open ( \"17_cookies.txt\" , 'w' ) as f : f . write ( tmp ) >>> ... 83051 it . that 's it. BZh91AY % 26 SY % 94 % 3 A % E2I % 00 % 00 % 21 % 19 % 80 P % 81 % 11 % 00 % AFg % 9 E % A0 +% 00 hE % 3 DM % B5 % 23 % D0 % D4 % D1 % E2 % 8 D % 06 % A9 % FA % 26 S % D4 % D3 % 21 % A1 % EAi7h % 9 B % 9 A % 2 B % BF % 60 % 22 % C5WX % E1 % ADL % 80 % E8V % 3 C % C6 % A8 % DBH % 2632 % 18 % A8x % 01 % 08 % 21 % 8 DS % 0 B % C8 % AF % 96 KO % CA2 % B0 % F1 % BD % 1 Du % A0 % 86 % 05 % 92 s % B0 % 92 % C4Bc % F1w % 24 S % 85 % 09 % 09 C % AE % 24 % 90 \u4ee5 BZh91 \u5f00\u5934\uff0c\u56de\u60f3\u8d77\u7b2c 8 \u9898 part4 Link \u4ed4\u7ec6\u770b\u4e0a\u9762\u7684 BZh91... \uff0c\u4f1a\u53d1\u73b0\u6709\u4e2a + \uff0c\u628a\u5b83\u66ff\u6362\u6210\u7a7a\u683c\u518d\u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' 26 \u53f7\u4e0e flower \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 15 \u9898 call \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 13 \u9898 \u7efc\u5408\u8d77\u6765\uff0c\u662f\u8981\u7528\u7b2c 13 \u9898\u7684 phone \u8ddf Mozart \u7236\u4eb2\u901a\u8bdd \u901a\u8bdd\u5185\u5bb9\uff1a the flowers are on their way part5 Link \u641c\u7d22\u5f97\u77e5\uff0c Mozart \u7236\u4eb2\u540d\u4e3a\uff1a Leopold 1 2 3 4 5 6 7 from xmlrpc.client import ServerProxy contact = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) print ( contact . phone ( \"Leopold\" )) >>> 555 - VIOLIN \u201c\u5c0f\u63d0\u7434\u624b\u201d \u6b63\u662f Leopold \u7684\u4e00\u4e2a\u8eab\u4efd \u6253\u5f00\u7f51\u9875 http://www.pythonchallenge.com/pc/return/violin.html \uff0c\u5f97\u5230 no! i mean yes! but ../stuff/violin.php. \u5f97\u5230\u4e0b\u4e00\u6b65\u7684\u7f51\u9875\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/stuff/violin.php \u6b64\u4e3a Leopold \u7684\u8096\u50cf \u56fe\u7247\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u6b64\u9898\u8fd8\u672b\u7ed3\u675f \u56fe\u7247\u4e0d\u662f\u5c45\u4e2d\uff0c\u800c\u662f\u5728\u6b63\u4e0a\u65b9\uff0c\u90a3\u4e48\u7f51\u9875\u4e0b\u534a\u90e8\u5206\u53ef\u80fd\u9690\u85cf\u7740\u8bdd part6 Link \u4f7f\u7528 the flowers are on their way 1 2 3 4 5 6 from requests import get url = \"http://www.pythonchallenge.com/pc/stuff/violin.php\" cookie = { \"info\" : \"the flowers are on their way\" } res = get ( url , cookies = cookie ) print ( res . text ) \u5f97\u5230\u5982\u4e0b\u4fe1\u606f < html > < head > < title > it's me. what do you want? </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"../style.css\" > </ head > < body > < br >< br > < center >< font color = \"gold\" > < img src = \"leopold.jpg\" border = \"0\" /> < br >< br > oh well, don't you dare to forget the balloons. </ font > </ body > </ html > \u5173\u952e\u5b57\uff1a balloons other Link \u82e5\u4f7f\u7528\u63d2\u4ef6\u4fee\u6539 cookie \uff0c\u53ef\u5728 Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u770b\u5230 oh well, don't you dare to forget the balloons. 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/balloons.html","title":"17 eat"},{"location":"PythonChallenge/Solutions/17_eat/#17-eat","text":"","title":"\u7b2c 17 \u9898 eat?"},{"location":"PythonChallenge/Solutions/17_eat/#1","text":">>> http://www.pythonchallenge.com/pc/return/romance.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/17_eat/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/17_eat/#3","text":"\u6b64\u9898\u56fe\u7684\u5de6\u4e0b\u89d2\u4e3a\u7b2c 4 \u9898\u7684\u9898\u56fe","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/17_eat/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/17_eat/#part1","text":"\u56de\u5230\u7b2c 4 \u9898\uff1a http://www.pythonchallenge.com/pc/def/linkedlist.php \u997c\u5e72\u7684\u82f1\u6587\uff1a cookie \u672c\u9898\u7684\u9898\u56fe\u540d\u4e3a cookies \u6839\u636e\u4f5c\u8005\u7684\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u7684 cookie","title":"part1"},{"location":"PythonChallenge/Solutions/17_eat/#part2","text":"\u70b9\u51fb\u7b2c 4 \u9898\u7684\u9898\u56fe \u5c06 nothing \u6539\u4e3a busynothing http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=12345 \u7f51\u9875\u8df3\u8f6c\uff0c\u5e76\u5f97\u5230\u5982\u4e0b\u4fe1\u606f If you came here from level 4 - go back! You should follow the obvious chain... and the next busynothing is 44827 \u66f4\u6539 busynothing \u7684\u503c\uff0c\u67e5\u770b\u65b0\u7f51\u9875\u7684 cookie \uff0c\u5176\u503c\u4e3a B \u770b\u6765\u662f\u8981\u6536\u96c6 cookies","title":"part2"},{"location":"PythonChallenge/Solutions/17_eat/#part3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=\" num = \"12345\" lst = [] while num . isdecimal (): res = get ( url + num ) lst . append ( res . cookies . get ( \"info\" )) num = res . text . split ()[ - 1 ] print ( num ) print ( res . text ) tmp = '' . join ( lst ) print ( tmp ) with open ( \"17_cookies.txt\" , 'w' ) as f : f . write ( tmp ) >>> ... 83051 it . that 's it. BZh91AY % 26 SY % 94 % 3 A % E2I % 00 % 00 % 21 % 19 % 80 P % 81 % 11 % 00 % AFg % 9 E % A0 +% 00 hE % 3 DM % B5 % 23 % D0 % D4 % D1 % E2 % 8 D % 06 % A9 % FA % 26 S % D4 % D3 % 21 % A1 % EAi7h % 9 B % 9 A % 2 B % BF % 60 % 22 % C5WX % E1 % ADL % 80 % E8V % 3 C % C6 % A8 % DBH % 2632 % 18 % A8x % 01 % 08 % 21 % 8 DS % 0 B % C8 % AF % 96 KO % CA2 % B0 % F1 % BD % 1 Du % A0 % 86 % 05 % 92 s % B0 % 92 % C4Bc % F1w % 24 S % 85 % 09 % 09 C % AE % 24 % 90 \u4ee5 BZh91 \u5f00\u5934\uff0c\u56de\u60f3\u8d77\u7b2c 8 \u9898","title":"part3"},{"location":"PythonChallenge/Solutions/17_eat/#part4","text":"\u4ed4\u7ec6\u770b\u4e0a\u9762\u7684 BZh91... \uff0c\u4f1a\u53d1\u73b0\u6709\u4e2a + \uff0c\u628a\u5b83\u66ff\u6362\u6210\u7a7a\u683c\u518d\u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' 26 \u53f7\u4e0e flower \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 15 \u9898 call \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 13 \u9898 \u7efc\u5408\u8d77\u6765\uff0c\u662f\u8981\u7528\u7b2c 13 \u9898\u7684 phone \u8ddf Mozart \u7236\u4eb2\u901a\u8bdd \u901a\u8bdd\u5185\u5bb9\uff1a the flowers are on their way","title":"part4"},{"location":"PythonChallenge/Solutions/17_eat/#part5","text":"\u641c\u7d22\u5f97\u77e5\uff0c Mozart \u7236\u4eb2\u540d\u4e3a\uff1a Leopold 1 2 3 4 5 6 7 from xmlrpc.client import ServerProxy contact = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) print ( contact . phone ( \"Leopold\" )) >>> 555 - VIOLIN \u201c\u5c0f\u63d0\u7434\u624b\u201d \u6b63\u662f Leopold \u7684\u4e00\u4e2a\u8eab\u4efd \u6253\u5f00\u7f51\u9875 http://www.pythonchallenge.com/pc/return/violin.html \uff0c\u5f97\u5230 no! i mean yes! but ../stuff/violin.php. \u5f97\u5230\u4e0b\u4e00\u6b65\u7684\u7f51\u9875\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/stuff/violin.php \u6b64\u4e3a Leopold \u7684\u8096\u50cf \u56fe\u7247\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u6b64\u9898\u8fd8\u672b\u7ed3\u675f \u56fe\u7247\u4e0d\u662f\u5c45\u4e2d\uff0c\u800c\u662f\u5728\u6b63\u4e0a\u65b9\uff0c\u90a3\u4e48\u7f51\u9875\u4e0b\u534a\u90e8\u5206\u53ef\u80fd\u9690\u85cf\u7740\u8bdd","title":"part5"},{"location":"PythonChallenge/Solutions/17_eat/#part6","text":"\u4f7f\u7528 the flowers are on their way 1 2 3 4 5 6 from requests import get url = \"http://www.pythonchallenge.com/pc/stuff/violin.php\" cookie = { \"info\" : \"the flowers are on their way\" } res = get ( url , cookies = cookie ) print ( res . text ) \u5f97\u5230\u5982\u4e0b\u4fe1\u606f < html > < head > < title > it's me. what do you want? </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"../style.css\" > </ head > < body > < br >< br > < center >< font color = \"gold\" > < img src = \"leopold.jpg\" border = \"0\" /> < br >< br > oh well, don't you dare to forget the balloons. </ font > </ body > </ html > \u5173\u952e\u5b57\uff1a balloons","title":"part6"},{"location":"PythonChallenge/Solutions/17_eat/#other","text":"\u82e5\u4f7f\u7528\u63d2\u4ef6\u4fee\u6539 cookie \uff0c\u53ef\u5728 Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u770b\u5230 oh well, don't you dare to forget the balloons.","title":"other"},{"location":"PythonChallenge/Solutions/17_eat/#5","text":"http://www.pythonchallenge.com/pc/return/balloons.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/","text":"\u7b2c 18 \u9898 can you tell the difference? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/balloons.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca it is more obvious that what you might think 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u5de6\u53f3\u533a\u522b\u5728\u201c\u4eae\u5ea6\u201d\u2014\u2014 brightness \u82e5\u4ee5 bright \u8bd5\u4e4b\uff0c\u4f1a\u5f97\u5230 ness \uff0c\u5176\u610f\u4e5f\u4e3a brightness \u6253\u5f00\u7f51\u9875\uff1a http://www.pythonchallenge.com/pc/return/brightness.html \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u53e5\u6ce8\u91ca\uff1a maybe consider deltas.gz \u5c06\u5730\u5740\u6539\u4e3a\uff1a http://www.pythonchallenge.com/pc/return/deltas.gz \u53ef\u4e0b\u8f7d\u5f97\u5230\u6587\u4ef6 deltas.gz \u89e3\u538b\u540e\uff0c\u5f97\u5230 delta.txt \u5efa\u8bae\u7528\u8bb0\u4e8b\u672c\u4ee5\u5916\u7684\u7f16\u8f91\u5668\u6253\u5f00\uff0c\u90a3\u6837\u770b\u5f97\u6e05\u695a part2 Link \u5f00\u5934\u516b\u7ec4\u6570\u636e\u4e3a\uff1a 89 50 4e 47 0d 0a 1a 0a \uff0c\u6709\u4e86\u7b2c 12 \u9898\u548c\u7b2c 7 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u5927\u80c6\u731c\u6d4b\u5176\u4e3a\u201c\u5341\u516d\u8fdb\u5236\u201d\uff0c\u4e14\u4e0e ASCII \u7801\u6709\u5173 >>> hex_nums = \"89 50 4e 47 0d 0a 1a 0a\" . split () >>> dec_nums = [ int ( e , 16 ) for e in hex_nums ] >>> bytes ( dec_nums ) b ' \\x89 PNG \\r\\n\\x1a\\n ' >>> \u770b\u5230 \\x89PNG \u7b49\u5b57\u6837\uff0c\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e32\u6570\u636e\u662f .png \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u7b2c 51 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u51fa\u73b0\u4e0d\u540c\uff0c\u4e14\u8be5\u884c\u53f3\u8fb9\u7b49\u4e8e\u8be5\u884c\u4e0b\u4e00\u884c\u7684\u5de6\u8fb9 \u7b2c 56 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u5728\u9694\u51e0\u884c\u65f6\uff0c\u4ecd\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5 part3 Link \u9700\u8981\u5c06\u6570\u636e\u5206\u6210\u4e09\u7ec4 \u53ea\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4e24\u4fa7\u5747\u5b58\u5728 \u53ea\u5b58\u5728\u4e8e\u53f3\u4fa7 \u81ea\u5df1\u9020\u8f6e\u5b50\u4e5f\u8d39\u4e0d\u4e86\u51e0\u884c\uff0c\u4e0d\u8fc7\u6709\u73b0\u6210\u7684 difflib \u53ef\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare = difflib . ndiff ( left , right ) fl = open ( \"18_left.png\" , \"wb\" ) # only in left fb = open ( \"18_both.png\" , \"wb\" ) # both have fr = open ( \"18_right.png\" , \"wb\" ) # only in right for line in compare : bs = bytes ([ int ( e , 16 ) for e in line [ 2 :] . strip () . split () if e ]) if line [ 0 ] == '-' : fl . write ( bs ) elif line [ 0 ] == '+' : fr . write ( bs ) else : fb . write ( bs ) fl . close () fb . close () fr . close () \u56fe left \u56fe both \u56fe right part4 Link ../hex/bin.html \u5e94\u8be5\u662f\u8bf4\u4e0b\u4e00\u5173\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/hex/bin.html \u6253\u5f00\u7f51\u5740\u540e\uff0c\u7c7b\u4f3c\u7b2c 8 \u9898\uff0c\u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\uff08\u770b\u6765\uff0c\u505a\u540e\u7eed\u7684\u9898\u76ee\u8981\u66f4\u65b0\u5bc6\u7801\u4e86\uff09 butter \u4e0e fly \u53ef\u4ee5\u51d1\u6210 butterfly \uff0c\u6309\u987a\u5e8f\u6b63\u597d \u8d26\u53f7\uff1a butter \u5bc6\u7801\uff1a fly 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/bin.html","title":"18 can you tell the difference"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#18-can-you-tell-the-difference","text":"","title":"\u7b2c 18 \u9898 can you tell the difference?"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#1","text":">>> http://www.pythonchallenge.com/pc/return/balloons.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca it is more obvious that what you might think","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part1","text":"\u56fe\u4e2d\u5de6\u53f3\u533a\u522b\u5728\u201c\u4eae\u5ea6\u201d\u2014\u2014 brightness \u82e5\u4ee5 bright \u8bd5\u4e4b\uff0c\u4f1a\u5f97\u5230 ness \uff0c\u5176\u610f\u4e5f\u4e3a brightness \u6253\u5f00\u7f51\u9875\uff1a http://www.pythonchallenge.com/pc/return/brightness.html \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u53e5\u6ce8\u91ca\uff1a maybe consider deltas.gz \u5c06\u5730\u5740\u6539\u4e3a\uff1a http://www.pythonchallenge.com/pc/return/deltas.gz \u53ef\u4e0b\u8f7d\u5f97\u5230\u6587\u4ef6 deltas.gz \u89e3\u538b\u540e\uff0c\u5f97\u5230 delta.txt \u5efa\u8bae\u7528\u8bb0\u4e8b\u672c\u4ee5\u5916\u7684\u7f16\u8f91\u5668\u6253\u5f00\uff0c\u90a3\u6837\u770b\u5f97\u6e05\u695a","title":"part1"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part2","text":"\u5f00\u5934\u516b\u7ec4\u6570\u636e\u4e3a\uff1a 89 50 4e 47 0d 0a 1a 0a \uff0c\u6709\u4e86\u7b2c 12 \u9898\u548c\u7b2c 7 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u5927\u80c6\u731c\u6d4b\u5176\u4e3a\u201c\u5341\u516d\u8fdb\u5236\u201d\uff0c\u4e14\u4e0e ASCII \u7801\u6709\u5173 >>> hex_nums = \"89 50 4e 47 0d 0a 1a 0a\" . split () >>> dec_nums = [ int ( e , 16 ) for e in hex_nums ] >>> bytes ( dec_nums ) b ' \\x89 PNG \\r\\n\\x1a\\n ' >>> \u770b\u5230 \\x89PNG \u7b49\u5b57\u6837\uff0c\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e32\u6570\u636e\u662f .png \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u7b2c 51 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u51fa\u73b0\u4e0d\u540c\uff0c\u4e14\u8be5\u884c\u53f3\u8fb9\u7b49\u4e8e\u8be5\u884c\u4e0b\u4e00\u884c\u7684\u5de6\u8fb9 \u7b2c 56 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u5728\u9694\u51e0\u884c\u65f6\uff0c\u4ecd\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5","title":"part2"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part3","text":"\u9700\u8981\u5c06\u6570\u636e\u5206\u6210\u4e09\u7ec4 \u53ea\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4e24\u4fa7\u5747\u5b58\u5728 \u53ea\u5b58\u5728\u4e8e\u53f3\u4fa7 \u81ea\u5df1\u9020\u8f6e\u5b50\u4e5f\u8d39\u4e0d\u4e86\u51e0\u884c\uff0c\u4e0d\u8fc7\u6709\u73b0\u6210\u7684 difflib \u53ef\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare = difflib . ndiff ( left , right ) fl = open ( \"18_left.png\" , \"wb\" ) # only in left fb = open ( \"18_both.png\" , \"wb\" ) # both have fr = open ( \"18_right.png\" , \"wb\" ) # only in right for line in compare : bs = bytes ([ int ( e , 16 ) for e in line [ 2 :] . strip () . split () if e ]) if line [ 0 ] == '-' : fl . write ( bs ) elif line [ 0 ] == '+' : fr . write ( bs ) else : fb . write ( bs ) fl . close () fb . close () fr . close () \u56fe left \u56fe both \u56fe right","title":"part3"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part4","text":"../hex/bin.html \u5e94\u8be5\u662f\u8bf4\u4e0b\u4e00\u5173\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/hex/bin.html \u6253\u5f00\u7f51\u5740\u540e\uff0c\u7c7b\u4f3c\u7b2c 8 \u9898\uff0c\u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\uff08\u770b\u6765\uff0c\u505a\u540e\u7eed\u7684\u9898\u76ee\u8981\u66f4\u65b0\u5bc6\u7801\u4e86\uff09 butter \u4e0e fly \u53ef\u4ee5\u51d1\u6210 butterfly \uff0c\u6309\u987a\u5e8f\u6b63\u597d \u8d26\u53f7\uff1a butter \u5bc6\u7801\uff1a fly","title":"part4"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#5","text":"http://www.pythonchallenge.com/pc/hex/bin.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/19_please/","text":"\u7b2c 19 \u9898 please! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/bin.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u4e32\u5f88\u957f\u7684\u6ce8\u91ca From: leopold.moz@pythonchallenge.com Subject: what do you mean by \"open the attachment?\" Mime-version: 1.0 Content-type: Multipart/mixed; boundary=\"===============1295515792==\" It is so much easier for you, youngsters. Maybe my computer is out of order. I have a real work to do and I must know what's inside! --===============1295515792== Content-type: audio/x-wav; name=\"indian.wav\" Content-transfer-encoding: base64 ... # \u7701\u7565\u4e86\u8fd1 2000 \u884c\uff0c\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u6b64\u5904\u4fe1\u606f\u4fdd\u5b58\u5728\u6587\u4ef6 please.txt --===============1295515792==-- 4. \u89e3\u6cd5 Link part1 Link \u7f51\u9875\u7684\u6ce8\u91ca\u50cf\u662f Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u6765\u7684\u4e00\u5c01\u90ae\u4ef6 \u4ed6\u8bf4\uff1a open the attachment? \uff0c\u8bf4\u660e\u6709\u4e2a\u9644\u4ef6 audio/x-wav; name=\"indian.wav\" \u8bf4\u660e\u9644\u4ef6\u662f\u4e00\u4e2a\u97f3\u9891 base64 \u63d0\u793a\u4e86\u7f16\u7801\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 from base64 import b64decode f = open ( \"please.txt\" , \"rb\" ) audio = open ( \"indian.wav\" , \"wb\" ) for line in f . readlines (): audio . write ( b64decode ( line . strip ())) f . close () audio . close () \u97f3\u9891\u4e2d\u4ec5\u6709\u4e00\u4e2a\u7537\u58f0\u5355\u8bcd sorry part2 Link \u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/sorry.html \uff0c\u770b\u5230 \"what are you apologizing for?\" part3 Link \u97f3\u9891\u7ea6 5 \u79d2\uff0c\u4e0d\u8be5\u53ea\u6709\u4e00\u4e2a\u5355\u8bcd \u5173\u4e8e wav \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u524d 44 \u4e2a\u5b57\u8282\u662f\u56fa\u5b9a\u7684 \u5176\u4f59\u7684\u6570\u636e\u5206\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\uff0c\u9ad8\u4f4d\u5f71\u54cd\u5927\uff0c\u4f4e\u4f4d\u5f71\u54cd\u5c0f \u8bd5\u7740\u201c\u7ffb\u8f6c\u9ad8\u4f4e\u4f4d\u201d 1 2 3 4 5 6 7 8 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () new = open ( \"indian_1.wav\" , \"wb\" ) file_head = data [: 44 ] # \u6587\u4ef6\u5934\u90e8 wave_data = data [ 44 :] # \u58f0\u97f3\u6570\u636e new . write ( file_head ) # \u5199\u5165\u5934\u90e8\u6570\u636e new . write ( wave_data [:: - 1 ]) # \u5199\u5165\u53cd\u8f6c\u7684\u58f0\u97f3\u6570\u636e new . close () \u6253\u5f00 indian_1.wav \uff0c\u58f0\u97f3\u53d8\u5f97\u4e30\u5bcc\u4e86\uff0c\u4f46\u542c\u4e0d\u6e05\u8bcd part4 Link \u7ffb\u8f6c\u6709\u8bef \u4e0a\u9762\u662f\u5c06 12345678 \u7ffb\u8f6c\u4e3a 87654321 \u5e94\u8be5\u7ffb\u8f6c\u4e3a 21436587 \u7b80\u5355\u5730\u8bf4\uff0c\u9664\u4e86\u6587\u4ef6\u5934\uff0c\u5176\u4ed6\u7684\u6570\u636e\u9700\u8981\u7ffb\u8f6c\u5404\u81ea\u7684\u201c\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\u201d 1 2 3 4 5 6 7 8 9 10 11 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () file_head = data [: 44 ] wave_data = data [ 44 :] tail = [] for i in range ( 0 , len ( wave_data ), 2 ): tail . extend ([ wave_data [ i + 1 ], wave_data [ i ]]) new = open ( \"indian_2.wav\" , \"wb\" ) new . write ( file_head ) new . write ( bytes ( tail )) new . close () \u64ad\u653e indian_2.wav \uff0c\u542c\u5230\uff1a You are an idiot. Ha, ha, ha, ... \u5173\u952e\u5b57\uff1a idiot part5 Link \u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/idiot.html \u7f51\u9875\u5185\u5bb9 \u4e0a\u65b9\uff1a Leopold \u7684\u8096\u50cf \u4e0b\u65b9\uff1a \"Now you should apologize...\" \u548c Continue to the next level \u70b9\u51fb Continue to the next level \uff0c\u53bb\u5230\u4e0b\u4e00\u9898 other Link \u505a\u4e00\u4ef6\u4e0e\u672c\u9898\u65e0\u5173\u7684\u4e8b\uff1a\u5c06\u56fe\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u6539\u4e3a\u5176\u201c\u8865\u8272\u201d \u8865\u8272\u7684 R, G, B \u7684\u7b97\u6cd5\uff1a 255 - color_value 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image def com_color ( color ): r , g , b = color return 255 - r , 255 - g , 255 - b if __name__ == \"__main__\" : img = Image . open ( \"map.jpg\" ) data = map ( com_color , img . getdata ()) img . putdata ( list ( data )) img . save ( \"19_new_map.jpg\" ) img . close () \u5f97\u5230\u4e00\u5f20\u6e05\u6670\u7684\u56fe\u7247 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/idiot2.html","title":"19 please"},{"location":"PythonChallenge/Solutions/19_please/#19-please","text":"","title":"\u7b2c 19 \u9898 please!"},{"location":"PythonChallenge/Solutions/19_please/#1","text":">>> http://www.pythonchallenge.com/pc/hex/bin.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/19_please/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/19_please/#3","text":"\u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u4e32\u5f88\u957f\u7684\u6ce8\u91ca From: leopold.moz@pythonchallenge.com Subject: what do you mean by \"open the attachment?\" Mime-version: 1.0 Content-type: Multipart/mixed; boundary=\"===============1295515792==\" It is so much easier for you, youngsters. Maybe my computer is out of order. I have a real work to do and I must know what's inside! --===============1295515792== Content-type: audio/x-wav; name=\"indian.wav\" Content-transfer-encoding: base64 ... # \u7701\u7565\u4e86\u8fd1 2000 \u884c\uff0c\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u6b64\u5904\u4fe1\u606f\u4fdd\u5b58\u5728\u6587\u4ef6 please.txt --===============1295515792==--","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/19_please/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/19_please/#part1","text":"\u7f51\u9875\u7684\u6ce8\u91ca\u50cf\u662f Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u6765\u7684\u4e00\u5c01\u90ae\u4ef6 \u4ed6\u8bf4\uff1a open the attachment? \uff0c\u8bf4\u660e\u6709\u4e2a\u9644\u4ef6 audio/x-wav; name=\"indian.wav\" \u8bf4\u660e\u9644\u4ef6\u662f\u4e00\u4e2a\u97f3\u9891 base64 \u63d0\u793a\u4e86\u7f16\u7801\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 from base64 import b64decode f = open ( \"please.txt\" , \"rb\" ) audio = open ( \"indian.wav\" , \"wb\" ) for line in f . readlines (): audio . write ( b64decode ( line . strip ())) f . close () audio . close () \u97f3\u9891\u4e2d\u4ec5\u6709\u4e00\u4e2a\u7537\u58f0\u5355\u8bcd sorry","title":"part1"},{"location":"PythonChallenge/Solutions/19_please/#part2","text":"\u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/sorry.html \uff0c\u770b\u5230 \"what are you apologizing for?\"","title":"part2"},{"location":"PythonChallenge/Solutions/19_please/#part3","text":"\u97f3\u9891\u7ea6 5 \u79d2\uff0c\u4e0d\u8be5\u53ea\u6709\u4e00\u4e2a\u5355\u8bcd \u5173\u4e8e wav \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u524d 44 \u4e2a\u5b57\u8282\u662f\u56fa\u5b9a\u7684 \u5176\u4f59\u7684\u6570\u636e\u5206\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\uff0c\u9ad8\u4f4d\u5f71\u54cd\u5927\uff0c\u4f4e\u4f4d\u5f71\u54cd\u5c0f \u8bd5\u7740\u201c\u7ffb\u8f6c\u9ad8\u4f4e\u4f4d\u201d 1 2 3 4 5 6 7 8 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () new = open ( \"indian_1.wav\" , \"wb\" ) file_head = data [: 44 ] # \u6587\u4ef6\u5934\u90e8 wave_data = data [ 44 :] # \u58f0\u97f3\u6570\u636e new . write ( file_head ) # \u5199\u5165\u5934\u90e8\u6570\u636e new . write ( wave_data [:: - 1 ]) # \u5199\u5165\u53cd\u8f6c\u7684\u58f0\u97f3\u6570\u636e new . close () \u6253\u5f00 indian_1.wav \uff0c\u58f0\u97f3\u53d8\u5f97\u4e30\u5bcc\u4e86\uff0c\u4f46\u542c\u4e0d\u6e05\u8bcd","title":"part3"},{"location":"PythonChallenge/Solutions/19_please/#part4","text":"\u7ffb\u8f6c\u6709\u8bef \u4e0a\u9762\u662f\u5c06 12345678 \u7ffb\u8f6c\u4e3a 87654321 \u5e94\u8be5\u7ffb\u8f6c\u4e3a 21436587 \u7b80\u5355\u5730\u8bf4\uff0c\u9664\u4e86\u6587\u4ef6\u5934\uff0c\u5176\u4ed6\u7684\u6570\u636e\u9700\u8981\u7ffb\u8f6c\u5404\u81ea\u7684\u201c\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\u201d 1 2 3 4 5 6 7 8 9 10 11 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () file_head = data [: 44 ] wave_data = data [ 44 :] tail = [] for i in range ( 0 , len ( wave_data ), 2 ): tail . extend ([ wave_data [ i + 1 ], wave_data [ i ]]) new = open ( \"indian_2.wav\" , \"wb\" ) new . write ( file_head ) new . write ( bytes ( tail )) new . close () \u64ad\u653e indian_2.wav \uff0c\u542c\u5230\uff1a You are an idiot. Ha, ha, ha, ... \u5173\u952e\u5b57\uff1a idiot","title":"part4"},{"location":"PythonChallenge/Solutions/19_please/#part5","text":"\u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/idiot.html \u7f51\u9875\u5185\u5bb9 \u4e0a\u65b9\uff1a Leopold \u7684\u8096\u50cf \u4e0b\u65b9\uff1a \"Now you should apologize...\" \u548c Continue to the next level \u70b9\u51fb Continue to the next level \uff0c\u53bb\u5230\u4e0b\u4e00\u9898","title":"part5"},{"location":"PythonChallenge/Solutions/19_please/#other","text":"\u505a\u4e00\u4ef6\u4e0e\u672c\u9898\u65e0\u5173\u7684\u4e8b\uff1a\u5c06\u56fe\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u6539\u4e3a\u5176\u201c\u8865\u8272\u201d \u8865\u8272\u7684 R, G, B \u7684\u7b97\u6cd5\uff1a 255 - color_value 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image def com_color ( color ): r , g , b = color return 255 - r , 255 - g , 255 - b if __name__ == \"__main__\" : img = Image . open ( \"map.jpg\" ) data = map ( com_color , img . getdata ()) img . putdata ( list ( data )) img . save ( \"19_new_map.jpg\" ) img . close () \u5f97\u5230\u4e00\u5f20\u6e05\u6670\u7684\u56fe\u7247","title":"other"},{"location":"PythonChallenge/Solutions/19_please/#5","text":"http://www.pythonchallenge.com/pc/hex/idiot2.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/20_go_away/","text":"\u7b2c 20 \u9898 go away! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/idiot2.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 but inspecting it carefully is allowed. 4. \u89e3\u6cd5 Link part1 Link \u9898\u56fe\u540d\u79f0\uff1a unreal \u6309 F12 \uff0c\u67e5\u770b\u201c\u8bf7\u6c42\u5934\u201d Content-Range: bytes 0-30202/2123456789 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:43:14 GMT Server: lighttpd/1.4.35 Transfer-Encoding: chunked \u5bf9\u6bd4\u4e0a\u4e00\u9898\u7684\u201c\u8bf7\u6c42\u5934\u201d Accept-Ranges: bytes Content-Length: 45552 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:44:54 GMT ETag: \"886623682\" Last-Modified: Sat, 12 Mar 2016 19:38:45 GMT Server: lighttpd/1.4.35 part2 Link \u4f7f\u7528 requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...' \u65e2\u7136\u662f unreal \uff0c\u4e0d\u59a8\u4ece 30202 + 1 \u5f00\u59cb\u83b7\u53d6\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) if __name__ == \"__main__\" : get_unreal ( 30203 ) >>> Response Status Code : 206 Content Range : bytes 30203 - 30236 / 2123456789 Size of Content : 34 bytes Content : b \"Why don't you respect my privacy? \\n \" \u5185\u5bb9\u5206\u6790 206 \u8868\u793a\u201c\u90e8\u5206\u5185\u5bb9\u201d 30236 \u4e4b\u540e\u8fd8\u6709 part3 Link \u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 30236 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30237-30283/2123456789 Size of Content: 47 bytes Content: b'we can go on in this way for really long time.\\n' \u4ece 30283 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30284-30294/2123456789 Size of Content: 11 bytes Content: b'stop this!\\n' \u4ece 30294 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30295-30312/2123456789 Size of Content: 18 bytes Content: b'invader! invader!\\n' \u4ece 30312 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30313-30346/2123456789 Size of Content: 34 bytes Content: b'ok, invader. you are inside now. \\n' \u518d\u91cd\u590d\uff0c\u5c31\u6ca1\u4e0b\u6587\u4e86 \u629b\u51fa\u5f02\u5e38\uff1a KeyError: 'content-range' part4 Link Content \u4e2d\u51fa\u73b0\u4e86\u4e09\u6b21 invader \uff0c\u62ff\u5b83\u8bd5\u8bd5 \u6253\u5f00 http://www.pythonchallenge.com/pc/hex/invader.html \uff0c\u5f97\u5230 Yes! that's you! part5 Link \u7535\u5f71\u300a\u5934\u53f7\u73a9\u5bb6\u300b\u4e2d\uff0c\u7b2c\u4e00\u5173\u7684\u201c\u8d5b\u8f66\u201d\u662f\u4ece\u540e\u65b9\u5012\u8f66\u6253\u901a\u7684\uff0c\u8bd5\u8bd5\u4e3b\u89d2\u7684\u65b9\u6cd5 \u4ece 2123456789 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456744-2123456788/2123456789 Size of Content: 45 bytes Content: b'esrever ni emankcin wen ruoy si drowssap eht\\n' \u5206\u6790\u7ed3\u679c Content \u7684\u5185\u5bb9\u770b\u7740\u65e2\u50cf\u82f1\u6587\uff0c\u53c8\u4e0d\u50cf\u82f1\u6587 \u672b\u5c3e\u7684 eht \u6bd4\u8f83\u597d\u8ba4\uff0c\u53cd\u8fc7\u6765\u662f the \u540c\u6837\u7684\uff0c\u628a\u7b2c\u4e00\u4e2a\u8bcd esrever \u53cd\u8fc7\u6765\uff0c\u7ed3\u679c\u662f reverse \uff0c\u8fd9\u5c31\u660e\u786e\u4e86 reverse \"Context\" >>> s = \"esrever ni emankcin wen ruoy si drowssap eht\" >>> s [:: - 1 ] 'the password is your new nickname in reverse' >>> pwd = \"invader\" >>> pwd [:: - 1 ] redavni >>> part6 Link \u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 2123456744 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456712-2123456743/2123456789 Size of Content: 32 bytes Content: b'and it is hiding at 1152983631.\\n' \u4ece 1152983631 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 1152983631-1153223363/2123456789 Size of Content: 239733 bytes Content: b'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00;\\xa7\\xaa2\\xac\\xe5f\\x14\\xa9\\x00\\x00\\x00\\xd3\\x00\\x00\\x00\\n\\x00\\x15\\x00readme.txtUT\\t\\x00\\x03\"\\xf6\\x80B\\x19\\xf7\\x80BUx...' \u5185\u5bb9\u5206\u6790 Content \u5f00\u5934\u6709\u4e2a PK \uff0c\u5f80\u540e\u8bfb\u8fd8\u80fd\u770b\u5230 readme.txt \u641c\u7d22\u5f97\u77e5 PK \u662f .zip \u7684\u6587\u4ef6\u5934 \u81f3\u6b64\uff0c\u53cd\u5411\u8d70\u4e5f\u5230\u5934\u4e86 part7 Link \u5c06 res.content \u5199\u5165\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) return res . content if __name__ == \"__main__\" : f = open ( \"unreal.zip\" , \"wb\" ) f . write ( get_unreal ( 1152983631 )) f . close () \u6253\u5f00 unreal.zip \uff0c\u5185\u6709\u4e24\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u5bc6\u7801 \u4f7f\u7528 part5 \u5f97\u5230\u7684\u5bc6\u7801 redavni \u6253\u5f00 readme.txt Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: * We used to play this game when we were kids * When I had no idea what to do, I looked backwards. \u6240\u4ee5\u4e0b\u4e00\u9898\u662f\u6253\u5f00\u8fd9\u4e2a\u538b\u7f29\u5305 5. \u7b54\u6848 Link \u538b\u7f29\u5305\u5bc6\u7801\uff1a redavni","title":"20 go away"},{"location":"PythonChallenge/Solutions/20_go_away/#20-go-away","text":"","title":"\u7b2c 20 \u9898 go away!"},{"location":"PythonChallenge/Solutions/20_go_away/#1","text":">>> http://www.pythonchallenge.com/pc/hex/idiot2.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/20_go_away/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/20_go_away/#3","text":"\u7f51\u9875\u5185 but inspecting it carefully is allowed.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/20_go_away/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/20_go_away/#part1","text":"\u9898\u56fe\u540d\u79f0\uff1a unreal \u6309 F12 \uff0c\u67e5\u770b\u201c\u8bf7\u6c42\u5934\u201d Content-Range: bytes 0-30202/2123456789 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:43:14 GMT Server: lighttpd/1.4.35 Transfer-Encoding: chunked \u5bf9\u6bd4\u4e0a\u4e00\u9898\u7684\u201c\u8bf7\u6c42\u5934\u201d Accept-Ranges: bytes Content-Length: 45552 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:44:54 GMT ETag: \"886623682\" Last-Modified: Sat, 12 Mar 2016 19:38:45 GMT Server: lighttpd/1.4.35","title":"part1"},{"location":"PythonChallenge/Solutions/20_go_away/#part2","text":"\u4f7f\u7528 requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...' \u65e2\u7136\u662f unreal \uff0c\u4e0d\u59a8\u4ece 30202 + 1 \u5f00\u59cb\u83b7\u53d6\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) if __name__ == \"__main__\" : get_unreal ( 30203 ) >>> Response Status Code : 206 Content Range : bytes 30203 - 30236 / 2123456789 Size of Content : 34 bytes Content : b \"Why don't you respect my privacy? \\n \" \u5185\u5bb9\u5206\u6790 206 \u8868\u793a\u201c\u90e8\u5206\u5185\u5bb9\u201d 30236 \u4e4b\u540e\u8fd8\u6709","title":"part2"},{"location":"PythonChallenge/Solutions/20_go_away/#part3","text":"\u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 30236 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30237-30283/2123456789 Size of Content: 47 bytes Content: b'we can go on in this way for really long time.\\n' \u4ece 30283 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30284-30294/2123456789 Size of Content: 11 bytes Content: b'stop this!\\n' \u4ece 30294 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30295-30312/2123456789 Size of Content: 18 bytes Content: b'invader! invader!\\n' \u4ece 30312 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30313-30346/2123456789 Size of Content: 34 bytes Content: b'ok, invader. you are inside now. \\n' \u518d\u91cd\u590d\uff0c\u5c31\u6ca1\u4e0b\u6587\u4e86 \u629b\u51fa\u5f02\u5e38\uff1a KeyError: 'content-range'","title":"part3"},{"location":"PythonChallenge/Solutions/20_go_away/#part4","text":"Content \u4e2d\u51fa\u73b0\u4e86\u4e09\u6b21 invader \uff0c\u62ff\u5b83\u8bd5\u8bd5 \u6253\u5f00 http://www.pythonchallenge.com/pc/hex/invader.html \uff0c\u5f97\u5230 Yes! that's you!","title":"part4"},{"location":"PythonChallenge/Solutions/20_go_away/#part5","text":"\u7535\u5f71\u300a\u5934\u53f7\u73a9\u5bb6\u300b\u4e2d\uff0c\u7b2c\u4e00\u5173\u7684\u201c\u8d5b\u8f66\u201d\u662f\u4ece\u540e\u65b9\u5012\u8f66\u6253\u901a\u7684\uff0c\u8bd5\u8bd5\u4e3b\u89d2\u7684\u65b9\u6cd5 \u4ece 2123456789 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456744-2123456788/2123456789 Size of Content: 45 bytes Content: b'esrever ni emankcin wen ruoy si drowssap eht\\n' \u5206\u6790\u7ed3\u679c Content \u7684\u5185\u5bb9\u770b\u7740\u65e2\u50cf\u82f1\u6587\uff0c\u53c8\u4e0d\u50cf\u82f1\u6587 \u672b\u5c3e\u7684 eht \u6bd4\u8f83\u597d\u8ba4\uff0c\u53cd\u8fc7\u6765\u662f the \u540c\u6837\u7684\uff0c\u628a\u7b2c\u4e00\u4e2a\u8bcd esrever \u53cd\u8fc7\u6765\uff0c\u7ed3\u679c\u662f reverse \uff0c\u8fd9\u5c31\u660e\u786e\u4e86 reverse \"Context\" >>> s = \"esrever ni emankcin wen ruoy si drowssap eht\" >>> s [:: - 1 ] 'the password is your new nickname in reverse' >>> pwd = \"invader\" >>> pwd [:: - 1 ] redavni >>>","title":"part5"},{"location":"PythonChallenge/Solutions/20_go_away/#part6","text":"\u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 2123456744 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456712-2123456743/2123456789 Size of Content: 32 bytes Content: b'and it is hiding at 1152983631.\\n' \u4ece 1152983631 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 1152983631-1153223363/2123456789 Size of Content: 239733 bytes Content: b'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00;\\xa7\\xaa2\\xac\\xe5f\\x14\\xa9\\x00\\x00\\x00\\xd3\\x00\\x00\\x00\\n\\x00\\x15\\x00readme.txtUT\\t\\x00\\x03\"\\xf6\\x80B\\x19\\xf7\\x80BUx...' \u5185\u5bb9\u5206\u6790 Content \u5f00\u5934\u6709\u4e2a PK \uff0c\u5f80\u540e\u8bfb\u8fd8\u80fd\u770b\u5230 readme.txt \u641c\u7d22\u5f97\u77e5 PK \u662f .zip \u7684\u6587\u4ef6\u5934 \u81f3\u6b64\uff0c\u53cd\u5411\u8d70\u4e5f\u5230\u5934\u4e86","title":"part6"},{"location":"PythonChallenge/Solutions/20_go_away/#part7","text":"\u5c06 res.content \u5199\u5165\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) return res . content if __name__ == \"__main__\" : f = open ( \"unreal.zip\" , \"wb\" ) f . write ( get_unreal ( 1152983631 )) f . close () \u6253\u5f00 unreal.zip \uff0c\u5185\u6709\u4e24\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u5bc6\u7801 \u4f7f\u7528 part5 \u5f97\u5230\u7684\u5bc6\u7801 redavni \u6253\u5f00 readme.txt Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: * We used to play this game when we were kids * When I had no idea what to do, I looked backwards. \u6240\u4ee5\u4e0b\u4e00\u9898\u662f\u6253\u5f00\u8fd9\u4e2a\u538b\u7f29\u5305","title":"part7"},{"location":"PythonChallenge/Solutions/20_go_away/#5","text":"\u538b\u7f29\u5305\u5bc6\u7801\uff1a redavni","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/","text":"\u7b2c 21 \u9898 dealing package.pack Link 1. \u5730\u5740 Link \u65e0 2. \u6587\u4ef6 Link readme.txt package.pack 3. \u63d0\u793a Link readme.txt \u4e2d\u7684\u4fe1\u606f\u5982\u4e0b Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: We used to play this game when we were kids When I had no idea what to do, I looked backwards. 4. \u89e3\u6cd5 Link part1 Link \u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00 readme.txt \u641c\u7d22\u5f97\u77e5\uff1a 78 9c \u4e3a zlib \u6587\u4ef6\u5934\uff0c\u6b64\u5916\u8fd8\u641c\u5f97 gzip: 1f 8b 08 lzma: 6c 00 \u81f3\u4e8e\u201c\u5c0f\u65f6\u5019\u73a9\u7684\u6e38\u620f\u201d\uff0c\u6709\u4eba\u8bf4\u662f\u201c\u51fb\u9f13\u4f20\u82b1\u201d\uff0c\u6211\u611f\u89c9\u50cf\u201c\u5957\u5a03\u201d part2 Link \u6162\u6162\u6765\uff0c\u591a\u8bd5\u51e0\u6b21 >>> import zlib >>> f = open ( \"package.pack\" , \"rb\" ) >>> data = f . read () >>> data [: 6 ] b 'x \\x9c\\x00\\n @ \\xf5 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x07 @ \\xf8 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x06 @ \\xf9 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x84 vuT' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> \u4e0a\u65b9\u4f7f\u7528 zlib.decompress(data) \u516d\u6b21\u540e\uff0c data \u7684\u201c\u6587\u4ef6\u5934\u201d\u53d8\u4e3a\u4e86 BZh \u6539\u4f7f\u7528 Bz2 >>> import bz2 # \u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x1f @ \\xe0 ' >>> \u4e0a\u65b9\u4f7f\u7528 bz2.decompress(data) \u4e09\u6b21\u540e\u53c8\u56de\u5230 zlib \u4e86 \u52a0\u901f\uff0c\u8ba9 while \u5904\u7406 >>> while True : ... if data . startswith ( b 'x \\x9c ' ): ... data = zlib . decompress ( data ) ... elif data . startswith ( b 'BZh' ): ... data = bz2 . decompress ( data ) ... else : ... break ... >>> len ( data ) 184947 >>> data [: 6 ] b ' \\x80\\x8d\\x96\\xcb\\xb5 r' >>> part3 Link \u56de\u60f3\u63d0\u793a\uff1a When I had no idea what to do, I looked backwards. \u505a\u4e00\u6b21 reverse >>> data = data [:: - 1 ] >>> data [: 6 ] b 'x \\x9c\\x00\\x0c @ \\xf3 ' >>> \u770b\u6765\uff0c\u603b\u5171\u4e09\u79cd\u64cd\u4f5c\uff1a zlib.decompress, bz2.decompress, reverse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) elif data . endswith ( b ' \\x9c x' ): # \\x9c \u662f\u4e00\u4e2a\uff0cx \u662f\u4e00\u4e2a data = data [:: - 1 ] else : break print ( data ) >>> b 'sgol ruoy ta kool' \u8fd9\u56de\u53ef\u4ee5\u8089\u773c\u53cd\u8f6c\uff1a look at your logs part4 Link \u6309 part3 \u7684\u63d0\u793a\uff0c\u8bb0\u5f55 zlib.decompress \u4e0e bz2.decompress \u4e0e data[::-1] \u7684\u6b21\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () cnt_zlib = cnt_bz2 = cnt_reverse = 0 while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) cnt_zlib += 1 elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) cnt_bz2 += 1 elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] cnt_reverse += 1 else : break print ( cnt_zlib , cnt_bz2 , cnt_reverse ) \u53d1\u73b0\u53cd\u8f6c\u53ea\u505a\u4e86 9 \u6b21 \u5c06\u6bcf\u6b21\u64cd\u4f5c\u8bb0\u5f55\u5230\u5217\u8868\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () res = [] while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) res . append ( \"zlib\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('z') elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) res . append ( \"bz2\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('b') elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] res . append ( \"reverse\" ) # \u56e0\u4e3a\u7a00\u6709\uff0c\u731c\u6d4b\u662f 9 \u884c\u7684\u5b57\u7b26\u753b\uff0c\u6539\u4e3a \\n\uff0c\u4e0b\u4e00\u6b65\u628a list \u6539\u4e3a str else : break print ( res ) \u5bf9\u4e0a\u4e00\u6b65\uff0c\u6309\u6ce8\u91ca\u6539\u8fc7\u540e\uff0c\u53ef\u770b\u51fa\u5927\u81f4\u8f6e\u5ed3 \u518d\u5c0f\u6539\u4e00\u756a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import bz2 import zlib result = \"\" with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) result += ' ' elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) result += '#' elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] result += ' \\n ' else : break print ( result ) >>> ### ### ######## ######## ########## ######## ####### ####### ######### ######### ######### ######### ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ######### ######### ######## ######### ## ## ## ######## ######## ######## ######## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ####### ####### ## ## ######### ## ## ### ### ## ## ########## ## ## 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/copper.html","title":"21 dealing package.pack"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#21-dealing-packagepack","text":"","title":"\u7b2c 21 \u9898 dealing package.pack"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#1","text":"\u65e0","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#2","text":"readme.txt package.pack","title":"2. \u6587\u4ef6"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#3","text":"readme.txt \u4e2d\u7684\u4fe1\u606f\u5982\u4e0b Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: We used to play this game when we were kids When I had no idea what to do, I looked backwards.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part1","text":"\u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00 readme.txt \u641c\u7d22\u5f97\u77e5\uff1a 78 9c \u4e3a zlib \u6587\u4ef6\u5934\uff0c\u6b64\u5916\u8fd8\u641c\u5f97 gzip: 1f 8b 08 lzma: 6c 00 \u81f3\u4e8e\u201c\u5c0f\u65f6\u5019\u73a9\u7684\u6e38\u620f\u201d\uff0c\u6709\u4eba\u8bf4\u662f\u201c\u51fb\u9f13\u4f20\u82b1\u201d\uff0c\u6211\u611f\u89c9\u50cf\u201c\u5957\u5a03\u201d","title":"part1"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part2","text":"\u6162\u6162\u6765\uff0c\u591a\u8bd5\u51e0\u6b21 >>> import zlib >>> f = open ( \"package.pack\" , \"rb\" ) >>> data = f . read () >>> data [: 6 ] b 'x \\x9c\\x00\\n @ \\xf5 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x07 @ \\xf8 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x06 @ \\xf9 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x84 vuT' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> \u4e0a\u65b9\u4f7f\u7528 zlib.decompress(data) \u516d\u6b21\u540e\uff0c data \u7684\u201c\u6587\u4ef6\u5934\u201d\u53d8\u4e3a\u4e86 BZh \u6539\u4f7f\u7528 Bz2 >>> import bz2 # \u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x1f @ \\xe0 ' >>> \u4e0a\u65b9\u4f7f\u7528 bz2.decompress(data) \u4e09\u6b21\u540e\u53c8\u56de\u5230 zlib \u4e86 \u52a0\u901f\uff0c\u8ba9 while \u5904\u7406 >>> while True : ... if data . startswith ( b 'x \\x9c ' ): ... data = zlib . decompress ( data ) ... elif data . startswith ( b 'BZh' ): ... data = bz2 . decompress ( data ) ... else : ... break ... >>> len ( data ) 184947 >>> data [: 6 ] b ' \\x80\\x8d\\x96\\xcb\\xb5 r' >>>","title":"part2"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part3","text":"\u56de\u60f3\u63d0\u793a\uff1a When I had no idea what to do, I looked backwards. \u505a\u4e00\u6b21 reverse >>> data = data [:: - 1 ] >>> data [: 6 ] b 'x \\x9c\\x00\\x0c @ \\xf3 ' >>> \u770b\u6765\uff0c\u603b\u5171\u4e09\u79cd\u64cd\u4f5c\uff1a zlib.decompress, bz2.decompress, reverse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) elif data . endswith ( b ' \\x9c x' ): # \\x9c \u662f\u4e00\u4e2a\uff0cx \u662f\u4e00\u4e2a data = data [:: - 1 ] else : break print ( data ) >>> b 'sgol ruoy ta kool' \u8fd9\u56de\u53ef\u4ee5\u8089\u773c\u53cd\u8f6c\uff1a look at your logs","title":"part3"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part4","text":"\u6309 part3 \u7684\u63d0\u793a\uff0c\u8bb0\u5f55 zlib.decompress \u4e0e bz2.decompress \u4e0e data[::-1] \u7684\u6b21\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () cnt_zlib = cnt_bz2 = cnt_reverse = 0 while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) cnt_zlib += 1 elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) cnt_bz2 += 1 elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] cnt_reverse += 1 else : break print ( cnt_zlib , cnt_bz2 , cnt_reverse ) \u53d1\u73b0\u53cd\u8f6c\u53ea\u505a\u4e86 9 \u6b21 \u5c06\u6bcf\u6b21\u64cd\u4f5c\u8bb0\u5f55\u5230\u5217\u8868\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () res = [] while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) res . append ( \"zlib\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('z') elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) res . append ( \"bz2\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('b') elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] res . append ( \"reverse\" ) # \u56e0\u4e3a\u7a00\u6709\uff0c\u731c\u6d4b\u662f 9 \u884c\u7684\u5b57\u7b26\u753b\uff0c\u6539\u4e3a \\n\uff0c\u4e0b\u4e00\u6b65\u628a list \u6539\u4e3a str else : break print ( res ) \u5bf9\u4e0a\u4e00\u6b65\uff0c\u6309\u6ce8\u91ca\u6539\u8fc7\u540e\uff0c\u53ef\u770b\u51fa\u5927\u81f4\u8f6e\u5ed3 \u518d\u5c0f\u6539\u4e00\u756a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import bz2 import zlib result = \"\" with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) result += ' ' elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) result += '#' elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] result += ' \\n ' else : break print ( result ) >>> ### ### ######## ######## ########## ######## ####### ####### ######### ######### ######### ######### ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ######### ######### ######## ######### ## ## ## ######## ######## ######## ######## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ####### ####### ## ## ######### ## ## ### ### ## ## ########## ## ##","title":"part4"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#5","text":"http://www.pythonchallenge.com/pc/hex/copper.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/22_emulate/","text":"\u7b2c 22 \u9898 emulate Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/copper.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca or maybe white.gif would be more bright 4. \u89e3\u6cd5 Link part1 Link \u6839\u636e\u6ce8\u91ca\u63d0\u793a\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/hex/white.gif \uff0c\u5e76\u5f97\u5230\u56fe\u7247 \u56fe\u7247\u662f gif \u683c\u5f0f\uff0c\u5c3a\u5bf8\uff1a 200x200 \u56fe\u7247\u4e00\u7247\u6f06\u9ed1\uff0c\u5374\u6709 39k \u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00\u56fe\u7247\uff0c\u4e3a\u6587\u4ef6\u5934 47 49 46 38 39 61 c8 00 c8 00 ... \u6709\u8fc7\u7b2c 12 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u524d\u516d\u7ec4\u4e2a\u5b57\u8282\u5bf9\u5e94 GIF89a c8 \u7684\u5341\u8fdb\u5236\u662f 200 \uff0c\u6545\u540e\u56db\u4e2a\u5b57\u8282\u5bf9\u5e94\u56fe\u7247\u5c3a\u5bf8 \u4ece\u7b2c 14 \u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u4e09\u4e2a\u6570\u636e\u4e00\u7ec4\uff0c\u8868\u793a\u8c03\u8272\u677f\u4fe1\u606f \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 NETSCAPE2.0 \u548c Created with The GIMP \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 c800c800 \uff0c\u4e14\u4e0d\u6b62\u4e00\u6b21\uff0c\u8fd9\u8bf4\u660e\u6b64\u56fe\u662f\u7531\u597d\u51e0\u5e27\u56fe\u7247\u5408\u6210\u7684\u52a8\u56fe part2 Link \u67e5\u770b\u989c\u8272\u5206\u5e03 >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = getdata () >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () [( 39999 , 0 ), ( 1 , 8 )] >>> \u4ec5\u4e00\u70b9\u4e3a 8 \u53f7\u8272\uff0c\u8fd9\u662f\u5173\u952e >>> f = open ( \"white.gif\" , \"rb\" ) >>> data = f . read () >>> data . index ( 8 ) 37 >>> new = data [: 37 ] + b \" \\xff\\xff\\xff \" + data [ 40 :] # \u5c06\u516b\u53f7\u8272\u5bf9\u5e94\u7684\u70b9\u6539\u4e3a\u767d\u8272 >>> g = open ( \"22_new_White.gif\" , \"wb\" ) >>> g . write ( new ) 38979 >>> g . close () >>> \u5f97\u5230\u4e00\u5f20\u52a8\u56fe \u4f5c\u8005\u4e4b\u610f\u5927\u6982\u5c31\u662f\uff1a\u8fd9\u4e2a\u5c0f\u767d\u70b9\uff0c\u5c31\u50cf\u624b\u67c4\u5728\u5c4f\u5e55\u4e0a\u5bf9\u5e94\u7684\u56fe\u6807 \u5c0f\u767d\u70b9\u50cf\u662f\u5728\u5199\u5b57\uff0c\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u5c31\u662f\u628a\u5b83\u7684\u8def\u5f84\u8bb0\u5f55\u4e0b\u6765 part3 Link \u83b7\u53d6\u56fe\u50cf\u7684\u5e27\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 except : break print ( frame ) gif . close () >>> 133 \u8be5\u56fe\u6709 133 \u5e27 part4 Link \u8bb0\u5f55\u5c0f\u767d\u70b9\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 x , y , _ , _ = gif . getbbox () print ( f \"( { x : >3 } , { y : >3 } )\" ) except : break gif . close () >>> ( 100 , 100 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 102 , 102 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 98 ) ... # \u540e\u9762\u7701\u7565 \u770b\u4e0a\u53bb\u5f88\u50cf\u7b14\u753b\uff0c\u4e00\u7ad6\u3001\u4e00\u6a2a\u7684\uff0c\u800c\u4e14\u662f\u76f8\u5bf9\u56fe\u7247\u4e2d\u5fc3\u5728\u52a8 \u8bb0\u5f55\u76f8\u5bf9\u4e2d\u5fc3\u7684\u8ddd\u79bb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () print ( list ( res )) print ( '=' * 30 ) print ( set ( res )) >>> [( 0 , 0 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( - 2 , - 2 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ... ============================== {( 0 , 0 ), ( - 2 , 0 ), ( 2 , 2 ), ( - 2 , 2 ), ( 2 , - 2 ), ( 2 , 0 ), ( - 2 , - 2 ), ( 0 , - 2 ), ( 0 , 2 )} \u9664\u53bb (0, 0) \uff0c\u5171\u6709\u516b\u79cd\u65b9\u5411\uff0c\u8fd9\u6b63\u5bf9\u5e94\u624b\u67c4\u7684\u516b\u4e2a\u65b9\u5411 part5 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst def get_script1 ( lst ): white = 255 side = 300 x = y = side // 2 img = Image . new ( 'P' , ( side , side ), 0 ) for dx , dy in lst : x += dx y += dy img . putpixel (( x , y ), white ) img . show () def get_script2 ( lst ): cnt = 0 for t in lst : if t == ( 0 , 0 ): cnt += 1 print ( cnt ) def get_script3 ( lst ): white = 255 x = y = 50 img = Image . new ( 'P' , ( 500 , 100 ), 0 ) cnt = 0 for dx , dy in lst : if dx == dy == 0 : x = 50 + cnt * 100 y = 50 cnt += 1 else : x -= dx y -= dy img . putpixel (( x , y ), white ) img . save ( \"22_result.gif\" ) if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () # get_script1(res) # \u5b57\u6bcd\u91cd\u53e0\u5728\u4e00\u8d77 # get_script2(res) # 5 -> 5 letters get_script3 ( res ) 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/bonus.html","title":"22 emulate"},{"location":"PythonChallenge/Solutions/22_emulate/#22-emulate","text":"","title":"\u7b2c 22 \u9898 emulate"},{"location":"PythonChallenge/Solutions/22_emulate/#1","text":">>> http://www.pythonchallenge.com/pc/hex/copper.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/22_emulate/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/22_emulate/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca or maybe white.gif would be more bright","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/22_emulate/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/22_emulate/#part1","text":"\u6839\u636e\u6ce8\u91ca\u63d0\u793a\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/hex/white.gif \uff0c\u5e76\u5f97\u5230\u56fe\u7247 \u56fe\u7247\u662f gif \u683c\u5f0f\uff0c\u5c3a\u5bf8\uff1a 200x200 \u56fe\u7247\u4e00\u7247\u6f06\u9ed1\uff0c\u5374\u6709 39k \u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00\u56fe\u7247\uff0c\u4e3a\u6587\u4ef6\u5934 47 49 46 38 39 61 c8 00 c8 00 ... \u6709\u8fc7\u7b2c 12 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u524d\u516d\u7ec4\u4e2a\u5b57\u8282\u5bf9\u5e94 GIF89a c8 \u7684\u5341\u8fdb\u5236\u662f 200 \uff0c\u6545\u540e\u56db\u4e2a\u5b57\u8282\u5bf9\u5e94\u56fe\u7247\u5c3a\u5bf8 \u4ece\u7b2c 14 \u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u4e09\u4e2a\u6570\u636e\u4e00\u7ec4\uff0c\u8868\u793a\u8c03\u8272\u677f\u4fe1\u606f \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 NETSCAPE2.0 \u548c Created with The GIMP \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 c800c800 \uff0c\u4e14\u4e0d\u6b62\u4e00\u6b21\uff0c\u8fd9\u8bf4\u660e\u6b64\u56fe\u662f\u7531\u597d\u51e0\u5e27\u56fe\u7247\u5408\u6210\u7684\u52a8\u56fe","title":"part1"},{"location":"PythonChallenge/Solutions/22_emulate/#part2","text":"\u67e5\u770b\u989c\u8272\u5206\u5e03 >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = getdata () >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () [( 39999 , 0 ), ( 1 , 8 )] >>> \u4ec5\u4e00\u70b9\u4e3a 8 \u53f7\u8272\uff0c\u8fd9\u662f\u5173\u952e >>> f = open ( \"white.gif\" , \"rb\" ) >>> data = f . read () >>> data . index ( 8 ) 37 >>> new = data [: 37 ] + b \" \\xff\\xff\\xff \" + data [ 40 :] # \u5c06\u516b\u53f7\u8272\u5bf9\u5e94\u7684\u70b9\u6539\u4e3a\u767d\u8272 >>> g = open ( \"22_new_White.gif\" , \"wb\" ) >>> g . write ( new ) 38979 >>> g . close () >>> \u5f97\u5230\u4e00\u5f20\u52a8\u56fe \u4f5c\u8005\u4e4b\u610f\u5927\u6982\u5c31\u662f\uff1a\u8fd9\u4e2a\u5c0f\u767d\u70b9\uff0c\u5c31\u50cf\u624b\u67c4\u5728\u5c4f\u5e55\u4e0a\u5bf9\u5e94\u7684\u56fe\u6807 \u5c0f\u767d\u70b9\u50cf\u662f\u5728\u5199\u5b57\uff0c\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u5c31\u662f\u628a\u5b83\u7684\u8def\u5f84\u8bb0\u5f55\u4e0b\u6765","title":"part2"},{"location":"PythonChallenge/Solutions/22_emulate/#part3","text":"\u83b7\u53d6\u56fe\u50cf\u7684\u5e27\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 except : break print ( frame ) gif . close () >>> 133 \u8be5\u56fe\u6709 133 \u5e27","title":"part3"},{"location":"PythonChallenge/Solutions/22_emulate/#part4","text":"\u8bb0\u5f55\u5c0f\u767d\u70b9\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 x , y , _ , _ = gif . getbbox () print ( f \"( { x : >3 } , { y : >3 } )\" ) except : break gif . close () >>> ( 100 , 100 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 102 , 102 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 98 ) ... # \u540e\u9762\u7701\u7565 \u770b\u4e0a\u53bb\u5f88\u50cf\u7b14\u753b\uff0c\u4e00\u7ad6\u3001\u4e00\u6a2a\u7684\uff0c\u800c\u4e14\u662f\u76f8\u5bf9\u56fe\u7247\u4e2d\u5fc3\u5728\u52a8 \u8bb0\u5f55\u76f8\u5bf9\u4e2d\u5fc3\u7684\u8ddd\u79bb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () print ( list ( res )) print ( '=' * 30 ) print ( set ( res )) >>> [( 0 , 0 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( - 2 , - 2 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ... ============================== {( 0 , 0 ), ( - 2 , 0 ), ( 2 , 2 ), ( - 2 , 2 ), ( 2 , - 2 ), ( 2 , 0 ), ( - 2 , - 2 ), ( 0 , - 2 ), ( 0 , 2 )} \u9664\u53bb (0, 0) \uff0c\u5171\u6709\u516b\u79cd\u65b9\u5411\uff0c\u8fd9\u6b63\u5bf9\u5e94\u624b\u67c4\u7684\u516b\u4e2a\u65b9\u5411","title":"part4"},{"location":"PythonChallenge/Solutions/22_emulate/#part5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst def get_script1 ( lst ): white = 255 side = 300 x = y = side // 2 img = Image . new ( 'P' , ( side , side ), 0 ) for dx , dy in lst : x += dx y += dy img . putpixel (( x , y ), white ) img . show () def get_script2 ( lst ): cnt = 0 for t in lst : if t == ( 0 , 0 ): cnt += 1 print ( cnt ) def get_script3 ( lst ): white = 255 x = y = 50 img = Image . new ( 'P' , ( 500 , 100 ), 0 ) cnt = 0 for dx , dy in lst : if dx == dy == 0 : x = 50 + cnt * 100 y = 50 cnt += 1 else : x -= dx y -= dy img . putpixel (( x , y ), white ) img . save ( \"22_result.gif\" ) if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () # get_script1(res) # \u5b57\u6bcd\u91cd\u53e0\u5728\u4e00\u8d77 # get_script2(res) # 5 -> 5 letters get_script3 ( res )","title":"part5"},{"location":"PythonChallenge/Solutions/22_emulate/#5","text":"http://www.pythonchallenge.com/pc/hex/bonus.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/","text":"\u7b2c 23 \u9898 what is this module? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/bonus.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca TODO: do you owe someone an apology? now it is a good time to tell him that you are sorry. Please show good manners although it has nothing to do with this level. it can't find it. this is an undocumented module. va gur snpr bs jung?' 4. \u89e3\u6cd5 Link part1 Link \u8bf4\u5230 apology \uff0c\u7b2c 19 \u9898\u4ee4\u4eba\u5370\u8c61\u6df1\u523b \u89e3\u9898\u8fc7\u7a0b\u4e2d\u751f\u6210\u4e86\u4e00\u4e2a indian.wav \uff0c\u6709\u4e00\u58f0 sorry \u8fdb\u5165\u65b0\u9875\u9762\u65f6\uff0c Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u6709\u4e00\u53e5 \"Now you should apologize...\" \u90a3\u4e00\u9898\u6709 Leopold \u7684\u90ae\u7bb1\u5730\u5740\uff1a leopold.moz@pythonchallenge.com \u53d1\u4e00\u5c01\u9053\u6b49\u4fe1\u5427\uff0c\u867d\u7136\u4e0a\u9762\u8bf4 it has nothing to do with this level \uff0c\u663e\u7136\u8fd9\u662f\u540e\u9762\u7684\u9898\u76ee\u7684\u7ebf\u7d22 \u5f88\u5feb\u5c31\u5f97\u5230\u4e86 Leopold \u7684\u56de\u590d Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to? part2 Link this is an undocumented module this \u662f\u53cc\u5173\u8bed\uff0c\u9664\u4e86\u539f\u6765\u7684\u610f\u601d\uff0c\u8fd8\u4ee3\u8868 this \u6a21\u5757 \u8fd9\u4e2a\u6a21\u5757\u6b63\u597d\u6ca1\u6709\u8bf4\u660e\u6587\u6863 \u641c\u7d22\u5f97\u77e5\u8fd9\u4e2a\u7f51\u9875\uff1a https://legacy.python.org/dev/peps/pep-0020/ \u8be5\u7f51\u9875\u9898\u4e3a\uff1a PEP 20 -- The Zen of Python \uff0c\u5373\u201cPython \u4e4b\u7985\u201d \u62c9\u5012\u7f51\u9875\u4e0b\u65b9\uff0c\u53ef\u4ee5\u770b\u89c1\u201c\u590d\u6d3b\u8282\u5f69\u86cb\u201d Easter Egg >>> import this \u5bfc\u5165\u6a21\u5757\uff0c\u4f1a\u7acb\u5373\u8f93\u51fa\u201cPython \u4e4b\u7985\u201d >>> import this The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! >>> part3 Link \u8fd9\u91cc\u6709 Python2 \u7684 this \u6e90\u7801\uff1a https://svn.python.org/projects/python/trunk/Lib/this.py \u5728\u5b89\u88c5\u76ee\u5f55\u4e5f\u80fd\u627e\u5230\uff0c\u6bd4\u5982\u6211\u7684\u662f\u5728 E:\\Anaconda3\\Lib\\this.py \u82e5\u53ea\u88c5\u4e86 Python\uff0c\u53ef\u80fd\u7684\u6587\u4ef6\u8def\u5f84\u662f\uff1a C:\\Users\\YourName\\AppData\\Local\\Programs\\Python\\Python38-64\\Lib\\this.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 s = \"\"\"Gur Mra bs Clguba, ol Gvz Crgref Ornhgvshy vf orggre guna htyl. Rkcyvpvg vf orggre guna vzcyvpvg. Fvzcyr vf orggre guna pbzcyrk. Pbzcyrk vf orggre guna pbzcyvpngrq. Syng vf orggre guna arfgrq. Fcnefr vf orggre guna qrafr. Ernqnovyvgl pbhagf. Fcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf. Nygubhtu cenpgvpnyvgl orngf chevgl. Reebef fubhyq arire cnff fvyragyl. Hayrff rkcyvpvgyl fvyraprq. Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff. Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg. Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu. Abj vf orggre guna arire. Nygubhtu arire vf bsgra orggre guna *evtug* abj. Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn. Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn. Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!\"\"\" d = {} for c in ( 65 , 97 ): for i in range ( 26 ): d [ chr ( i + c )] = chr (( i + 13 ) % 26 + c ) print ( \"\" . join ([ d . get ( c , c ) for c in s ])) \u501f\u7528 this.py \u7684\u5b57\u5178 >>> import this ... # \u7701\u7565\u82e5\u5e72 >>> s = \"va gur snpr bs jung?\" >>> '' . join ([ this . d . get ( c , c ) for c in s ]) 'in the face of what?' >>> \u67e5\u770b\u539f\u6587\u540e\u5f97\u77e5\uff1a In the face of ambiguity 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/ambiguity.html","title":"23 what is this mudule"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#23-what-is-this-module","text":"","title":"\u7b2c 23 \u9898 what is this module?"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#1","text":">>> http://www.pythonchallenge.com/pc/hex/bonus.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca TODO: do you owe someone an apology? now it is a good time to tell him that you are sorry. Please show good manners although it has nothing to do with this level. it can't find it. this is an undocumented module. va gur snpr bs jung?'","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#part1","text":"\u8bf4\u5230 apology \uff0c\u7b2c 19 \u9898\u4ee4\u4eba\u5370\u8c61\u6df1\u523b \u89e3\u9898\u8fc7\u7a0b\u4e2d\u751f\u6210\u4e86\u4e00\u4e2a indian.wav \uff0c\u6709\u4e00\u58f0 sorry \u8fdb\u5165\u65b0\u9875\u9762\u65f6\uff0c Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u6709\u4e00\u53e5 \"Now you should apologize...\" \u90a3\u4e00\u9898\u6709 Leopold \u7684\u90ae\u7bb1\u5730\u5740\uff1a leopold.moz@pythonchallenge.com \u53d1\u4e00\u5c01\u9053\u6b49\u4fe1\u5427\uff0c\u867d\u7136\u4e0a\u9762\u8bf4 it has nothing to do with this level \uff0c\u663e\u7136\u8fd9\u662f\u540e\u9762\u7684\u9898\u76ee\u7684\u7ebf\u7d22 \u5f88\u5feb\u5c31\u5f97\u5230\u4e86 Leopold \u7684\u56de\u590d Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to?","title":"part1"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#part2","text":"this is an undocumented module this \u662f\u53cc\u5173\u8bed\uff0c\u9664\u4e86\u539f\u6765\u7684\u610f\u601d\uff0c\u8fd8\u4ee3\u8868 this \u6a21\u5757 \u8fd9\u4e2a\u6a21\u5757\u6b63\u597d\u6ca1\u6709\u8bf4\u660e\u6587\u6863 \u641c\u7d22\u5f97\u77e5\u8fd9\u4e2a\u7f51\u9875\uff1a https://legacy.python.org/dev/peps/pep-0020/ \u8be5\u7f51\u9875\u9898\u4e3a\uff1a PEP 20 -- The Zen of Python \uff0c\u5373\u201cPython \u4e4b\u7985\u201d \u62c9\u5012\u7f51\u9875\u4e0b\u65b9\uff0c\u53ef\u4ee5\u770b\u89c1\u201c\u590d\u6d3b\u8282\u5f69\u86cb\u201d Easter Egg >>> import this \u5bfc\u5165\u6a21\u5757\uff0c\u4f1a\u7acb\u5373\u8f93\u51fa\u201cPython \u4e4b\u7985\u201d >>> import this The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! >>>","title":"part2"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#part3","text":"\u8fd9\u91cc\u6709 Python2 \u7684 this \u6e90\u7801\uff1a https://svn.python.org/projects/python/trunk/Lib/this.py \u5728\u5b89\u88c5\u76ee\u5f55\u4e5f\u80fd\u627e\u5230\uff0c\u6bd4\u5982\u6211\u7684\u662f\u5728 E:\\Anaconda3\\Lib\\this.py \u82e5\u53ea\u88c5\u4e86 Python\uff0c\u53ef\u80fd\u7684\u6587\u4ef6\u8def\u5f84\u662f\uff1a C:\\Users\\YourName\\AppData\\Local\\Programs\\Python\\Python38-64\\Lib\\this.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 s = \"\"\"Gur Mra bs Clguba, ol Gvz Crgref Ornhgvshy vf orggre guna htyl. Rkcyvpvg vf orggre guna vzcyvpvg. Fvzcyr vf orggre guna pbzcyrk. Pbzcyrk vf orggre guna pbzcyvpngrq. Syng vf orggre guna arfgrq. Fcnefr vf orggre guna qrafr. Ernqnovyvgl pbhagf. Fcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf. Nygubhtu cenpgvpnyvgl orngf chevgl. Reebef fubhyq arire cnff fvyragyl. Hayrff rkcyvpvgyl fvyraprq. Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff. Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg. Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu. Abj vf orggre guna arire. Nygubhtu arire vf bsgra orggre guna *evtug* abj. Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn. Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn. Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!\"\"\" d = {} for c in ( 65 , 97 ): for i in range ( 26 ): d [ chr ( i + c )] = chr (( i + 13 ) % 26 + c ) print ( \"\" . join ([ d . get ( c , c ) for c in s ])) \u501f\u7528 this.py \u7684\u5b57\u5178 >>> import this ... # \u7701\u7565\u82e5\u5e72 >>> s = \"va gur snpr bs jung?\" >>> '' . join ([ this . d . get ( c , c ) for c in s ]) 'in the face of what?' >>> \u67e5\u770b\u539f\u6587\u540e\u5f97\u77e5\uff1a In the face of ambiguity","title":"part3"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#5","text":"http://www.pythonchallenge.com/pc/hex/ambiguity.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/","text":"\u7b2c 24 \u9898 from top to bottom Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/ambiguity.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u5c06\u56fe\u7247\u653e\u5927\u540e\uff0c\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u5f20\u5de8\u5927\u7684\u201c\u8ff7\u5bab\u56fe\u201d \u6807\u9898\u8bf4 from top to bottom \uff0c\u8bf4\u660e\u5165\u53e3\u5728\u4e0a\u65b9\uff0c\u51fa\u53e3\u5728\u4e0b\u65b9 \u4e00\u5f00\u59cb\uff0c\u6211\u4e0b\u610f\u8bc6\u5730\u8ba4\u4e3a\u9ed1\u8272\u7684\u662f\u5899\uff0c\u5b9e\u9645\u4e0a\uff0c\u9ed1\u8272\u7684\u662f\u8def\u5f84 \u6b64\u5916\uff0c\u4ed4\u7ec6\u770b\u8fd8\u80fd\u53d1\u73b0\uff1a\u8def\u5f84\u5e76\u975e\u5b8c\u5168\u662f\u9ed1\u8272\uff0c\u4e2d\u95f4\u8fd8\u6df7\u4e00\u4e9b\u201c\u7ea2\u70b9\u201d \u653e\u5927\u56fe\u7247\u53ef\u4ee5\u53d1\u73b0\u5165\u53e3\u5728\u53f3\u4e0a\u89d2 \u51fa\u53e3\u5728\u5de6\u4e0b\u89d2 \u5f53\u7136\uff0c\u4f7f\u7528 Python \u89e3\u5f97\u5165\u53e3\u4e0e\u51fa\u53e3\u66f4\u6709\u8bf4\u670d\u529b >>> from PIL import Image >>> maze = Image . open ( \"maze.png\" ) >>> w , h = maze . size >>> w , h ( 641 , 641 ) >>> for i in range ( w ): print ( maze . getpixel (( i , 0 ))) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u5165\u53e3\uff0c\u7b2c\u4e00\u884c\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) >>> for i in range ( w ): print ( maze . getpixel (( i , h - 1 ))) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u51fa\u53e3\uff0c\u6700\u540e\u7b2c\u4e00\u884c\uff0c\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) >>> part2 Link \u4f7f\u7528 BFS \u4ece\u51fa\u53e3\u53cd\u63a8\u8def\u5f84\uff0c\u5e76\u7ed8\u5236\u51fa\u8def\u7ebf\uff08\u4e5f\u6709\u522b\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 A-Star\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from PIL import Image def find_way ( img , entrance , export ): w , h = img . size pix = img . load () right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] # \u7b2c 14 \u9898\u7684\u65b9\u6cd5\u4e8c\u4e5f\u662f\u8fd9\u79cd\u601d\u8def\uff0c\u4f46\u987a\u5e8f\u4e0d\u540c try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) print ( len ( right_way )) break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( img , way , entrance , export ): new_img = img . copy () t = ( 0 , 255 , 0 , 255 ) # green if way : p = entrance while p != export : new_img . putpixel ( p , t ) p = way [ p ] new_img . putpixel ( p , t ) new_img . save ( \"24_maze_route.png\" ) if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( img , entrance , export ) reproduce ( img , way , entrance , export ) \u5f97\u5230\u56fe\u7247 part3 Link \u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f 0 \uff0c\u8fd9\u6837\u7684\u70b9\u90fd\u662f\u5728\u8def\u5f84\u7684\u5076\u6570\u70b9 (0, 2, ...) \u67e5\u770b\u975e\u9ed1\u8272\u50cf\u7d20\u70b9\u7684\u503c\uff0c\u5373\u8def\u5f84\u6570\u4e3a\u5947\u6570\u7684\u70b9\u7684\u50cf\u7d20\u503c >>> maze . getpixel (( 639 , 1 )) # \u5165\u53e3 (639, 0) \u7684\u4e0b\u4e00\u4e2a\u70b9 ( 80 , 0 , 0 , 255 ) >>> maze . getpixel (( 639 , 3 )) ( 75 , 0 , 0 , 255 ) >>> chr ( 80 ) 'P' >>> chr ( 75 ) 'K' >>> \u53d1\u73b0\u4ee5 PK \u5f00\u5934\uff0c\u6709\u4e86\u7b2c 20 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u8fd9\u662f zip \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u5c06\u8fd9\u4e9b\u6570\u636e\u5199\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 from PIL import Image def find_way ( w , h , pix , entrance , export ): right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) # print(len(right_way)) # 194941 break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( pix , way , entrance , export ): t = ( 0 , 255 , 0 , 255 ) if way : p = entrance data = [] while p != export : data . append ( pix [ p [ 0 ], p [ 1 ]][ 0 ]) p = way [ p ] with open ( \"maze.zip\" , \"wb\" ) as f : f . write ( bytes ( data [ 1 :: 2 ])) # \u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f0\uff0c\u800c\u4e14\u90fd\u662f\u5728\u5076\u6570\u5b57\u8282 if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) w , h = img . size pix = img . load () entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( w , h , pix , entrance , export ) reproduce ( pix , way , entrance , export ) \u5f97\u5230\u4e00\u4e2a\u538b\u7f29\u5305 \u89e3\u538b\u540e\u6709\u4e00\u5f20\u56fe\u7247\uff08\u5982\u4e0b\uff09\u548c\u53e6\u4e00\u4e2a\u540d\u4e3a mybroken.zip \u7684\u538b\u7f29\u5305 lake \u4e3a\u89e3 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/lake.html","title":"24 from top to bottom"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#24-from-top-to-bottom","text":"","title":"\u7b2c 24 \u9898  from top to bottom"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#1","text":">>> http://www.pythonchallenge.com/pc/hex/ambiguity.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#part1","text":"\u5c06\u56fe\u7247\u653e\u5927\u540e\uff0c\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u5f20\u5de8\u5927\u7684\u201c\u8ff7\u5bab\u56fe\u201d \u6807\u9898\u8bf4 from top to bottom \uff0c\u8bf4\u660e\u5165\u53e3\u5728\u4e0a\u65b9\uff0c\u51fa\u53e3\u5728\u4e0b\u65b9 \u4e00\u5f00\u59cb\uff0c\u6211\u4e0b\u610f\u8bc6\u5730\u8ba4\u4e3a\u9ed1\u8272\u7684\u662f\u5899\uff0c\u5b9e\u9645\u4e0a\uff0c\u9ed1\u8272\u7684\u662f\u8def\u5f84 \u6b64\u5916\uff0c\u4ed4\u7ec6\u770b\u8fd8\u80fd\u53d1\u73b0\uff1a\u8def\u5f84\u5e76\u975e\u5b8c\u5168\u662f\u9ed1\u8272\uff0c\u4e2d\u95f4\u8fd8\u6df7\u4e00\u4e9b\u201c\u7ea2\u70b9\u201d \u653e\u5927\u56fe\u7247\u53ef\u4ee5\u53d1\u73b0\u5165\u53e3\u5728\u53f3\u4e0a\u89d2 \u51fa\u53e3\u5728\u5de6\u4e0b\u89d2 \u5f53\u7136\uff0c\u4f7f\u7528 Python \u89e3\u5f97\u5165\u53e3\u4e0e\u51fa\u53e3\u66f4\u6709\u8bf4\u670d\u529b >>> from PIL import Image >>> maze = Image . open ( \"maze.png\" ) >>> w , h = maze . size >>> w , h ( 641 , 641 ) >>> for i in range ( w ): print ( maze . getpixel (( i , 0 ))) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u5165\u53e3\uff0c\u7b2c\u4e00\u884c\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) >>> for i in range ( w ): print ( maze . getpixel (( i , h - 1 ))) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u51fa\u53e3\uff0c\u6700\u540e\u7b2c\u4e00\u884c\uff0c\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) >>>","title":"part1"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#part2","text":"\u4f7f\u7528 BFS \u4ece\u51fa\u53e3\u53cd\u63a8\u8def\u5f84\uff0c\u5e76\u7ed8\u5236\u51fa\u8def\u7ebf\uff08\u4e5f\u6709\u522b\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 A-Star\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from PIL import Image def find_way ( img , entrance , export ): w , h = img . size pix = img . load () right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] # \u7b2c 14 \u9898\u7684\u65b9\u6cd5\u4e8c\u4e5f\u662f\u8fd9\u79cd\u601d\u8def\uff0c\u4f46\u987a\u5e8f\u4e0d\u540c try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) print ( len ( right_way )) break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( img , way , entrance , export ): new_img = img . copy () t = ( 0 , 255 , 0 , 255 ) # green if way : p = entrance while p != export : new_img . putpixel ( p , t ) p = way [ p ] new_img . putpixel ( p , t ) new_img . save ( \"24_maze_route.png\" ) if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( img , entrance , export ) reproduce ( img , way , entrance , export ) \u5f97\u5230\u56fe\u7247","title":"part2"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#part3","text":"\u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f 0 \uff0c\u8fd9\u6837\u7684\u70b9\u90fd\u662f\u5728\u8def\u5f84\u7684\u5076\u6570\u70b9 (0, 2, ...) \u67e5\u770b\u975e\u9ed1\u8272\u50cf\u7d20\u70b9\u7684\u503c\uff0c\u5373\u8def\u5f84\u6570\u4e3a\u5947\u6570\u7684\u70b9\u7684\u50cf\u7d20\u503c >>> maze . getpixel (( 639 , 1 )) # \u5165\u53e3 (639, 0) \u7684\u4e0b\u4e00\u4e2a\u70b9 ( 80 , 0 , 0 , 255 ) >>> maze . getpixel (( 639 , 3 )) ( 75 , 0 , 0 , 255 ) >>> chr ( 80 ) 'P' >>> chr ( 75 ) 'K' >>> \u53d1\u73b0\u4ee5 PK \u5f00\u5934\uff0c\u6709\u4e86\u7b2c 20 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u8fd9\u662f zip \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u5c06\u8fd9\u4e9b\u6570\u636e\u5199\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 from PIL import Image def find_way ( w , h , pix , entrance , export ): right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) # print(len(right_way)) # 194941 break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( pix , way , entrance , export ): t = ( 0 , 255 , 0 , 255 ) if way : p = entrance data = [] while p != export : data . append ( pix [ p [ 0 ], p [ 1 ]][ 0 ]) p = way [ p ] with open ( \"maze.zip\" , \"wb\" ) as f : f . write ( bytes ( data [ 1 :: 2 ])) # \u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f0\uff0c\u800c\u4e14\u90fd\u662f\u5728\u5076\u6570\u5b57\u8282 if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) w , h = img . size pix = img . load () entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( w , h , pix , entrance , export ) reproduce ( pix , way , entrance , export ) \u5f97\u5230\u4e00\u4e2a\u538b\u7f29\u5305 \u89e3\u538b\u540e\u6709\u4e00\u5f20\u56fe\u7247\uff08\u5982\u4e0b\uff09\u548c\u53e6\u4e00\u4e2a\u540d\u4e3a mybroken.zip \u7684\u538b\u7f29\u5305 lake \u4e3a\u89e3","title":"part3"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#5","text":"http://www.pythonchallenge.com/pc/hex/lake.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/","text":"\u7b2c 25 \u9898 imagine how they sound Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/lake.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca can you see the waves? 4. \u89e3\u6cd5 Link part1 Link \u8fd9\u4e00\u9898\u7684\u56fe\u7247\u540d\u4e3a lake1.jpg \uff0c\u6309\u4e4b\u524d\u7684\u89c4\u5f8b\uff08\u5982\u7b2c 12 \u9898\uff09\uff0c\u53ef\u80fd\u6709 lake2, lake3, ... \u6807\u9898\u662f\u5728\u63d0\u793a\u4f7f\u7528 Python \u7684 wave \u5e93 \uff08\u5982\u7b2c 19 \u9898\uff0c summary \u4e2d\u6709\u7528\u5230 wave \u6a21\u5757\uff09 \u5148\u5c06\u7f51\u5740\u7684 lake.html \u6539\u4e3a lake1.wav \u8bd5\u8bd5 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u63d0\u793a waves \uff0c\u8fd9\u8bf4\u660e\u53ef\u80fd\u6709\u8bb8\u591a .wav \uff0c\u6211\u8bd5\u4e86 lake2.wav \u679c\u7136\u6709 part2 Link \u8fd9\u662f\u7b2c 25 \u9898\uff0c\u800c\u4e14\u56fe\u4e2d\u7684\u62fc\u56fe\u5757\u4e5f\u6709 25 \u5757\uff0c\u8bf4\u4e0d\u5b9a\u6709 25 \u4e2a .wav \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from requests import get def download_one ( filename ): url = \"http://www.pythonchallenge.com/pc/hex/\" + filename res = get ( url , auth = ( \"butter\" , \"fly\" )) if res . ok : f = open ( filename , \"wb\" ) f . write ( res . content ) f . close () return True else : return False def download_all (): n = 1 while True : filename = f \"lake { n } .wav\" if download_one ( filename ): print ( filename , \"download!\" ) n += 1 else : print ( \"nothing more.\" ) return if __name__ == \"__main__\" : download_all () \u4e0a\u9762\u7684\u65b9\u6cd5\u80fd\u4e0b\uff0c\u4f46\u4e2d\u9014\u53ef\u80fd\u4f1a\u5361 \u52a0\u5165\u8bf7\u6c42\u5934\uff0c\u5e76\u5c06\u5176\u4e0b\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\u5939\u5185 1 2 3 4 5 6 7 8 9 10 11 12 import requests req = requests . Session () header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/\" for i in range ( 1 , 26 ): name = f \"lake { i } .wav\" res = req . get ( url + name , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\ {} \" . format ( name ), \"wb\" ) as f : f . write ( res . content ) print ( name , \"has been downloaded!\" ) \u5982\u679c\u4e2d\u9014\u8fd8\u662f\u5361\u4e86\uff0c\u53ef\u4ee5\u5173\u95ed\u7a0b\u5e8f\uff0c\u4fee\u6539\u5faa\u73af\u8d77\u59cb\u6570\u636e\uff0c\u7ee7\u7eed\u4e0b\u8f7d part2 Link \u968f\u673a\u542c\u51e0\u4e2a\u97f3\u9891\uff0c\u6bd4\u8f83\u523a\u8033 \u53f3\u952e\u67e5\u770b\u4e00\u4e0b\u5c5e\u6027\uff0c\u53d1\u73b0\u5176\u5927\u5c0f\u4e3a 10,844 bytes \u4ece\u7b2c 19 \u9898\u5b66\u5230\uff1a .wav \u7684\u6587\u4ef6\u5934\u5927\u5c0f\u4e3a 44 bytes \u62ff Python \u7684\u4ea4\u4e92\u73af\u5883\u5f53\u4e00\u4e0b\u8ba1\u7b97\u5668 >>> from math import sqrt >>> sqrt (( 10844 - 44 ) // 3 ) # \u6bcf\u4e2a\u989c\u8272\u5360\u4e09\u4e2a\u5b57\u8282 (R, G, B) 60.0 >>> \u53ef\u4ee5\u5927\u80c6\u731c\u6d4b\u6bcf\u4e2a\u97f3\u9891\u5747\u53ef\u5316\u4e3a 60x60 \u7684\u56fe\u7247\uff0c\u7136\u540e\u50cf\u9898\u56fe\u4e00\u6837\u62fc\u6210 300x300 \u7684\u5927\u56fe 1 2 3 4 5 6 7 8 9 10 from PIL import Image filename = \"lake1.wav\" f = open ( filename , \"rb\" ) data = f . read ()[ 44 :] f . close () img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( data ) img . save ( \"lake_01.jpg\" ) img . close () \u5f97\u5230\u7b2c\u4e00\u5f20\u56fe\u7247 part3 Link \u751f\u6210 25 \u5f20\u56fe\u7247\uff08\u4e0d\u5fc5\u4e00\u4e00\u4fdd\u5b58\uff09\uff0c\u5e76\u5c06\u5176\u4ee5 5x5 \u7684\u6392\u5217\u62fc\u6210\u4e00\u5e45\u56fe\u7247 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from PIL import Image def wav2img ( filename ): with open ( filename , \"rb\" ) as f : img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( f . read ()[ 44 :]) return img def jigsaw_puzzle (): jigsaw = Image . new ( \"RGB\" , ( 300 , 300 )) for i in range ( 25 ): row , col = divmod ( i , 5 ) # div + mod piece = wav2img ( f \"lake { i + 1 } .wav\" ) jigsaw . paste ( piece , ( col * 60 , row * 60 )) jigsaw . save ( \"25_result.jpg\" ) if __name__ == \"__main__\" : jigsaw_puzzle () \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u89e3\uff1a decent 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/decent.html","title":"25 imagine how they sound"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#25-imagine-how-they-sound","text":"","title":"\u7b2c 25 \u9898 imagine how they sound"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#1","text":">>> http://www.pythonchallenge.com/pc/hex/lake.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca can you see the waves?","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part1","text":"\u8fd9\u4e00\u9898\u7684\u56fe\u7247\u540d\u4e3a lake1.jpg \uff0c\u6309\u4e4b\u524d\u7684\u89c4\u5f8b\uff08\u5982\u7b2c 12 \u9898\uff09\uff0c\u53ef\u80fd\u6709 lake2, lake3, ... \u6807\u9898\u662f\u5728\u63d0\u793a\u4f7f\u7528 Python \u7684 wave \u5e93 \uff08\u5982\u7b2c 19 \u9898\uff0c summary \u4e2d\u6709\u7528\u5230 wave \u6a21\u5757\uff09 \u5148\u5c06\u7f51\u5740\u7684 lake.html \u6539\u4e3a lake1.wav \u8bd5\u8bd5 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u63d0\u793a waves \uff0c\u8fd9\u8bf4\u660e\u53ef\u80fd\u6709\u8bb8\u591a .wav \uff0c\u6211\u8bd5\u4e86 lake2.wav \u679c\u7136\u6709","title":"part1"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part2","text":"\u8fd9\u662f\u7b2c 25 \u9898\uff0c\u800c\u4e14\u56fe\u4e2d\u7684\u62fc\u56fe\u5757\u4e5f\u6709 25 \u5757\uff0c\u8bf4\u4e0d\u5b9a\u6709 25 \u4e2a .wav \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from requests import get def download_one ( filename ): url = \"http://www.pythonchallenge.com/pc/hex/\" + filename res = get ( url , auth = ( \"butter\" , \"fly\" )) if res . ok : f = open ( filename , \"wb\" ) f . write ( res . content ) f . close () return True else : return False def download_all (): n = 1 while True : filename = f \"lake { n } .wav\" if download_one ( filename ): print ( filename , \"download!\" ) n += 1 else : print ( \"nothing more.\" ) return if __name__ == \"__main__\" : download_all () \u4e0a\u9762\u7684\u65b9\u6cd5\u80fd\u4e0b\uff0c\u4f46\u4e2d\u9014\u53ef\u80fd\u4f1a\u5361 \u52a0\u5165\u8bf7\u6c42\u5934\uff0c\u5e76\u5c06\u5176\u4e0b\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\u5939\u5185 1 2 3 4 5 6 7 8 9 10 11 12 import requests req = requests . Session () header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/\" for i in range ( 1 , 26 ): name = f \"lake { i } .wav\" res = req . get ( url + name , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\ {} \" . format ( name ), \"wb\" ) as f : f . write ( res . content ) print ( name , \"has been downloaded!\" ) \u5982\u679c\u4e2d\u9014\u8fd8\u662f\u5361\u4e86\uff0c\u53ef\u4ee5\u5173\u95ed\u7a0b\u5e8f\uff0c\u4fee\u6539\u5faa\u73af\u8d77\u59cb\u6570\u636e\uff0c\u7ee7\u7eed\u4e0b\u8f7d","title":"part2"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part2_1","text":"\u968f\u673a\u542c\u51e0\u4e2a\u97f3\u9891\uff0c\u6bd4\u8f83\u523a\u8033 \u53f3\u952e\u67e5\u770b\u4e00\u4e0b\u5c5e\u6027\uff0c\u53d1\u73b0\u5176\u5927\u5c0f\u4e3a 10,844 bytes \u4ece\u7b2c 19 \u9898\u5b66\u5230\uff1a .wav \u7684\u6587\u4ef6\u5934\u5927\u5c0f\u4e3a 44 bytes \u62ff Python \u7684\u4ea4\u4e92\u73af\u5883\u5f53\u4e00\u4e0b\u8ba1\u7b97\u5668 >>> from math import sqrt >>> sqrt (( 10844 - 44 ) // 3 ) # \u6bcf\u4e2a\u989c\u8272\u5360\u4e09\u4e2a\u5b57\u8282 (R, G, B) 60.0 >>> \u53ef\u4ee5\u5927\u80c6\u731c\u6d4b\u6bcf\u4e2a\u97f3\u9891\u5747\u53ef\u5316\u4e3a 60x60 \u7684\u56fe\u7247\uff0c\u7136\u540e\u50cf\u9898\u56fe\u4e00\u6837\u62fc\u6210 300x300 \u7684\u5927\u56fe 1 2 3 4 5 6 7 8 9 10 from PIL import Image filename = \"lake1.wav\" f = open ( filename , \"rb\" ) data = f . read ()[ 44 :] f . close () img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( data ) img . save ( \"lake_01.jpg\" ) img . close () \u5f97\u5230\u7b2c\u4e00\u5f20\u56fe\u7247","title":"part2"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part3","text":"\u751f\u6210 25 \u5f20\u56fe\u7247\uff08\u4e0d\u5fc5\u4e00\u4e00\u4fdd\u5b58\uff09\uff0c\u5e76\u5c06\u5176\u4ee5 5x5 \u7684\u6392\u5217\u62fc\u6210\u4e00\u5e45\u56fe\u7247 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from PIL import Image def wav2img ( filename ): with open ( filename , \"rb\" ) as f : img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( f . read ()[ 44 :]) return img def jigsaw_puzzle (): jigsaw = Image . new ( \"RGB\" , ( 300 , 300 )) for i in range ( 25 ): row , col = divmod ( i , 5 ) # div + mod piece = wav2img ( f \"lake { i + 1 } .wav\" ) jigsaw . paste ( piece , ( col * 60 , row * 60 )) jigsaw . save ( \"25_result.jpg\" ) if __name__ == \"__main__\" : jigsaw_puzzle () \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u89e3\uff1a decent","title":"part3"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#5","text":"http://www.pythonchallenge.com/pc/hex/decent.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/","text":"\u7b2c 26 \u9898 be a man - apologize! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/decent.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 Hurry up, I'm missing the boat \u7f51\u9875\u6e90\u7801 you've got his e-mail Join us at the IRC: irc.freenode.net #pythonchallenge 4. \u89e3\u6cd5 Link part1 Link \u7b2c 23 \u9898\u5f00\u5934\uff0c\u6211\u66fe\u7ed9 Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u4e00\u5c01\u201c\u9053\u6b49\u4fe1\u201d \u7b2c 24 \u9898\u7ed3\u5c3e\uff0c\u6211\u4ece maze.zip \u4e2d\u5f97\u5230\u4e86 mybroken.zip \uff0c\u5e76\u5f97\u77e5\u5176\u4e2d\u6709 mybroken.gif \u56de\u987e\u4e00\u4e0b Leopold \u7684\u56de\u4fe1 Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to? Leopold \u5927\u6982\u60f3\u8bf4\uff1a\u4ec5\u4ec5\u4e00\u4e2a\u5b57\u8282\u7684\u6539\u53d8\uff0c\u5c31\u4f1a\u4ee4\u6587\u4ef6\u7684 md5 \u503c\u53d1\u751f\u5de8\u5927\u7684\u53d8\u5316 \u53ef\u4ee5\u63a8\u65ad\uff0c\u538b\u7f29\u6587\u4ef6 mybroken.zip \u88ab\u6539\u52a8\u4e86\u4e00\u4e2a\u5b57\u8282 part2 Link \u67e5\u770b\u538b\u7f29\u5305\u5c5e\u6027\uff0c\u5176\u5927\u5c0f\u4e3a 2,701 bytes \uff08\u53bb\u6389\u4e00\u4e2a\u5b57\u8282\u6070\u80fd\u51d1\u6574\uff0c\u53ef\u60dc\u4e0d\u662f\u8fd9\u6761\u601d\u8def\uff09 \u6309\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\uff0c\u76f4\u5230\u7b97\u51fa\u7684 md5 \u503c\u4e0e Leopold \u7ed9\u51fa\u7684\u4e00\u6837\u4e3a\u6b62 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from hashlib import md5 def repair ( data , md5str ): n = len ( data ) for i in range ( n ): t = data [ i ] for byte in range ( 256 ): data [ i ] = byte if md5 ( data ) . hexdigest () == md5str : print ( \"broken because of bytes\" , i ) return True data [ i ] = t return False if __name__ == \"__main__\" : md5str = \"bbb8b499a0eef99b52c7f13f4e78c24b\" f = open ( \"mybroken.zip\" , \"rb\" ) data = bytearray ( f . read ()) f . close () if repair ( data , md5str ): zf = open ( \"repaired.zip\" , \"wb\" ) zf . write ( data ) zf . close () print ( \"done!\" ) else : print ( \"faild!\" ) >>> broken because of bytes 1234 done ! \u770b\u4e00\u770b\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\u524d\u540e\u7684 md5 \u503c part3 Link \u89e3\u538b\u7f29 repaired.zip \uff0c\u5f97\u5230\u56fe\u7247 mybroken.gif \u5176\u5b9e\u4f7f\u7528 bandzip \u53ef\u4ee5\u76f4\u63a5\u770b\u5230 speed \uff0c\u539f\u56e0\u53ef\u80fd\u548c\u7b2c 12 \u9898\u7684\u7b2c\u56db\u5f20\u7834\u635f\u7684\u56fe\u7247\u76f8\u540c \u6253\u4e0d\u5f00\u7f51\u5740 http://www.pythonchallenge.com/pc/hex/speed.html \u56de\u987e\u63d0\u793a\u8bed\uff1a I'm missing the boat \u548c\u7b2c 23 \u9898\u7684 this \u4e00\u6837\uff0c\u8fd9\u4e5f\u662f\u53cc\u5173\u8bed\uff0c\u610f\u6307 speed \u6f0f\u4e0b\u4e86 boat \u89e3\u4e3a speedboat 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/speedboat.html","title":"26 be a man-apologize"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#26-be-a-man-apologize","text":"","title":"\u7b2c 26 \u9898 be a man - apologize!"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#1","text":">>> http://www.pythonchallenge.com/pc/hex/decent.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#3","text":"\u7f51\u9875\u5185 Hurry up, I'm missing the boat \u7f51\u9875\u6e90\u7801 you've got his e-mail Join us at the IRC: irc.freenode.net #pythonchallenge","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#part1","text":"\u7b2c 23 \u9898\u5f00\u5934\uff0c\u6211\u66fe\u7ed9 Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u4e00\u5c01\u201c\u9053\u6b49\u4fe1\u201d \u7b2c 24 \u9898\u7ed3\u5c3e\uff0c\u6211\u4ece maze.zip \u4e2d\u5f97\u5230\u4e86 mybroken.zip \uff0c\u5e76\u5f97\u77e5\u5176\u4e2d\u6709 mybroken.gif \u56de\u987e\u4e00\u4e0b Leopold \u7684\u56de\u4fe1 Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to? Leopold \u5927\u6982\u60f3\u8bf4\uff1a\u4ec5\u4ec5\u4e00\u4e2a\u5b57\u8282\u7684\u6539\u53d8\uff0c\u5c31\u4f1a\u4ee4\u6587\u4ef6\u7684 md5 \u503c\u53d1\u751f\u5de8\u5927\u7684\u53d8\u5316 \u53ef\u4ee5\u63a8\u65ad\uff0c\u538b\u7f29\u6587\u4ef6 mybroken.zip \u88ab\u6539\u52a8\u4e86\u4e00\u4e2a\u5b57\u8282","title":"part1"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#part2","text":"\u67e5\u770b\u538b\u7f29\u5305\u5c5e\u6027\uff0c\u5176\u5927\u5c0f\u4e3a 2,701 bytes \uff08\u53bb\u6389\u4e00\u4e2a\u5b57\u8282\u6070\u80fd\u51d1\u6574\uff0c\u53ef\u60dc\u4e0d\u662f\u8fd9\u6761\u601d\u8def\uff09 \u6309\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\uff0c\u76f4\u5230\u7b97\u51fa\u7684 md5 \u503c\u4e0e Leopold \u7ed9\u51fa\u7684\u4e00\u6837\u4e3a\u6b62 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from hashlib import md5 def repair ( data , md5str ): n = len ( data ) for i in range ( n ): t = data [ i ] for byte in range ( 256 ): data [ i ] = byte if md5 ( data ) . hexdigest () == md5str : print ( \"broken because of bytes\" , i ) return True data [ i ] = t return False if __name__ == \"__main__\" : md5str = \"bbb8b499a0eef99b52c7f13f4e78c24b\" f = open ( \"mybroken.zip\" , \"rb\" ) data = bytearray ( f . read ()) f . close () if repair ( data , md5str ): zf = open ( \"repaired.zip\" , \"wb\" ) zf . write ( data ) zf . close () print ( \"done!\" ) else : print ( \"faild!\" ) >>> broken because of bytes 1234 done ! \u770b\u4e00\u770b\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\u524d\u540e\u7684 md5 \u503c","title":"part2"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#part3","text":"\u89e3\u538b\u7f29 repaired.zip \uff0c\u5f97\u5230\u56fe\u7247 mybroken.gif \u5176\u5b9e\u4f7f\u7528 bandzip \u53ef\u4ee5\u76f4\u63a5\u770b\u5230 speed \uff0c\u539f\u56e0\u53ef\u80fd\u548c\u7b2c 12 \u9898\u7684\u7b2c\u56db\u5f20\u7834\u635f\u7684\u56fe\u7247\u76f8\u540c \u6253\u4e0d\u5f00\u7f51\u5740 http://www.pythonchallenge.com/pc/hex/speed.html \u56de\u987e\u63d0\u793a\u8bed\uff1a I'm missing the boat \u548c\u7b2c 23 \u9898\u7684 this \u4e00\u6837\uff0c\u8fd9\u4e5f\u662f\u53cc\u5173\u8bed\uff0c\u610f\u6307 speed \u6f0f\u4e0b\u4e86 boat \u89e3\u4e3a speedboat","title":"part3"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#5","text":"http://www.pythonchallenge.com/pc/hex/speedboat.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/27_between_the_tables/","text":"\u7b2c 27 \u9898 between the tables Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/speedboat.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca <img src=\"zigzag.jpg\"> <!-- did you say gif? --> oh, and this is NOT a repeat of 14 4. \u89e3\u6cd5 Link part1 Link \u56fe\u7247\u53ef\u4ee5\u70b9\u8fdb\u53bb\uff0c\u65b0\u7684\u9875\u9762\u7684\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/ring/bell.html \u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff0c\u770b\u6765\u8d26\u53f7\u3001\u5bc6\u7801\u53c8\u4e00\u6b21\u66f4\u65b0\u4e86 \u6309\u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u7684\u7b2c\u4e00\u6761\u63d0\u793a\uff1a\u5c06\u56fe\u7247\u7684\u5730\u5740\u540e\u7f00\u6539\u4e3a gif \u83b7\u5f97\u4e00\u5f20\u7070\u5ea6\u56fe part2 Link \u67e5\u770b\u7070\u5ea6\u56fe\u7684 \u8c03\u8272\u677f\u503c \u4e0e RGB \u503c >>> from PIL import Image >>> img = Image . open ( \"zigzag.gif\" ) >>> data = list ( img . getdata ()) >>> data [: 12 ] [ 215 , 208 , 203 , 12 , 254 , 60 , 139 , 72 , 66 , 189 , 127 , 176 ] >>> >>> >>> colors = img . getpalette () >>> colors [: 9 ] [ 37 , 37 , 37 , 229 , 229 , 229 , 162 , 162 , 162 ] >>> colors = colors [:: 3 ] >>> >>> >>> colors [ 215 ] 208 >>> colors [ 208 ] 203 >>> colors [ 203 ] 12 >>> data \u4e2d\u7684\u5728 colors \u6570\u636e\u50cf \u4e00\u4e2a\u94fe\u8868\uff0c 215 -> 208 -> 203 -> ... \u7b2c 24 \u9898\u4e2d\uff0c\u7528 BFS \u6784\u5efa\u8ff7\u5bab\u8def\u7ebf\u7684\u5b57\u5178 \u9898\u56fe\u4e2d\u5de6\u4e0b\u89d2\u7684 zigzag \u67e5\u770b\u662f\u5426\u5c3e\u5bf9\u5934 >>> data [ - 2 :] [ 250 , 100 ] >>> colors [ 250 ] 100 >>> colors [ 100 ] 93 # not 215 >>> \u56e0\u4e3a\u5c3e\u90e8\u5bf9\u4e0d\u4e0a\uff0c\u6240\u4ee5\u6709\u5fc5\u8981\u67e5\u770b\u4e2d\u95f4\u6709\u6ca1\u6709\u5bf9\u4e0d\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ 1 for i , j in zip ( data1 , data2 ) if i != j ] print ( sum ( lst )) >>> 9465 \u63a2\u7d22\u4e00\u756a\uff0c\u53d1\u73b0\uff1a\u5c06 data1 \u4e0e data2 \u4e0d\u5339\u914d\u4e4b\u5904\u7684\u6570\u636e ASCII \u7801\u8f6c\uff0c\u6709\u719f\u6089\u7684\u8eab\u5f71 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ chr ( i ) for i , j in zip ( data1 , data2 ) if i != j ] print ( lst [: 10 ]) >>> [ 'B' , 'Z' , 'h' , '9' , '1' , 'A' , 'Y' , '&' , 'S' , 'Y' ] part3 Link \u4f7f\u7528 bz2 \u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from bz2 import decompress from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( text ) >>> b '../ring/bell.html del assert repeat raise or class is exec return except print return switch from exec repeat else not while assert or class class break except assert yield finally ../ring/bell.html assert ../ring/bell.html ... \u5206\u6790\u89e3\u7801\u540e\u7684\u5185\u5bb9 \u5305\u542b\u8bb8\u591a Python \u5173\u952e\u5b57\uff08\u51c6\u786e\u5730\u8bf4\uff0c\u662f Python2 \u7684\u5173\u952e\u5b57\uff09 \u6709\u8bb8\u591a\u5185\u5bb9\u662f\u91cd\u590d\u7684 \u5148\u53bb\u5173\u952e\u5b57\uff0c\u518d\u53bb\u91cd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from bz2 import decompress from keyword import iskeyword from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( set ([ w for w in text . split () if not iskeyword ( w . decode ())])) >>> { b 'switch' , b 'exec' , b '../ring/bell.html' , b 'repeat' , b 'print' } \u8bf4\u660e\uff1a\u5728 Python3 \u4e2d\uff0c exec \u4e0e print \u5df2\u7ecf\u4e0d\u662f\u5173\u952e\u5b57\u4e86\uff0c\u6240\u4ee5\u4f5c\u8005\u7684\u539f\u610f\u662f ../ring/bell.html repeat switch \u7ecf\u68c0\u9a8c\uff0c\u8d26\u53f7\u662f repeat \uff0c\u5bc6\u7801\u662f switch 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/bell.html \u8d26\u53f7\uff1a repeat \u5bc6\u7801\uff1a switch","title":"27 between the tables"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#27-between-the-tables","text":"","title":"\u7b2c 27 \u9898 between the tables"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#1","text":">>> http://www.pythonchallenge.com/pc/hex/speedboat.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca <img src=\"zigzag.jpg\"> <!-- did you say gif? --> oh, and this is NOT a repeat of 14","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#part1","text":"\u56fe\u7247\u53ef\u4ee5\u70b9\u8fdb\u53bb\uff0c\u65b0\u7684\u9875\u9762\u7684\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/ring/bell.html \u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff0c\u770b\u6765\u8d26\u53f7\u3001\u5bc6\u7801\u53c8\u4e00\u6b21\u66f4\u65b0\u4e86 \u6309\u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u7684\u7b2c\u4e00\u6761\u63d0\u793a\uff1a\u5c06\u56fe\u7247\u7684\u5730\u5740\u540e\u7f00\u6539\u4e3a gif \u83b7\u5f97\u4e00\u5f20\u7070\u5ea6\u56fe","title":"part1"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#part2","text":"\u67e5\u770b\u7070\u5ea6\u56fe\u7684 \u8c03\u8272\u677f\u503c \u4e0e RGB \u503c >>> from PIL import Image >>> img = Image . open ( \"zigzag.gif\" ) >>> data = list ( img . getdata ()) >>> data [: 12 ] [ 215 , 208 , 203 , 12 , 254 , 60 , 139 , 72 , 66 , 189 , 127 , 176 ] >>> >>> >>> colors = img . getpalette () >>> colors [: 9 ] [ 37 , 37 , 37 , 229 , 229 , 229 , 162 , 162 , 162 ] >>> colors = colors [:: 3 ] >>> >>> >>> colors [ 215 ] 208 >>> colors [ 208 ] 203 >>> colors [ 203 ] 12 >>> data \u4e2d\u7684\u5728 colors \u6570\u636e\u50cf \u4e00\u4e2a\u94fe\u8868\uff0c 215 -> 208 -> 203 -> ... \u7b2c 24 \u9898\u4e2d\uff0c\u7528 BFS \u6784\u5efa\u8ff7\u5bab\u8def\u7ebf\u7684\u5b57\u5178 \u9898\u56fe\u4e2d\u5de6\u4e0b\u89d2\u7684 zigzag \u67e5\u770b\u662f\u5426\u5c3e\u5bf9\u5934 >>> data [ - 2 :] [ 250 , 100 ] >>> colors [ 250 ] 100 >>> colors [ 100 ] 93 # not 215 >>> \u56e0\u4e3a\u5c3e\u90e8\u5bf9\u4e0d\u4e0a\uff0c\u6240\u4ee5\u6709\u5fc5\u8981\u67e5\u770b\u4e2d\u95f4\u6709\u6ca1\u6709\u5bf9\u4e0d\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ 1 for i , j in zip ( data1 , data2 ) if i != j ] print ( sum ( lst )) >>> 9465 \u63a2\u7d22\u4e00\u756a\uff0c\u53d1\u73b0\uff1a\u5c06 data1 \u4e0e data2 \u4e0d\u5339\u914d\u4e4b\u5904\u7684\u6570\u636e ASCII \u7801\u8f6c\uff0c\u6709\u719f\u6089\u7684\u8eab\u5f71 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ chr ( i ) for i , j in zip ( data1 , data2 ) if i != j ] print ( lst [: 10 ]) >>> [ 'B' , 'Z' , 'h' , '9' , '1' , 'A' , 'Y' , '&' , 'S' , 'Y' ]","title":"part2"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#part3","text":"\u4f7f\u7528 bz2 \u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from bz2 import decompress from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( text ) >>> b '../ring/bell.html del assert repeat raise or class is exec return except print return switch from exec repeat else not while assert or class class break except assert yield finally ../ring/bell.html assert ../ring/bell.html ... \u5206\u6790\u89e3\u7801\u540e\u7684\u5185\u5bb9 \u5305\u542b\u8bb8\u591a Python \u5173\u952e\u5b57\uff08\u51c6\u786e\u5730\u8bf4\uff0c\u662f Python2 \u7684\u5173\u952e\u5b57\uff09 \u6709\u8bb8\u591a\u5185\u5bb9\u662f\u91cd\u590d\u7684 \u5148\u53bb\u5173\u952e\u5b57\uff0c\u518d\u53bb\u91cd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from bz2 import decompress from keyword import iskeyword from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( set ([ w for w in text . split () if not iskeyword ( w . decode ())])) >>> { b 'switch' , b 'exec' , b '../ring/bell.html' , b 'repeat' , b 'print' } \u8bf4\u660e\uff1a\u5728 Python3 \u4e2d\uff0c exec \u4e0e print \u5df2\u7ecf\u4e0d\u662f\u5173\u952e\u5b57\u4e86\uff0c\u6240\u4ee5\u4f5c\u8005\u7684\u539f\u610f\u662f ../ring/bell.html repeat switch \u7ecf\u68c0\u9a8c\uff0c\u8d26\u53f7\u662f repeat \uff0c\u5bc6\u7801\u662f switch","title":"part3"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#5","text":"http://www.pythonchallenge.com/pc/ring/bell.html \u8d26\u53f7\uff1a repeat \u5bc6\u7801\uff1a switch","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/","text":"\u7b2c 28 \u9898 many pairs ring-ring Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/bell.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 RING-RING-RING say it out loud 4. \u89e3\u6cd5 Link part1 Link \u6309\u7b2c\u4e00\u6761\u63d0\u793a\uff0c Ring-Ring-Ring \u5730\u591a\u8bfb\u51e0\u904d\uff0c\u50cf\u7b2c 5 \u9898\u7684 pickle \u90a3\u6837\uff0c\u53ef\u4ee5\u8bfb\u51fa green \u4fee\u6539\u7f51\u5740\uff0c\u53bb\u5230\uff1a http://www.pythonchallenge.com/pc/ring/green.html \uff0c\u770b\u5230 yes! green! part2 Link \u67e5\u770b\u56fe\u7247\u662f R, G, B, A \u8fd8\u662f R, G, B \u7684\uff0c\u5373\u68c0\u9a8c\u662f\u5426\u5b58\u5728 \u03b1 \u901a\u9053 >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () ( 'R' , 'G' , 'B' ) >>> \u4f7f\u7528 Image.split() \u5206\u79bb\u989c\u8272\uff0c\u867d\u7136\u53ea\u9700\u8981 green \uff0c\u4f46\u53e6\u4e24\u79cd\u989c\u8272\u4e5f\u4e0d\u59a8\u770b\u4e00\u4e0b >>> red , green , blue = img . split () >>> red . show () >>> green . show () >>> blue . show () >>> green . save ( \"green.png\" ) >>> \u63a2\u7d22 green.png \u7684\u50cf\u7d20\u503c >>> data = list ( green . getdata ()) >>> data [: 10 ] [ 55 , 97 , 73 , 115 , 120 , 78 , 60 , 102 , 76 , 118 ] >>> [ data [ i ] - data [ i + 1 ] for i in range ( 0 , 10 , 2 )] [ - 42 , - 42 , 42 , - 42 , - 42 ] >>> \u9898\u5916\u8bdd\uff1a\u300a\u94f6\u6cb3\u7cfb\u6f2b\u6e38\u6307\u5357\u300b\u91cc\uff0c\u201c\u751f\u547d\u3001\u5b87\u5b99\u4ee5\u53ca\u4efb\u4f55\u4e8b\u60c5\u7684\u7ec8\u6781\u7b54\u6848\u201d\u4e3a 42 \u4e0a\u4e00\u9898\u7684 zigzag \u770b\u4f3c\u7b26\u5408\u89c4\u5f8b\uff0c\u4f46\u5176\u4e2d\u6709 9465 \u4e2a\u4f8b\u5916\uff0c\u8fd9\u4e00\u9898\u4e5f\u662f >>> t = [ abs ( i - j ) for i , j in zip ( data [ 1 :: 2 ], data [:: 2 ]) if abs ( i - j ) != 42 ] >>> t [ 119 , 104 , 111 , 100 , 117 , 110 , 110 , 105 , 116 , 40 , 41 , 46 , 115 , 112 , 108 , 105 , 116 , 40 , 41 , 91 , 48 , 93 , 32 , 63 ] >>> len ( t ) 24 >>> \u8f6c ASCII \uff0c\u7136\u540e\u6253\u5370\u4e00\u4e0b >>> bytes ( t ) b 'whodunnit().split()[0] ?' >>> part3 Link \u5fc5\u5e94\u8bcd\u5178\u4e2d whodunit \u7684\u542b\u4e49 \u3008\u7f8e\u4fda\u3009\u4fa6\u63a2\u5c0f\u8bf4[\u620f\u5267,\u5f71\u7247\u7b49] \u7f51\u7edc\u63a8\u7406\u5c0f\u8bf4\uff1b\u4fa6\u63a2\u6545\u4e8b\uff1b\u8c01\u662f\u51f6\u624b \u6309\u7b2c\u4e8c\u6761\u63d0\u793a say it out loud \uff0c whodunit \u8bfb\u8d77\u6765\u50cf\u662f who done it \u8fd9\u91cc\u662f\u8bf4\u8c01\u521b\u9020\u4e86 Python \uff0c\u5f53\u7136\u662f Guido van Rossum \u6b64\u5916\uff0c Guido \u8bfb\u8d77\u6765\u50cf\u662f gui do \uff1a gui \u53d4\u505a\u4e86\u8fd9\u4e00\u5207 >>> \"Guido van Rossum\" . split ()[ 0 ] 'Guido' >>> \u5927\u5199\u4e0d\u884c\uff0c\u8f6c\u6210\u5c0f\u5199\u5373\u662f\u89e3 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/guido.html","title":"28 many pairs ring-ring"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#28-many-pairs-ring-ring","text":"","title":"\u7b2c 28 \u9898 many pairs ring-ring"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#1","text":">>> http://www.pythonchallenge.com/pc/ring/bell.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#3","text":"\u7f51\u9875\u5185 RING-RING-RING say it out loud","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#part1","text":"\u6309\u7b2c\u4e00\u6761\u63d0\u793a\uff0c Ring-Ring-Ring \u5730\u591a\u8bfb\u51e0\u904d\uff0c\u50cf\u7b2c 5 \u9898\u7684 pickle \u90a3\u6837\uff0c\u53ef\u4ee5\u8bfb\u51fa green \u4fee\u6539\u7f51\u5740\uff0c\u53bb\u5230\uff1a http://www.pythonchallenge.com/pc/ring/green.html \uff0c\u770b\u5230 yes! green!","title":"part1"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#part2","text":"\u67e5\u770b\u56fe\u7247\u662f R, G, B, A \u8fd8\u662f R, G, B \u7684\uff0c\u5373\u68c0\u9a8c\u662f\u5426\u5b58\u5728 \u03b1 \u901a\u9053 >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () ( 'R' , 'G' , 'B' ) >>> \u4f7f\u7528 Image.split() \u5206\u79bb\u989c\u8272\uff0c\u867d\u7136\u53ea\u9700\u8981 green \uff0c\u4f46\u53e6\u4e24\u79cd\u989c\u8272\u4e5f\u4e0d\u59a8\u770b\u4e00\u4e0b >>> red , green , blue = img . split () >>> red . show () >>> green . show () >>> blue . show () >>> green . save ( \"green.png\" ) >>> \u63a2\u7d22 green.png \u7684\u50cf\u7d20\u503c >>> data = list ( green . getdata ()) >>> data [: 10 ] [ 55 , 97 , 73 , 115 , 120 , 78 , 60 , 102 , 76 , 118 ] >>> [ data [ i ] - data [ i + 1 ] for i in range ( 0 , 10 , 2 )] [ - 42 , - 42 , 42 , - 42 , - 42 ] >>> \u9898\u5916\u8bdd\uff1a\u300a\u94f6\u6cb3\u7cfb\u6f2b\u6e38\u6307\u5357\u300b\u91cc\uff0c\u201c\u751f\u547d\u3001\u5b87\u5b99\u4ee5\u53ca\u4efb\u4f55\u4e8b\u60c5\u7684\u7ec8\u6781\u7b54\u6848\u201d\u4e3a 42 \u4e0a\u4e00\u9898\u7684 zigzag \u770b\u4f3c\u7b26\u5408\u89c4\u5f8b\uff0c\u4f46\u5176\u4e2d\u6709 9465 \u4e2a\u4f8b\u5916\uff0c\u8fd9\u4e00\u9898\u4e5f\u662f >>> t = [ abs ( i - j ) for i , j in zip ( data [ 1 :: 2 ], data [:: 2 ]) if abs ( i - j ) != 42 ] >>> t [ 119 , 104 , 111 , 100 , 117 , 110 , 110 , 105 , 116 , 40 , 41 , 46 , 115 , 112 , 108 , 105 , 116 , 40 , 41 , 91 , 48 , 93 , 32 , 63 ] >>> len ( t ) 24 >>> \u8f6c ASCII \uff0c\u7136\u540e\u6253\u5370\u4e00\u4e0b >>> bytes ( t ) b 'whodunnit().split()[0] ?' >>>","title":"part2"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#part3","text":"\u5fc5\u5e94\u8bcd\u5178\u4e2d whodunit \u7684\u542b\u4e49 \u3008\u7f8e\u4fda\u3009\u4fa6\u63a2\u5c0f\u8bf4[\u620f\u5267,\u5f71\u7247\u7b49] \u7f51\u7edc\u63a8\u7406\u5c0f\u8bf4\uff1b\u4fa6\u63a2\u6545\u4e8b\uff1b\u8c01\u662f\u51f6\u624b \u6309\u7b2c\u4e8c\u6761\u63d0\u793a say it out loud \uff0c whodunit \u8bfb\u8d77\u6765\u50cf\u662f who done it \u8fd9\u91cc\u662f\u8bf4\u8c01\u521b\u9020\u4e86 Python \uff0c\u5f53\u7136\u662f Guido van Rossum \u6b64\u5916\uff0c Guido \u8bfb\u8d77\u6765\u50cf\u662f gui do \uff1a gui \u53d4\u505a\u4e86\u8fd9\u4e00\u5207 >>> \"Guido van Rossum\" . split ()[ 0 ] 'Guido' >>> \u5927\u5199\u4e0d\u884c\uff0c\u8f6c\u6210\u5c0f\u5199\u5373\u662f\u89e3","title":"part3"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#5","text":"http://www.pythonchallenge.com/pc/ring/guido.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/29_silence/","text":"\u7b2c 29 \u9898 silence! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/guido.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca\uff1a\u6ca1\u6709\u6ce8\u91ca\uff0c\u4f46\u5176\u4e2d 73 \u884c\u7a7a\u884c 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u6709\u8bb8\u591a\u73bb\u7483\u5236\u54c1\uff0c\u4e8e\u662f\uff0c\u5c06\u7f51\u5740\u672b\u5c3e\u6539\u4e3a glass \u8fdb\u5165 http://www.pythonchallenge.com/pc/ring/glass.html \u540e\uff0c\u5f97\u5230 yes. this is a glass. part2 Link \u4e4b\u524d\u5728\u7f51\u4e0a\u89c1\u5230\u6709\u4eba\u5728\u8bba\u6587\u672b\u5c3e\u52a0\u5165\u6587\u5b57\u5e76\u5c06\u5176\u6539\u4e3a\u767d\u8272\u4ee5\u51d1\u5b57\u6570\uff0c\u6b64\u5904\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999 \u6211\u8bd5\u7740\u4ece\u4e0b\u5f80\u4e0a\u9009\u62e9\uff0c\u6ca1\u60f3\u5230\u6709\u201c\u5185\u5bb9\u201d\uff08\u5176\u5b9e\u662f\u7a7a\u683c\uff09\uff0c\u6211\u5c06\u5176\u590d\u5236\u4e0b\u6765\uff0c\u4fdd\u5b58\u5728\u6587\u4ef6 silence.txt \u65e2\u7136\u90fd\u662f\u7a7a\u683c\uff0c\u90a3\u4e48\u5927\u6982\u7387\u4e0e\u7a7a\u683c\u7684\u6570\u91cf\u6709\u5173 1 2 3 4 5 6 7 8 9 f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) print ( bytes ( lst )) f . close () >>> b 'BZh91AY&SY \\xd9\\xc2 p \\x18\\x00\\x00\\x04\\x9d\\x80 ` \\x80\\x00\\x00\\x80 ./ \\x9c \\x00 1L \\x98\\x99\\x06 F \\x11 2hd \\x06 jUd \\xb9\\x9e\\xc6\\x18\\xc5\\x92 RH \\xe5 Z\" \\x01\\xba\\xa7\\x80\\x7f\\x8b\\xb9 \" \\x9c (Hl \\xe1 8 \\x0c\\x00\\x00 ' part3 Link \u4f7f\u7528 bz2 \u89e3\u538b\u7f29 1 2 3 4 5 6 7 8 9 10 11 12 13 from bz2 import decompress f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) f . close () t = bytes ( lst ) print ( decompress ( t )) >>> b \"Isn't it clear? I am yankeedoodle!\" \u5173\u952e\u5b57\uff1a yankeedoodle \u641c\u7d22\u5f97\u77e5\uff1a\u626c\u57fa\u00b7\u675c\u5fb7\u5c14\u53c8\u53eb\u626c\u57fa\u66f2\u3001\u626c\u57fa\u5c0f\u8c03 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/yankeedoodle.html","title":"29 silence"},{"location":"PythonChallenge/Solutions/29_silence/#29-silence","text":"","title":"\u7b2c 29 \u9898 silence!"},{"location":"PythonChallenge/Solutions/29_silence/#1","text":">>> http://www.pythonchallenge.com/pc/ring/guido.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/29_silence/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/29_silence/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca\uff1a\u6ca1\u6709\u6ce8\u91ca\uff0c\u4f46\u5176\u4e2d 73 \u884c\u7a7a\u884c","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/29_silence/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/29_silence/#part1","text":"\u56fe\u4e2d\u6709\u8bb8\u591a\u73bb\u7483\u5236\u54c1\uff0c\u4e8e\u662f\uff0c\u5c06\u7f51\u5740\u672b\u5c3e\u6539\u4e3a glass \u8fdb\u5165 http://www.pythonchallenge.com/pc/ring/glass.html \u540e\uff0c\u5f97\u5230 yes. this is a glass.","title":"part1"},{"location":"PythonChallenge/Solutions/29_silence/#part2","text":"\u4e4b\u524d\u5728\u7f51\u4e0a\u89c1\u5230\u6709\u4eba\u5728\u8bba\u6587\u672b\u5c3e\u52a0\u5165\u6587\u5b57\u5e76\u5c06\u5176\u6539\u4e3a\u767d\u8272\u4ee5\u51d1\u5b57\u6570\uff0c\u6b64\u5904\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999 \u6211\u8bd5\u7740\u4ece\u4e0b\u5f80\u4e0a\u9009\u62e9\uff0c\u6ca1\u60f3\u5230\u6709\u201c\u5185\u5bb9\u201d\uff08\u5176\u5b9e\u662f\u7a7a\u683c\uff09\uff0c\u6211\u5c06\u5176\u590d\u5236\u4e0b\u6765\uff0c\u4fdd\u5b58\u5728\u6587\u4ef6 silence.txt \u65e2\u7136\u90fd\u662f\u7a7a\u683c\uff0c\u90a3\u4e48\u5927\u6982\u7387\u4e0e\u7a7a\u683c\u7684\u6570\u91cf\u6709\u5173 1 2 3 4 5 6 7 8 9 f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) print ( bytes ( lst )) f . close () >>> b 'BZh91AY&SY \\xd9\\xc2 p \\x18\\x00\\x00\\x04\\x9d\\x80 ` \\x80\\x00\\x00\\x80 ./ \\x9c \\x00 1L \\x98\\x99\\x06 F \\x11 2hd \\x06 jUd \\xb9\\x9e\\xc6\\x18\\xc5\\x92 RH \\xe5 Z\" \\x01\\xba\\xa7\\x80\\x7f\\x8b\\xb9 \" \\x9c (Hl \\xe1 8 \\x0c\\x00\\x00 '","title":"part2"},{"location":"PythonChallenge/Solutions/29_silence/#part3","text":"\u4f7f\u7528 bz2 \u89e3\u538b\u7f29 1 2 3 4 5 6 7 8 9 10 11 12 13 from bz2 import decompress f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) f . close () t = bytes ( lst ) print ( decompress ( t )) >>> b \"Isn't it clear? I am yankeedoodle!\" \u5173\u952e\u5b57\uff1a yankeedoodle \u641c\u7d22\u5f97\u77e5\uff1a\u626c\u57fa\u00b7\u675c\u5fb7\u5c14\u53c8\u53eb\u626c\u57fa\u66f2\u3001\u626c\u57fa\u5c0f\u8c03","title":"part3"},{"location":"PythonChallenge/Solutions/29_silence/#5","text":"http://www.pythonchallenge.com/pc/ring/yankeedoodle.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/","text":"\u7b2c 30 \u9898 relax you are on 30 Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/yankeedoodle.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 The picture is only meant to help you relax \u7f51\u9875\u6e90\u7801\u6ce8\u91ca while you look at the csv file 4. \u89e3\u6cd5 Link part1 Link \u9898\u56fe\u662f\u4f5c\u8005\u8ba9\u6211\u4eec\u653e\u677e\u5fc3\u60c5\u7684 \u81f3\u4e8e csv \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u5c06\u7f51\u5740\u540e\u7f00\u6539\u4e3a csv \uff0c\u5982\u6b64\u53ef\u4ee5\u4e0b\u8f7d\u5230\u6587\u4ef6 yankeedoodle.csv \u53ef\u4ee5\u4f7f\u7528 Excel \u6253\u5f00\u770b\u770b\uff0c\u90fd\u662f\u6570\u5b57 \u4f7f\u7528 Python \u7b97\u4e00\u4e0b\u6570\u636e\u6570\u91cf >>> f = open ( \"yankeedoodle.csv\" ) >>> nums = [ num . strip () for num in f . read () . split ( ',' )] >>> len ( nums ) 7367 >>> \u5c06 7367 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 7367 ) >>> [ 53 , 139 ] 53 \u4e0e 139 \u6b63\u597d\u53ef\u4ee5\u4f5c\u4e3a width \u6216 height \u7ecf\u68c0\u9a8c\uff0c w = 53, h = 139 part2 Link \u5c06\u6570\u636e\u8f6c\u6362\u6210 53X139 \u7684\u56fe\u50cf 1 2 3 4 5 6 7 8 from PIL import Image f = open ( \"yankeedoodle.csv\" ) nums = [ float ( num . strip ()) for num in f . read () . split ( ',' )] img = Image . new ( 'P' , ( 53 , 139 )) img . putdata ( nums , 256 ) img . save ( \"30_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247 part3 Link \u56fe\u7247\u9700\u8981\u7ffb\u8f6c\u4e00\u4e0b 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c\u8f6c tmp . save ( \"30_result2.png\" ) \u5f97\u5230\u6b63\u5e38\u89c6\u89d2\u7684\u56fe\u7247 part4 Link \u6309\u4e0a\u56fe\u7684\u516c\u5f0f\u505a 1 2 3 4 5 6 7 8 9 10 f = open ( \"yankeedoodle.csv\" ) nums = [ num . strip () for num in f . read () . split ( ',' )] f . close () res = [ int ( x [ 0 ][ 5 ] + x [ 1 ][ 5 ] + x [ 2 ][ 6 ]) for x in zip ( nums [ 0 :: 3 ], nums [ 1 :: 3 ], nums [ 2 :: 3 ])] print ( '' . join ([ chr ( e ) for e in res ])) >>> So , you found the hidden message . There is lots of room here for a long message , but we only need very little space to say \"look at grandpa\" , so the rest is just garbage . VTZ . l '\u007ftf*Om@I\"p]#R`cWEBZ40ofSC>OZFkRP0\\)+b?Ir)S%Jt3f{ei%n2<FErFx~IzVm JTh =xdx++' de8C5 '|>2\\/We;ib(b %d $N<2u(o$*d@.*6F\u007fd' nW5 #J!}a]T\"1Q-7Y~bOF]T+^9d]e^J^=&I&<x|EEgdQ$$pX'f!_n>F0... \u5173\u952e\u5b57\uff1a grandpa \u4e4b\u540e\u7684 gibberish \u90fd\u53ef\u4ee5\u5ffd\u7565 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/grandpa.html","title":"30 relax you are on 30"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#30-relax-you-are-on-30","text":"","title":"\u7b2c 30 \u9898 relax you are on 30"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#1","text":">>> http://www.pythonchallenge.com/pc/ring/yankeedoodle.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#3","text":"\u7f51\u9875\u5185 The picture is only meant to help you relax \u7f51\u9875\u6e90\u7801\u6ce8\u91ca while you look at the csv file","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part1","text":"\u9898\u56fe\u662f\u4f5c\u8005\u8ba9\u6211\u4eec\u653e\u677e\u5fc3\u60c5\u7684 \u81f3\u4e8e csv \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u5c06\u7f51\u5740\u540e\u7f00\u6539\u4e3a csv \uff0c\u5982\u6b64\u53ef\u4ee5\u4e0b\u8f7d\u5230\u6587\u4ef6 yankeedoodle.csv \u53ef\u4ee5\u4f7f\u7528 Excel \u6253\u5f00\u770b\u770b\uff0c\u90fd\u662f\u6570\u5b57 \u4f7f\u7528 Python \u7b97\u4e00\u4e0b\u6570\u636e\u6570\u91cf >>> f = open ( \"yankeedoodle.csv\" ) >>> nums = [ num . strip () for num in f . read () . split ( ',' )] >>> len ( nums ) 7367 >>> \u5c06 7367 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 7367 ) >>> [ 53 , 139 ] 53 \u4e0e 139 \u6b63\u597d\u53ef\u4ee5\u4f5c\u4e3a width \u6216 height \u7ecf\u68c0\u9a8c\uff0c w = 53, h = 139","title":"part1"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part2","text":"\u5c06\u6570\u636e\u8f6c\u6362\u6210 53X139 \u7684\u56fe\u50cf 1 2 3 4 5 6 7 8 from PIL import Image f = open ( \"yankeedoodle.csv\" ) nums = [ float ( num . strip ()) for num in f . read () . split ( ',' )] img = Image . new ( 'P' , ( 53 , 139 )) img . putdata ( nums , 256 ) img . save ( \"30_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247","title":"part2"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part3","text":"\u56fe\u7247\u9700\u8981\u7ffb\u8f6c\u4e00\u4e0b 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c\u8f6c tmp . save ( \"30_result2.png\" ) \u5f97\u5230\u6b63\u5e38\u89c6\u89d2\u7684\u56fe\u7247","title":"part3"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part4","text":"\u6309\u4e0a\u56fe\u7684\u516c\u5f0f\u505a 1 2 3 4 5 6 7 8 9 10 f = open ( \"yankeedoodle.csv\" ) nums = [ num . strip () for num in f . read () . split ( ',' )] f . close () res = [ int ( x [ 0 ][ 5 ] + x [ 1 ][ 5 ] + x [ 2 ][ 6 ]) for x in zip ( nums [ 0 :: 3 ], nums [ 1 :: 3 ], nums [ 2 :: 3 ])] print ( '' . join ([ chr ( e ) for e in res ])) >>> So , you found the hidden message . There is lots of room here for a long message , but we only need very little space to say \"look at grandpa\" , so the rest is just garbage . VTZ . l '\u007ftf*Om@I\"p]#R`cWEBZ40ofSC>OZFkRP0\\)+b?Ir)S%Jt3f{ei%n2<FErFx~IzVm JTh =xdx++' de8C5 '|>2\\/We;ib(b %d $N<2u(o$*d@.*6F\u007fd' nW5 #J!}a]T\"1Q-7Y~bOF]T+^9d]e^J^=&I&<x|EEgdQ$$pX'f!_n>F0... \u5173\u952e\u5b57\uff1a grandpa \u4e4b\u540e\u7684 gibberish \u90fd\u53ef\u4ee5\u5ffd\u7565","title":"part4"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#5","text":"http://www.pythonchallenge.com/pc/ring/grandpa.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/31_where_am_I/","text":"\u7b2c 31 \u9898 Where am I? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/grandpa.html 2. \u56fe\u7247 Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca short break, this REALLY has nothing to do with Python 4. \u89e3\u6cd5 Link part1 Link \u70b9\u51fb\u56fe\u7247\uff0c\u6709\u63d0\u793a \"island : country\" \u770b\u6765\uff0c\u53c8\u8981\u66f4\u6362\u8d26\u53f7\u3001\u5bc6\u7801\u4e86 \u800c\u4e14\uff0c\u8d26\u53f7\u662f\u5c9b\u5c7f\u540d\u79f0\uff0c\u5bc6\u7801\u662f\u56fd\u5bb6\u540d\u79f0 \u4f5c\u8005\u8bf4\u8fd9\u91cc\u7684\u64cd\u4f5c\u4e0e Python \u7684\u5173\u7cfb\u4e0d\u5927\uff0c\u90a3\u5c31\u4f7f\u7528\u767e\u5ea6\u8bc6\u56fe\u5427 \u5c9b\u5c7f\uff1a\u82cf\u6885\u5c9b kohsamui \u56fd\u5bb6\uff1a\u6cf0\u56fd thailand part2 Link \u8f93\u5165\u8d26\u53f7\u3001\u5bc6\u7801\u540e\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/rock/grandpa.html \u65b0\u7684\u6807\u9898\uff1a UFOs ? \u65b0\u7684\u9898\u56fe \u65b0\u7684\u63d0\u793a\u8bed That was too easy. You are still on 31... \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u6bb5\u975e\u6ce8\u91ca\u5728\u5047\u88c5 HTML \u8bed\u53e5 <window left=\"0.34\" top=\"0.57\" width=\"0.036\" height=\"0.027\"/> <option iterations=\"128\"/> part3 Link \u56fe\u7247\u770b\u7740\u50cf\u201c\u79d1\u8d6b\u96ea\u82b1\u201d\uff0c\u4e0d\u8fc7\u56fe\u7247\u88ab\u547d\u540d\u4e3a mandelbrot \u641c\u7d22\u5f97\u77e5\u6b64\u4e3a\uff1a mandelbrot \u56fe \u5c06\u56fe\u7247\u653e\u5927\uff0c\u4f1a\u53d1\u73b0\u56fe\u7247\u4e2d\u6709\u8bb8\u591a\u70b9\u88ab\u6539\u52a8\u8fc7 part4 Link \u81ea\u5df1\u751f\u6210\u4e00\u5f20 mandelbrot \u56fe\uff0c\u5bf9\u6bd4\u65b0\u9898\u56fe left, top, width, height \uff0c\u662f\u8ba1\u7b97\u7684\u754c\u9650\uff08top \u6709\u4e89\u8bae\uff09 \u7ecf\u5178\u56fe\u5982\u4e0b \u5173\u4e8e\u4e0a\u56fe\u7684\u8bf4\u660e \u539f\u70b9\u5927\u7ea6\u5728\u56fe\u4e2d\u7684 O \u5904 left \u7b49\u56db\u4e2a\u6570\u5b57\u6846\u4f4f\u7684\u8303\u56f4\u5927\u7ea6\u5728\u56fe\u4e2d\u53f3\u4e0a\u89d2\u7684\u65b9\u6846\u5904 \u5728\u4e8c\u7ef4\u56fe\u50cf (x\uff0cy) \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u552f\u4e00\u5730\u5bf9\u5e94\u4e00\u4e2a\u590d\u6570 c \u5176\u5b9e\u90e8\u4e3a left + x * width/img_size_w \u5176\u865a\u90e8\u4e3a top + y * height/img_size_h part5 Link z = 0 + 0j \u91cd\u590d\u8ba1\u7b97 z = z * z + c \u5982\u679c z \u6536\u655b\uff0c\u5219\u663e\u793a\u8fd9\u4e2a\u50cf\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from PIL import Image left , top = 0.34 , 0.57 # 0.34 + 0.57i width , height = 0.036 , 0.027 iterations = 128 img1 = Image . open ( \"mandelbrot.gif\" ) w , h = img1 . size rx , ry = width / w , height / h res = [] for y in range ( h - 1 , - 1 , - 1 ): # \u8c8c\u4f3c 0.57 \u662f bottom\uff0c\u4f5c\u8005\u8bef\u5199\u6210\u4e86 top\uff0c\u6545\u5e94\u4ece\u4e0b\u5f80\u4e0a\u8d70 for x in range ( w ): c = complex ( left + x * rx , top + y * ry ) z = 0 + 0 j for i in range ( iterations ): z = z * z + c if abs ( z ) > 2 : break res . append ( i ) img2 = img1 . copy () img2 . putdata ( res ) img2 . save ( \"31_mandelbrot_clean.gif\" ) \u5f97\u5230\u56fe\u50cf part6 Link \u627e\u51fa\u4e0d\u540c\u70b9 1 2 3 4 5 6 7 8 9 10 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] print ( len ( diff )) # \u8fd9\u4e9b\u70b9\u7684\u7edd\u5bf9\u503c\u5747\u662f 16 >>> 1679 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): # level 30 \u7528\u8fc7 factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 1679 ) >>> [ 23 , 73 ] \u7ecf\u68c0\u9a8c\uff0c w = 23, h = 73 \u65f6\u53ef\u6210\u56fe 1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . save ( \"plot.gif\" ) \u5f97\u5230\u4e00\u5f20\u5355\u8272\u56fe \u6b64\u56fe\u4e3a\u201c\u963f\u96f7\u897f\u535a\u4fe1\u606f\u201d arecibo In 1974, the Arecibo Message[1] was sent into space via radio-waves from the Arecibo Observatory. \u9898\u5916\u8bdd\uff1a\u300a\u4e09\u4f53\u300b\u4e2d\uff0c\u53f6\u6587\u6d01\u5728 1971 \u5e74\u4e5f\u505a\u8fc7\u5dee\u4e0d\u591a\u7684\u4e8b\u3002\u3002\u3002\u602a\u4e0d\u5f97\u65b0\u6807\u9898\u662f UFO ? 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/rock/arecibo.html","title":"31 where am I"},{"location":"PythonChallenge/Solutions/31_where_am_I/#31-where-am-i","text":"","title":"\u7b2c 31 \u9898 Where am I?"},{"location":"PythonChallenge/Solutions/31_where_am_I/#1","text":">>> http://www.pythonchallenge.com/pc/ring/grandpa.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/31_where_am_I/#2","text":"","title":"2. \u56fe\u7247"},{"location":"PythonChallenge/Solutions/31_where_am_I/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca short break, this REALLY has nothing to do with Python","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/31_where_am_I/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part1","text":"\u70b9\u51fb\u56fe\u7247\uff0c\u6709\u63d0\u793a \"island : country\" \u770b\u6765\uff0c\u53c8\u8981\u66f4\u6362\u8d26\u53f7\u3001\u5bc6\u7801\u4e86 \u800c\u4e14\uff0c\u8d26\u53f7\u662f\u5c9b\u5c7f\u540d\u79f0\uff0c\u5bc6\u7801\u662f\u56fd\u5bb6\u540d\u79f0 \u4f5c\u8005\u8bf4\u8fd9\u91cc\u7684\u64cd\u4f5c\u4e0e Python \u7684\u5173\u7cfb\u4e0d\u5927\uff0c\u90a3\u5c31\u4f7f\u7528\u767e\u5ea6\u8bc6\u56fe\u5427 \u5c9b\u5c7f\uff1a\u82cf\u6885\u5c9b kohsamui \u56fd\u5bb6\uff1a\u6cf0\u56fd thailand","title":"part1"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part2","text":"\u8f93\u5165\u8d26\u53f7\u3001\u5bc6\u7801\u540e\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/rock/grandpa.html \u65b0\u7684\u6807\u9898\uff1a UFOs ? \u65b0\u7684\u9898\u56fe \u65b0\u7684\u63d0\u793a\u8bed That was too easy. You are still on 31... \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u6bb5\u975e\u6ce8\u91ca\u5728\u5047\u88c5 HTML \u8bed\u53e5 <window left=\"0.34\" top=\"0.57\" width=\"0.036\" height=\"0.027\"/> <option iterations=\"128\"/>","title":"part2"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part3","text":"\u56fe\u7247\u770b\u7740\u50cf\u201c\u79d1\u8d6b\u96ea\u82b1\u201d\uff0c\u4e0d\u8fc7\u56fe\u7247\u88ab\u547d\u540d\u4e3a mandelbrot \u641c\u7d22\u5f97\u77e5\u6b64\u4e3a\uff1a mandelbrot \u56fe \u5c06\u56fe\u7247\u653e\u5927\uff0c\u4f1a\u53d1\u73b0\u56fe\u7247\u4e2d\u6709\u8bb8\u591a\u70b9\u88ab\u6539\u52a8\u8fc7","title":"part3"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part4","text":"\u81ea\u5df1\u751f\u6210\u4e00\u5f20 mandelbrot \u56fe\uff0c\u5bf9\u6bd4\u65b0\u9898\u56fe left, top, width, height \uff0c\u662f\u8ba1\u7b97\u7684\u754c\u9650\uff08top \u6709\u4e89\u8bae\uff09 \u7ecf\u5178\u56fe\u5982\u4e0b \u5173\u4e8e\u4e0a\u56fe\u7684\u8bf4\u660e \u539f\u70b9\u5927\u7ea6\u5728\u56fe\u4e2d\u7684 O \u5904 left \u7b49\u56db\u4e2a\u6570\u5b57\u6846\u4f4f\u7684\u8303\u56f4\u5927\u7ea6\u5728\u56fe\u4e2d\u53f3\u4e0a\u89d2\u7684\u65b9\u6846\u5904 \u5728\u4e8c\u7ef4\u56fe\u50cf (x\uff0cy) \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u552f\u4e00\u5730\u5bf9\u5e94\u4e00\u4e2a\u590d\u6570 c \u5176\u5b9e\u90e8\u4e3a left + x * width/img_size_w \u5176\u865a\u90e8\u4e3a top + y * height/img_size_h","title":"part4"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part5","text":"z = 0 + 0j \u91cd\u590d\u8ba1\u7b97 z = z * z + c \u5982\u679c z \u6536\u655b\uff0c\u5219\u663e\u793a\u8fd9\u4e2a\u50cf\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from PIL import Image left , top = 0.34 , 0.57 # 0.34 + 0.57i width , height = 0.036 , 0.027 iterations = 128 img1 = Image . open ( \"mandelbrot.gif\" ) w , h = img1 . size rx , ry = width / w , height / h res = [] for y in range ( h - 1 , - 1 , - 1 ): # \u8c8c\u4f3c 0.57 \u662f bottom\uff0c\u4f5c\u8005\u8bef\u5199\u6210\u4e86 top\uff0c\u6545\u5e94\u4ece\u4e0b\u5f80\u4e0a\u8d70 for x in range ( w ): c = complex ( left + x * rx , top + y * ry ) z = 0 + 0 j for i in range ( iterations ): z = z * z + c if abs ( z ) > 2 : break res . append ( i ) img2 = img1 . copy () img2 . putdata ( res ) img2 . save ( \"31_mandelbrot_clean.gif\" ) \u5f97\u5230\u56fe\u50cf","title":"part5"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part6","text":"\u627e\u51fa\u4e0d\u540c\u70b9 1 2 3 4 5 6 7 8 9 10 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] print ( len ( diff )) # \u8fd9\u4e9b\u70b9\u7684\u7edd\u5bf9\u503c\u5747\u662f 16 >>> 1679 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): # level 30 \u7528\u8fc7 factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 1679 ) >>> [ 23 , 73 ] \u7ecf\u68c0\u9a8c\uff0c w = 23, h = 73 \u65f6\u53ef\u6210\u56fe 1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . save ( \"plot.gif\" ) \u5f97\u5230\u4e00\u5f20\u5355\u8272\u56fe \u6b64\u56fe\u4e3a\u201c\u963f\u96f7\u897f\u535a\u4fe1\u606f\u201d arecibo In 1974, the Arecibo Message[1] was sent into space via radio-waves from the Arecibo Observatory. \u9898\u5916\u8bdd\uff1a\u300a\u4e09\u4f53\u300b\u4e2d\uff0c\u53f6\u6587\u6d01\u5728 1971 \u5e74\u4e5f\u505a\u8fc7\u5dee\u4e0d\u591a\u7684\u4e8b\u3002\u3002\u3002\u602a\u4e0d\u5f97\u65b0\u6807\u9898\u662f UFO ?","title":"part6"},{"location":"PythonChallenge/Solutions/31_where_am_I/#5","text":"http://www.pythonchallenge.com/pc/rock/arecibo.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/","text":"\u7b2c 32 \u9898 etch-a-scetch Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/rock/arecibo.html 2. \u9898\u56fe Link \u51c6\u786e\u5730\u8bf4\uff0c\u8fd9\u4e00\u9898\u7684\u7f51\u9875\u4e2d\u663e\u793a\u7684\u4e0d\u662f\u56fe\u7247 \u66f4\u50cf\u662f\u7528 Js \u5199\u7684\u5c0f\u6e38\u620f \u622a\u56fe 3. \u63d0\u793a Link \u7f51\u9875\u5185 Fill in the blanks \u7f51\u9875\u6e90\u7801 you are in level 32 for warmup.txt 4. \u89e3\u6cd5 Link part1 Link \u8fdb\u5165 http://www.pythonchallenge.com/pc/rock/warmup.txt \u5f97\u5230 Info # Dimensions 9 9 # Horizontal 2 1 2 1 3 1 5 7 9 3 2 3 2 2 3 2 2 3 2 # Vertical 2 1 3 1 2 3 3 8 9 8 3 1 2 3 2 1 3 \u770b\u6587\u4ef6\u540d\uff0c\u8fd9\u5e94\u8be5\u662f\u70ed\u8eab\u9898 part2 Link \u8fd9\u662f\u4e00\u79cd\u540d\u4e3a Nonograms \u7684\u6e38\u620f\uff0c\u4ece\u7eb5\u5411\u6570\u636e\u770b\uff0c\u5de6\u53f3\u5f88\u6709\u53ef\u80fd\u662f\u5bf9\u79f0\u7684 \u51d1\u6a2a\u5411\u7684 232 \u586b\u4e0a\u7eb5\u6a2a\u552f\u4e00\u7684 9 \u586b\u7eb5\u5411\u7684\u4e24\u4e2a 8 \u6b64\u65f6\u6a2a\u5411\u7b2c 6 \u884c\u5df2\u6ee1\uff0c\u8865\u7eb5\u5411\u7684\u7b2c 3 \u5217\u4e0e\u7b2c 7 \u5217\u7684 3 \u6b64\u65f6\u6a2a\u5411\u7b2c\u4e09\u884c\u5df2\u6ee1 \u6b64\u65f6\u7684\u7b2c 4 \u884c\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u82e5\u7b2c 4 \u884c\u5b9a\u4e0b\uff0c\u5219\u7b2c 1 \u5217\u4e0e\u7b2c 9 \u5217\u4e5f\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u5982\u6b64\uff0c\u6700\u540e\u4e24\u4e2a\u4e5f\u5c31\u5b9a\u4e86 \u6700\u7ec8\u6548\u679c part3 Link \u56fe\u50cf\u662f\u5411\u4e0a\u7684\u7bad\u5934\uff0c\u6545\u5173\u952e\u5b57\u4e3a up \u66f4\u6539\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/rock/up.html \uff0c\u5f97\u5230 You want to go up? Let's scale this up then. Now get serious and solve this. \u70b9\u51fb this \u53ef\u4ee5\u53bb\u5230 http://www.pythonchallenge.com/pc/rock/up.txt \u770b\u5230\u65b0\u7684\u9898\u76ee Info # Dimensions 32 32 # Horizontal lines 3 2 8 10 3 1 1 5 2 1 5 2 1 4 1 1 15 19 6 14 6 1 12 6 1 10 7 2 1 8 6 1 1 2 1 1 1 1 5 1 4 1 5 4 1 4 1 1 1 5 1 1 8 5 2 1 8 6 1 2 1 3 6 3 2 1 6 1 5 1 6 3 2 7 2 3 3 10 4 9 12 1 22 1 21 4 1 17 1 2 8 5 1 2 2 4 5 2 1 1 5 # Vertical lines 5 5 5 3 1 3 1 5 5 6 5 6 9 5 11 5 1 13 6 1 14 6 1 7 12 1 6 1 11 1 3 1 1 1 9 1 3 4 10 8 1 1 2 8 1 10 1 1 1 7 1 10 4 1 1 7 1 3 2 5 2 1 2 6 2 3 2 4 2 1 1 4 1 2 6 3 1 1 1 1 1 12 3 1 2 1 1 1 3 2 7 3 1 2 1 2 2 6 3 1 1 1 1 12 3 1 5 6 3 1 6 4 1 5 4 4 1 1 5 part4 Link \u5f92\u624b\u89e3 32x32 \u7684\u6570\u56fe\uff0c\u5c31\u6bd4\u8f83\u4f24\u8eab\u4f53\u4e86 \u601d\u8def \u9012\u5f52\u5730\u83b7\u53d6\u6bcf\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u65b9\u5f0f \u82e5\u67d0\u4e00\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u4e2d\uff0c\u67d0\u4e00\u70b9\u7684\u503c\u4e0d\u53d8\uff0c\u5219\u8fd9\u4e00\u70b9\u53ef\u4ee5\u88ab\u786e\u5b9a \u7528\u884c/\u5217\u4e2d\u7684\u786e\u5b9a\u70b9\u53bb\u7b5b\u9009\u6389\u5217/\u884c\u4e2d\u4e0d\u7b26\u5408\u8be5\u70b9\u503c\u7684\u7ec4\u5408 \u53cd\u590d\u7b5b\u9009\uff0c\u76f4\u5230\u5269\u4e0b\u552f\u4e00\u7684\u7ec4\u5408\uff08\u4f5c\u8005\u80af\u5b9a\u51d1\u597d\u7684\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def get_data ( filename ): \"\"\" \u83b7\u53d6\u5927\u5c0f\u3001\u6a2a/\u7eb5\u5411\u7ec4\u5408\u65b9\u5f0f \"\"\" f = open ( filename ) flag = - 1 size , hor , ver = [], [], [] data = [ size , hor , ver ] for line in f : if line [ 0 ] == '#' : flag += 1 elif line [ 0 ] == ' \\n ' : pass else : data [ flag ] . append ( list ( map ( int , line . split ()))) return data def get_candidates ( nums , size ): ''' \u7ed9\u51fa\u884c/\u5217\u7684\u7ec4\u5408\u65b9\u5f0f\uff0c\u9012\u5f52\u5730\u83b7\u5f97\u6240\u6709\u7684\u6392\u5217\uff0c# \u4e3a\u9009\u62e9\u6807\u8bb0 ''' n = len ( nums ) candidates = [] length = size - sum ( nums ) - ( n - 1 ) for i in range ( length + 1 ): head = ' ' * i + '#' * nums [ 0 ] len_h = len ( head ) if n == 1 : tail = ' ' * ( size - len_h ) candidates . append ( head + tail ) else : tails = [ ' ' + j for j in get_candidates ( nums [ 1 :], size - len_h - 1 )] candidates . extend ([ head + tail for tail in tails ]) return candidates def init_all_candidates ( w , h , hor , ver ): ''' \u5f97\u5230\u6240\u6709\u884c/\u5217\u7684\u6240\u6709\u6392\u5217 ''' candi_h = [ get_candidates ( hor [ i ], w ) for i in range ( h )] candi_v = [ get_candidates ( ver [ i ], h ) for i in range ( w )] return candi_h , candi_v def filtrate ( candidates , pos , symbol ): ''' \u7b5b\u9009\u51fa\u67d0\u4e00\u884c/\u5217\u7684\u7b26\u5408\u89c4\u5219\u7684\u6392\u5217 ''' if candidates == \"done\" : return candidates return [ line for line in candidates if line [ pos ] == symbol ] def solve ( filename ): size , hor , ver = get_data ( filename ) w , h = size [ 0 ] candi_h , candi_v = init_all_candidates ( w , h , hor , ver ) res = [[ '0' ] * w for _ in range ( h )] cnt , target = 0 , w * h while cnt < target : # \u5148\u9488\u5bf9\u6bcf\u4e00\u884c for row , lines in enumerate ( candi_h ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a cnt += res [ row ] . count ( '0' ) for col in range ( w ): res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) candi_h [ row ] = \"done\" else : for col in range ( w ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ col ] != lines [ 0 ][ col ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) # \u518d\u9488\u5bf9\u6bcf\u4e00\u5217 for col , lines in enumerate ( candi_v ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a for row in range ( h ): if res [ row ][ col ] == '0' : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) candi_v [ col ] = \"done\" else : for row in range ( h ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ row ] != lines [ 0 ][ row ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) return res if __name__ == \"__main__\" : res = solve ( \"up.txt\" ) new = [ '' . join ( line ) + ' \\n ' for line in res ] print ( '' . join ( newu8ff7\u4f60\u9f99\uff1f\u4e0d\uff0c\u662f\u4e00\u6761 Python \u767b\u5165 http://www.pythonchallenge.com/pc/rock/python.html \uff0c\u5f97\u5230 \u56fe\u7247 \u63d0\u793a Congrats! You made it through to the smiling python. \"Free\" as in \"Free speech\", not as in \"free... \u641c\u7d22\u5f97\u77e5\uff0c\u8fd9\u662f\u5f00\u6e90\u793e\u533a\u6d41\u884c\u7684\u4e00\u53e5\u8bdd\uff1a \u201cFree as in Speech\u201d or \u201cFree as in Beer\u201d 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/rock/beer.html","title":"32 etch-a-scetch"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#32-etch-a-scetch","text":"","title":"\u7b2c 32 \u9898 etch-a-scetch"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#1","text":">>> http://www.pythonchallenge.com/pc/rock/arecibo.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#2","text":"\u51c6\u786e\u5730\u8bf4\uff0c\u8fd9\u4e00\u9898\u7684\u7f51\u9875\u4e2d\u663e\u793a\u7684\u4e0d\u662f\u56fe\u7247 \u66f4\u50cf\u662f\u7528 Js \u5199\u7684\u5c0f\u6e38\u620f \u622a\u56fe","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#3","text":"\u7f51\u9875\u5185 Fill in the blanks \u7f51\u9875\u6e90\u7801 you are in level 32 for warmup.txt","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part1","text":"\u8fdb\u5165 http://www.pythonchallenge.com/pc/rock/warmup.txt \u5f97\u5230 Info # Dimensions 9 9 # Horizontal 2 1 2 1 3 1 5 7 9 3 2 3 2 2 3 2 2 3 2 # Vertical 2 1 3 1 2 3 3 8 9 8 3 1 2 3 2 1 3 \u770b\u6587\u4ef6\u540d\uff0c\u8fd9\u5e94\u8be5\u662f\u70ed\u8eab\u9898","title":"part1"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part2","text":"\u8fd9\u662f\u4e00\u79cd\u540d\u4e3a Nonograms \u7684\u6e38\u620f\uff0c\u4ece\u7eb5\u5411\u6570\u636e\u770b\uff0c\u5de6\u53f3\u5f88\u6709\u53ef\u80fd\u662f\u5bf9\u79f0\u7684 \u51d1\u6a2a\u5411\u7684 232 \u586b\u4e0a\u7eb5\u6a2a\u552f\u4e00\u7684 9 \u586b\u7eb5\u5411\u7684\u4e24\u4e2a 8 \u6b64\u65f6\u6a2a\u5411\u7b2c 6 \u884c\u5df2\u6ee1\uff0c\u8865\u7eb5\u5411\u7684\u7b2c 3 \u5217\u4e0e\u7b2c 7 \u5217\u7684 3 \u6b64\u65f6\u6a2a\u5411\u7b2c\u4e09\u884c\u5df2\u6ee1 \u6b64\u65f6\u7684\u7b2c 4 \u884c\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u82e5\u7b2c 4 \u884c\u5b9a\u4e0b\uff0c\u5219\u7b2c 1 \u5217\u4e0e\u7b2c 9 \u5217\u4e5f\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u5982\u6b64\uff0c\u6700\u540e\u4e24\u4e2a\u4e5f\u5c31\u5b9a\u4e86 \u6700\u7ec8\u6548\u679c","title":"part2"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part3","text":"\u56fe\u50cf\u662f\u5411\u4e0a\u7684\u7bad\u5934\uff0c\u6545\u5173\u952e\u5b57\u4e3a up \u66f4\u6539\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/rock/up.html \uff0c\u5f97\u5230 You want to go up? Let's scale this up then. Now get serious and solve this. \u70b9\u51fb this \u53ef\u4ee5\u53bb\u5230 http://www.pythonchallenge.com/pc/rock/up.txt \u770b\u5230\u65b0\u7684\u9898\u76ee Info # Dimensions 32 32 # Horizontal lines 3 2 8 10 3 1 1 5 2 1 5 2 1 4 1 1 15 19 6 14 6 1 12 6 1 10 7 2 1 8 6 1 1 2 1 1 1 1 5 1 4 1 5 4 1 4 1 1 1 5 1 1 8 5 2 1 8 6 1 2 1 3 6 3 2 1 6 1 5 1 6 3 2 7 2 3 3 10 4 9 12 1 22 1 21 4 1 17 1 2 8 5 1 2 2 4 5 2 1 1 5 # Vertical lines 5 5 5 3 1 3 1 5 5 6 5 6 9 5 11 5 1 13 6 1 14 6 1 7 12 1 6 1 11 1 3 1 1 1 9 1 3 4 10 8 1 1 2 8 1 10 1 1 1 7 1 10 4 1 1 7 1 3 2 5 2 1 2 6 2 3 2 4 2 1 1 4 1 2 6 3 1 1 1 1 1 12 3 1 2 1 1 1 3 2 7 3 1 2 1 2 2 6 3 1 1 1 1 12 3 1 5 6 3 1 6 4 1 5 4 4 1 1 5","title":"part3"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part4","text":"\u5f92\u624b\u89e3 32x32 \u7684\u6570\u56fe\uff0c\u5c31\u6bd4\u8f83\u4f24\u8eab\u4f53\u4e86 \u601d\u8def \u9012\u5f52\u5730\u83b7\u53d6\u6bcf\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u65b9\u5f0f \u82e5\u67d0\u4e00\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u4e2d\uff0c\u67d0\u4e00\u70b9\u7684\u503c\u4e0d\u53d8\uff0c\u5219\u8fd9\u4e00\u70b9\u53ef\u4ee5\u88ab\u786e\u5b9a \u7528\u884c/\u5217\u4e2d\u7684\u786e\u5b9a\u70b9\u53bb\u7b5b\u9009\u6389\u5217/\u884c\u4e2d\u4e0d\u7b26\u5408\u8be5\u70b9\u503c\u7684\u7ec4\u5408 \u53cd\u590d\u7b5b\u9009\uff0c\u76f4\u5230\u5269\u4e0b\u552f\u4e00\u7684\u7ec4\u5408\uff08\u4f5c\u8005\u80af\u5b9a\u51d1\u597d\u7684\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def get_data ( filename ): \"\"\" \u83b7\u53d6\u5927\u5c0f\u3001\u6a2a/\u7eb5\u5411\u7ec4\u5408\u65b9\u5f0f \"\"\" f = open ( filename ) flag = - 1 size , hor , ver = [], [], [] data = [ size , hor , ver ] for line in f : if line [ 0 ] == '#' : flag += 1 elif line [ 0 ] == ' \\n ' : pass else : data [ flag ] . append ( list ( map ( int , line . split ()))) return data def get_candidates ( nums , size ): ''' \u7ed9\u51fa\u884c/\u5217\u7684\u7ec4\u5408\u65b9\u5f0f\uff0c\u9012\u5f52\u5730\u83b7\u5f97\u6240\u6709\u7684\u6392\u5217\uff0c# \u4e3a\u9009\u62e9\u6807\u8bb0 ''' n = len ( nums ) candidates = [] length = size - sum ( nums ) - ( n - 1 ) for i in range ( length + 1 ): head = ' ' * i + '#' * nums [ 0 ] len_h = len ( head ) if n == 1 : tail = ' ' * ( size - len_h ) candidates . append ( head + tail ) else : tails = [ ' ' + j for j in get_candidates ( nums [ 1 :], size - len_h - 1 )] candidates . extend ([ head + tail for tail in tails ]) return candidates def init_all_candidates ( w , h , hor , ver ): ''' \u5f97\u5230\u6240\u6709\u884c/\u5217\u7684\u6240\u6709\u6392\u5217 ''' candi_h = [ get_candidates ( hor [ i ], w ) for i in range ( h )] candi_v = [ get_candidates ( ver [ i ], h ) for i in range ( w )] return candi_h , candi_v def filtrate ( candidates , pos , symbol ): ''' \u7b5b\u9009\u51fa\u67d0\u4e00\u884c/\u5217\u7684\u7b26\u5408\u89c4\u5219\u7684\u6392\u5217 ''' if candidates == \"done\" : return candidates return [ line for line in candidates if line [ pos ] == symbol ] def solve ( filename ): size , hor , ver = get_data ( filename ) w , h = size [ 0 ] candi_h , candi_v = init_all_candidates ( w , h , hor , ver ) res = [[ '0' ] * w for _ in range ( h )] cnt , target = 0 , w * h while cnt < target : # \u5148\u9488\u5bf9\u6bcf\u4e00\u884c for row , lines in enumerate ( candi_h ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a cnt += res [ row ] . count ( '0' ) for col in range ( w ): res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) candi_h [ row ] = \"done\" else : for col in range ( w ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ col ] != lines [ 0 ][ col ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) # \u518d\u9488\u5bf9\u6bcf\u4e00\u5217 for col , lines in enumerate ( candi_v ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a for row in range ( h ): if res [ row ][ col ] == '0' : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) candi_v [ col ] = \"done\" else : for row in range ( h ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ row ] != lines [ 0 ][ row ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) return res if __name__ == \"__main__\" : res = solve ( \"up.txt\" ) new = [ '' . join ( line ) + ' \\n ' for line in res ] print ( '' . join ( newu8ff7\u4f60\u9f99\uff1f\u4e0d\uff0c\u662f\u4e00\u6761 Python \u767b\u5165 http://www.pythonchallenge.com/pc/rock/python.html \uff0c\u5f97\u5230 \u56fe\u7247 \u63d0\u793a Congrats! You made it through to the smiling python. \"Free\" as in \"Free speech\", not as in \"free... \u641c\u7d22\u5f97\u77e5\uff0c\u8fd9\u662f\u5f00\u6e90\u793e\u533a\u6d41\u884c\u7684\u4e00\u53e5\u8bdd\uff1a \u201cFree as in Speech\u201d or \u201cFree as in Beer\u201d","title":"part4"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#5","text":"http://www.pythonchallenge.com/pc/rock/beer.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/","text":"\u7b2c 33 \u9898 33 bottles of beer on the wall Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/rock/beer.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca If you are blinded by the light, remove its power, with its might. Then from the ashes, fair and square, another truth at you will glare. 4. \u89e3\u6cd5 Link part1 Link \u56fe\u7247\u540d\u4e3a bear1.jpg \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u6539\u5730\u5740\uff0c\u5f97\u5230 bear2.jpg \u518d\u6539\uff0c\u6539\u4e3a beer2.png \uff0c\u5f97\u5230\u4e00\u5f20\u7070\u5ea6\u56fe part2 Link \u7f51\u9875\u6e90\u7801\u63d0\u793a\u4e2d\u7684\u5173\u952e\u5b57 light, ashes fair, square \u601d\u8def\uff1a \u5bf9\u56fe\u4e2d\u5404\u50cf\u7d20\u6309\u989c\u8272\u5206\u7ec4\uff0c\u82e5\u67d0\u989c\u8272\u7684\u4e2a\u6570\u662f\u5e73\u65b9\u6570\uff0c\u5219\u8bb0\u5f55\u4e0b\u6765 \u4ece\u6700\u4eae\u7684\u989c\u8272 255 \u5f00\u59cb\uff0c\u4f9d\u6b21\u63d0\u53d6\u989c\u8272 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) n = len ( ashes ) lights = img . getcolors () lights . reverse () print ( lights ) print ( len ( lights )) wall = [] for num , _ in lights : n -= num tmp = n ** 0.5 if tmp == int ( tmp ): wall . append ( tmp ) print ( wall ) print ( len ( wall )) >>> [( 272 , 194 ), ( 1348 , 193 ), ( 283 , 188 ), ( 241 , 187 ), ( 318 , 182 ), ( 198 , 181 ), ( 337 , 176 ), ( 171 , 175 ), ( 317 , 170 ), ( 183 , 169 ), ( 317 , 164 ), ( 175 , 163 ), ( 323 , 158 ), ( 161 , 157 ), ( 324 , 152 ), ( 152 , 151 ), ( 323 , 146 ), ( 145 , 145 ), ( 342 , 140 ), ( 118 , 139 ), ( 342 , 134 ), ( 110 , 133 ), ( 327 , 128 ), ( 117 , 127 ), ( 198 , 122 ), ( 238 , 121 ), ( 183 , 116 ), ( 32 , 115 ), ( 310 , 110 ), ( 114 , 109 ), ( 224 , 104 ), ( 192 , 103 ), ( 505 , 98 ), ( 104 , 97 ), ( 257 , 92 ), ( 139 , 91 ), ( 341 , 86 ), ( 47 , 85 ), ( 354 , 80 ), ( 26 , 79 ), ( 164 , 74 ), ( 23 , 73 ), ( 298 , 68 ), ( 70 , 67 ), ( 356 , 62 ), ( 181 , 61 ), ( 609 , 56 ), ( 79 , 55 ), ( 225 , 50 ), ( 107 , 49 ), ( 357 , 44 ), ( 126 , 43 ), ( 339 , 38 ), ( 126 , 37 ), ( 328 , 32 ), ( 119 , 31 ), ( 424 , 26 ), ( 144 , 25 ), ( 243 , 20 ), ( 549 , 19 ), ( 329 , 14 ), ( 724 , 13 ), ( 189 , 8 ), ( 963 , 7 ), ( 232 , 2 ), ( 1532 , 1 )] 66 [ 132.0 , 130.0 , 128.0 , 126.0 , 124.0 , 122.0 , 120.0 , 118.0 , 116.0 , 114.0 , 112.0 , 110.0 , 108.0 , 107.0 , 105.0 , 103.0 , 100.0 , 98.0 , 96.0 , 94.0 , 93.0 , 91.0 , 88.0 , 84.0 , 82.0 , 79.0 , 76.0 , 73.0 , 69.0 , 63.0 , 54.0 , 42.0 , 0.0 ] 33 \u7ed3\u679c\u5206\u6790 194 - 193 = 1, 188 - 187 = 1, 182 - 181 = 1 ... \u82e5 for \u8bed\u53e5\u4e2d\u4e0d\u7528 if \u7b5b\u9009\uff0c\u4f1a\u53d1\u73b0 wall \u4e2d\u7684\u5e73\u65b9\u6570\u4e5f\u662f\u95f4\u9694\u7684 part3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) max_value = max ( ashes ) for i in range ( 33 ): data = [ ash == max_value for ash in ashes ] side = int ( len ( data ) ** 0.5 ) res = Image . new ( '1' , ( side , side )) res . putdata ( data ) res . save ( f \"./beer/33_ { i + 1 : 0>2 } .png\" ) ashes = [ ash for ash in ashes if ash < max_value - 1 ] max_value = max ( ashes , default =- 1 ) \u4e0e\u7b2c 25 \u9898\u7c7b\u4f3c\uff0c\u8fd9\u4e00\u9898\u662f\u7b2c 33 \u9898\uff0c\u6545\u53ef\u5f97 33 \u5f20\u56fe\u7247 \u5c06\u5e26\u6846\u7684\u56fe\u7247\u4f9d\u6b21\u7ec4\u5408\uff0c\u53ef\u5f97\u5230 gremlins 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/rock/gremlins.html 6. \u540e\u8bb0 Link Temporary End Thank you for playing the Python Challenge. More levels will come soon. You can find if there are new levels by checking the homepage or at the Python Challenge News Forum. You can also subscribe to the news forum by RSS. If you have ideas for new levels please send me using the forums. thesamet","title":"33 33 bottles of beer on the wall"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#33-33-bottles-of-beer-on-the-wall","text":"","title":"\u7b2c 33 \u9898 33 bottles of beer on the wall"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#1","text":">>> http://www.pythonchallenge.com/pc/rock/beer.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca If you are blinded by the light, remove its power, with its might. Then from the ashes, fair and square, another truth at you will glare.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#part1","text":"\u56fe\u7247\u540d\u4e3a bear1.jpg \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u6539\u5730\u5740\uff0c\u5f97\u5230 bear2.jpg \u518d\u6539\uff0c\u6539\u4e3a beer2.png \uff0c\u5f97\u5230\u4e00\u5f20\u7070\u5ea6\u56fe","title":"part1"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#part2","text":"\u7f51\u9875\u6e90\u7801\u63d0\u793a\u4e2d\u7684\u5173\u952e\u5b57 light, ashes fair, square \u601d\u8def\uff1a \u5bf9\u56fe\u4e2d\u5404\u50cf\u7d20\u6309\u989c\u8272\u5206\u7ec4\uff0c\u82e5\u67d0\u989c\u8272\u7684\u4e2a\u6570\u662f\u5e73\u65b9\u6570\uff0c\u5219\u8bb0\u5f55\u4e0b\u6765 \u4ece\u6700\u4eae\u7684\u989c\u8272 255 \u5f00\u59cb\uff0c\u4f9d\u6b21\u63d0\u53d6\u989c\u8272 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) n = len ( ashes ) lights = img . getcolors () lights . reverse () print ( lights ) print ( len ( lights )) wall = [] for num , _ in lights : n -= num tmp = n ** 0.5 if tmp == int ( tmp ): wall . append ( tmp ) print ( wall ) print ( len ( wall )) >>> [( 272 , 194 ), ( 1348 , 193 ), ( 283 , 188 ), ( 241 , 187 ), ( 318 , 182 ), ( 198 , 181 ), ( 337 , 176 ), ( 171 , 175 ), ( 317 , 170 ), ( 183 , 169 ), ( 317 , 164 ), ( 175 , 163 ), ( 323 , 158 ), ( 161 , 157 ), ( 324 , 152 ), ( 152 , 151 ), ( 323 , 146 ), ( 145 , 145 ), ( 342 , 140 ), ( 118 , 139 ), ( 342 , 134 ), ( 110 , 133 ), ( 327 , 128 ), ( 117 , 127 ), ( 198 , 122 ), ( 238 , 121 ), ( 183 , 116 ), ( 32 , 115 ), ( 310 , 110 ), ( 114 , 109 ), ( 224 , 104 ), ( 192 , 103 ), ( 505 , 98 ), ( 104 , 97 ), ( 257 , 92 ), ( 139 , 91 ), ( 341 , 86 ), ( 47 , 85 ), ( 354 , 80 ), ( 26 , 79 ), ( 164 , 74 ), ( 23 , 73 ), ( 298 , 68 ), ( 70 , 67 ), ( 356 , 62 ), ( 181 , 61 ), ( 609 , 56 ), ( 79 , 55 ), ( 225 , 50 ), ( 107 , 49 ), ( 357 , 44 ), ( 126 , 43 ), ( 339 , 38 ), ( 126 , 37 ), ( 328 , 32 ), ( 119 , 31 ), ( 424 , 26 ), ( 144 , 25 ), ( 243 , 20 ), ( 549 , 19 ), ( 329 , 14 ), ( 724 , 13 ), ( 189 , 8 ), ( 963 , 7 ), ( 232 , 2 ), ( 1532 , 1 )] 66 [ 132.0 , 130.0 , 128.0 , 126.0 , 124.0 , 122.0 , 120.0 , 118.0 , 116.0 , 114.0 , 112.0 , 110.0 , 108.0 , 107.0 , 105.0 , 103.0 , 100.0 , 98.0 , 96.0 , 94.0 , 93.0 , 91.0 , 88.0 , 84.0 , 82.0 , 79.0 , 76.0 , 73.0 , 69.0 , 63.0 , 54.0 , 42.0 , 0.0 ] 33 \u7ed3\u679c\u5206\u6790 194 - 193 = 1, 188 - 187 = 1, 182 - 181 = 1 ... \u82e5 for \u8bed\u53e5\u4e2d\u4e0d\u7528 if \u7b5b\u9009\uff0c\u4f1a\u53d1\u73b0 wall \u4e2d\u7684\u5e73\u65b9\u6570\u4e5f\u662f\u95f4\u9694\u7684","title":"part2"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#part3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) max_value = max ( ashes ) for i in range ( 33 ): data = [ ash == max_value for ash in ashes ] side = int ( len ( data ) ** 0.5 ) res = Image . new ( '1' , ( side , side )) res . putdata ( data ) res . save ( f \"./beer/33_ { i + 1 : 0>2 } .png\" ) ashes = [ ash for ash in ashes if ash < max_value - 1 ] max_value = max ( ashes , default =- 1 ) \u4e0e\u7b2c 25 \u9898\u7c7b\u4f3c\uff0c\u8fd9\u4e00\u9898\u662f\u7b2c 33 \u9898\uff0c\u6545\u53ef\u5f97 33 \u5f20\u56fe\u7247 \u5c06\u5e26\u6846\u7684\u56fe\u7247\u4f9d\u6b21\u7ec4\u5408\uff0c\u53ef\u5f97\u5230 gremlins","title":"part3"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#5","text":"http://www.pythonchallenge.com/pc/rock/gremlins.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#6","text":"Temporary End Thank you for playing the Python Challenge. More levels will come soon. You can find if there are new levels by checking the homepage or at the Python Challenge News Forum. You can also subscribe to the news forum by RSS. If you have ideas for new levels please send me using the forums. thesamet","title":"6. \u540e\u8bb0"},{"location":"PythonChallenge/Summarize/BIF/","text":"\u5185\u7f6e\u51fd\u6570 Link bytearray Link >>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>> bytes & list Link 1 2 3 4 5 6 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' # chr(1) = '\\x01' [ 1 , 2 , 3 ] bytes & string Link bytes to str 1 2 3 4 5 6 7 8 9 s = b \"abc\" print ( s . decode ()) print ( bytes . decode ( s )) print ( str ( s , encoding = \"utf-8\" )) >>> abc abc abc str to bytes 1 2 3 4 5 6 7 8 9 s = \"abc\" print ( s . encode ()) print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc' b 'abc' divmod Link divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200 max Link >>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>> translate & maketrans Link str.translate(table) You can use str.maketrans() to create a translation map from character-to-character mappings in different formats. static str.maketrans(x[, y[, z]]) This static method returns a translation table usable for str.translate(). If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result. >>> \"abc\" . translate ( str . maketrans ({ 'a' : 'x' , 'b' : 'y' , 'c' : 'z' })) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' )) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' , 'b' )) 'xz' >>> bytes.translate(table, /, delete=b'') You can use the bytes.maketrans() method to create a translation table. static bytes.maketrans(from, to) This static method returns a translation table usable for bytes.translate() that will map each character in from into the character at the same position in to; from and to must both be bytes-like objects and have the same length. >>> b \"xyz\" . translate ( None , b \"x\" ) b 'yz' >>> >>> b \"abc\" . translate ( bytes . maketrans ( b 'abc' , b 'xyz' )) b 'xyz' >>>","title":"02 BIF"},{"location":"PythonChallenge/Summarize/BIF/#_1","text":"","title":"\u5185\u7f6e\u51fd\u6570"},{"location":"PythonChallenge/Summarize/BIF/#bytearray","text":">>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>>","title":"bytearray"},{"location":"PythonChallenge/Summarize/BIF/#bytes-list","text":"1 2 3 4 5 6 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' # chr(1) = '\\x01' [ 1 , 2 , 3 ]","title":"bytes &amp; list"},{"location":"PythonChallenge/Summarize/BIF/#bytes-string","text":"bytes to str 1 2 3 4 5 6 7 8 9 s = b \"abc\" print ( s . decode ()) print ( bytes . decode ( s )) print ( str ( s , encoding = \"utf-8\" )) >>> abc abc abc str to bytes 1 2 3 4 5 6 7 8 9 s = \"abc\" print ( s . encode ()) print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc' b 'abc'","title":"bytes &amp; string"},{"location":"PythonChallenge/Summarize/BIF/#divmod","text":"divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200","title":"divmod"},{"location":"PythonChallenge/Summarize/BIF/#max","text":">>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>>","title":"max"},{"location":"PythonChallenge/Summarize/BIF/#translate-maketrans","text":"str.translate(table) You can use str.maketrans() to create a translation map from character-to-character mappings in different formats. static str.maketrans(x[, y[, z]]) This static method returns a translation table usable for str.translate(). If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result. >>> \"abc\" . translate ( str . maketrans ({ 'a' : 'x' , 'b' : 'y' , 'c' : 'z' })) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' )) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' , 'b' )) 'xz' >>> bytes.translate(table, /, delete=b'') You can use the bytes.maketrans() method to create a translation table. static bytes.maketrans(from, to) This static method returns a translation table usable for bytes.translate() that will map each character in from into the character at the same position in to; from and to must both be bytes-like objects and have the same length. >>> b \"xyz\" . translate ( None , b \"x\" ) b 'yz' >>> >>> b \"abc\" . translate ( bytes . maketrans ( b 'abc' , b 'xyz' )) b 'xyz' >>>","title":"translate &amp; maketrans"},{"location":"PythonChallenge/Summarize/HttpResponseCode/","text":"HttpResponseCode Link \u5e38\u89c1\u7684 Status Code Link Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9 \u8865\u5145 Link \u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095","title":"12 HttpResponseCode"},{"location":"PythonChallenge/Summarize/HttpResponseCode/#httpresponsecode","text":"","title":"HttpResponseCode"},{"location":"PythonChallenge/Summarize/HttpResponseCode/#status-code","text":"Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9","title":"\u5e38\u89c1\u7684 Status Code"},{"location":"PythonChallenge/Summarize/HttpResponseCode/#_1","text":"\u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095","title":"\u8865\u5145"},{"location":"PythonChallenge/Summarize/Linux-CMD/","text":"curl Link \u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ... 2. md5 Link york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip 3. you get Link york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file 4. \u67e5\u770b\u6587\u4ef6\u7c7b\u578b Link york$ file unreal.dat ... 5. \u4e0b\u8f7d\u6587\u4ef6 Link york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"14 Linux-CMD"},{"location":"PythonChallenge/Summarize/Linux-CMD/#curl","text":"\u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ...","title":"curl"},{"location":"PythonChallenge/Summarize/Linux-CMD/#2-md5","text":"york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip","title":"2. md5"},{"location":"PythonChallenge/Summarize/Linux-CMD/#3-you-get","text":"york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file","title":"3. you get"},{"location":"PythonChallenge/Summarize/Linux-CMD/#4","text":"york$ file unreal.dat ...","title":"4. \u67e5\u770b\u6587\u4ef6\u7c7b\u578b"},{"location":"PythonChallenge/Summarize/Linux-CMD/#5","text":"york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"5. \u4e0b\u8f7d\u6587\u4ef6"},{"location":"PythonChallenge/Summarize/Pillow/","text":"Pillow Link \u5b89\u88c5\u4e0e\u4f7f\u7528 Link \u5b89\u88c5\u65f6\u7684\u540d\u5b57\uff1a Pillow \u4f7f\u7528\u65f6\u7684\u540d\u5b57\uff1a PIL PIL.Image Link \u6253\u5f00\u3001\u8f7d\u5165\u3001\u67e5\u770b\u4e0e\u5173\u95ed PIL.Image.open(fp, mode='r') Image.load() Image.mode 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ... Image.close() >>> from PIL import Image >>> >>> img1 = Image . open ( \"python.png\" ) # \u7528 Image \u6253\u5f00\u56fe\u7247 >>> img1 . mode '1' >>> pix1 = img1 . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e >>> pix1 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684\u50cf\u7d20\u503c 255 >>> img2 = Image . open ( \"oxygen.png\" ) >>> img2 . mode 'RGBA' >>> pix2 = img2 . load () >>> pix2 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684 R, G, B, A\uff08A \u4e3a\u900f\u660e\u5ea6\uff09 ( 79 , 92 , 23 , 255 ) # A=255 \u8868\u793a\u4e0d\u900f\u660e >>> \u83b7\u53d6\u901a\u9053\u7684\u5b57\u7b26\u4e32\u5e8f\u5217 Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> >>> img = Image . open ( \"oxygen.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' , 'A' ) >>> \u67e5\u770b\u56fe\u7247\u7684\u5c3a\u5bf8 PIL.Image.size Image.size[0], Image.size[1] PIL.Image.width, PIL.Image.height >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> w , h = img . size >>> w , h ( 640 , 480 ) >>> img . size [ 0 ], img . size [ 1 ] ( 640 , 480 ) >>> img . width , img . height ( 640 , 480 ) >>> \u88c1\u526a\u3001\u653e\u5927\u3001\u5c55\u793a\u4e0e\u4fdd\u5b58\u56fe\u7247 Image.crop(box=None) Image.resize(size, resample=3, box=None, reducing_gap=None) Image.show(title=None, command=None) Image.save(fp, format=None, **params) 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250 img . show () img . save ( \"resize_cave.jpg\" ) \u65b0\u5efa\u56fe\u7247\uff0c\u83b7\u53d6\u50cf\u7d20\u4e0e\u586b\u5165\u50cf\u7d20 PIL.Image.new(mode, size, color=0) Image.getpixel(xy) Image.putpixel(xy, value) >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> new = Image . new ( \"RGB\" , ( 500 , 500 )) >>> pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c >>> pix ( 0 , 20 , 0 ) >>> new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> 256 \u8272\u51fa\u73b0\u6b21\u6570\u7edf\u8ba1 Image.histogram(mask=None, extrema=None) If the image has more than one band, the histograms for all bands are concatenated. for example, the histogram for an \u201cRGB\u201d image contains 768 values. >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> res = img . histogram () # \u53cc\u8272\u56fe\uff1a0-255\uff1bR,G,B \u56fe\uff1a3 x (0-255) >>> len ( res ) # \u8fd9\u4e2a\u503c\u4e0e\u56fe\u7247\u7684 mode \u6709\u5173 768 # 768 = 256 x 3 >>> res [: 9 ] [ 12690 , 3753 , 1339 , 4152 , 4660 , 1828 , 5823 , 5698 , 6229 ] >>> \u83b7\u53d6\u56fe\u7247\u7684\u989c\u8272\u3001\u5927\u5c0f\u7b49\u4fe1\u606f Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() Image.seek(frame) Image.getpalette() >>> from PIL import Image >>> >>> gif = Image . open ( \"white.gif\" ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u53cd\u8f6c\u6216\u65cb\u8f6c Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c # ... with wave Link \u5199\u5165\u6570\u636e PIL.Image.frombytes(mode, size, data, decoder_name='raw', *args) Image.paste(im, box=None, mask=None) 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): wave_bytes = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), wave_bytes ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' ) PIL.ImageChrop Link \u5e73\u79fb PIL.ImageChops.offset(image, xoffset, yoffset=None) \u5c06\u56fe\u7247\u8f6c\u4e3a\u5b57\u8282\u5bf9\u8c61 Image.tobytes(encoder_name='raw', *args) Return image as a bytes object. >>> from PIL import Image , ImageChops >>> >>> img = Image . open ( \"mozart.gif\" ) >>> box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 >>> row = img . crop ( box ) # \u88c1\u526a >>> row2bytes = row . tobytes () >>> i = row2bytes . index ( 195 ) >>> row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 >>> img . paste ( row , box ) # \u7c98\u8d34 >>> PIL.ImageDraw Link \u753b\u7ebf class PIL.ImageDraw.Draw(im, mode=None) PIL.ImageDraw.ImageDraw.line(xy, fill=None, width=0, joint=None) PIL.ImageDraw.ImageDraw.polygon(xy, fill=None, outline=None) >>> from PIL import Image , ImageDraw >>> >>> rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] >>> rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] >>> img = Image . new ( \"RGB\" , ( 500 , 500 )) >>> draw = ImageDraw . Draw ( img ) >>> draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde >>> draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde >>>","title":"17 Pillow"},{"location":"PythonChallenge/Summarize/Pillow/#pillow","text":"","title":"Pillow"},{"location":"PythonChallenge/Summarize/Pillow/#_1","text":"\u5b89\u88c5\u65f6\u7684\u540d\u5b57\uff1a Pillow \u4f7f\u7528\u65f6\u7684\u540d\u5b57\uff1a PIL","title":"\u5b89\u88c5\u4e0e\u4f7f\u7528"},{"location":"PythonChallenge/Summarize/Pillow/#pilimage","text":"\u6253\u5f00\u3001\u8f7d\u5165\u3001\u67e5\u770b\u4e0e\u5173\u95ed PIL.Image.open(fp, mode='r') Image.load() Image.mode 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ... Image.close() >>> from PIL import Image >>> >>> img1 = Image . open ( \"python.png\" ) # \u7528 Image \u6253\u5f00\u56fe\u7247 >>> img1 . mode '1' >>> pix1 = img1 . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e >>> pix1 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684\u50cf\u7d20\u503c 255 >>> img2 = Image . open ( \"oxygen.png\" ) >>> img2 . mode 'RGBA' >>> pix2 = img2 . load () >>> pix2 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684 R, G, B, A\uff08A \u4e3a\u900f\u660e\u5ea6\uff09 ( 79 , 92 , 23 , 255 ) # A=255 \u8868\u793a\u4e0d\u900f\u660e >>> \u83b7\u53d6\u901a\u9053\u7684\u5b57\u7b26\u4e32\u5e8f\u5217 Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> >>> img = Image . open ( \"oxygen.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' , 'A' ) >>> \u67e5\u770b\u56fe\u7247\u7684\u5c3a\u5bf8 PIL.Image.size Image.size[0], Image.size[1] PIL.Image.width, PIL.Image.height >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> w , h = img . size >>> w , h ( 640 , 480 ) >>> img . size [ 0 ], img . size [ 1 ] ( 640 , 480 ) >>> img . width , img . height ( 640 , 480 ) >>> \u88c1\u526a\u3001\u653e\u5927\u3001\u5c55\u793a\u4e0e\u4fdd\u5b58\u56fe\u7247 Image.crop(box=None) Image.resize(size, resample=3, box=None, reducing_gap=None) Image.show(title=None, command=None) Image.save(fp, format=None, **params) 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250 img . show () img . save ( \"resize_cave.jpg\" ) \u65b0\u5efa\u56fe\u7247\uff0c\u83b7\u53d6\u50cf\u7d20\u4e0e\u586b\u5165\u50cf\u7d20 PIL.Image.new(mode, size, color=0) Image.getpixel(xy) Image.putpixel(xy, value) >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> new = Image . new ( \"RGB\" , ( 500 , 500 )) >>> pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c >>> pix ( 0 , 20 , 0 ) >>> new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> 256 \u8272\u51fa\u73b0\u6b21\u6570\u7edf\u8ba1 Image.histogram(mask=None, extrema=None) If the image has more than one band, the histograms for all bands are concatenated. for example, the histogram for an \u201cRGB\u201d image contains 768 values. >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> res = img . histogram () # \u53cc\u8272\u56fe\uff1a0-255\uff1bR,G,B \u56fe\uff1a3 x (0-255) >>> len ( res ) # \u8fd9\u4e2a\u503c\u4e0e\u56fe\u7247\u7684 mode \u6709\u5173 768 # 768 = 256 x 3 >>> res [: 9 ] [ 12690 , 3753 , 1339 , 4152 , 4660 , 1828 , 5823 , 5698 , 6229 ] >>> \u83b7\u53d6\u56fe\u7247\u7684\u989c\u8272\u3001\u5927\u5c0f\u7b49\u4fe1\u606f Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() Image.seek(frame) Image.getpalette() >>> from PIL import Image >>> >>> gif = Image . open ( \"white.gif\" ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u53cd\u8f6c\u6216\u65cb\u8f6c Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c # ...","title":"PIL.Image"},{"location":"PythonChallenge/Summarize/Pillow/#with-wave","text":"\u5199\u5165\u6570\u636e PIL.Image.frombytes(mode, size, data, decoder_name='raw', *args) Image.paste(im, box=None, mask=None) 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): wave_bytes = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), wave_bytes ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' )","title":"with wave"},{"location":"PythonChallenge/Summarize/Pillow/#pilimagechrop","text":"\u5e73\u79fb PIL.ImageChops.offset(image, xoffset, yoffset=None) \u5c06\u56fe\u7247\u8f6c\u4e3a\u5b57\u8282\u5bf9\u8c61 Image.tobytes(encoder_name='raw', *args) Return image as a bytes object. >>> from PIL import Image , ImageChops >>> >>> img = Image . open ( \"mozart.gif\" ) >>> box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 >>> row = img . crop ( box ) # \u88c1\u526a >>> row2bytes = row . tobytes () >>> i = row2bytes . index ( 195 ) >>> row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 >>> img . paste ( row , box ) # \u7c98\u8d34 >>>","title":"PIL.ImageChrop"},{"location":"PythonChallenge/Summarize/Pillow/#pilimagedraw","text":"\u753b\u7ebf class PIL.ImageDraw.Draw(im, mode=None) PIL.ImageDraw.ImageDraw.line(xy, fill=None, width=0, joint=None) PIL.ImageDraw.ImageDraw.polygon(xy, fill=None, outline=None) >>> from PIL import Image , ImageDraw >>> >>> rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] >>> rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] >>> img = Image . new ( \"RGB\" , ( 500 , 500 )) >>> draw = ImageDraw . Draw ( img ) >>> draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde >>> draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde >>>","title":"PIL.ImageDraw"},{"location":"PythonChallenge/Summarize/base64/","text":"base64 Link base64.b64decode Link 1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @'","title":"01 base64"},{"location":"PythonChallenge/Summarize/base64/#base64","text":"","title":"base64"},{"location":"PythonChallenge/Summarize/base64/#base64b64decode","text":"1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @'","title":"base64.b64decode"},{"location":"PythonChallenge/Summarize/binascii/","text":"binascii Link \u6709\u76f8\u540c\u7684\u4f5c\u7528 unhexlify \u2248 a2b_hex hexlify \u2248 b2a_hex >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>>","title":"03 binascii"},{"location":"PythonChallenge/Summarize/binascii/#binascii","text":"\u6709\u76f8\u540c\u7684\u4f5c\u7528 unhexlify \u2248 a2b_hex hexlify \u2248 b2a_hex >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>>","title":"binascii"},{"location":"PythonChallenge/Summarize/bz2/","text":"bz2 Link bz2.decompress Link 1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"04 bz2"},{"location":"PythonChallenge/Summarize/bz2/#bz2","text":"","title":"bz2"},{"location":"PythonChallenge/Summarize/bz2/#bz2decompress","text":"1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"bz2.decompress"},{"location":"PythonChallenge/Summarize/collections/","text":"collections Link collections.Counter Link class collections.Counter([iterable-or-mapping]) A Counter is a dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. >>> from collections import Counter >>> Counter ( \"happy\" ) Counter ({ 'p' : 2 , 'h' : 1 , 'a' : 1 , 'y' : 1 }) >>>","title":"05 collections"},{"location":"PythonChallenge/Summarize/collections/#collections","text":"","title":"collections"},{"location":"PythonChallenge/Summarize/collections/#collectionscounter","text":"class collections.Counter([iterable-or-mapping]) A Counter is a dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. >>> from collections import Counter >>> Counter ( \"happy\" ) Counter ({ 'p' : 2 , 'h' : 1 , 'a' : 1 , 'y' : 1 }) >>>","title":"collections.Counter"},{"location":"PythonChallenge/Summarize/datetime/","text":"datetime Link datetime.datetime Link >>> from datetime import datetime >>> date = datetime ( 2020 , 1 , 1 ) >>> date datetime . datetime ( 2020 , 1 , 1 , 0 , 0 ) # y, m, d, h, m >>> date . year , date . month , date . day ( 2020 , 1 , 1 ) >>> date . weekday () # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 2 # 2020-01-01 \u662f\u5468\u4e09 >>>","title":"06 datetime"},{"location":"PythonChallenge/Summarize/datetime/#datetime","text":"","title":"datetime"},{"location":"PythonChallenge/Summarize/datetime/#datetimedatetime","text":">>> from datetime import datetime >>> date = datetime ( 2020 , 1 , 1 ) >>> date datetime . datetime ( 2020 , 1 , 1 , 0 , 0 ) # y, m, d, h, m >>> date . year , date . month , date . day ( 2020 , 1 , 1 ) >>> date . weekday () # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 2 # 2020-01-01 \u662f\u5468\u4e09 >>>","title":"datetime.datetime"},{"location":"PythonChallenge/Summarize/difflib/","text":"difflib Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import difflib data = \"\"\"abc abc def def ghi ghh jkk jkl mno mno\"\"\" left , right = [], [] for line in data . splitlines (): left . append ( line [: 3 ]) right . append ( line [ 4 :]) print ( left ) print ( right ) # compare = difflib.Differ().compare(left, right) # \u521b\u5efa\u4e00\u4e2a Differ \u5bf9\u8c61\uff0c\u6548\u679c\u540c\u4e0b compare = difflib . ndiff ( left , right ) for line in compare : print ( line ) >>> [ 'abc' , 'def' , 'ghi' , 'jkk' , 'mno' ] [ 'abc' , 'def' , 'ghh' , 'jkl' , 'mno' ] abc def - ghi - jkk + ghh + jkl mno","title":"07 difflib"},{"location":"PythonChallenge/Summarize/difflib/#difflib","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import difflib data = \"\"\"abc abc def def ghi ghh jkk jkl mno mno\"\"\" left , right = [], [] for line in data . splitlines (): left . append ( line [: 3 ]) right . append ( line [ 4 :]) print ( left ) print ( right ) # compare = difflib.Differ().compare(left, right) # \u521b\u5efa\u4e00\u4e2a Differ \u5bf9\u8c61\uff0c\u6548\u679c\u540c\u4e0b compare = difflib . ndiff ( left , right ) for line in compare : print ( line ) >>> [ 'abc' , 'def' , 'ghi' , 'jkk' , 'mno' ] [ 'abc' , 'def' , 'ghh' , 'jkl' , 'mno' ] abc def - ghi - jkk + ghh + jkl mno","title":"difflib"},{"location":"PythonChallenge/Summarize/email/","text":"email Link email.txt \u89c1\u201c\u6765\u6e90\u201d 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False","title":"08 email"},{"location":"PythonChallenge/Summarize/email/#email","text":"email.txt \u89c1\u201c\u6765\u6e90\u201d 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False","title":"email"},{"location":"PythonChallenge/Summarize/file-header/","text":"\u6587\u4ef6\u5934 Link \u683c\u5f0f \u6587\u4ef6\u5934\u7684\u90e8\u5206\u4fe1\u606f bz2 'BZh91A' gif 'GIF' jpg 'JFIF' png 'PNG...IHDR' zip 'PK' \u683c\u5f0f hex bytes gzip 1f 8b 08 b'\\x1f\\x8b\\x08' lzma 6c 00 b'l\\x00' zlib 78 9c b'x\\x9c'","title":"09 file-header"},{"location":"PythonChallenge/Summarize/file-header/#_1","text":"\u683c\u5f0f \u6587\u4ef6\u5934\u7684\u90e8\u5206\u4fe1\u606f bz2 'BZh91A' gif 'GIF' jpg 'JFIF' png 'PNG...IHDR' zip 'PK' \u683c\u5f0f hex bytes gzip 1f 8b 08 b'\\x1f\\x8b\\x08' lzma 6c 00 b'l\\x00' zlib 78 9c b'x\\x9c'","title":"\u6587\u4ef6\u5934"},{"location":"PythonChallenge/Summarize/gzip/","text":"gzip Link 1 2 3 4 5 6 7 8 9 import gzip with gzip . open ( \"deltas.gz\" ) as f : for line in f : print ( line . decode ()) break >>> 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00","title":"10 gzip"},{"location":"PythonChallenge/Summarize/gzip/#gzip","text":"1 2 3 4 5 6 7 8 9 import gzip with gzip . open ( \"deltas.gz\" ) as f : for line in f : print ( line . decode ()) break >>> 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00","title":"gzip"},{"location":"PythonChallenge/Summarize/hashlib/","text":"hashlib Link hashlib.md5 Link \u6587\u4ef6 Link 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc \u5b57\u7b26\u4e32 Link 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 m = md5 () m . update ( bytes ( \"password\" , \"utf8\" )) # \u8fd9\u91cc\u52a0\u76d0\u66f4\u597d pwd = m . hexdigest () print ( pwd ) >>> 5 f4dcc3b5aa765d61d8327deb882cf99","title":"11 hashlib"},{"location":"PythonChallenge/Summarize/hashlib/#hashlib","text":"","title":"hashlib"},{"location":"PythonChallenge/Summarize/hashlib/#hashlibmd5","text":"","title":"hashlib.md5"},{"location":"PythonChallenge/Summarize/hashlib/#_1","text":"1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc","title":"\u6587\u4ef6"},{"location":"PythonChallenge/Summarize/hashlib/#_2","text":"1 2 3 4 5 6 7 8 9 10 from hashlib import md5 m = md5 () m . update ( bytes ( \"password\" , \"utf8\" )) # \u8fd9\u91cc\u52a0\u76d0\u66f4\u597d pwd = m . hexdigest () print ( pwd ) >>> 5 f4dcc3b5aa765d61d8327deb882cf99","title":"\u5b57\u7b26\u4e32"},{"location":"PythonChallenge/Summarize/keyword/","text":"keyword Link test in Python3.7.6 keyword.iskeyword Link \u65b9\u6cd5\u4e00 Link >>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>> \u65b9\u6cd5\u4e8c Link >>> from keyword import kwlist >>> kwlist [ 'False' , 'None' , 'True' , 'and' , 'as' , 'assert' , 'async' , 'await' , 'break' , 'class' , 'continue' , 'def' , 'del' , 'elif' , 'else' , 'except' , 'finally' , 'for' , 'from' , 'global' , 'if' , 'import' , 'in' , 'is' , 'lambda' , 'nonlocal' , 'not' , 'or' , 'pass' , 'raise' , 'return' , 'try' , 'while' , 'with' , 'yield' ] >>> len ( kwlist ) 35 >>>","title":"l3 keyword"},{"location":"PythonChallenge/Summarize/keyword/#keyword","text":"test in Python3.7.6","title":"keyword"},{"location":"PythonChallenge/Summarize/keyword/#keywordiskeyword","text":"","title":"keyword.iskeyword"},{"location":"PythonChallenge/Summarize/keyword/#_1","text":">>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>>","title":"\u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Summarize/keyword/#_2","text":">>> from keyword import kwlist >>> kwlist [ 'False' , 'None' , 'True' , 'and' , 'as' , 'assert' , 'async' , 'await' , 'break' , 'class' , 'continue' , 'def' , 'del' , 'elif' , 'else' , 'except' , 'finally' , 'for' , 'from' , 'global' , 'if' , 'import' , 'in' , 'is' , 'lambda' , 'nonlocal' , 'not' , 'or' , 'pass' , 'raise' , 'return' , 'try' , 'while' , 'with' , 'yield' ] >>> len ( kwlist ) 35 >>>","title":"\u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Summarize/os/","text":"os Link os.popen Link 1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux","title":"15 os"},{"location":"PythonChallenge/Summarize/os/#os","text":"","title":"os"},{"location":"PythonChallenge/Summarize/os/#ospopen","text":"1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux","title":"os.popen"},{"location":"PythonChallenge/Summarize/pickle/","text":"pickle Link pickle.dump \u2014\u2014\u5199\u5165 Link 1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close () pickle.load \u2014\u2014\u5bfc\u51fa Link 1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"16 pickle"},{"location":"PythonChallenge/Summarize/pickle/#pickle","text":"","title":"pickle"},{"location":"PythonChallenge/Summarize/pickle/#pickledump","text":"1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close ()","title":"pickle.dump \u2014\u2014\u5199\u5165"},{"location":"PythonChallenge/Summarize/pickle/#pickleload","text":"1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"pickle.load \u2014\u2014\u5bfc\u51fa"},{"location":"PythonChallenge/Summarize/re/","text":"re Link \u7279\u6b8a\u5b57\u7b26 Link \u8d44\u6599\u5730\u5740\uff1ahttps://docs.python.org/3/library/re.html . In the default mode, this matches any character except a newline. If the DOTALL flag has been specified, this matches any character including a newline. . \u5728\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u5339\u914d\u9664\u4e86\u6362\u884c\u7684\u4efb\u610f\u5b57\u7b26\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u6807\u7b7e DOTALL \uff0c\u5b83\u5c06\u5339\u914d\u5305\u62ec\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u3002 * Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab* will match \u2018a\u2019, \u2018ab\u2019, or \u2018a\u2019 followed by any number of \u2018b\u2019s. * \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u5230\u4efb\u610f\u6b21\u91cd\u590d\uff0c \u5c3d\u91cf\u591a\u7684\u5339\u914d\u5b57\u7b26\u4e32\u3002 ab* \u4f1a\u5339\u914d 'a'\uff0c'ab'\uff0c\u6216\u8005 'a' \u540e\u9762\u8ddf\u968f\u4efb\u610f\u4e2a 'b'\u3002 + Causes the resulting RE to match 1 or more repetitions of the preceding RE. ab+ will match \u2018a\u2019 followed by any non-zero number of \u2018b\u2019s; it will not match just \u2018a\u2019. + \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d1\u5230\u4efb\u610f\u6b21\u91cd\u590d\u3002 ab+ \u4f1a\u5339\u914d 'a' \u540e\u9762\u8ddf\u968f1\u4e2a\u4ee5\u4e0a\u5230\u4efb\u610f\u4e2a 'b'\uff0c\u5b83\u4e0d\u4f1a\u5339\u914d 'a'\u3002 {m} Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match. For example, a{6} will match exactly six 'a' characters, but not five. {m} \u5bf9\u5176\u4e4b\u524d\u7684\u6b63\u5219\u5f0f\u6307\u5b9a\u5339\u914d m \u4e2a\u91cd\u590d\uff1b \u5c11\u4e8e m \u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u5339\u914d\u5931\u8d25\u3002 \u6bd4\u5982\uff0ca{6} \u5c06\u5339\u914d6\u4e2a 'a' , \u4f46\u662f\u4e0d\u80fd\u662f5\u4e2a\u3002 {m,n} Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible. For example, a{3,5} will match from 3 to 5 'a' characters. Omitting m specifies a lower bound of zero, and omitting n specifies an infinite upper bound. As an example, a{4,}b will match 'aaaab' or a thousand 'a' characters followed by a 'b', but not 'aaab'. The comma may not be omitted or t\u3002he modifier would be confused with the previously described form. {m, n} \u5bf9\u6b63\u5219\u5f0f\u8fdb\u884c m \u5230 n \u6b21\u5339\u914d\uff0c\u5728 m \u548c n \u4e4b\u95f4\u53d6\u5c3d\u91cf\u591a\u3002 \u6bd4\u5982\uff0ca{3,5} \u5c06\u5339\u914d 3 \u5230 5 \u4e2a 'a'\u3002 \u5ffd\u7565 m \u610f\u4e3a\u6307\u5b9a\u4e0b\u754c\u4e3a0\uff0c\u5ffd\u7565 n \u6307\u5b9a\u4e0a\u754c\u4e3a\u65e0\u9650\u6b21\u3002 \u6bd4\u5982 a{4,}b \u5c06\u5339\u914d 'aaaab' \u6216\u8005 1000 \u4e2a 'a' \u5c3e\u968f\u4e00\u4e2a 'b'\uff0c\u4f46\u4e0d\u80fd\u5339\u914d 'aaab'\u3002 \u9017\u53f7\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u65e0\u6cd5\u8fa8\u522b\u4fee\u9970\u7b26\u5e94\u8be5\u5ffd\u7565\u54ea\u4e2a\u8fb9\u754c\u3002 [] Used to indicate a set of characters. In a set: Characters can be listed individually, e.g. [amk] will match 'a', 'm', or 'k'. Ranges of characters can be indicated by giving two characters and separating them by a '-', for example [a-z] will match any lowercase ASCII letter [0-5][0-9] will match all the two-digits numbers from 00 to 59 [0-9A-Fa-f] will match any hexadecimal digit. If - is escaped (e.g. [a-z]) or if it\u2019s placed as the first or last character (e.g. [-a] or [a-]), it will match a literal '-'. [] \u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u96c6\u5408\u3002\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff1a \u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u5217\u51fa\uff0c\u6bd4\u5982 [amk] \u5339\u914d 'a'\uff0c 'm'\uff0c \u6216\u8005 'k'\u3002 \u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u8303\u56f4\uff0c\u901a\u8fc7\u7528 '-' \u5c06\u4e24\u4e2a\u5b57\u7b26\u8fde\u8d77\u6765\u3002 \u6bd4\u5982 [a-z] \u5c06\u5339\u914d\u4efb\u4f55\u5c0f\u5199ASCII\u5b57\u7b26\uff0c [0-5][0-9] \u5c06\u5339\u914d\u4ece 00 \u5230 59 \u7684\u4e24\u4f4d\u6570\u5b57\uff0c [0-9A-Fa-f] \u5c06\u5339\u914d\u4efb\u4f55\u5341\u516d\u8fdb\u5236\u6570\u4f4d\u3002 \u5982\u679c - \u8fdb\u884c\u4e86\u8f6c\u4e49 \uff08\u6bd4\u5982 [a-z]\uff09\u6216\u8005\u5b83\u7684\u4f4d\u7f6e\u5728\u9996\u4f4d\u6216\u8005\u672b\u5c3e\uff08\u5982 [-a] \u6216 [a-]\uff09\uff0c\u5b83\u5c31\u53ea\u8868\u793a\u666e\u901a\u5b57\u7b26 '-'\u3002 \u7279\u6b8a\u5b57\u7b26\u5728\u96c6\u5408\u4e2d\uff0c\u5931\u53bb\u5b83\u7684\u7279\u6b8a\u542b\u4e49\u3002\u6bd4\u5982 [(+ )] \u53ea\u4f1a\u5339\u914d\u8fd9\u51e0\u4e2a\u6587\u6cd5\u5b57\u7b26 '(', '+', ' ', or ')'\u3002 \u5b57\u7b26\u7c7b\u5982 \\w \u6216\u8005 \\S (\u5982\u4e0b\u5b9a\u4e49) \u5728\u96c6\u5408\u5185\u53ef\u4ee5\u63a5\u53d7\uff0c\u5b83\u4eec\u53ef\u4ee5\u5339\u914d\u7684\u5b57\u7b26\u7531 ASCII \u6216\u8005 LOCALE \u6a21\u5f0f\u51b3\u5b9a\u3002 \u4e0d\u5728\u96c6\u5408\u8303\u56f4\u5185\u7684\u5b57\u7b26\u53ef\u4ee5\u901a\u8fc7 \u53d6\u53cd \u6765\u8fdb\u884c\u5339\u914d\u3002\u5982\u679c\u96c6\u5408\u9996\u5b57\u7b26\u662f '^' \uff0c\u6240\u6709 \u4e0d \u5728\u96c6\u5408\u5185\u7684\u5b57\u7b26\u5c06\u4f1a\u88ab\u5339\u914d\uff0c\u6bd4\u5982 [^5] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '5'\uff0c [^^] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '^'. ^ \u5982\u679c\u4e0d\u5728\u96c6\u5408\u9996\u4f4d\uff0c\u5c31\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u5728\u96c6\u5408\u5185\u8981\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ']'\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u8981\u4e48\u5c31\u5728\u5b83\u4e4b\u524d\u52a0\u4e0a\u53cd\u659c\u6760\uff0c\u8981\u4e48\u5c31\u628a\u5b83\u653e\u5230\u96c6\u5408\u9996\u4f4d\u3002\u6bd4\u5982\uff0c [()[]{}] \u548c [{}] \u90fd\u53ef\u4ee5\u5339\u914d\u62ec\u53f7\u3002 Unicode Technical Standard #18 \u91cc\u7684\u5d4c\u5957\u96c6\u5408\u548c\u96c6\u5408\u64cd\u4f5c\u652f\u6301\u53ef\u80fd\u5728\u672a\u6765\u6dfb\u52a0\u3002\u8fd9\u5c06\u4f1a\u6539\u53d8\u8bed\u6cd5\uff0c\u6240\u4ee5\u4e3a\u4e86\u5e2e\u52a9\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e00\u4e2a FutureWarning \u5c06\u4f1a\u5728\u6709\u591a\u4e49\u7684\u60c5\u51b5\u91cc\u88ab raise\uff0c\u5305\u542b\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff0c\u96c6\u5408\u7531 '[' \u5f00\u59cb\uff0c\u6216\u8005\u5305\u542b\u4e0b\u5217\u5b57\u7b26\u5e8f\u5217 '--', '&&', '~~', \u548c '||'\u3002\u4e3a\u4e86\u907f\u514d\u8b66\u544a\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u7528\u53cd\u659c\u6760\u8f6c\u4e49\u3002 \u5728 3.7 \u7248\u66f4\u6539: \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6784\u5efa\u7684\u8bed\u4e49\u5728\u672a\u6765\u4f1a\u6539\u53d8\u7684\u8bdd\uff0c\u4e00\u4e2a FutureWarning \u4f1a raise \u3002 (...) Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the \\number special sequence, described below. To match the literals '(' or ')', use ( or ), or enclose them inside a character class: [(], [)]. (...) \uff08\u7ec4\u5408\uff09\uff0c\u5339\u914d\u62ec\u53f7\u5185\u7684\u4efb\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5e76\u6807\u8bc6\u51fa\u7ec4\u5408\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 \u5339\u914d\u5b8c\u6210\u540e\uff0c\u7ec4\u5408\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u83b7\u53d6\uff0c\u5e76\u53ef\u4ee5\u5728\u4e4b\u540e\u7528 \\number \u8f6c\u4e49\u5e8f\u5217\u8fdb\u884c\u518d\u6b21\u5339\u914d\uff0c\u4e4b\u540e\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002 \u8981\u5339\u914d\u5b57\u7b26 '(' \u6216\u8005 ')', \u7528 ( \u6216 ), \u6216\u8005\u628a\u5b83\u4eec\u5305\u542b\u5728\u5b57\u7b26\u96c6\u5408\u91cc: [(], [)].","title":"18 re"},{"location":"PythonChallenge/Summarize/re/#re","text":"","title":"re"},{"location":"PythonChallenge/Summarize/re/#_1","text":"\u8d44\u6599\u5730\u5740\uff1ahttps://docs.python.org/3/library/re.html . In the default mode, this matches any character except a newline. If the DOTALL flag has been specified, this matches any character including a newline. . \u5728\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u5339\u914d\u9664\u4e86\u6362\u884c\u7684\u4efb\u610f\u5b57\u7b26\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u6807\u7b7e DOTALL \uff0c\u5b83\u5c06\u5339\u914d\u5305\u62ec\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u3002 * Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab* will match \u2018a\u2019, \u2018ab\u2019, or \u2018a\u2019 followed by any number of \u2018b\u2019s. * \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u5230\u4efb\u610f\u6b21\u91cd\u590d\uff0c \u5c3d\u91cf\u591a\u7684\u5339\u914d\u5b57\u7b26\u4e32\u3002 ab* \u4f1a\u5339\u914d 'a'\uff0c'ab'\uff0c\u6216\u8005 'a' \u540e\u9762\u8ddf\u968f\u4efb\u610f\u4e2a 'b'\u3002 + Causes the resulting RE to match 1 or more repetitions of the preceding RE. ab+ will match \u2018a\u2019 followed by any non-zero number of \u2018b\u2019s; it will not match just \u2018a\u2019. + \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d1\u5230\u4efb\u610f\u6b21\u91cd\u590d\u3002 ab+ \u4f1a\u5339\u914d 'a' \u540e\u9762\u8ddf\u968f1\u4e2a\u4ee5\u4e0a\u5230\u4efb\u610f\u4e2a 'b'\uff0c\u5b83\u4e0d\u4f1a\u5339\u914d 'a'\u3002 {m} Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match. For example, a{6} will match exactly six 'a' characters, but not five. {m} \u5bf9\u5176\u4e4b\u524d\u7684\u6b63\u5219\u5f0f\u6307\u5b9a\u5339\u914d m \u4e2a\u91cd\u590d\uff1b \u5c11\u4e8e m \u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u5339\u914d\u5931\u8d25\u3002 \u6bd4\u5982\uff0ca{6} \u5c06\u5339\u914d6\u4e2a 'a' , \u4f46\u662f\u4e0d\u80fd\u662f5\u4e2a\u3002 {m,n} Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible. For example, a{3,5} will match from 3 to 5 'a' characters. Omitting m specifies a lower bound of zero, and omitting n specifies an infinite upper bound. As an example, a{4,}b will match 'aaaab' or a thousand 'a' characters followed by a 'b', but not 'aaab'. The comma may not be omitted or t\u3002he modifier would be confused with the previously described form. {m, n} \u5bf9\u6b63\u5219\u5f0f\u8fdb\u884c m \u5230 n \u6b21\u5339\u914d\uff0c\u5728 m \u548c n \u4e4b\u95f4\u53d6\u5c3d\u91cf\u591a\u3002 \u6bd4\u5982\uff0ca{3,5} \u5c06\u5339\u914d 3 \u5230 5 \u4e2a 'a'\u3002 \u5ffd\u7565 m \u610f\u4e3a\u6307\u5b9a\u4e0b\u754c\u4e3a0\uff0c\u5ffd\u7565 n \u6307\u5b9a\u4e0a\u754c\u4e3a\u65e0\u9650\u6b21\u3002 \u6bd4\u5982 a{4,}b \u5c06\u5339\u914d 'aaaab' \u6216\u8005 1000 \u4e2a 'a' \u5c3e\u968f\u4e00\u4e2a 'b'\uff0c\u4f46\u4e0d\u80fd\u5339\u914d 'aaab'\u3002 \u9017\u53f7\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u65e0\u6cd5\u8fa8\u522b\u4fee\u9970\u7b26\u5e94\u8be5\u5ffd\u7565\u54ea\u4e2a\u8fb9\u754c\u3002 [] Used to indicate a set of characters. In a set: Characters can be listed individually, e.g. [amk] will match 'a', 'm', or 'k'. Ranges of characters can be indicated by giving two characters and separating them by a '-', for example [a-z] will match any lowercase ASCII letter [0-5][0-9] will match all the two-digits numbers from 00 to 59 [0-9A-Fa-f] will match any hexadecimal digit. If - is escaped (e.g. [a-z]) or if it\u2019s placed as the first or last character (e.g. [-a] or [a-]), it will match a literal '-'. [] \u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u96c6\u5408\u3002\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff1a \u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u5217\u51fa\uff0c\u6bd4\u5982 [amk] \u5339\u914d 'a'\uff0c 'm'\uff0c \u6216\u8005 'k'\u3002 \u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u8303\u56f4\uff0c\u901a\u8fc7\u7528 '-' \u5c06\u4e24\u4e2a\u5b57\u7b26\u8fde\u8d77\u6765\u3002 \u6bd4\u5982 [a-z] \u5c06\u5339\u914d\u4efb\u4f55\u5c0f\u5199ASCII\u5b57\u7b26\uff0c [0-5][0-9] \u5c06\u5339\u914d\u4ece 00 \u5230 59 \u7684\u4e24\u4f4d\u6570\u5b57\uff0c [0-9A-Fa-f] \u5c06\u5339\u914d\u4efb\u4f55\u5341\u516d\u8fdb\u5236\u6570\u4f4d\u3002 \u5982\u679c - \u8fdb\u884c\u4e86\u8f6c\u4e49 \uff08\u6bd4\u5982 [a-z]\uff09\u6216\u8005\u5b83\u7684\u4f4d\u7f6e\u5728\u9996\u4f4d\u6216\u8005\u672b\u5c3e\uff08\u5982 [-a] \u6216 [a-]\uff09\uff0c\u5b83\u5c31\u53ea\u8868\u793a\u666e\u901a\u5b57\u7b26 '-'\u3002 \u7279\u6b8a\u5b57\u7b26\u5728\u96c6\u5408\u4e2d\uff0c\u5931\u53bb\u5b83\u7684\u7279\u6b8a\u542b\u4e49\u3002\u6bd4\u5982 [(+ )] \u53ea\u4f1a\u5339\u914d\u8fd9\u51e0\u4e2a\u6587\u6cd5\u5b57\u7b26 '(', '+', ' ', or ')'\u3002 \u5b57\u7b26\u7c7b\u5982 \\w \u6216\u8005 \\S (\u5982\u4e0b\u5b9a\u4e49) \u5728\u96c6\u5408\u5185\u53ef\u4ee5\u63a5\u53d7\uff0c\u5b83\u4eec\u53ef\u4ee5\u5339\u914d\u7684\u5b57\u7b26\u7531 ASCII \u6216\u8005 LOCALE \u6a21\u5f0f\u51b3\u5b9a\u3002 \u4e0d\u5728\u96c6\u5408\u8303\u56f4\u5185\u7684\u5b57\u7b26\u53ef\u4ee5\u901a\u8fc7 \u53d6\u53cd \u6765\u8fdb\u884c\u5339\u914d\u3002\u5982\u679c\u96c6\u5408\u9996\u5b57\u7b26\u662f '^' \uff0c\u6240\u6709 \u4e0d \u5728\u96c6\u5408\u5185\u7684\u5b57\u7b26\u5c06\u4f1a\u88ab\u5339\u914d\uff0c\u6bd4\u5982 [^5] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '5'\uff0c [^^] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '^'. ^ \u5982\u679c\u4e0d\u5728\u96c6\u5408\u9996\u4f4d\uff0c\u5c31\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u5728\u96c6\u5408\u5185\u8981\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ']'\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u8981\u4e48\u5c31\u5728\u5b83\u4e4b\u524d\u52a0\u4e0a\u53cd\u659c\u6760\uff0c\u8981\u4e48\u5c31\u628a\u5b83\u653e\u5230\u96c6\u5408\u9996\u4f4d\u3002\u6bd4\u5982\uff0c [()[]{}] \u548c [{}] \u90fd\u53ef\u4ee5\u5339\u914d\u62ec\u53f7\u3002 Unicode Technical Standard #18 \u91cc\u7684\u5d4c\u5957\u96c6\u5408\u548c\u96c6\u5408\u64cd\u4f5c\u652f\u6301\u53ef\u80fd\u5728\u672a\u6765\u6dfb\u52a0\u3002\u8fd9\u5c06\u4f1a\u6539\u53d8\u8bed\u6cd5\uff0c\u6240\u4ee5\u4e3a\u4e86\u5e2e\u52a9\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e00\u4e2a FutureWarning \u5c06\u4f1a\u5728\u6709\u591a\u4e49\u7684\u60c5\u51b5\u91cc\u88ab raise\uff0c\u5305\u542b\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff0c\u96c6\u5408\u7531 '[' \u5f00\u59cb\uff0c\u6216\u8005\u5305\u542b\u4e0b\u5217\u5b57\u7b26\u5e8f\u5217 '--', '&&', '~~', \u548c '||'\u3002\u4e3a\u4e86\u907f\u514d\u8b66\u544a\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u7528\u53cd\u659c\u6760\u8f6c\u4e49\u3002 \u5728 3.7 \u7248\u66f4\u6539: \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6784\u5efa\u7684\u8bed\u4e49\u5728\u672a\u6765\u4f1a\u6539\u53d8\u7684\u8bdd\uff0c\u4e00\u4e2a FutureWarning \u4f1a raise \u3002 (...) Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the \\number special sequence, described below. To match the literals '(' or ')', use ( or ), or enclose them inside a character class: [(], [)]. (...) \uff08\u7ec4\u5408\uff09\uff0c\u5339\u914d\u62ec\u53f7\u5185\u7684\u4efb\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5e76\u6807\u8bc6\u51fa\u7ec4\u5408\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 \u5339\u914d\u5b8c\u6210\u540e\uff0c\u7ec4\u5408\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u83b7\u53d6\uff0c\u5e76\u53ef\u4ee5\u5728\u4e4b\u540e\u7528 \\number \u8f6c\u4e49\u5e8f\u5217\u8fdb\u884c\u518d\u6b21\u5339\u914d\uff0c\u4e4b\u540e\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002 \u8981\u5339\u914d\u5b57\u7b26 '(' \u6216\u8005 ')', \u7528 ( \u6216 ), \u6216\u8005\u628a\u5b83\u4eec\u5305\u542b\u5728\u5b57\u7b26\u96c6\u5408\u91cc: [(], [)].","title":"\u7279\u6b8a\u5b57\u7b26"},{"location":"PythonChallenge/Summarize/requests/","text":"requests Link requests.get Link >>> from requests import get >>> res = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) >>> res . text 'and the next nothing is 44827' >>> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from requests import get # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a username and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 20 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00 ' requests.Session Link 1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content )","title":"19 requests"},{"location":"PythonChallenge/Summarize/requests/#requests","text":"","title":"requests"},{"location":"PythonChallenge/Summarize/requests/#requestsget","text":">>> from requests import get >>> res = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) >>> res . text 'and the next nothing is 44827' >>> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from requests import get # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a username and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 20 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00 '","title":"requests.get"},{"location":"PythonChallenge/Summarize/requests/#requestssession","text":"1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content )","title":"requests.Session"},{"location":"PythonChallenge/Summarize/struct/","text":"struct Link struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 )","title":"20 struct"},{"location":"PythonChallenge/Summarize/struct/#struct","text":"struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 )","title":"struct"},{"location":"PythonChallenge/Summarize/this/","text":"this Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import this print ( '=' * 30 ) print ( this . d ) >>> The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! ============================== { 'A' : 'N' , 'B' : 'O' , 'C' : 'P' , 'D' : 'Q' , 'E' : 'R' , 'F' : 'S' , 'G' : 'T' , 'H' : 'U' , 'I' : 'V' , 'J' : 'W' , 'K' : 'X' , 'L' : 'Y' , 'M' : 'Z' , 'N' : 'A' , 'O' : 'B' , 'P' : 'C' , 'Q' : 'D' , 'R' : 'E' , 'S' : 'F' , 'T' : 'G' , 'U' : 'H' , 'V' : 'I' , 'W' : 'J' , 'X' : 'K' , 'Y' : 'L' , 'Z' : 'M' , 'a' : 'n' , 'b' : 'o' , 'c' : 'p' , 'd' : 'q' , 'e' : 'r' , 'f' : 's' , 'g' : 't' , 'h' : 'u' , 'i' : 'v' , 'j' : 'w' , 'k' : 'x' , 'l' : 'y' , 'm' : 'z' , 'n' : 'a' , 'o' : 'b' , 'p' : 'c' , 'q' : 'd' , 'r' : 'e' , 's' : 'f' , 't' : 'g' , 'u' : 'h' , 'v' : 'i' , 'w' : 'j' , 'x' : 'k' , 'y' : 'l' , 'z' : 'm' }","title":"21 this"},{"location":"PythonChallenge/Summarize/this/#this","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import this print ( '=' * 30 ) print ( this . d ) >>> The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! ============================== { 'A' : 'N' , 'B' : 'O' , 'C' : 'P' , 'D' : 'Q' , 'E' : 'R' , 'F' : 'S' , 'G' : 'T' , 'H' : 'U' , 'I' : 'V' , 'J' : 'W' , 'K' : 'X' , 'L' : 'Y' , 'M' : 'Z' , 'N' : 'A' , 'O' : 'B' , 'P' : 'C' , 'Q' : 'D' , 'R' : 'E' , 'S' : 'F' , 'T' : 'G' , 'U' : 'H' , 'V' : 'I' , 'W' : 'J' , 'X' : 'K' , 'Y' : 'L' , 'Z' : 'M' , 'a' : 'n' , 'b' : 'o' , 'c' : 'p' , 'd' : 'q' , 'e' : 'r' , 'f' : 's' , 'g' : 't' , 'h' : 'u' , 'i' : 'v' , 'j' : 'w' , 'k' : 'x' , 'l' : 'y' , 'm' : 'z' , 'n' : 'a' , 'o' : 'b' , 'p' : 'c' , 'q' : 'd' , 'r' : 'e' , 's' : 'f' , 't' : 'g' , 'u' : 'h' , 'v' : 'i' , 'w' : 'j' , 'x' : 'k' , 'y' : 'l' , 'z' : 'm' }","title":"this"},{"location":"PythonChallenge/Summarize/urllib/","text":"urllib Link urllib.parse Link >>> import urllib.parse as up >>> s = \"123!@#abc+ /\" >>> up . quote ( s ) '123 %21% 40 %23a bc%2B%20/' >>> up . unquote ( '123 %21% 40 %23a bc%2B%20/' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B%20/' ) b '123!@#abc+ /' >>> up . quote_plus ( s ) '123 %21% 40 %23a bc%2B+ %2F ' >>> up . unquote_plus ( '123 %21% 40 %23a bc%2B+ %2F ' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B+ %2F ' ) b '123!@#abc++/' >>> >>> up . quote ( \" /\" ) '%20/' >>> up . quote_plus ( \" /\" ) '+ %2F ' >>>","title":"22 urllib"},{"location":"PythonChallenge/Summarize/urllib/#urllib","text":"","title":"urllib"},{"location":"PythonChallenge/Summarize/urllib/#urllibparse","text":">>> import urllib.parse as up >>> s = \"123!@#abc+ /\" >>> up . quote ( s ) '123 %21% 40 %23a bc%2B%20/' >>> up . unquote ( '123 %21% 40 %23a bc%2B%20/' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B%20/' ) b '123!@#abc+ /' >>> up . quote_plus ( s ) '123 %21% 40 %23a bc%2B+ %2F ' >>> up . unquote_plus ( '123 %21% 40 %23a bc%2B+ %2F ' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B+ %2F ' ) b '123!@#abc++/' >>> >>> up . quote ( \" /\" ) '%20/' >>> up . quote_plus ( \" /\" ) '+ %2F ' >>>","title":"urllib.parse"},{"location":"PythonChallenge/Summarize/wave/","text":"wave Link \u4e00\u4e9b\u53c2\u6570 Link wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) ps: \u4e0b\u65b9\u7684\u4ee3\u7801\uff0c\u6211\u6839\u636e\u201c\u8001\u8d75\u201d\u7684\u7248\u672c(Python2)\uff0c\u505a\u4e86\u5fae\u8c03 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps \u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5 Link ps: Hackingnote \u7684\u89e3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close () ps: \u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58","title":"23 wave"},{"location":"PythonChallenge/Summarize/wave/#wave","text":"","title":"wave"},{"location":"PythonChallenge/Summarize/wave/#_1","text":"wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) ps: \u4e0b\u65b9\u7684\u4ee3\u7801\uff0c\u6211\u6839\u636e\u201c\u8001\u8d75\u201d\u7684\u7248\u672c(Python2)\uff0c\u505a\u4e86\u5fae\u8c03 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps","title":"\u4e00\u4e9b\u53c2\u6570"},{"location":"PythonChallenge/Summarize/wave/#19","text":"ps: Hackingnote \u7684\u89e3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close () ps: \u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58","title":"\u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5"},{"location":"PythonChallenge/Summarize/xmlrpc/","text":"\u201c\u901a\u4fe1\u201d Link xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY'","title":"24 xmlrpc"},{"location":"PythonChallenge/Summarize/xmlrpc/#_1","text":"xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY'","title":"\u201c\u901a\u4fe1\u201d"},{"location":"PythonChallenge/Summarize/zipfile/","text":"zipfile Link zipfile.ZipFile Link ZipFile.open(name, mode='r', pwd=None, *, force_zip64=False) Access a member of the archive as a binary file-like object. name can be either the name of a file within the archive or a ZipInfo object. The mode parameter, if included, must be 'r' (the default) or 'w'. pwd is the password used to decrypt encrypted ZIP files. With mode 'r' the file-like object (ZipExtFile) is read-only and provides the following methods: read() readline() readlines() seek() tell() iter () next () These objects can operate independently of the ZipFile. >>> from zipfile import ZipFile >>> >>> channel = ZipFile ( \"channel.zip\" ) >>> readme = channel . open ( \"readme.txt\" ) >>> readme . readline () b 'welcome to my zipped list. \\n ' >>> readme . close () >>> channel . close () >>> ZipFile.getinfo(name) Return a ZipInfo object with information about the archive member name. Calling getinfo() for a name not currently contained in the archive will raise a KeyError. ZipInfo.file_size Size of the uncompressed file. ZipInfo.compress_size Size of the compressed data. ZipInfo.comment Comment for the individual archive member as a bytes object. >>> channel . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> channel . getinfo ( \"90052.txt\" ) . comment b '*' >>> channel . getinfo ( \"90052.txt\" ) . file_size 21 >>> channel . getinfo ( \"90052.txt\" ) . compress_size # \u6587\u4ef6\u6570\u636e\u5c11\uff0c\u538b\u7f29\u540e\u53cd\u800c\u5927 23 >>> channel . getinfo ( \"readme.txt\" ) . file_size 84 >>> channel . getinfo ( \"readme.txt\" ) . compress_size 78 >>> ZipFile.setpassword(pwd) Set pwd as default password to extract encrypted files. ZipFile.namelist() Return a list of archive members by name. 1 2 3 4 5 6 7 8 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 >>> [ 'readme.txt' , 'package.pack' ]","title":"25 zipfile"},{"location":"PythonChallenge/Summarize/zipfile/#zipfile","text":"","title":"zipfile"},{"location":"PythonChallenge/Summarize/zipfile/#zipfilezipfile","text":"ZipFile.open(name, mode='r', pwd=None, *, force_zip64=False) Access a member of the archive as a binary file-like object. name can be either the name of a file within the archive or a ZipInfo object. The mode parameter, if included, must be 'r' (the default) or 'w'. pwd is the password used to decrypt encrypted ZIP files. With mode 'r' the file-like object (ZipExtFile) is read-only and provides the following methods: read() readline() readlines() seek() tell() iter () next () These objects can operate independently of the ZipFile. >>> from zipfile import ZipFile >>> >>> channel = ZipFile ( \"channel.zip\" ) >>> readme = channel . open ( \"readme.txt\" ) >>> readme . readline () b 'welcome to my zipped list. \\n ' >>> readme . close () >>> channel . close () >>> ZipFile.getinfo(name) Return a ZipInfo object with information about the archive member name. Calling getinfo() for a name not currently contained in the archive will raise a KeyError. ZipInfo.file_size Size of the uncompressed file. ZipInfo.compress_size Size of the compressed data. ZipInfo.comment Comment for the individual archive member as a bytes object. >>> channel . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> channel . getinfo ( \"90052.txt\" ) . comment b '*' >>> channel . getinfo ( \"90052.txt\" ) . file_size 21 >>> channel . getinfo ( \"90052.txt\" ) . compress_size # \u6587\u4ef6\u6570\u636e\u5c11\uff0c\u538b\u7f29\u540e\u53cd\u800c\u5927 23 >>> channel . getinfo ( \"readme.txt\" ) . file_size 84 >>> channel . getinfo ( \"readme.txt\" ) . compress_size 78 >>> ZipFile.setpassword(pwd) Set pwd as default password to extract encrypted files. ZipFile.namelist() Return a list of archive members by name. 1 2 3 4 5 6 7 8 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 >>> [ 'readme.txt' , 'package.pack' ]","title":"zipfile.ZipFile"},{"location":"PythonChallenge/Summarize/zlib/","text":"zlib Link Compression compatible with gzip 1 2 3 4 5 6 7 8 9 10 11 import zlib s1 = b \"abcdefg\" print ( zlib . compress ( s1 )) s2 = b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' print ( zlib . decompress ( s2 )) >>> b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' b 'abcdefg'","title":"26 zlib"},{"location":"PythonChallenge/Summarize/zlib/#zlib","text":"Compression compatible with gzip 1 2 3 4 5 6 7 8 9 10 11 import zlib s1 = b \"abcdefg\" print ( zlib . compress ( s1 )) s2 = b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' print ( zlib . decompress ( s2 )) >>> b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' b 'abcdefg'","title":"zlib"}]}