{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my blog Link \u8fd9\u4e00\u4e2a\u535a\u5ba2\u5199\u7ec3\u4e60 \u53e6\u4e00\u4e2a\u535a\u5ba2\u505a\u7b14\u8bb0 >>> \u4f20\u9001\u95e8","title":"index"},{"location":"#welcome-to-my-blog","text":"\u8fd9\u4e00\u4e2a\u535a\u5ba2\u5199\u7ec3\u4e60 \u53e6\u4e00\u4e2a\u535a\u5ba2\u505a\u7b14\u8bb0 >>> \u4f20\u9001\u95e8","title":"Welcome to my blog"},{"location":"about/","text":"\u53c2\u8003\u4e0e\u611f\u8c22 Link 1. Python Challenge Link Documentation Link Python3 \u6807\u51c6\u5e93 Link base64: >>> \u4f20\u9001\u95e8 binascii: >>> \u4f20\u9001\u95e8 bz2: >>> \u4f20\u9001\u95e8 collections: >>> \u4f20\u9001\u95e8 datetime: >>> \u4f20\u9001\u95e8 difflib: >>> \u4f20\u9001\u95e8 email: >>> \u4f20\u9001\u95e8 gzip: >>> \u4f20\u9001\u95e8 hashlib: >>> \u4f20\u9001\u95e8 pickle: >>> \u4f20\u9001\u95e8 re: >>> \u4f20\u9001\u95e8 struct: >>> \u4f20\u9001\u95e8 urllib.parse: >>> \u4f20\u9001\u95e8 urllib.server: >>> \u4f20\u9001\u95e8 wave: >>> \u4f20\u9001\u95e8 xmlrpc.client: >>> \u4f20\u9001\u95e8 xmlrpc.server: >>> \u4f20\u9001\u95e8 zipfile: >>> \u4f20\u9001\u95e8 zlib: >>> \u4f20\u9001\u95e8 \u7b2c\u4e09\u65b9\u5e93 Link Pillow: >>> \u4f20\u9001\u95e8 requests: >>> \u4f20\u9001\u95e8 \u535a\u4e3b Link FishC\u2014\u2014 jerryxjr1220 : >>> \u4f20\u9001\u95e8 Youku\u2014\u2014 \u8001\u8d75\u7231\u7f16\u7a0b : >>> \u4f20\u9001\u95e8 \u7f51\u7ad9 Link Hackingnote: >>> \u4f20\u9001\u95e8 LeetCode, 2020 April Challenge Link Ken-Yi Lee","title":"about"},{"location":"about/#_1","text":"","title":"\u53c2\u8003\u4e0e\u611f\u8c22"},{"location":"about/#1-python-challenge","text":"","title":"1. Python Challenge"},{"location":"about/#documentation","text":"","title":"Documentation"},{"location":"about/#python3","text":"base64: >>> \u4f20\u9001\u95e8 binascii: >>> \u4f20\u9001\u95e8 bz2: >>> \u4f20\u9001\u95e8 collections: >>> \u4f20\u9001\u95e8 datetime: >>> \u4f20\u9001\u95e8 difflib: >>> \u4f20\u9001\u95e8 email: >>> \u4f20\u9001\u95e8 gzip: >>> \u4f20\u9001\u95e8 hashlib: >>> \u4f20\u9001\u95e8 pickle: >>> \u4f20\u9001\u95e8 re: >>> \u4f20\u9001\u95e8 struct: >>> \u4f20\u9001\u95e8 urllib.parse: >>> \u4f20\u9001\u95e8 urllib.server: >>> \u4f20\u9001\u95e8 wave: >>> \u4f20\u9001\u95e8 xmlrpc.client: >>> \u4f20\u9001\u95e8 xmlrpc.server: >>> \u4f20\u9001\u95e8 zipfile: >>> \u4f20\u9001\u95e8 zlib: >>> \u4f20\u9001\u95e8","title":"Python3 \u6807\u51c6\u5e93"},{"location":"about/#_2","text":"Pillow: >>> \u4f20\u9001\u95e8 requests: >>> \u4f20\u9001\u95e8","title":"\u7b2c\u4e09\u65b9\u5e93"},{"location":"about/#_3","text":"FishC\u2014\u2014 jerryxjr1220 : >>> \u4f20\u9001\u95e8 Youku\u2014\u2014 \u8001\u8d75\u7231\u7f16\u7a0b : >>> \u4f20\u9001\u95e8","title":"\u535a\u4e3b"},{"location":"about/#_4","text":"Hackingnote: >>> \u4f20\u9001\u95e8","title":"\u7f51\u7ad9"},{"location":"about/#leetcode-2020-april-challenge","text":"Ken-Yi Lee","title":"LeetCode, 2020 April Challenge"},{"location":"PythonChallenge/preview/","text":"\u7b80\u5355\u68b3\u7406 Link \u5173\u5361 \u9898\u76ee \u7b2c00\u5173 \u5e42\u8fd0\u7b97 \u7b2c01\u5173 chr(), ord() maketrans(), translate() \u7b2c02\u5173 collections.Counter \u7b2c03\u5173 \u6b63\u5219\u8868\u8fbe\u5f0f \u7b2c04\u5173 \u722c\u866b + \u6b63\u5219 \u7b2c05\u5173 pickle \u6a21\u5757 \u7b2c06\u5173 Zip \u6a21\u5757 + \u6b63\u5219 \u7b2c07\u5173 Pillow \u6a21\u5757\uff1aRGB \u503c\u63d0\u53d6 \u7b2c08\u5173 bz2 \u52a0\u5bc6\u6a21\u5757 \u7b2c09\u5173 PIL.Image, PIL.ImageDraw\uff1a\u63cf\u70b9\u753b\u56fe \u7b2c10\u5173 \u52a8\u6001\u89c4\u5212\u57fa\u7840 \u7b2c11\u5173 PIL.Image\uff1a\u56fe\u7247\u62c6\u5206 \u7b2c12\u5173 crul, \u6587\u4ef6\u5934 \u7b2c13\u5173 xmlrpc \u6a21\u5757 \u7b2c14\u5173 PIL.Image, PIL.ImageChops\uff1a\u56de\u578b\u56fe\u7247\u590d\u539f \u7b2c15\u5173 datetime \u6a21\u5757\uff1a\u65e5\u671f\u68c0\u7d22 \u7b2c16\u5173 PIL.Image\uff1a\u9519\u4f4d\u56fe\u50cf\u590d\u539f \u7b2c17\u5173 urllib.parse\uff1a\u7f16\u7801\u4e0e\u89e3\u7801 \u7b2c18\u5173 binascii \u6a21\u5757 difflib \u6a21\u5757\uff1a\u5206\u79bb\u6587\u4ef6\u6216\u5b57\u7b26\u4e32\u4e2d\u76f8\u540c\u548c\u4e0d\u540c\u7684\u90e8\u5206 gzip \u6a21\u5757 \u7b2c19\u5173 base64 \u6a21\u5757\uff1a\u90ae\u4ef6\u5f62\u5f0f\u52a0\u5bc6 email \u6a21\u5757\uff1a\u63d0\u53d6 email \u4fe1\u606f os \u6a21\u5757\uff1a\u5bf9\u6587\u4ef6\u6267\u884c\u76f8\u5bf9\u547d\u4ee4 struct \u6a21\u5757\uff1a\u6570\u636e\u89e3\u5305 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6\u4e0e\u5199\u5165 \u7b2c20\u5173 requests \u6a21\u5757\uff1a\u6d4f\u89c8\u5668\u5934\u90e8\u4fe1\u606f\u6a21\u62df\u548c\u670d\u52a1\u5668\u5934\u90e8\u4fe1\u606f\u8bbf\u95ee zipfile \u6a21\u5757 \u7b2c21\u5173 zlib \u6a21\u5757 bz2 \u6a21\u5757 \u7b2c22\u5173 PIL.Image\uff1agif \u56fe\u50cf\u5e27\u6570\u636e\u8bfb\u53d6 \u7b2c23\u5173 this \u6a21\u5757\uff1aPython \u4e4b\u7985 \u7b2c24\u5173 \u8ff7\u5bab\u89e3\u6cd5 PIL.Image\uff1a\u50cf\u7d20\u63d0\u53d6 \u7b2c25\u5173 PIL.Image\uff1a\u56fe\u7247\u5199\u5165\u548c\u590d\u539f\u62fc\u63a5 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6 \u7b2c26\u5173 hashlib \u6a21\u5757\uff1amd5 \u9a8c\u8bc1\uff0c\u7834\u635f\u6587\u4ef6\u4fee\u590d \u7b2c27\u5173 PIL.Image\uff1a\u8c03\u8272\u677f\u4fe1\u606f\uff0c\u5173\u952e\u5b57 \u7b2c28\u5173 PIL.Image\uff1aRGB \u4e09\u901a\u9053\u5206\u79bb \u7b2c29\u5173 PIL.Image\uff1a\u56fe\u50cf\u6807\u6ce8\u680f \u7b2c30\u5173 csv \u4fe1\u606f\u8bfb\u53d6 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362\uff0c\u56fe\u50cf\u8bc6\u522b \u7b2c31\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362 mandelbrot \u56fe\u50cf\u6784\u9020\uff0c\u56fe\u50cf\u8bc6\u522b arecibo \u4fe1\u606f \u7b2c32\u5173 \u9012\u5f52\uff0c\u7eb5\u5411\u4e0e\u6a2a\u5411\u76f8\u4e92\u7b5b\u9009 \u7b2c33\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u63d0\u53d6","title":"preview"},{"location":"PythonChallenge/preview/#_1","text":"\u5173\u5361 \u9898\u76ee \u7b2c00\u5173 \u5e42\u8fd0\u7b97 \u7b2c01\u5173 chr(), ord() maketrans(), translate() \u7b2c02\u5173 collections.Counter \u7b2c03\u5173 \u6b63\u5219\u8868\u8fbe\u5f0f \u7b2c04\u5173 \u722c\u866b + \u6b63\u5219 \u7b2c05\u5173 pickle \u6a21\u5757 \u7b2c06\u5173 Zip \u6a21\u5757 + \u6b63\u5219 \u7b2c07\u5173 Pillow \u6a21\u5757\uff1aRGB \u503c\u63d0\u53d6 \u7b2c08\u5173 bz2 \u52a0\u5bc6\u6a21\u5757 \u7b2c09\u5173 PIL.Image, PIL.ImageDraw\uff1a\u63cf\u70b9\u753b\u56fe \u7b2c10\u5173 \u52a8\u6001\u89c4\u5212\u57fa\u7840 \u7b2c11\u5173 PIL.Image\uff1a\u56fe\u7247\u62c6\u5206 \u7b2c12\u5173 crul, \u6587\u4ef6\u5934 \u7b2c13\u5173 xmlrpc \u6a21\u5757 \u7b2c14\u5173 PIL.Image, PIL.ImageChops\uff1a\u56de\u578b\u56fe\u7247\u590d\u539f \u7b2c15\u5173 datetime \u6a21\u5757\uff1a\u65e5\u671f\u68c0\u7d22 \u7b2c16\u5173 PIL.Image\uff1a\u9519\u4f4d\u56fe\u50cf\u590d\u539f \u7b2c17\u5173 urllib.parse\uff1a\u7f16\u7801\u4e0e\u89e3\u7801 \u7b2c18\u5173 binascii \u6a21\u5757 difflib \u6a21\u5757\uff1a\u5206\u79bb\u6587\u4ef6\u6216\u5b57\u7b26\u4e32\u4e2d\u76f8\u540c\u548c\u4e0d\u540c\u7684\u90e8\u5206 gzip \u6a21\u5757 \u7b2c19\u5173 base64 \u6a21\u5757\uff1a\u90ae\u4ef6\u5f62\u5f0f\u52a0\u5bc6 email \u6a21\u5757\uff1a\u63d0\u53d6 email \u4fe1\u606f os \u6a21\u5757\uff1a\u5bf9\u6587\u4ef6\u6267\u884c\u76f8\u5bf9\u547d\u4ee4 struct \u6a21\u5757\uff1a\u6570\u636e\u89e3\u5305 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6\u4e0e\u5199\u5165 \u7b2c20\u5173 requests \u6a21\u5757\uff1a\u6d4f\u89c8\u5668\u5934\u90e8\u4fe1\u606f\u6a21\u62df\u548c\u670d\u52a1\u5668\u5934\u90e8\u4fe1\u606f\u8bbf\u95ee zipfile \u6a21\u5757 \u7b2c21\u5173 zlib \u6a21\u5757 bz2 \u6a21\u5757 \u7b2c22\u5173 PIL.Image\uff1agif \u56fe\u50cf\u5e27\u6570\u636e\u8bfb\u53d6 \u7b2c23\u5173 this \u6a21\u5757\uff1aPython \u4e4b\u7985 \u7b2c24\u5173 \u8ff7\u5bab\u89e3\u6cd5 PIL.Image\uff1a\u50cf\u7d20\u63d0\u53d6 \u7b2c25\u5173 PIL.Image\uff1a\u56fe\u7247\u5199\u5165\u548c\u590d\u539f\u62fc\u63a5 wave \u6a21\u5757\uff1a\u5e27\u7684\u63d0\u53d6 \u7b2c26\u5173 hashlib \u6a21\u5757\uff1amd5 \u9a8c\u8bc1\uff0c\u7834\u635f\u6587\u4ef6\u4fee\u590d \u7b2c27\u5173 PIL.Image\uff1a\u8c03\u8272\u677f\u4fe1\u606f\uff0c\u5173\u952e\u5b57 \u7b2c28\u5173 PIL.Image\uff1aRGB \u4e09\u901a\u9053\u5206\u79bb \u7b2c29\u5173 PIL.Image\uff1a\u56fe\u50cf\u6807\u6ce8\u680f \u7b2c30\u5173 csv \u4fe1\u606f\u8bfb\u53d6 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362\uff0c\u56fe\u50cf\u8bc6\u522b \u7b2c31\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u8f6c\u6362 mandelbrot \u56fe\u50cf\u6784\u9020\uff0c\u56fe\u50cf\u8bc6\u522b arecibo \u4fe1\u606f \u7b2c32\u5173 \u9012\u5f52\uff0c\u7eb5\u5411\u4e0e\u6a2a\u5411\u76f8\u4e92\u7b5b\u9009 \u7b2c33\u5173 PIL.Image\uff1a\u56fe\u50cf\u4fe1\u606f\u63d0\u53d6","title":"\u7b80\u5355\u68b3\u7406"},{"location":"PythonChallenge/Knowledge/01/","text":"\u7b2c 1 \u9898 Link \u79fb\u4f4d\u5bc6\u7801 Link translate(atype.maketrans()) translate type maketrans intab outtab ex1 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr ex2 1 2 3 4 5 6 7 8 s = \"map\" intab = bytes ([ i for i in range ( ord ( 'a' ), ord ( 'z' ) + 1 )]) outtab = intab [ 2 :] + intab [: 2 ] transtab = bytes . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr","title":"Ex01"},{"location":"PythonChallenge/Knowledge/01/#1","text":"","title":"\u7b2c 1 \u9898"},{"location":"PythonChallenge/Knowledge/01/#_1","text":"translate(atype.maketrans()) translate type maketrans intab outtab ex1 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr ex2 1 2 3 4 5 6 7 8 s = \"map\" intab = bytes ([ i for i in range ( ord ( 'a' ), ord ( 'z' ) + 1 )]) outtab = intab [ 2 :] + intab [: 2 ] transtab = bytes . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr","title":"\u79fb\u4f4d\u5bc6\u7801"},{"location":"PythonChallenge/Knowledge/02/","text":"\u7b2c 2 \u9898 Link \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570 Link collections.Counter(strings) \u7edf\u8ba1 strings \u4e2d\u6bcf\u79cd\u5b57\u7b26\u51fa\u73b0\u7684\u4e2a\u6570 1 2 3 4 5 6 from collections import Counter print ( Counter ( \"abbcdde\" )) >>> Counter ({ 'b' : 2 , 'd' : 2 , 'a' : 1 , 'c' : 1 , 'e' : 1 })","title":"Ex02"},{"location":"PythonChallenge/Knowledge/02/#2","text":"","title":"\u7b2c 2 \u9898"},{"location":"PythonChallenge/Knowledge/02/#_1","text":"collections.Counter(strings) \u7edf\u8ba1 strings \u4e2d\u6bcf\u79cd\u5b57\u7b26\u51fa\u73b0\u7684\u4e2a\u6570 1 2 3 4 5 6 from collections import Counter print ( Counter ( \"abbcdde\" )) >>> Counter ({ 'b' : 2 , 'd' : 2 , 'a' : 1 , 'c' : 1 , 'e' : 1 })","title":"\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570"},{"location":"PythonChallenge/Knowledge/03/","text":"\u7b2c 3 \u9898 Link \u6b63\u5219 Link re.findall(rules, strings) [a-z] \u4efb\u610f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd [A-Z]{3} \u4efb\u610f\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\uff08\u6ca1\u6709\u95f4\u9694\uff09 1 2 3 4 5 6 from re import findall print ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , \"aBBBcDDDefGGGhIIIjj\" )) >>> [ 'c' , 'h' ]","title":"Ex03"},{"location":"PythonChallenge/Knowledge/03/#3","text":"","title":"\u7b2c 3 \u9898"},{"location":"PythonChallenge/Knowledge/03/#_1","text":"re.findall(rules, strings) [a-z] \u4efb\u610f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd [A-Z]{3} \u4efb\u610f\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\uff08\u6ca1\u6709\u95f4\u9694\uff09 1 2 3 4 5 6 from re import findall print ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , \"aBBBcDDDefGGGhIIIjj\" )) >>> [ 'c' , 'h' ]","title":"\u6b63\u5219"},{"location":"PythonChallenge/Knowledge/04/","text":"\u7b2c 4 \u9898 Link 1. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 Link urllib 1 2 3 4 5 6 7 import urllib.request response = urllib . request . urlopen ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . read ()) >>> b 'and the next nothing is 44827' requests 1 2 3 4 5 6 7 from requests import get response = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . text ) >>> and the next nothing is 44827 2. \u6b63\u5219 Link re.findall(rules, strings) \\d{3,} 3\u4e2a\u6216\u66f4\u591a\u6570\u5b57\uff08\u6ca1\u6709\u95f4\u9694\uff09 \u5b89\u5168\u8d77\u89c1\uff0c\u7528 r\"\\d{3,}\" 1 2 3 4 5 6 from re import findall print ( findall ( r \"\\d{3,}\" , \"abc 12 34567\" )) >>> [ '34567' ] 3. \u5bf9\u6570\u5b57\u7684\u5224\u65ad Link isdigit() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0cbyte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57 False: \u6c49\u5b57\u6570\u5b57 Error: \u65e0 isdecimal() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09 False: \u6c49\u5b57\u6570\u5b57\uff0c\u7f57\u9a6c\u6570\u5b57 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09 isnumeric() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 False: \u65e0 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09","title":"Ex04"},{"location":"PythonChallenge/Knowledge/04/#4","text":"","title":"\u7b2c 4 \u9898"},{"location":"PythonChallenge/Knowledge/04/#1","text":"urllib 1 2 3 4 5 6 7 import urllib.request response = urllib . request . urlopen ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . read ()) >>> b 'and the next nothing is 44827' requests 1 2 3 4 5 6 7 from requests import get response = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) print ( response . text ) >>> and the next nothing is 44827","title":"1. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9"},{"location":"PythonChallenge/Knowledge/04/#2","text":"re.findall(rules, strings) \\d{3,} 3\u4e2a\u6216\u66f4\u591a\u6570\u5b57\uff08\u6ca1\u6709\u95f4\u9694\uff09 \u5b89\u5168\u8d77\u89c1\uff0c\u7528 r\"\\d{3,}\" 1 2 3 4 5 6 from re import findall print ( findall ( r \"\\d{3,}\" , \"abc 12 34567\" )) >>> [ '34567' ]","title":"2. \u6b63\u5219"},{"location":"PythonChallenge/Knowledge/04/#3","text":"isdigit() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0cbyte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57 False: \u6c49\u5b57\u6570\u5b57 Error: \u65e0 isdecimal() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09 False: \u6c49\u5b57\u6570\u5b57\uff0c\u7f57\u9a6c\u6570\u5b57 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09 isnumeric() True: Unicode\u6570\u5b57\uff0c\u5168\u89d2\u6570\u5b57\uff08\u53cc\u5b57\u8282\uff09\uff0c\u7f57\u9a6c\u6570\u5b57\uff0c\u6c49\u5b57\u6570\u5b57 False: \u65e0 Error: byte\u6570\u5b57\uff08\u5355\u5b57\u8282\uff09","title":"3. \u5bf9\u6570\u5b57\u7684\u5224\u65ad"},{"location":"PythonChallenge/Knowledge/05/","text":"\u7b2c 5 \u9898 Link \u201c\u6ce1\u83dc\u201d Link pickle.dump \u201c\u814c\u5236\u201d 1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close () \u67e5\u770b test.pkl \uff08\u6709\u70b9\u5c34\u5c2c\uff09 \u20acX\u0010 Python Challengeq . pickle.load \u201c\u5f00\u575b\u201d 1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"Ex05"},{"location":"PythonChallenge/Knowledge/05/#5","text":"","title":"\u7b2c 5 \u9898"},{"location":"PythonChallenge/Knowledge/05/#_1","text":"pickle.dump \u201c\u814c\u5236\u201d 1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close () \u67e5\u770b test.pkl \uff08\u6709\u70b9\u5c34\u5c2c\uff09 \u20acX\u0010 Python Challengeq . pickle.load \u201c\u5f00\u575b\u201d 1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"\u201c\u6ce1\u83dc\u201d"},{"location":"PythonChallenge/Knowledge/06/","text":"\u7b2c 6 \u9898 Link 1. \u83b7\u53d6\u538b\u7f29\u5305\u4e2d\u7684 comment Link zipfile.ZipFile open read read getinfo comment file_size compress_size ... ex1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from zipfile import ZipFile channel = ZipFile ( \"channel.zip\" , 'r' ) readme = channel . open ( \"readme.txt\" , 'r' ) print ( readme . read ()) readme . close () t = channel . getinfo ( \"90052.txt\" ) . comment print ( t ) channel . close () >>> ... # \u7701\u7565 b '*' ex2 >>> from zipfile import ZipFile >>> >>> z = ZipFile ( \"channel.zip\" ) >>> z . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> z . getinfo ( \"readme.txt\" ) . comment b '' >>> >>> z . getinfo ( \"90052.txt\" ) . comment b '*' >>> z . getinfo ( \"90052.txt\" ) . file_size 21 >>> z . getinfo ( \"90052.txt\" ) . compress_size 23 >>> 2. bytes & string Link bytes to str 1 2 3 4 5 6 7 s = b \"abc\" print ( str ( s , encoding = \"utf-8\" )) print ( bytes . decode ( s )) >>> abc abc str to bytes 1 2 3 4 5 6 7 s = \"abc\" print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc'","title":"Ex06"},{"location":"PythonChallenge/Knowledge/06/#6","text":"","title":"\u7b2c 6 \u9898"},{"location":"PythonChallenge/Knowledge/06/#1-comment","text":"zipfile.ZipFile open read read getinfo comment file_size compress_size ... ex1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from zipfile import ZipFile channel = ZipFile ( \"channel.zip\" , 'r' ) readme = channel . open ( \"readme.txt\" , 'r' ) print ( readme . read ()) readme . close () t = channel . getinfo ( \"90052.txt\" ) . comment print ( t ) channel . close () >>> ... # \u7701\u7565 b '*' ex2 >>> from zipfile import ZipFile >>> >>> z = ZipFile ( \"channel.zip\" ) >>> z . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> z . getinfo ( \"readme.txt\" ) . comment b '' >>> >>> z . getinfo ( \"90052.txt\" ) . comment b '*' >>> z . getinfo ( \"90052.txt\" ) . file_size 21 >>> z . getinfo ( \"90052.txt\" ) . compress_size 23 >>>","title":"1. \u83b7\u53d6\u538b\u7f29\u5305\u4e2d\u7684 comment"},{"location":"PythonChallenge/Knowledge/06/#2-bytes-string","text":"bytes to str 1 2 3 4 5 6 7 s = b \"abc\" print ( str ( s , encoding = \"utf-8\" )) print ( bytes . decode ( s )) >>> abc abc str to bytes 1 2 3 4 5 6 7 s = \"abc\" print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc'","title":"2. bytes &amp; string"},{"location":"PythonChallenge/Knowledge/07/","text":"\u7b2c 7 \u9898 Link 1. \u83b7\u53d6\u56fe\u7247\u7684\u50cf\u7d20\u4fe1\u606f Link pillow \u542c\u8bf4 PIL \u662f\u5fd7\u613f\u8005\u4eec\u5bf9 pillow \u7684\u7ee7\u627f\u4e0e\u53d1\u5c55 PIL for Python Imaging Library PIL.Image \u53ef\u4ee5\u8bf4\u662f PIL \u91cc\u6700\u91cd\u8981\u7684\u7c7b 1 2 3 4 5 6 7 8 from PIL import Image img = Image . open ( \"oxygen.png\" ) pix = img . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e print ( pix [ 0 , 0 ]) >>> ( 79 , 92 , 23 , 255 ) # R, G, B, A; A=255 \u8868\u793a\u4e0d\u900f\u660e 2. bytes Link 1 2 3 4 5 6 7 # \u7528\u6cd5\u4e0e str \u76f8\u4f3c\uff0c\u5217\u51fa\u6765\u662f\u56e0\u4e3a\u6211\u4ee5\u524d\u51e0\u4e4e\u6ca1\u7528\u8fc7 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' [ 1 , 2 , 3 ]","title":"Ex07"},{"location":"PythonChallenge/Knowledge/07/#7","text":"","title":"\u7b2c 7 \u9898"},{"location":"PythonChallenge/Knowledge/07/#1","text":"pillow \u542c\u8bf4 PIL \u662f\u5fd7\u613f\u8005\u4eec\u5bf9 pillow \u7684\u7ee7\u627f\u4e0e\u53d1\u5c55 PIL for Python Imaging Library PIL.Image \u53ef\u4ee5\u8bf4\u662f PIL \u91cc\u6700\u91cd\u8981\u7684\u7c7b 1 2 3 4 5 6 7 8 from PIL import Image img = Image . open ( \"oxygen.png\" ) pix = img . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e print ( pix [ 0 , 0 ]) >>> ( 79 , 92 , 23 , 255 ) # R, G, B, A; A=255 \u8868\u793a\u4e0d\u900f\u660e","title":"1. \u83b7\u53d6\u56fe\u7247\u7684\u50cf\u7d20\u4fe1\u606f"},{"location":"PythonChallenge/Knowledge/07/#2-bytes","text":"1 2 3 4 5 6 7 # \u7528\u6cd5\u4e0e str \u76f8\u4f3c\uff0c\u5217\u51fa\u6765\u662f\u56e0\u4e3a\u6211\u4ee5\u524d\u51e0\u4e4e\u6ca1\u7528\u8fc7 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' [ 1 , 2 , 3 ]","title":"2. bytes"},{"location":"PythonChallenge/Knowledge/08/","text":"\u7b2c 8 \u9898 Link \u89e3\u538b\u7f29 Link bz2 bz2.decompress 1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"Ex08"},{"location":"PythonChallenge/Knowledge/08/#8","text":"","title":"\u7b2c 8 \u9898"},{"location":"PythonChallenge/Knowledge/08/#_1","text":"bz2 bz2.decompress 1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"\u89e3\u538b\u7f29"},{"location":"PythonChallenge/Knowledge/09/","text":"\u7b2c 9 \u9898 Link PIL.Image & PIL.ImageDraw Link PIL.Image.new(mode, size, color=0) mode \u2013 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ...... PIL.ImageDraw.Draw(im, mode=None) im \u2013 The image to draw in. PIL.ImageDraw.Draw.line(xy, fill=None, width=0, joint=None) xy \u2013 Sequence of either 2-tuples like [(x, y), (x, y), ...] or numeric values like [x, y, x, y, ...] . PIL.ImageDraw.Draw.polygon(xy, fill=None, outline=None) fill \u2013 Color to use for the fill. 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image , ImageDraw rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde img . show () # \u5c55\u793a img . save ( \"result.png\" ) # \u4fdd\u5b58","title":"Ex09"},{"location":"PythonChallenge/Knowledge/09/#9","text":"","title":"\u7b2c 9 \u9898"},{"location":"PythonChallenge/Knowledge/09/#pilimage-pilimagedraw","text":"PIL.Image.new(mode, size, color=0) mode \u2013 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ...... PIL.ImageDraw.Draw(im, mode=None) im \u2013 The image to draw in. PIL.ImageDraw.Draw.line(xy, fill=None, width=0, joint=None) xy \u2013 Sequence of either 2-tuples like [(x, y), (x, y), ...] or numeric values like [x, y, x, y, ...] . PIL.ImageDraw.Draw.polygon(xy, fill=None, outline=None) fill \u2013 Color to use for the fill. 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image , ImageDraw rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde img . show () # \u5c55\u793a img . save ( \"result.png\" ) # \u4fdd\u5b58","title":"PIL.Image &amp; PIL.ImageDraw"},{"location":"PythonChallenge/Knowledge/11/","text":"\u7b2c 11 \u9898 Link PIL.Image Link 1. \u88c1\u526a\u4e0e\u653e\u5927 Link 1 2 3 4 5 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250 2. \u83b7\u53d6\u56fe\u7247\u57fa\u672c\u7684\u53c2\u6570 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size print ( w , h ) print ( img . size [ 0 ], img . size [ 1 ]) print ( img . width , img . height ) print ( img . mode ) >>> 640 480 640 480 640 480 RGB 3. \u83b7\u53d6\u50cf\u7d20\u503c\u4e0e\u5199\u5165\u50cf\u7d20\u503c Link 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image img = Image . open ( \"cave.jpg\" ) new = Image . new ( \"RGB\" , ( 500 , 500 )) pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c print ( pix ) new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> ( 0 , 20 , 0 )","title":"Ex11"},{"location":"PythonChallenge/Knowledge/11/#11","text":"","title":"\u7b2c 11 \u9898"},{"location":"PythonChallenge/Knowledge/11/#pilimage","text":"","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/11/#1","text":"1 2 3 4 5 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250","title":"1. \u88c1\u526a\u4e0e\u653e\u5927"},{"location":"PythonChallenge/Knowledge/11/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size print ( w , h ) print ( img . size [ 0 ], img . size [ 1 ]) print ( img . width , img . height ) print ( img . mode ) >>> 640 480 640 480 640 480 RGB","title":"2. \u83b7\u53d6\u56fe\u7247\u57fa\u672c\u7684\u53c2\u6570"},{"location":"PythonChallenge/Knowledge/11/#3","text":"1 2 3 4 5 6 7 8 9 10 11 from PIL import Image img = Image . open ( \"cave.jpg\" ) new = Image . new ( \"RGB\" , ( 500 , 500 )) pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c print ( pix ) new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> ( 0 , 20 , 0 )","title":"3. \u83b7\u53d6\u50cf\u7d20\u503c\u4e0e\u5199\u5165\u50cf\u7d20\u503c"},{"location":"PythonChallenge/Knowledge/12/","text":"\u7b2c 12 \u9898 Link 1. curl Link \u6309\u4f20\u7edf\uff0c\u4e60\u60ef\u79f0 cURL \u4e3a\u4e0b\u8f7d\u5de5\u5177\uff0c\u652f\u6301\u7684\u901a\u4fe1\u534f\u8bae\u6709\u8bb8\u591a\uff0c HTTPS \u662f\u5176\u4e2d\u4e00\u79cd ps: \u9700\u8981\u5b89\u88c5 \u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ... 2. you get Link ps: \u9700\u8981\u5b89\u88c5 york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file 3. \u6587\u4ef6\u5934 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () for i in range ( 5 ): print ( bytes ( data [ i :: 5 ])) >>> b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b 'GIF87a@ \\x01\\xf0\\x00\\xe7\\x00\\x00\\x00\\x01\\x00 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNG...IHDR -> png GIF -> gif 4. eval Link evil for evaluate \uff0c\u4e0d\u8fc7\u8bfb\u8d77\u6765\u8fd8\u662f evil \u987a 1 2 3 4 5 f0 = open ( \"0.jpg\" , \"wb\" ) f4 = open ( \"4.jpg\" , \"wb\" ) for i in range ( 5 ): eval ( \"f\" + str ( i )) . write ( \"sth.\" )","title":"Ex12"},{"location":"PythonChallenge/Knowledge/12/#12","text":"","title":"\u7b2c 12 \u9898"},{"location":"PythonChallenge/Knowledge/12/#1-curl","text":"\u6309\u4f20\u7edf\uff0c\u4e60\u60ef\u79f0 cURL \u4e3a\u4e0b\u8f7d\u5de5\u5177\uff0c\u652f\u6301\u7684\u901a\u4fe1\u534f\u8bae\u6709\u8bb8\u591a\uff0c HTTPS \u662f\u5176\u4e2d\u4e00\u79cd ps: \u9700\u8981\u5b89\u88c5 \u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ...","title":"1. curl"},{"location":"PythonChallenge/Knowledge/12/#2-you-get","text":"ps: \u9700\u8981\u5b89\u88c5 york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file","title":"2. you get"},{"location":"PythonChallenge/Knowledge/12/#3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () for i in range ( 5 ): print ( bytes ( data [ i :: 5 ])) >>> b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b 'GIF87a@ \\x01\\xf0\\x00\\xe7\\x00\\x00\\x00\\x01\\x00 ' b ' \\x89 PNG \\r\\n\\x1a\\n\\x00\\x00\\x00\\r IHDR' b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00\\xb4 ' \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNG...IHDR -> png GIF -> gif","title":"3. \u6587\u4ef6\u5934"},{"location":"PythonChallenge/Knowledge/12/#4-eval","text":"evil for evaluate \uff0c\u4e0d\u8fc7\u8bfb\u8d77\u6765\u8fd8\u662f evil \u987a 1 2 3 4 5 f0 = open ( \"0.jpg\" , \"wb\" ) f4 = open ( \"4.jpg\" , \"wb\" ) for i in range ( 5 ): eval ( \"f\" + str ( i )) . write ( \"sth.\" )","title":"4. eval"},{"location":"PythonChallenge/Knowledge/13/","text":"\u7b2c 13 \u9898 Link \u201c\u901a\u4fe1\u201d Link xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY' Python2 Python2 \u4e2d\u4f7f\u7528\u7684\u662f xmlrpclib 1 2 3 4 from xmlrpclib import ServerProxy server = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) server . system . listMethods ()","title":"Ex13"},{"location":"PythonChallenge/Knowledge/13/#13","text":"","title":"\u7b2c 13 \u9898"},{"location":"PythonChallenge/Knowledge/13/#_1","text":"xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY' Python2 Python2 \u4e2d\u4f7f\u7528\u7684\u662f xmlrpclib 1 2 3 4 from xmlrpclib import ServerProxy server = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) server . system . listMethods ()","title":"\u201c\u901a\u4fe1\u201d"},{"location":"PythonChallenge/Knowledge/15/","text":"\u7b2c 15 \u9898 Link \u201c\u4e07\u5e74\u5386\u201d Link datetime datetime.datetime 1 2 3 4 5 6 7 8 9 from datetime import datetime date = datetime ( 2020 , 1 , 1 ) print ( date . year , date . month , date . day ) print ( date . weekday ()) # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 >>> 2020 1 1 2 # 2020-01-01 \u662f\u5468\u4e09","title":"Ex15"},{"location":"PythonChallenge/Knowledge/15/#15","text":"","title":"\u7b2c 15 \u9898"},{"location":"PythonChallenge/Knowledge/15/#_1","text":"datetime datetime.datetime 1 2 3 4 5 6 7 8 9 from datetime import datetime date = datetime ( 2020 , 1 , 1 ) print ( date . year , date . month , date . day ) print ( date . weekday ()) # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 >>> 2020 1 1 2 # 2020-01-01 \u662f\u5468\u4e09","title":"\u201c\u4e07\u5e74\u5386\u201d"},{"location":"PythonChallenge/Knowledge/16/","text":"\u7b2c 16 \u9898 Link PIL.Image Link Image.histogram(mask=None, extrema=None) Returns a histogram for the image. The histogram is returned as a list of pixel counts, one for each pixel value in the source image. If the image has more than one band, the histograms for all bands are concatenated (for example, the histogram for an \u201cRGB\u201d image contains 768 values). 1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"mozart.gif\" ) res = img . histogram () # 0-255 \u5404\u4e2a\u50cf\u7d20\u503c\u51fa\u73b0\u7684\u4e2a\u6570 print ( len ( res )) print ( res [: 10 ]) >>> 256 [ 0 , 0 , 0 , 0 , 1 , 14 , 0 , 36 , 66 , 1684 ] PIL.ImageChops Link Image.crop(box=None) box \u2013 The crop rectangle, as a (left, upper, right, lower)-tuple. 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 row = img . crop ( box ) # \u88c1\u526a row2bytes = row . tobytes () i = row2bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 img . paste ( row , box ) # \u7c98\u8d34","title":"Ex16"},{"location":"PythonChallenge/Knowledge/16/#16","text":"","title":"\u7b2c 16 \u9898"},{"location":"PythonChallenge/Knowledge/16/#pilimage","text":"Image.histogram(mask=None, extrema=None) Returns a histogram for the image. The histogram is returned as a list of pixel counts, one for each pixel value in the source image. If the image has more than one band, the histograms for all bands are concatenated (for example, the histogram for an \u201cRGB\u201d image contains 768 values). 1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"mozart.gif\" ) res = img . histogram () # 0-255 \u5404\u4e2a\u50cf\u7d20\u503c\u51fa\u73b0\u7684\u4e2a\u6570 print ( len ( res )) print ( res [: 10 ]) >>> 256 [ 0 , 0 , 0 , 0 , 1 , 14 , 0 , 36 , 66 , 1684 ]","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/16/#pilimagechops","text":"Image.crop(box=None) box \u2013 The crop rectangle, as a (left, upper, right, lower)-tuple. 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 row = img . crop ( box ) # \u88c1\u526a row2bytes = row . tobytes () i = row2bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 img . paste ( row , box ) # \u7c98\u8d34","title":"PIL.ImageChops"},{"location":"PythonChallenge/Knowledge/17/","text":"\u7b2c 17 \u9898 Link urllib.parse Link unquote_to_bytes \u987e\u540d\u601d\u4e49\uff1a\u5148\u89e3\u7801\uff0c\u540e\u8f6c\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' quote, quote_plus \u8fd9\u4e24\u79cd\u7f16\u7801\u7565\u6709\u533a\u522b 1 2 3 4 5 6 7 8 9 from urllib.parse import quote , quote_plus s = \"123abc!@#+ /\" print ( quote ( s )) print ( quote_plus ( s )) >>> 123 abc % 21 % 40 % 23 % 2 B % 20 / 123 abc % 21 % 40 % 23 % 2 B +% 2 F Python2 2 \u4e0e 3 \u7684 unquote_plus \u4e0d\u540c \u8c03\u7528\u65b9\u5f0f\u4e0d\u540c \u89e3\u7801\u65b9\u5f0f\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python2 # -*- coding: UTF-8 -*- import bz2 import urllib s = \"BZh91AY%26SY %94% 3A %E 2I %00% 00 %21% 19%80P %81% 11 %00% AFg %9E %A0+ %00hE %3DM%B5 %23% D0%D4%D1 %E 2%8D %06% A9 %F A%26S%D4%D3 %21% A1 %E Ai7h%9B%9A%2B%BF %60% 22%C5WX %E 1%ADL %80% E8V%3C%C6%A8%DBH %2632% 18%A8x %01% 08 %21% 8DS%0B%C8%AF%96KO%CA2%B0 %F 1%BD%1Du%A0 %86% 05 %92s %B0 %92% C4Bc %F 1w%24S %85% 09%09C%AE %24% 90\" data = urllib . unquote_plus ( s ) secret = bz2 . decompress ( data ) print ( secret ) >>> is it the 26 th already ? call his father and inform him that \"the flowers are on their way\" . he 'll understand.","title":"Ex17"},{"location":"PythonChallenge/Knowledge/17/#17","text":"","title":"\u7b2c 17 \u9898"},{"location":"PythonChallenge/Knowledge/17/#urllibparse","text":"unquote_to_bytes \u987e\u540d\u601d\u4e49\uff1a\u5148\u89e3\u7801\uff0c\u540e\u8f6c\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' quote, quote_plus \u8fd9\u4e24\u79cd\u7f16\u7801\u7565\u6709\u533a\u522b 1 2 3 4 5 6 7 8 9 from urllib.parse import quote , quote_plus s = \"123abc!@#+ /\" print ( quote ( s )) print ( quote_plus ( s )) >>> 123 abc % 21 % 40 % 23 % 2 B % 20 / 123 abc % 21 % 40 % 23 % 2 B +% 2 F Python2 2 \u4e0e 3 \u7684 unquote_plus \u4e0d\u540c \u8c03\u7528\u65b9\u5f0f\u4e0d\u540c \u89e3\u7801\u65b9\u5f0f\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python2 # -*- coding: UTF-8 -*- import bz2 import urllib s = \"BZh91AY%26SY %94% 3A %E 2I %00% 00 %21% 19%80P %81% 11 %00% AFg %9E %A0+ %00hE %3DM%B5 %23% D0%D4%D1 %E 2%8D %06% A9 %F A%26S%D4%D3 %21% A1 %E Ai7h%9B%9A%2B%BF %60% 22%C5WX %E 1%ADL %80% E8V%3C%C6%A8%DBH %2632% 18%A8x %01% 08 %21% 8DS%0B%C8%AF%96KO%CA2%B0 %F 1%BD%1Du%A0 %86% 05 %92s %B0 %92% C4Bc %F 1w%24S %85% 09%09C%AE %24% 90\" data = urllib . unquote_plus ( s ) secret = bz2 . decompress ( data ) print ( secret ) >>> is it the 26 th already ? call his father and inform him that \"the flowers are on their way\" . he 'll understand.","title":"urllib.parse"},{"location":"PythonChallenge/Knowledge/18/","text":"\u7b2c 18 \u9898 Link \u201c\u627e\u832c\u201d Link difflib & gzip difflib.ndiff(a, b) difflib.Differ().compare(a, b) \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u4ea7\u751f\u7684\u7ed3\u679c\u4e00\u81f4\uff0c\u5747\u6709\u4e09\u79cd\u5f00\u5934 \u4ee5 - \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4ee5 + \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u53f3\u4fa7 \u4ee5\u7a7a\u683c\u5f00\u5934\uff1a\u4e24\u4fa7\u5747\u6709 gzip \u53ef\u4ee5\u6253\u5f00 .gz \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u7684\u56de\u8f66\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare1 = difflib . ndiff ( left , right ) compare2 = difflib . Differ () . compare ( left , right ) binascii unhexlify(bytes), a2b_hex(bytes) hexlify(bytes), b2a_hex(bytes) >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>> str.splitlines([keepends]) \u6309\u7167\u884c('\\r', '\\r\\n', \\n')\u5206\u9694 \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 keepends \u9ed8\u8ba4\u4e3a False \u82e5 keepends=True\uff0c\u5219\u4fdd\u7559\u6362\u884c\u7b26 1 2 3 4 5 6 7 s = \"123 \\n abc \\r\\n 456 \\r \" print ( s . splitlines ()) print ( s . splitlines ( True )) >>> [ '123' , 'abc' , '456' ] [ '123 \\n ' , 'abc \\r\\n ' , '456 \\r ' ]","title":"Ex18"},{"location":"PythonChallenge/Knowledge/18/#18","text":"","title":"\u7b2c 18 \u9898"},{"location":"PythonChallenge/Knowledge/18/#_1","text":"difflib & gzip difflib.ndiff(a, b) difflib.Differ().compare(a, b) \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u4ea7\u751f\u7684\u7ed3\u679c\u4e00\u81f4\uff0c\u5747\u6709\u4e09\u79cd\u5f00\u5934 \u4ee5 - \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4ee5 + \u5f00\u5934\uff1a\u4ec5\u5b58\u5728\u4e8e\u53f3\u4fa7 \u4ee5\u7a7a\u683c\u5f00\u5934\uff1a\u4e24\u4fa7\u5747\u6709 gzip \u53ef\u4ee5\u6253\u5f00 .gz \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u7684\u56de\u8f66\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare1 = difflib . ndiff ( left , right ) compare2 = difflib . Differ () . compare ( left , right ) binascii unhexlify(bytes), a2b_hex(bytes) hexlify(bytes), b2a_hex(bytes) >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>> str.splitlines([keepends]) \u6309\u7167\u884c('\\r', '\\r\\n', \\n')\u5206\u9694 \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 keepends \u9ed8\u8ba4\u4e3a False \u82e5 keepends=True\uff0c\u5219\u4fdd\u7559\u6362\u884c\u7b26 1 2 3 4 5 6 7 s = \"123 \\n abc \\r\\n 456 \\r \" print ( s . splitlines ()) print ( s . splitlines ( True )) >>> [ '123' , 'abc' , '456' ] [ '123 \\n ' , 'abc \\r\\n ' , '456 \\r ' ]","title":"\u201c\u627e\u832c\u201d"},{"location":"PythonChallenge/Knowledge/19/","text":"\u7b2c 19 \u9898 Link base64 Link base46.b64decode(s, altchars=None, validate=False) \u89e3\u7801 Base64 \u7f16\u7801\u5b57\u8282 1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @' RIFF... \u662f .wav \u7684\u6587\u4ef6\u5934 email Link documentataion: https://docs.python.org/3/library/email.html 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False os Link os.popen(cmd, mode='r', buffering=-1) Supply os.popen() 1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux re Link re.findall(rules, strings, re.S) re.S \u6307\u591a\u884c\u641c\u7d22 . \u4efb\u610f\u5143\u7d20 * \u4efb\u610f\u4e2a\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 import re s = \"\"\"123 <!-- abc def ghi --> 456\"\"\" print ( re . findall ( \"<!-- \\n (.*) \\n -->\" , s , re . S )) >>> [ 'abc \\n def \\n ghi' ] struct Link struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 ) wave Link documentation: https://docs.python.org/3/library/wave.html wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) \u4e00\u4e9b\u53c2\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps \u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5 Link \u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close ()","title":"Ex19"},{"location":"PythonChallenge/Knowledge/19/#19","text":"","title":"\u7b2c 19 \u9898"},{"location":"PythonChallenge/Knowledge/19/#base64","text":"base46.b64decode(s, altchars=None, validate=False) \u89e3\u7801 Base64 \u7f16\u7801\u5b57\u8282 1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @' RIFF... \u662f .wav \u7684\u6587\u4ef6\u5934","title":"base64"},{"location":"PythonChallenge/Knowledge/19/#email","text":"documentataion: https://docs.python.org/3/library/email.html 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False","title":"email"},{"location":"PythonChallenge/Knowledge/19/#os","text":"os.popen(cmd, mode='r', buffering=-1) Supply os.popen() 1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux","title":"os"},{"location":"PythonChallenge/Knowledge/19/#re","text":"re.findall(rules, strings, re.S) re.S \u6307\u591a\u884c\u641c\u7d22 . \u4efb\u610f\u5143\u7d20 * \u4efb\u610f\u4e2a\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 import re s = \"\"\"123 <!-- abc def ghi --> 456\"\"\" print ( re . findall ( \"<!-- \\n (.*) \\n -->\" , s , re . S )) >>> [ 'abc \\n def \\n ghi' ]","title":"re"},{"location":"PythonChallenge/Knowledge/19/#struct","text":"struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 )","title":"struct"},{"location":"PythonChallenge/Knowledge/19/#wave","text":"documentation: https://docs.python.org/3/library/wave.html wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) \u4e00\u4e9b\u53c2\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps","title":"wave"},{"location":"PythonChallenge/Knowledge/19/#19_1","text":"\u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close ()","title":"\u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5"},{"location":"PythonChallenge/Knowledge/20/","text":"\u7b2c 20 \u9898 Link \u53cd\u590d\u6536\u96c6 cookie Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a user name and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...' Http Response Code Link \u5e38\u89c1\u7684 Status Code Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9 \u8865\u5145 Link \u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095 zipfile Link 1 2 3 4 5 6 7 8 9 10 11 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 txt = zp . read ( \"readme.txt\" ) # \u83b7\u53d6\u538b\u7f29\u5305\u5185\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9 print ( txt ) >>> [ 'readme.txt' , 'package.pack' ] b \"Yes! This is really level 21 in here. \\n And yes, After you solve it, you'll be in level 22! \\n\\n Now for the level: \\n\\n * We used to play this game when we were kids \\n * When I had no idea what to do, I looked backwards. \\n \" Others Link \u4e8c\u8fdb\u5236\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 repr() \u6253\u5370 .zip \u6587\u4ef6\u7684\u6587\u4ef6\u5934\uff1a PK Linux \u4e0b\uff0c\u53ef\u4ee5\u8fd9\u6837\u67e5\u770b\u6587\u4ef6\u7c7b\u578b\uff1a york$ file unreal.dat Python 2 \u4e0e 3 \u7684\u5f02\u540c Link \u6bd4\u8f83\u660e\u663e\u7684\u4e0d\u540c \u9664\u6cd5 print \u9ed8\u8ba4\u5b57\u7b26 \u4e34\u65f6\u7684\u89e3\u51b3\u529e\u6cd5 \u4f7f\u7528 __future__ # python2 from __future__ import division , print_function , unicode_literals","title":"Ex20"},{"location":"PythonChallenge/Knowledge/20/#20","text":"","title":"\u7b2c 20 \u9898"},{"location":"PythonChallenge/Knowledge/20/#cookie","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a user name and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...'","title":"\u53cd\u590d\u6536\u96c6 cookie"},{"location":"PythonChallenge/Knowledge/20/#http-response-code","text":"\u5e38\u89c1\u7684 Status Code Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9","title":"Http Response Code"},{"location":"PythonChallenge/Knowledge/20/#_1","text":"\u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095","title":"\u8865\u5145"},{"location":"PythonChallenge/Knowledge/20/#zipfile","text":"1 2 3 4 5 6 7 8 9 10 11 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 txt = zp . read ( \"readme.txt\" ) # \u83b7\u53d6\u538b\u7f29\u5305\u5185\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9 print ( txt ) >>> [ 'readme.txt' , 'package.pack' ] b \"Yes! This is really level 21 in here. \\n And yes, After you solve it, you'll be in level 22! \\n\\n Now for the level: \\n\\n * We used to play this game when we were kids \\n * When I had no idea what to do, I looked backwards. \\n \"","title":"zipfile"},{"location":"PythonChallenge/Knowledge/20/#others","text":"\u4e8c\u8fdb\u5236\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 repr() \u6253\u5370 .zip \u6587\u4ef6\u7684\u6587\u4ef6\u5934\uff1a PK Linux \u4e0b\uff0c\u53ef\u4ee5\u8fd9\u6837\u67e5\u770b\u6587\u4ef6\u7c7b\u578b\uff1a york$ file unreal.dat","title":"Others"},{"location":"PythonChallenge/Knowledge/20/#python-2-3","text":"\u6bd4\u8f83\u660e\u663e\u7684\u4e0d\u540c \u9664\u6cd5 print \u9ed8\u8ba4\u5b57\u7b26 \u4e34\u65f6\u7684\u89e3\u51b3\u529e\u6cd5 \u4f7f\u7528 __future__ # python2 from __future__ import division , print_function , unicode_literals","title":"Python 2 \u4e0e 3 \u7684\u5f02\u540c"},{"location":"PythonChallenge/Knowledge/21/","text":"\u7b2c 21 \u9898 Link zlib Link 1 2 3 4 5 6 7 8 9 10 11 import zlib f = open ( \"package.pack\" , \"rb\" ) data = f . read () f . close () data = zlib . decompress ( data ) print ( data [: 6 ]) >>> b 'x \\x9c\\x00\\x07 @ \\xf8 ' \u538b\u7f29\u6587\u4ef6\u7684\u6587\u4ef6\u5934\u8865\u5145 Link zlib: 78 9c '\\x' \u6307\u5341\u516d\u8fdb\u5236 'x\\x9c' \u6307\u4e24\u4e2a\u6570\uff1ax \u4e0e 9c chr('x') = 120 hex(120) = '0x78' gzip: 1f 8b 08 lzma: 6c 00","title":"Ex21"},{"location":"PythonChallenge/Knowledge/21/#21","text":"","title":"\u7b2c 21 \u9898"},{"location":"PythonChallenge/Knowledge/21/#zlib","text":"1 2 3 4 5 6 7 8 9 10 11 import zlib f = open ( \"package.pack\" , \"rb\" ) data = f . read () f . close () data = zlib . decompress ( data ) print ( data [: 6 ]) >>> b 'x \\x9c\\x00\\x07 @ \\xf8 '","title":"zlib"},{"location":"PythonChallenge/Knowledge/21/#_1","text":"zlib: 78 9c '\\x' \u6307\u5341\u516d\u8fdb\u5236 'x\\x9c' \u6307\u4e24\u4e2a\u6570\uff1ax \u4e0e 9c chr('x') = 120 hex(120) = '0x78' gzip: 1f 8b 08 lzma: 6c 00","title":"\u538b\u7f29\u6587\u4ef6\u7684\u6587\u4ef6\u5934\u8865\u5145"},{"location":"PythonChallenge/Knowledge/22/","text":"\u7b2c 22 \u9898 Link PIL.Image Link \u7528\u5230\u7684\u65b9\u6cd5 Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u5185\u7f6e\u51fd\u6570 divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200","title":"Ex22"},{"location":"PythonChallenge/Knowledge/22/#22","text":"","title":"\u7b2c 22 \u9898"},{"location":"PythonChallenge/Knowledge/22/#pilimage","text":"\u7528\u5230\u7684\u65b9\u6cd5 Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u5185\u7f6e\u51fd\u6570 divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/23/","text":"\u7b2c 23 \u9898 Link this Link 1 2 3 4 5 6 7 8 import this s = \"va gur snpr bs jung?\" print ( '' . join ([ this . d . get ( c , c ) for c in s ])) >>> ... # \u7701\u7565 The Zen of Python in the face of what ?","title":"Ex23"},{"location":"PythonChallenge/Knowledge/23/#23","text":"","title":"\u7b2c 23 \u9898"},{"location":"PythonChallenge/Knowledge/23/#this","text":"1 2 3 4 5 6 7 8 import this s = \"va gur snpr bs jung?\" print ( '' . join ([ this . d . get ( c , c ) for c in s ])) >>> ... # \u7701\u7565 The Zen of Python in the face of what ?","title":"this"},{"location":"PythonChallenge/Knowledge/25/","text":"\u7b2c 25 \u9898 Link requests.Session Link 1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content ) Image.paste & wave Link 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): byte = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), byte ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' ) \u8865\u5145 Link Linux \u4e0b\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8fd9\u4e48\u505a york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"Ex25"},{"location":"PythonChallenge/Knowledge/25/#25","text":"","title":"\u7b2c 25 \u9898"},{"location":"PythonChallenge/Knowledge/25/#requestssession","text":"1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content )","title":"requests.Session"},{"location":"PythonChallenge/Knowledge/25/#imagepaste-wave","text":"1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): byte = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), byte ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' )","title":"Image.paste &amp; wave"},{"location":"PythonChallenge/Knowledge/25/#_1","text":"Linux \u4e0b\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8fd9\u4e48\u505a york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"\u8865\u5145"},{"location":"PythonChallenge/Knowledge/26/","text":"\u7b2c 26 \u9898 Link bytearray Link >>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>> md5 Link york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc","title":"Ex26"},{"location":"PythonChallenge/Knowledge/26/#26","text":"","title":"\u7b2c 26 \u9898"},{"location":"PythonChallenge/Knowledge/26/#bytearray","text":">>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>>","title":"bytearray"},{"location":"PythonChallenge/Knowledge/26/#md5","text":"york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc","title":"md5"},{"location":"PythonChallenge/Knowledge/27/","text":"\u7b2c 27 \u9898 Link keyword.iskeyword Link >>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>>","title":"Ex27"},{"location":"PythonChallenge/Knowledge/27/#27","text":"","title":"\u7b2c 27 \u9898"},{"location":"PythonChallenge/Knowledge/27/#keywordiskeyword","text":">>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>>","title":"keyword.iskeyword"},{"location":"PythonChallenge/Knowledge/29/","text":"\u7b2c 29 \u9898 Link PIL.Image Link Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' ) >>>","title":"Ex29"},{"location":"PythonChallenge/Knowledge/29/#29","text":"","title":"\u7b2c 29 \u9898"},{"location":"PythonChallenge/Knowledge/29/#pilimage","text":"Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' ) >>>","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/30/","text":"\u7b2c 30 \u9898 Link PIL.Image Link Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE . 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c","title":"Ex30"},{"location":"PythonChallenge/Knowledge/30/#30","text":"","title":"\u7b2c 30 \u9898"},{"location":"PythonChallenge/Knowledge/30/#pilimage","text":"Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE . 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/31/","text":"\u7b2c 31 \u9898 Link PIL.Image Link 1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"mandelbrot_clean.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . show ()","title":"Ex31"},{"location":"PythonChallenge/Knowledge/31/#31","text":"","title":"\u7b2c 31 \u9898"},{"location":"PythonChallenge/Knowledge/31/#pilimage","text":"1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"mandelbrot_clean.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . show ()","title":"PIL.Image"},{"location":"PythonChallenge/Knowledge/33/","text":"\u7b2c 33 \u9898 Link max Link >>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>>","title":"Ex33"},{"location":"PythonChallenge/Knowledge/33/#33","text":"","title":"\u7b2c 33 \u9898"},{"location":"PythonChallenge/Knowledge/33/#max","text":">>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>>","title":"max"},{"location":"PythonChallenge/Solutions/00_warming_up/","text":"\u7b2c 0 \u9898 warming up Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/0.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link try to change the URL address. 4. \u89e3\u6cd5 Link \u8ba1\u7b97 2 38 1 2 3 >>> 2 ** 38 274877906944 >>> \u66f4\u6539\u5730\u5740\uff1a\u5c06 0.html \u6539\u4e3a 274877906944.html 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/274877906944.html \u8fdb\u5165\u4e0a\u8ff0\u5730\u5740\u540e\uff0c\u7f51\u9875\u4f1a\u81ea\u52a8\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/map.html 6. \u8bf4\u660e Link \u6b64\u6b21\u505a Python Challenge \uff0c\u4ee5\u5b66\u4e60\u3001\u89c1\u8bc6 Python \u4e3a\u4e3b","title":"00 warming up"},{"location":"PythonChallenge/Solutions/00_warming_up/#0-warming-up","text":"","title":"\u7b2c 0 \u9898 warming up"},{"location":"PythonChallenge/Solutions/00_warming_up/#1","text":">>> http://www.pythonchallenge.com/pc/def/0.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/00_warming_up/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/00_warming_up/#3","text":"try to change the URL address.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/00_warming_up/#4","text":"\u8ba1\u7b97 2 38 1 2 3 >>> 2 ** 38 274877906944 >>> \u66f4\u6539\u5730\u5740\uff1a\u5c06 0.html \u6539\u4e3a 274877906944.html","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/00_warming_up/#5","text":"http://www.pythonchallenge.com/pc/def/274877906944.html \u8fdb\u5165\u4e0a\u8ff0\u5730\u5740\u540e\uff0c\u7f51\u9875\u4f1a\u81ea\u52a8\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/map.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/00_warming_up/#6","text":"\u6b64\u6b21\u505a Python Challenge \uff0c\u4ee5\u5b66\u4e60\u3001\u89c1\u8bc6 Python \u4e3a\u4e3b","title":"6. \u8bf4\u660e"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/","text":"\u7b2c 01 \u9898 What about making trans? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/map.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link everybody thinks twice before solving this. g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. 4. \u89e3\u6cd5 Link \u56fe\u4e2d\u793a\u610f\u5c06\u5b57\u6bcd\u5f80\u540e\u79fb\u4e24\u4f4d ... K, L, M ... ... O, P, Q ... ... E, F, G ... \u975e\u5b57\u6bcd\u90e8\u5206\u6ca1\u8bf4\uff0c\u5c31\u4e0d\u505a\u7406\u4f1a 1 2 3 4 5 6 7 s = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\" res = [ e . isalpha () and chr ( 97 + ( ord ( e ) - 97 + 2 ) % 26 ) or e for e in s ] print ( '' . join ( res )) >>> i hope you didnt translate it by hand . thats what computers are for . doing it in by hand is inefficient and that 's why this text is so long. using string.maketrans() is recommended. now apply on the url. \u4e0a\u9762\u7684\u7ed3\u679c\u63d0\u793a\uff1a\u4f7f\u7528 string.maketrans() \u5bf9\u5730\u5740\u8fdb\u884c\u201c\u7ffb\u8bd1\u201d \u4e0d\u8fc7 Python3.4 \u8d77\uff0c maketrans() \u6210\u4e3a\u4e86\u5185\u5efa\u51fd\u6570 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/ocr.html","title":"01 what about making trans"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#01-what-about-making-trans","text":"","title":"\u7b2c 01 \u9898 What about making trans?"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#1","text":">>> http://www.pythonchallenge.com/pc/def/map.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#3","text":"everybody thinks twice before solving this. g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#4","text":"\u56fe\u4e2d\u793a\u610f\u5c06\u5b57\u6bcd\u5f80\u540e\u79fb\u4e24\u4f4d ... K, L, M ... ... O, P, Q ... ... E, F, G ... \u975e\u5b57\u6bcd\u90e8\u5206\u6ca1\u8bf4\uff0c\u5c31\u4e0d\u505a\u7406\u4f1a 1 2 3 4 5 6 7 s = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\" res = [ e . isalpha () and chr ( 97 + ( ord ( e ) - 97 + 2 ) % 26 ) or e for e in s ] print ( '' . join ( res )) >>> i hope you didnt translate it by hand . thats what computers are for . doing it in by hand is inefficient and that 's why this text is so long. using string.maketrans() is recommended. now apply on the url. \u4e0a\u9762\u7684\u7ed3\u679c\u63d0\u793a\uff1a\u4f7f\u7528 string.maketrans() \u5bf9\u5730\u5740\u8fdb\u884c\u201c\u7ffb\u8bd1\u201d \u4e0d\u8fc7 Python3.4 \u8d77\uff0c maketrans() \u6210\u4e3a\u4e86\u5185\u5efa\u51fd\u6570 1 2 3 4 5 6 7 8 s = \"map\" intab = '' . join ([ chr ( e ) for e in range ( 97 , 123 )]) outtab = '' . join ([ chr ( 97 + ( e - 97 + 2 ) % 26 ) for e in range ( 97 , 123 )]) transtab = str . maketrans ( intab , outtab ) print ( s . translate ( transtab )) >>> ocr","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/01_what_about_making_trans/#5","text":"http://www.pythonchallenge.com/pc/def/ocr.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/02_ocr/","text":"\u7b2c 2 \u9898 ocr Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/ocr.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link recognize the characters. maybe they are in the book, but MAYBE they are in the page source. 4. \u89e3\u6cd5 Link \u6839\u636e\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u6e90\u7801\uff0c\u6709\u4e00\u77ed\u4e00\u957f\u4e24\u6bb5\u6ce8\u91ca 1 2 3 find rare characters in the mess below: %%$@_$^__#)^)&!_+]!*@&^}@[@%]()%+$&... # \u7565\u53bb\u5343\u4f59\u884c \u65e2\u7136\u662f\u201c\u5bfb\u627e\u7a00\u6709\u5b57\u7b26\u201d\uff0c\u90a3\u4e48\u8fd9\u4e00\u9898\u662f\u201c\u7edf\u8ba1\u8bcd\u9891\u201d\u4e86 \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u7801\u53e6\u5b58\u4e3a ocr.txt 4.1 \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 with open ( \"ocr.txt\" ) as f : d = {} for e in f . read (): d [ e ] = d . get ( e , 0 ) + 1 lst = [ e for e in d . keys ()] lst . sort ( key = lambda x : d [ x ]) print ( '' . join ( lst )) >>> equality ^*& $ { + ! % }[ _ #](@) 4.2 \u65b9\u6cd5\u4e8c Link \u7531\u65b9\u6cd5\u4e00\u7684\u7ed3\u679c\u53ef\u77e5\u9700\u8981\u83b7\u53d6\u7684\u662f\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 1 2 3 4 5 6 7 8 9 from collections import Counter with open ( \"ocr.txt\" ) as f : c = Counter ( f . read ()) res = [ e for e in c if c [ e ] == 1 ] print ( '' . join ( res )) >>> equality 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/equality.html","title":"02 ocr"},{"location":"PythonChallenge/Solutions/02_ocr/#2-ocr","text":"","title":"\u7b2c 2 \u9898 ocr"},{"location":"PythonChallenge/Solutions/02_ocr/#1","text":">>> http://www.pythonchallenge.com/pc/def/ocr.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/02_ocr/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/02_ocr/#3","text":"recognize the characters. maybe they are in the book, but MAYBE they are in the page source.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/02_ocr/#4","text":"\u6839\u636e\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u6e90\u7801\uff0c\u6709\u4e00\u77ed\u4e00\u957f\u4e24\u6bb5\u6ce8\u91ca 1 2 3 find rare characters in the mess below: %%$@_$^__#)^)&!_+]!*@&^}@[@%]()%+$&... # \u7565\u53bb\u5343\u4f59\u884c \u65e2\u7136\u662f\u201c\u5bfb\u627e\u7a00\u6709\u5b57\u7b26\u201d\uff0c\u90a3\u4e48\u8fd9\u4e00\u9898\u662f\u201c\u7edf\u8ba1\u8bcd\u9891\u201d\u4e86 \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u7801\u53e6\u5b58\u4e3a ocr.txt","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/02_ocr/#41","text":"1 2 3 4 5 6 7 8 9 10 11 with open ( \"ocr.txt\" ) as f : d = {} for e in f . read (): d [ e ] = d . get ( e , 0 ) + 1 lst = [ e for e in d . keys ()] lst . sort ( key = lambda x : d [ x ]) print ( '' . join ( lst )) >>> equality ^*& $ { + ! % }[ _ #](@)","title":"4.1 \u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/02_ocr/#42","text":"\u7531\u65b9\u6cd5\u4e00\u7684\u7ed3\u679c\u53ef\u77e5\u9700\u8981\u83b7\u53d6\u7684\u662f\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 1 2 3 4 5 6 7 8 9 from collections import Counter with open ( \"ocr.txt\" ) as f : c = Counter ( f . read ()) res = [ e for e in c if c [ e ] == 1 ] print ( '' . join ( res )) >>> equality","title":"4.2 \u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/02_ocr/#5","text":"http://www.pythonchallenge.com/pc/def/equality.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/03_re/","text":"\u7b2c 3 \u9898 re Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/equality.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 One small letter, surrounded by EXACTLY three big bodyguards on each of its sides. \u7f51\u9875\u6e90\u7801\u6ce8\u91ca 1 kAewtloYgcFQaJNhHVGxXDiQmzjfcpYbzxlWrVcqsmUb... 4. \u89e3\u6cd5 Link \u5bfb\u627e\u8fd9\u6837\u7684\u5c0f\u5199\u5b57\u6bcd\uff1a\u5b83\u5de6\u53f3\u4e24\u8fb9\u6709\u4e14\u4ec5\u6709 3 \u4e2a\u5927\u5199\u5b57\u6bcd \u6807\u9898\u662f re \uff0c\u8fd9\u662f\u4f5c\u8005\u63d0\u793a\u4f7f\u7528\u201c\u6b63\u5219\u201d \u4e0d\u8fc7\uff0c\u4e0d\u7528\u6b63\u5219\u4e5f\u884c \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u5e8f\u7684\u5b57\u7b26\u4e32\u53e6\u5b58\u4e3a bodyguard.txt 4.1 \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 f = open ( \"bodyguard.txt\" ) s = f . read () f . close () n = len ( s ) res = [] target = - 1 left = mid = right = 0 for i in range ( n ): if s [ i ] . islower (): if right == 3 : res . append ( s [ target ]) target = i mid , right = 1 , 0 elif 0 < right < 3 : left = mid = right = 0 elif left == 3 : if not mid : target = i mid = 1 else : left = mid = 0 elif left < 3 : left = 0 elif s [ i ] . isupper (): if right == 3 : left , mid , right = - 1 , 0 , 0 elif 0 < right < 3 : right += 1 elif mid : right = 1 elif left == 3 : left = - 1 elif - 1 < left < 3 : left += 1 print ( '' . join ( res )) >>> linkedlist 4.2 \u65b9\u6cd5\u4e8c Link 1 2 3 4 5 6 7 from re import findall with open ( \"bodyguard.txt\" , 'r' ) as f : # \u5c06\u5b57\u7b26\u4e32\u4fdd\u5b58\u5230\u6587\u4ef6 bodyguard.txt \u4e2d print ( '' . join ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , f . read ()))) >>> linkedlist \u8fdb\u5165 http://www.pythonchallenge.com/pc/def/linkedlist.html \u65b0\u7f51\u9875\u5185\u5199\u7740\uff1a linkedlist.php 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/linkedlist.php","title":"03 re"},{"location":"PythonChallenge/Solutions/03_re/#3-re","text":"","title":"\u7b2c 3 \u9898 re"},{"location":"PythonChallenge/Solutions/03_re/#1","text":">>> http://www.pythonchallenge.com/pc/def/equality.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/03_re/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/03_re/#3","text":"\u7f51\u9875\u5185 One small letter, surrounded by EXACTLY three big bodyguards on each of its sides. \u7f51\u9875\u6e90\u7801\u6ce8\u91ca 1 kAewtloYgcFQaJNhHVGxXDiQmzjfcpYbzxlWrVcqsmUb...","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/03_re/#4","text":"\u5bfb\u627e\u8fd9\u6837\u7684\u5c0f\u5199\u5b57\u6bcd\uff1a\u5b83\u5de6\u53f3\u4e24\u8fb9\u6709\u4e14\u4ec5\u6709 3 \u4e2a\u5927\u5199\u5b57\u6bcd \u6807\u9898\u662f re \uff0c\u8fd9\u662f\u4f5c\u8005\u63d0\u793a\u4f7f\u7528\u201c\u6b63\u5219\u201d \u4e0d\u8fc7\uff0c\u4e0d\u7528\u6b63\u5219\u4e5f\u884c \u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u4e0a\u8ff0\u4e71\u5e8f\u7684\u5b57\u7b26\u4e32\u53e6\u5b58\u4e3a bodyguard.txt","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/03_re/#41","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 f = open ( \"bodyguard.txt\" ) s = f . read () f . close () n = len ( s ) res = [] target = - 1 left = mid = right = 0 for i in range ( n ): if s [ i ] . islower (): if right == 3 : res . append ( s [ target ]) target = i mid , right = 1 , 0 elif 0 < right < 3 : left = mid = right = 0 elif left == 3 : if not mid : target = i mid = 1 else : left = mid = 0 elif left < 3 : left = 0 elif s [ i ] . isupper (): if right == 3 : left , mid , right = - 1 , 0 , 0 elif 0 < right < 3 : right += 1 elif mid : right = 1 elif left == 3 : left = - 1 elif - 1 < left < 3 : left += 1 print ( '' . join ( res )) >>> linkedlist","title":"4.1 \u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/03_re/#42","text":"1 2 3 4 5 6 7 from re import findall with open ( \"bodyguard.txt\" , 'r' ) as f : # \u5c06\u5b57\u7b26\u4e32\u4fdd\u5b58\u5230\u6587\u4ef6 bodyguard.txt \u4e2d print ( '' . join ( findall ( \"[a-z][A-Z] {3} ([a-z])[A-Z] {3} [a-z]\" , f . read ()))) >>> linkedlist \u8fdb\u5165 http://www.pythonchallenge.com/pc/def/linkedlist.html \u65b0\u7f51\u9875\u5185\u5199\u7740\uff1a linkedlist.php","title":"4.2 \u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/03_re/#5","text":"http://www.pythonchallenge.com/pc/def/linkedlist.php","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/","text":"\u7b2c 4 \u9898 follow the chain Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/linkedlist.php 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca urllib may help. DON'T TRY ALL NOTHINGS, since it will never end. 400 times is more than enough. 4. \u89e3\u6cd5 Link \u56fe\u7247\u53ef\u4ee5\u70b9\u51fb \u70b9\u51fb\u540e\uff0c\u9875\u9762\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345 \u65b0\u9875\u9762\u5185\u5bb9\uff1a and the next nothing is 44827 \u7528\u9875\u9762\u7684 next nothing \u503c\u66ff\u6362\u7f51\u5740\u4e2d nothing \u7684\u503c\uff0c\u4f1a\u8df3\u8f6c\u81f3\u65b0\u9875\u9762\u5e76\u5f97\u5230\u65b0\u7684 next nothing \u503c \u63d0\u793a\u4e2d\u63a8\u8350\u4f7f\u7528 urllib \uff0c\u5e76\u544a\u77e5\u8fd9\u6837\u7684\u7f51\u9875\u6709 400 \u4e2a\u5de6\u53f3\uff0c\u5e76\u4e14\u5faa\u73af \u5bf9\u4e8e Python3 \uff0c request \u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from re import findall from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=\" num = 44827 res = get ( url + str ( num )) try : while True : num = findall ( r \"\\d{3,}\" , res . text )[ 0 ] print ( num ) res = get ( url + num ) except : print ( res . text ) >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 16044 Yes . Divide by two and keep going . \u53d6 16044 \u7684\u4e00\u534a\u4e3a\u503c\uff0c\u7ee7\u7eed\uff08\u6211\u6362\u4e86\u4e2a\u65b9\u6cd5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from requests import get num = 16044 // 2 while True : res = get ( f \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing= { num } \" ) num = res . text . split ()[ - 1 ] if num . isdigit (): print ( num ) else : print ( res . text ) break >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 66831 peak . html 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/peak.html","title":"04 follow the chain"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#4-follow-the-chain","text":"","title":"\u7b2c 4 \u9898 follow the chain"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#1","text":">>> http://www.pythonchallenge.com/pc/def/linkedlist.php","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca urllib may help. DON'T TRY ALL NOTHINGS, since it will never end. 400 times is more than enough.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#4","text":"\u56fe\u7247\u53ef\u4ee5\u70b9\u51fb \u70b9\u51fb\u540e\uff0c\u9875\u9762\u8df3\u8f6c\u81f3 http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345 \u65b0\u9875\u9762\u5185\u5bb9\uff1a and the next nothing is 44827 \u7528\u9875\u9762\u7684 next nothing \u503c\u66ff\u6362\u7f51\u5740\u4e2d nothing \u7684\u503c\uff0c\u4f1a\u8df3\u8f6c\u81f3\u65b0\u9875\u9762\u5e76\u5f97\u5230\u65b0\u7684 next nothing \u503c \u63d0\u793a\u4e2d\u63a8\u8350\u4f7f\u7528 urllib \uff0c\u5e76\u544a\u77e5\u8fd9\u6837\u7684\u7f51\u9875\u6709 400 \u4e2a\u5de6\u53f3\uff0c\u5e76\u4e14\u5faa\u73af \u5bf9\u4e8e Python3 \uff0c request \u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from re import findall from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=\" num = 44827 res = get ( url + str ( num )) try : while True : num = findall ( r \"\\d{3,}\" , res . text )[ 0 ] print ( num ) res = get ( url + num ) except : print ( res . text ) >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 16044 Yes . Divide by two and keep going . \u53d6 16044 \u7684\u4e00\u534a\u4e3a\u503c\uff0c\u7ee7\u7eed\uff08\u6211\u6362\u4e86\u4e2a\u65b9\u6cd5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from requests import get num = 16044 // 2 while True : res = get ( f \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing= { num } \" ) num = res . text . split ()[ - 1 ] if num . isdigit (): print ( num ) else : print ( res . text ) break >>> ... # \u6b64\u5904\u7565\u53bb\u767e\u4f59\u9879 66831 peak . html","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/04_follow_the_chain/#5","text":"http://www.pythonchallenge.com/pc/def/peak.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/05_peak_hell/","text":"\u7b2c 5 \u9898 peak hell Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/peak.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 pronounce it \u7f51\u9875\u6e90\u7801\u6ce8\u91ca peak hell sounds familiar ? 4. \u89e3\u6cd5 Link \u7f51\u9875\u6e90\u7801\u4e2d\u9664\u4e86\u4e00\u6761\u6ce8\u91ca\uff0c\u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a banner.p \u7684\u6e90\u6587\u4ef6\u53ef\u9605\uff08\u4e2a\u4eba\u5efa\u8bae\u590d\u5236\u5730\u5740\u81f3 Edge \u4e0b\u8f7d\uff09 \u5c06\u7f51\u9875\u6807\u9898 peak hell \u8bfb\u5feb\u4e00\u70b9\uff0c\u53d1\u73b0\u50cf pickle \u4f7f\u7528 pickle \u5bf9 banner.p \u89e3\u5bc6 1 2 3 4 5 6 7 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : print ( load ( f )) >>> [[( ' ' , 95 )], [( ' ' , 14 ), ( '#' , 5 ), ( ' ' , 70 ), ( ... \u8f93\u51fa\u7684\u662f\u4e8c\u7ef4\u5217\u8868\uff0c\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u4e2d\u5404\u6709\u4e8c\u5143\u7ec4 1 \u81f3 n \u4e2a\u4e0d\u7b49 \u6bcf\u4e2a\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u7684\u884c\u53c8\u53ef\u4ee5\u7ec4\u6210\u4e00\u6bb5 1 2 3 4 5 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : res = [ '' . join ( i * j for i , j in line ) for line in load ( f )] print ( ' \\n ' . join ( res )) \u8f93\u51fa\u4e00\u5f20\u5b57\u7b26\u753b 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/channel.html","title":"05 peak hell"},{"location":"PythonChallenge/Solutions/05_peak_hell/#5-peak-hell","text":"","title":"\u7b2c 5 \u9898 peak hell"},{"location":"PythonChallenge/Solutions/05_peak_hell/#1","text":">>> http://www.pythonchallenge.com/pc/def/peak.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/05_peak_hell/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/05_peak_hell/#3","text":"\u7f51\u9875\u5185 pronounce it \u7f51\u9875\u6e90\u7801\u6ce8\u91ca peak hell sounds familiar ?","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/05_peak_hell/#4","text":"\u7f51\u9875\u6e90\u7801\u4e2d\u9664\u4e86\u4e00\u6761\u6ce8\u91ca\uff0c\u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a banner.p \u7684\u6e90\u6587\u4ef6\u53ef\u9605\uff08\u4e2a\u4eba\u5efa\u8bae\u590d\u5236\u5730\u5740\u81f3 Edge \u4e0b\u8f7d\uff09 \u5c06\u7f51\u9875\u6807\u9898 peak hell \u8bfb\u5feb\u4e00\u70b9\uff0c\u53d1\u73b0\u50cf pickle \u4f7f\u7528 pickle \u5bf9 banner.p \u89e3\u5bc6 1 2 3 4 5 6 7 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : print ( load ( f )) >>> [[( ' ' , 95 )], [( ' ' , 14 ), ( '#' , 5 ), ( ' ' , 70 ), ( ... \u8f93\u51fa\u7684\u662f\u4e8c\u7ef4\u5217\u8868\uff0c\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u4e2d\u5404\u6709\u4e8c\u5143\u7ec4 1 \u81f3 n \u4e2a\u4e0d\u7b49 \u6bcf\u4e2a\u7b2c\u4e8c\u7ef4\u7684\u5217\u8868\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u7684\u884c\u53c8\u53ef\u4ee5\u7ec4\u6210\u4e00\u6bb5 1 2 3 4 5 from pickle import load with open ( \"banner.p\" , \"rb\" ) as f : res = [ '' . join ( i * j for i , j in line ) for line in load ( f )] print ( ' \\n ' . join ( res )) \u8f93\u51fa\u4e00\u5f20\u5b57\u7b26\u753b","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/05_peak_hell/#5","text":"http://www.pythonchallenge.com/pc/def/channel.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/","text":"\u7b2c 6 \u9898 now there are pairs Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/channel.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 \u56fe\u7247\u6b63\u4e0b\u65b9\u6709\u4e2a PayPal-Donate \u7684 Button \u8fd9\u4e0e\u89e3\u8ff7\u65e0\u5173\uff0c\u662f\u7528\u4e8e\u201c\u6253\u8d4f\u201d\u4f5c\u8005\u7684 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca \u2190 zip 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u4e3b\u89d2\u662f\u201c\u62c9\u94fe\u201d\uff0c\u5373 zip \u7f51\u9875\u6e90\u7801\u7b2c\u4e00\u884c\uff0c <html> <!-- <-- zip --> \uff0c\u6697\u793a\u5c06 html \u6539\u4e3a zip \u6539\u5730\u5740\u540e\u53ef\u4e0b\u8f7d\u5230 channel.zip \u89e3\u538b\u53ef\u5f97\u8fd1\u5343\u4e2a\u6587\u4ef6\uff0c\u5176\u4ed6\u5747\u4ee5\u6570\u5b57\u547d\u540d\uff0c\u9664\u4e86 readme.txt \u67e5\u770b readme.txt welcome to my zipped list. hint1: start from 90052 hint2: answer is inside the zip 90052.txt \u4e2d\u5199\u7740 Next nothing is 94191 \u7531\u6b64\u53ef\u89c1\uff0c\u6b64\u9898\u4e0e\u7b2c 4 \u9898\u7c7b\u4f3c\uff0c\u53ea\u662f\u8f7d\u4f53\u4e0d\u540c part2 Link \u67e5\u627e\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 filename = \"90052\" while filename . isdecimal (): f = open ( filename + \".txt\" ) line = f . readline () f . close () filename = line . split ()[ - 1 ] print ( line ) >>> Collect the comments . part3 Link \u4f7f\u7528 zipfile \u83b7\u53d6 comment \u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from zipfile import ZipFile comments = [] filename = \"90052\" channel = ZipFile ( \"channel.zip\" , 'r' ) while filename . isdigit (): filename += \".txt\" f = channel . open ( filename , 'r' ) line = f . readline () f . close () t = channel . getinfo ( filename ) . comment comments . append ( str ( t , encoding = \"utf-8\" )) # bytes -> str filename = bytes . decode ( line . split ()[ - 1 ]) # bytes -> str print ( comments ) >>> [ '*' , '*' , '*' , ... \u628a\u4e0a\u65b9\u7a0b\u5e8f\u7684\u6700\u540e\u4e00\u53e5\u6539\u4e3a print(''.join(comments)) \u5373\u53ef\u770b\u5230\uff08\u51c6\uff09\u7b54\u6848 **************************************************************** **************************************************************** ** ** ** OO OO XX YYYY GG GG EEEEEE NN NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN NN ** ** OO OO XXX XXX YYY YY GG GG EE NN NN ** ** OOOOOOOO XX XX YY GGG EEEEE NNNN ** ** OOOOOOOO XX XX YY GGG EEEEE NN ** ** OO OO XXX XXX YYY YY GG GG EE NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN ** ** OO OO XX YYYY GG GG EEEEEE NN ** ** ** **************************************************************** ************************************************************** \u767b\u5165 http://www.pythonchallenge.com/pc/def/hockey.html \uff0c\u53ef\u5728\u65b0\u7f51\u9875\u5f97\u5230\u4e00\u53e5\u8bdd it's in the air. look at the letters. \u68c0\u67e5\u4e0a\u65b9\u7684 HOCKEY \uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u5b57\u6bcd\u5206\u522b\u7531 O, X, Y, G, E, N \u7ec4\u6210\uff0c\u201c\u6c27\u6c14\u201d\u4e5f\u6b63\u7b26\u5408\u4e0a\u9762\u7684\u63d0\u793a 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/oxygen.html","title":"06 now there are pairs"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#6-now-there-are-pairs","text":"","title":"\u7b2c 6 \u9898 now there are pairs"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#1","text":">>> http://www.pythonchallenge.com/pc/def/channel.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#3","text":"\u7f51\u9875\u5185 \u56fe\u7247\u6b63\u4e0b\u65b9\u6709\u4e2a PayPal-Donate \u7684 Button \u8fd9\u4e0e\u89e3\u8ff7\u65e0\u5173\uff0c\u662f\u7528\u4e8e\u201c\u6253\u8d4f\u201d\u4f5c\u8005\u7684 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca \u2190 zip","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#part1","text":"\u56fe\u4e2d\u4e3b\u89d2\u662f\u201c\u62c9\u94fe\u201d\uff0c\u5373 zip \u7f51\u9875\u6e90\u7801\u7b2c\u4e00\u884c\uff0c <html> <!-- <-- zip --> \uff0c\u6697\u793a\u5c06 html \u6539\u4e3a zip \u6539\u5730\u5740\u540e\u53ef\u4e0b\u8f7d\u5230 channel.zip \u89e3\u538b\u53ef\u5f97\u8fd1\u5343\u4e2a\u6587\u4ef6\uff0c\u5176\u4ed6\u5747\u4ee5\u6570\u5b57\u547d\u540d\uff0c\u9664\u4e86 readme.txt \u67e5\u770b readme.txt welcome to my zipped list. hint1: start from 90052 hint2: answer is inside the zip 90052.txt \u4e2d\u5199\u7740 Next nothing is 94191 \u7531\u6b64\u53ef\u89c1\uff0c\u6b64\u9898\u4e0e\u7b2c 4 \u9898\u7c7b\u4f3c\uff0c\u53ea\u662f\u8f7d\u4f53\u4e0d\u540c","title":"part1"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#part2","text":"\u67e5\u627e\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 filename = \"90052\" while filename . isdecimal (): f = open ( filename + \".txt\" ) line = f . readline () f . close () filename = line . split ()[ - 1 ] print ( line ) >>> Collect the comments .","title":"part2"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#part3","text":"\u4f7f\u7528 zipfile \u83b7\u53d6 comment \u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from zipfile import ZipFile comments = [] filename = \"90052\" channel = ZipFile ( \"channel.zip\" , 'r' ) while filename . isdigit (): filename += \".txt\" f = channel . open ( filename , 'r' ) line = f . readline () f . close () t = channel . getinfo ( filename ) . comment comments . append ( str ( t , encoding = \"utf-8\" )) # bytes -> str filename = bytes . decode ( line . split ()[ - 1 ]) # bytes -> str print ( comments ) >>> [ '*' , '*' , '*' , ... \u628a\u4e0a\u65b9\u7a0b\u5e8f\u7684\u6700\u540e\u4e00\u53e5\u6539\u4e3a print(''.join(comments)) \u5373\u53ef\u770b\u5230\uff08\u51c6\uff09\u7b54\u6848 **************************************************************** **************************************************************** ** ** ** OO OO XX YYYY GG GG EEEEEE NN NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN NN ** ** OO OO XXX XXX YYY YY GG GG EE NN NN ** ** OOOOOOOO XX XX YY GGG EEEEE NNNN ** ** OOOOOOOO XX XX YY GGG EEEEE NN ** ** OO OO XXX XXX YYY YY GG GG EE NN ** ** OO OO XXXXXX YYYYYY GG GG EEEEEE NN ** ** OO OO XX YYYY GG GG EEEEEE NN ** ** ** **************************************************************** ************************************************************** \u767b\u5165 http://www.pythonchallenge.com/pc/def/hockey.html \uff0c\u53ef\u5728\u65b0\u7f51\u9875\u5f97\u5230\u4e00\u53e5\u8bdd it's in the air. look at the letters. \u68c0\u67e5\u4e0a\u65b9\u7684 HOCKEY \uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u5b57\u6bcd\u5206\u522b\u7531 O, X, Y, G, E, N \u7ec4\u6210\uff0c\u201c\u6c27\u6c14\u201d\u4e5f\u6b63\u7b26\u5408\u4e0a\u9762\u7684\u63d0\u793a","title":"part3"},{"location":"PythonChallenge/Solutions/06_now_there_are_pairs/#5","text":"http://www.pythonchallenge.com/pc/def/oxygen.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/07_smarty/","text":"\u7b2c 7 \u9898 smarty Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/oxygen.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u8ba9\u4eba\u5728\u610f\u7684\u65e0\u7591\u5c31\u662f\u4e2d\u95f4\u7684\u90a3\u6761\u9a6c\u8d5b\u514b\u4f3c\u7684\u6a2a\u7ebf \u4f7f\u7528\u622a\u56fe\u5de5\u5177\u67e5\u770b\uff0c\u53ef\u53d1\u73b0 \u201c\u9a6c\u8d5b\u514b\u201d\u5904\u6bcf\u79cd\u989c\u8272\u5404\u81ea\u7684 R, G, B \u4e09\u503c\u76f8\u7b49 \u6bcf\u4e2a\u8272\u5757\u5bbd\u7ea6 7 \uff0c\u603b\u957f\u7ea6 609 h = 50 \u8fd9\u4e00\u884c\u7ecf\u8fc7\u6240\u6709\u7684\u8272\u5757 part2 Link \u4f7f\u7528 pillow \u63d0\u53d6\u8be5\u7ebf \u901a\u8fc7 R, G, B \u5206\u79bb\uff0c\u68c0\u9a8c R == G == B 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , g , b , a = pix [ w , 50 ] f . write ( str (( r , g , b , a )) + ' \\n ' ) f . close () part3 Link \u5c06 RGB \u8f6c ASCII \uff0c\u56e0\u4e3a\u4e09\u503c\u76f8\u7b49\uff0c\u6545\u53ea\u63d0\u53d6\u5176\u4e00\u5373\u53ef 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB2ASCII.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , _ , _ , _ = pix [ w , 50 ] f . write ( chr ( r )) f . close () \u67e5\u770b 07_RGB2ASCII.txt smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121] part4 Link \u5bf9\u5217\u8868\u4e2d\u7684\u6570\u5b57\u518d\u505a\u4e00\u6b21 ASCII \u8f6c\u6362 1 2 3 >>> bytes ([ 105 , 110 , 116 , 101 , 103 , 114 , 105 , 116 , 121 ]) b 'integrity' >>> 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/def/integrity.html","title":"07 smarty"},{"location":"PythonChallenge/Solutions/07_smarty/#7-smarty","text":"","title":"\u7b2c 7 \u9898 smarty"},{"location":"PythonChallenge/Solutions/07_smarty/#1","text":">>> http://www.pythonchallenge.com/pc/def/oxygen.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/07_smarty/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/07_smarty/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/07_smarty/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/07_smarty/#part1","text":"\u56fe\u4e2d\u8ba9\u4eba\u5728\u610f\u7684\u65e0\u7591\u5c31\u662f\u4e2d\u95f4\u7684\u90a3\u6761\u9a6c\u8d5b\u514b\u4f3c\u7684\u6a2a\u7ebf \u4f7f\u7528\u622a\u56fe\u5de5\u5177\u67e5\u770b\uff0c\u53ef\u53d1\u73b0 \u201c\u9a6c\u8d5b\u514b\u201d\u5904\u6bcf\u79cd\u989c\u8272\u5404\u81ea\u7684 R, G, B \u4e09\u503c\u76f8\u7b49 \u6bcf\u4e2a\u8272\u5757\u5bbd\u7ea6 7 \uff0c\u603b\u957f\u7ea6 609 h = 50 \u8fd9\u4e00\u884c\u7ecf\u8fc7\u6240\u6709\u7684\u8272\u5757","title":"part1"},{"location":"PythonChallenge/Solutions/07_smarty/#part2","text":"\u4f7f\u7528 pillow \u63d0\u53d6\u8be5\u7ebf \u901a\u8fc7 R, G, B \u5206\u79bb\uff0c\u68c0\u9a8c R == G == B 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , g , b , a = pix [ w , 50 ] f . write ( str (( r , g , b , a )) + ' \\n ' ) f . close ()","title":"part2"},{"location":"PythonChallenge/Solutions/07_smarty/#part3","text":"\u5c06 RGB \u8f6c ASCII \uff0c\u56e0\u4e3a\u4e09\u503c\u76f8\u7b49\uff0c\u6545\u53ea\u63d0\u53d6\u5176\u4e00\u5373\u53ef 1 2 3 4 5 6 7 8 9 from PIL import Image f = open ( \"07_RGB2ASCII.txt\" , 'w' ) img = Image . open ( \"oxygen.png\" ) pix = img . load () for w in range ( 3 , 609 , 7 ): r , _ , _ , _ = pix [ w , 50 ] f . write ( chr ( r )) f . close () \u67e5\u770b 07_RGB2ASCII.txt smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]","title":"part3"},{"location":"PythonChallenge/Solutions/07_smarty/#part4","text":"\u5bf9\u5217\u8868\u4e2d\u7684\u6570\u5b57\u518d\u505a\u4e00\u6b21 ASCII \u8f6c\u6362 1 2 3 >>> bytes ([ 105 , 110 , 116 , 101 , 103 , 114 , 105 , 116 , 121 ]) b 'integrity' >>>","title":"part4"},{"location":"PythonChallenge/Solutions/07_smarty/#5","text":"http://www.pythonchallenge.com/pc/def/integrity.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/08_working_hard/","text":"\u7b2c 8 \u9898 working hard? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/def/integrity.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 Where is the missing link? \u7f51\u9875\u6e90\u7801\u6ce8\u91ca un: 'BZh91AY&SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07<]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084' pw: 'BZh91AY&SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13<]\\xc9\\x14\\xe1BBP\\x91\\xf08' 4. \u89e3\u6cd5 Link part1 Link \u70b9\u51fb\u56fe\u4e2d\u871c\u8702\uff0c\u9875\u9762\u4f1a\u8df3\u8f6c\u5230\u4e00\u4e2a\u767b\u5f55\u754c\u9762 \u53ef\u4ee5\u731c\u6d4b\uff1a\u6e90\u7801\u4e2d\u7684 un \u4e0e pw \u5bf9\u5e94\u8fd9\u91cc\u7684 username \u4e0e password part2 Link \u871c\u8702\u7684\u82f1\u6587 Bee \u4e0e BZ2 \u5f62\u4f3c BZh91... \u6b63\u662f\u4f7f\u7528 bz2 \u538b\u7f29\u540e\u7684\u6587\u4ef6\u5934 1 2 3 4 5 6 7 8 9 10 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" pw = b \"BZh91AY&SY \\x94 $| \\x0e\\x00\\x00\\x00\\x81\\x00\\x03 $ \\x00 ! \\x9a h3M \\x13 <] \\xc9\\x14\\xe1 BBP \\x91\\xf0 8\" print ( \"un:\" , decompress ( un )) print ( \"pw:\" , decompress ( pw )) >>> un : b 'huge' pw : b 'file' 5. \u7b54\u6848 Link \u65b0\u9875\u9762\uff1a http://www.pythonchallenge.com/pc/return/good.html \u8d26\u53f7\uff1a huge \u5bc6\u7801\uff1a file ps \u63a5\u4e0b\u6765\u7684\u51e0\u9898\uff0c\u82e5\u5173\u95ed\u6d4f\u89c8\u5668\u540e\u91cd\u65b0\u6253\u5f00\uff0c\u6bcf\u6b21\u5747\u9700\u8f93\u5165\u4e0a\u8ff0\u7684\u8d26\u53f7\u3001\u5bc6\u7801","title":"08 working hard"},{"location":"PythonChallenge/Solutions/08_working_hard/#8-working-hard","text":"","title":"\u7b2c 8 \u9898 working hard?"},{"location":"PythonChallenge/Solutions/08_working_hard/#1","text":">>> http://www.pythonchallenge.com/pc/def/integrity.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/08_working_hard/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/08_working_hard/#3","text":"\u7f51\u9875\u5185 Where is the missing link? \u7f51\u9875\u6e90\u7801\u6ce8\u91ca un: 'BZh91AY&SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07<]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084' pw: 'BZh91AY&SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13<]\\xc9\\x14\\xe1BBP\\x91\\xf08'","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/08_working_hard/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/08_working_hard/#part1","text":"\u70b9\u51fb\u56fe\u4e2d\u871c\u8702\uff0c\u9875\u9762\u4f1a\u8df3\u8f6c\u5230\u4e00\u4e2a\u767b\u5f55\u754c\u9762 \u53ef\u4ee5\u731c\u6d4b\uff1a\u6e90\u7801\u4e2d\u7684 un \u4e0e pw \u5bf9\u5e94\u8fd9\u91cc\u7684 username \u4e0e password","title":"part1"},{"location":"PythonChallenge/Solutions/08_working_hard/#part2","text":"\u871c\u8702\u7684\u82f1\u6587 Bee \u4e0e BZ2 \u5f62\u4f3c BZh91... \u6b63\u662f\u4f7f\u7528 bz2 \u538b\u7f29\u540e\u7684\u6587\u4ef6\u5934 1 2 3 4 5 6 7 8 9 10 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" pw = b \"BZh91AY&SY \\x94 $| \\x0e\\x00\\x00\\x00\\x81\\x00\\x03 $ \\x00 ! \\x9a h3M \\x13 <] \\xc9\\x14\\xe1 BBP \\x91\\xf0 8\" print ( \"un:\" , decompress ( un )) print ( \"pw:\" , decompress ( pw )) >>> un : b 'huge' pw : b 'file'","title":"part2"},{"location":"PythonChallenge/Solutions/08_working_hard/#5","text":"\u65b0\u9875\u9762\uff1a http://www.pythonchallenge.com/pc/return/good.html \u8d26\u53f7\uff1a huge \u5bc6\u7801\uff1a file ps \u63a5\u4e0b\u6765\u7684\u51e0\u9898\uff0c\u82e5\u5173\u95ed\u6d4f\u89c8\u5668\u540e\u91cd\u65b0\u6253\u5f00\uff0c\u6bcf\u6b21\u5747\u9700\u8f93\u5165\u4e0a\u8ff0\u7684\u8d26\u53f7\u3001\u5bc6\u7801","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/","text":"\u7b2c 9 \u9898 connect the dots Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/good.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca first+second=? first: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801 second: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801 4. \u89e3\u6cd5 Link part1 Link \u4ed4\u7ec6\u89c2\u5bdf first \u4e0e second \uff0c\u53ef\u4ee5\u53d1\u73b0 first \u9996\u5c3e\u5747\u662f 146, 399 second \u9996\uff1a 156, 141 \uff0c\u5c3e\uff1a 156, 136 \u731c\u6d4b first, second \u53ef\u80fd\u662f\u6709\u8bb8\u591a\u4e2a (xi, yi) \u8fd9\u6837\u7684\u5750\u6807\u70b9\u6784\u6210\u7684 \u7528 Python \u4ea4\u4e92\u73af\u5883\u8ba1\u7b97\u4e00\u4e0b\u957f\u5ea6 len(first) = 442, len(second) = 112 \u90fd\u662f\u5076\u6570\uff0c\u7b26\u5408\u5750\u6807\u7684\u60f3\u6cd5 part2 Link \u4f7f\u7528 pillow 1 2 3 4 5 6 7 8 9 10 from PIL import Image , ImageDraw first = [ 146 , 399 , 163 , 403 , 170 , 393 , 169 , 391 , 166 , 386 , 170 , 381 , 170 , 371 , 170 , 355 , 169 , 346 , 167 , 335 , 170 , 329 , 170 , 320 , 170 , 310 , 171 , 301 , 173 , 290 , 178 , 289 , 182 , 287 , 188 , 286 , 190 , 286 , 192 , 291 , 194 , 296 , 195 , 305 , 194 , 307 , 191 , 312 , 190 , 316 , 190 , 321 , 192 , 331 , 193 , 338 , 196 , 341 , 197 , 346 , 199 , 352 , 198 , 360 , 197 , 366 , 197 , 373 , 196 , 380 , 197 , 383 , 196 , 387 , 192 , 389 , 191 , 392 , 190 , 396 , 189 , 400 , 194 , 401 , 201 , 402 , 208 , 403 , 213 , 402 , 216 , 401 , 219 , 397 , 219 , 393 , 216 , 390 , 215 , 385 , 215 , 379 , 213 , 373 , 213 , 365 , 212 , 360 , 210 , 353 , 210 , 347 , 212 , 338 , 213 , 329 , 214 , 319 , 215 , 311 , 215 , 306 , 216 , 296 , 218 , 290 , 221 , 283 , 225 , 282 , 233 , 284 , 238 , 287 , 243 , 290 , 250 , 291 , 255 , 294 , 261 , 293 , 265 , 291 , 271 , 291 , 273 , 289 , 278 , 287 , 279 , 285 , 281 , 280 , 284 , 278 , 284 , 276 , 287 , 277 , 289 , 283 , 291 , 286 , 294 , 291 , 296 , 295 , 299 , 300 , 301 , 304 , 304 , 320 , 305 , 327 , 306 , 332 , 307 , 341 , 306 , 349 , 303 , 354 , 301 , 364 , 301 , 371 , 297 , 375 , 292 , 384 , 291 , 386 , 302 , 393 , 324 , 391 , 333 , 387 , 328 , 375 , 329 , 367 , 329 , 353 , 330 , 341 , 331 , 328 , 336 , 319 , 338 , 310 , 341 , 304 , 341 , 285 , 341 , 278 , 343 , 269 , 344 , 262 , 346 , 259 , 346 , 251 , 349 , 259 , 349 , 264 , 349 , 273 , 349 , 280 , 349 , 288 , 349 , 295 , 349 , 298 , 354 , 293 , 356 , 286 , 354 , 279 , 352 , 268 , 352 , 257 , 351 , 249 , 350 , 234 , 351 , 211 , 352 , 197 , 354 , 185 , 353 , 171 , 351 , 154 , 348 , 147 , 342 , 137 , 339 , 132 , 330 , 122 , 327 , 120 , 314 , 116 , 304 , 117 , 293 , 118 , 284 , 118 , 281 , 122 , 275 , 128 , 265 , 129 , 257 , 131 , 244 , 133 , 239 , 134 , 228 , 136 , 221 , 137 , 214 , 138 , 209 , 135 , 201 , 132 , 192 , 130 , 184 , 131 , 175 , 129 , 170 , 131 , 159 , 134 , 157 , 134 , 160 , 130 , 170 , 125 , 176 , 114 , 176 , 102 , 173 , 103 , 172 , 108 , 171 , 111 , 163 , 115 , 156 , 116 , 149 , 117 , 142 , 116 , 136 , 115 , 129 , 115 , 124 , 115 , 120 , 115 , 115 , 117 , 113 , 120 , 109 , 122 , 102 , 122 , 100 , 121 , 95 , 121 , 89 , 115 , 87 , 110 , 82 , 109 , 84 , 118 , 89 , 123 , 93 , 129 , 100 , 130 , 108 , 132 , 110 , 133 , 110 , 136 , 107 , 138 , 105 , 140 , 95 , 138 , 86 , 141 , 79 , 149 , 77 , 155 , 81 , 162 , 90 , 165 , 97 , 167 , 99 , 171 , 109 , 171 , 107 , 161 , 111 , 156 , 113 , 170 , 115 , 185 , 118 , 208 , 117 , 223 , 121 , 239 , 128 , 251 , 133 , 259 , 136 , 266 , 139 , 276 , 143 , 290 , 148 , 310 , 151 , 332 , 155 , 348 , 156 , 353 , 153 , 366 , 149 , 379 , 147 , 394 , 146 , 399 ] second = [ 156 , 141 , 165 , 135 , 169 , 131 , 176 , 130 , 187 , 134 , 191 , 140 , 191 , 146 , 186 , 150 , 179 , 155 , 175 , 157 , 168 , 157 , 163 , 157 , 159 , 157 , 158 , 164 , 159 , 175 , 159 , 181 , 157 , 191 , 154 , 197 , 153 , 205 , 153 , 210 , 152 , 212 , 147 , 215 , 146 , 218 , 143 , 220 , 132 , 220 , 125 , 217 , 119 , 209 , 116 , 196 , 115 , 185 , 114 , 172 , 114 , 167 , 112 , 161 , 109 , 165 , 107 , 170 , 99 , 171 , 97 , 167 , 89 , 164 , 81 , 162 , 77 , 155 , 81 , 148 , 87 , 140 , 96 , 138 , 105 , 141 , 110 , 136 , 111 , 126 , 113 , 129 , 118 , 117 , 128 , 114 , 137 , 115 , 146 , 114 , 155 , 115 , 158 , 121 , 157 , 128 , 156 , 134 , 157 , 136 , 156 , 136 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( first , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( second , fill = \"white\" ) img . save ( \"09_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247 \u7531\u4e0a\u9762\u7684\u56fe\u7247\u53ef\u77e5 first \u662f\u8eab\u4f53 second \u662f\u5934\u90e8 \u56fe\u4e2d\u4e3a\u725b\uff0c\u56e0\u5934\u4e0a\u6709\u89d2\uff0c\u6545\u4e3a\u201c\u516c\u725b\u201d\uff0c\u5373 bull 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/bull.html","title":"09 connect the dots"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#9-connect-the-dots","text":"","title":"\u7b2c 9 \u9898 connect the dots"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#1","text":">>> http://www.pythonchallenge.com/pc/return/good.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca first+second=? first: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801 second: ... # \u8f83\u957f\uff0c\u7565\u4e4b\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u4ee3\u7801","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#part1","text":"\u4ed4\u7ec6\u89c2\u5bdf first \u4e0e second \uff0c\u53ef\u4ee5\u53d1\u73b0 first \u9996\u5c3e\u5747\u662f 146, 399 second \u9996\uff1a 156, 141 \uff0c\u5c3e\uff1a 156, 136 \u731c\u6d4b first, second \u53ef\u80fd\u662f\u6709\u8bb8\u591a\u4e2a (xi, yi) \u8fd9\u6837\u7684\u5750\u6807\u70b9\u6784\u6210\u7684 \u7528 Python \u4ea4\u4e92\u73af\u5883\u8ba1\u7b97\u4e00\u4e0b\u957f\u5ea6 len(first) = 442, len(second) = 112 \u90fd\u662f\u5076\u6570\uff0c\u7b26\u5408\u5750\u6807\u7684\u60f3\u6cd5","title":"part1"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#part2","text":"\u4f7f\u7528 pillow 1 2 3 4 5 6 7 8 9 10 from PIL import Image , ImageDraw first = [ 146 , 399 , 163 , 403 , 170 , 393 , 169 , 391 , 166 , 386 , 170 , 381 , 170 , 371 , 170 , 355 , 169 , 346 , 167 , 335 , 170 , 329 , 170 , 320 , 170 , 310 , 171 , 301 , 173 , 290 , 178 , 289 , 182 , 287 , 188 , 286 , 190 , 286 , 192 , 291 , 194 , 296 , 195 , 305 , 194 , 307 , 191 , 312 , 190 , 316 , 190 , 321 , 192 , 331 , 193 , 338 , 196 , 341 , 197 , 346 , 199 , 352 , 198 , 360 , 197 , 366 , 197 , 373 , 196 , 380 , 197 , 383 , 196 , 387 , 192 , 389 , 191 , 392 , 190 , 396 , 189 , 400 , 194 , 401 , 201 , 402 , 208 , 403 , 213 , 402 , 216 , 401 , 219 , 397 , 219 , 393 , 216 , 390 , 215 , 385 , 215 , 379 , 213 , 373 , 213 , 365 , 212 , 360 , 210 , 353 , 210 , 347 , 212 , 338 , 213 , 329 , 214 , 319 , 215 , 311 , 215 , 306 , 216 , 296 , 218 , 290 , 221 , 283 , 225 , 282 , 233 , 284 , 238 , 287 , 243 , 290 , 250 , 291 , 255 , 294 , 261 , 293 , 265 , 291 , 271 , 291 , 273 , 289 , 278 , 287 , 279 , 285 , 281 , 280 , 284 , 278 , 284 , 276 , 287 , 277 , 289 , 283 , 291 , 286 , 294 , 291 , 296 , 295 , 299 , 300 , 301 , 304 , 304 , 320 , 305 , 327 , 306 , 332 , 307 , 341 , 306 , 349 , 303 , 354 , 301 , 364 , 301 , 371 , 297 , 375 , 292 , 384 , 291 , 386 , 302 , 393 , 324 , 391 , 333 , 387 , 328 , 375 , 329 , 367 , 329 , 353 , 330 , 341 , 331 , 328 , 336 , 319 , 338 , 310 , 341 , 304 , 341 , 285 , 341 , 278 , 343 , 269 , 344 , 262 , 346 , 259 , 346 , 251 , 349 , 259 , 349 , 264 , 349 , 273 , 349 , 280 , 349 , 288 , 349 , 295 , 349 , 298 , 354 , 293 , 356 , 286 , 354 , 279 , 352 , 268 , 352 , 257 , 351 , 249 , 350 , 234 , 351 , 211 , 352 , 197 , 354 , 185 , 353 , 171 , 351 , 154 , 348 , 147 , 342 , 137 , 339 , 132 , 330 , 122 , 327 , 120 , 314 , 116 , 304 , 117 , 293 , 118 , 284 , 118 , 281 , 122 , 275 , 128 , 265 , 129 , 257 , 131 , 244 , 133 , 239 , 134 , 228 , 136 , 221 , 137 , 214 , 138 , 209 , 135 , 201 , 132 , 192 , 130 , 184 , 131 , 175 , 129 , 170 , 131 , 159 , 134 , 157 , 134 , 160 , 130 , 170 , 125 , 176 , 114 , 176 , 102 , 173 , 103 , 172 , 108 , 171 , 111 , 163 , 115 , 156 , 116 , 149 , 117 , 142 , 116 , 136 , 115 , 129 , 115 , 124 , 115 , 120 , 115 , 115 , 117 , 113 , 120 , 109 , 122 , 102 , 122 , 100 , 121 , 95 , 121 , 89 , 115 , 87 , 110 , 82 , 109 , 84 , 118 , 89 , 123 , 93 , 129 , 100 , 130 , 108 , 132 , 110 , 133 , 110 , 136 , 107 , 138 , 105 , 140 , 95 , 138 , 86 , 141 , 79 , 149 , 77 , 155 , 81 , 162 , 90 , 165 , 97 , 167 , 99 , 171 , 109 , 171 , 107 , 161 , 111 , 156 , 113 , 170 , 115 , 185 , 118 , 208 , 117 , 223 , 121 , 239 , 128 , 251 , 133 , 259 , 136 , 266 , 139 , 276 , 143 , 290 , 148 , 310 , 151 , 332 , 155 , 348 , 156 , 353 , 153 , 366 , 149 , 379 , 147 , 394 , 146 , 399 ] second = [ 156 , 141 , 165 , 135 , 169 , 131 , 176 , 130 , 187 , 134 , 191 , 140 , 191 , 146 , 186 , 150 , 179 , 155 , 175 , 157 , 168 , 157 , 163 , 157 , 159 , 157 , 158 , 164 , 159 , 175 , 159 , 181 , 157 , 191 , 154 , 197 , 153 , 205 , 153 , 210 , 152 , 212 , 147 , 215 , 146 , 218 , 143 , 220 , 132 , 220 , 125 , 217 , 119 , 209 , 116 , 196 , 115 , 185 , 114 , 172 , 114 , 167 , 112 , 161 , 109 , 165 , 107 , 170 , 99 , 171 , 97 , 167 , 89 , 164 , 81 , 162 , 77 , 155 , 81 , 148 , 87 , 140 , 96 , 138 , 105 , 141 , 110 , 136 , 111 , 126 , 113 , 129 , 118 , 117 , 128 , 114 , 137 , 115 , 146 , 114 , 155 , 115 , 158 , 121 , 157 , 128 , 156 , 134 , 157 , 136 , 156 , 136 ] img = Image . new ( \"RGB\" , ( 500 , 500 )) draw = ImageDraw . Draw ( img ) draw . line ( first , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde draw . polygon ( second , fill = \"white\" ) img . save ( \"09_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247 \u7531\u4e0a\u9762\u7684\u56fe\u7247\u53ef\u77e5 first \u662f\u8eab\u4f53 second \u662f\u5934\u90e8 \u56fe\u4e2d\u4e3a\u725b\uff0c\u56e0\u5934\u4e0a\u6709\u89d2\uff0c\u6545\u4e3a\u201c\u516c\u725b\u201d\uff0c\u5373 bull","title":"part2"},{"location":"PythonChallenge/Solutions/09_connect_the_dots/#5","text":"http://www.pythonchallenge.com/pc/return/bull.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/","text":"\u7b2c 10 \u9898 what are you looking at? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/bull.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link len(a[30]) = ? 4. \u89e3\u6cd5 Link \u70b9\u51fb\u5de6\u8fb9\u7684\u725b\uff0c\u9875\u9762\u8df3\u8f6c\uff0c\u5f97\u5230\u4e00\u53e5\uff1a a = [1, 11, 21, 1211, 111221, \u770b\u6765\u662f\u8981\u627e\u89c4\u5f8b\uff0c\u5f97\u5230 a[30] \u7684\u957f\u5ea6 \u89c4\u5f8b a[0] \u4e3a\u521d\u59cb\u503c\uff0c a[n] \u662f\u5bf9 a[n-1] \u7684\u89e3\u91ca a[1] \u7684 11 \u8868\u793a a[0] \u6709 1 \u4e2a 1 a[2] \u7684 21 \u8868\u793a a[1] \u6709 2 \u4e2a 1 a[3] \u7684 1211 \u8868\u793a a[2] \u6709 1 \u4e2a 2 \uff0c1 \u4e2a 1 a[4] \u7684 111221 \u8868\u793a a[3] \u6709 1 \u4e2a 1 \uff0c1 \u4e2a 2 \uff0c2 \u4e2a 1 \u65b9\u6cd5\u6709\u8bb8\u591a\uff0c\u6211\u6765\u4e2a\u629b\u7816\u5f15\u7389 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 num = \"1\" for i in range ( 30 ): s = '' cnt = 1 t = num [ 0 ] for c in num [ 1 :]: if t == c : cnt += 1 else : s += str ( cnt ) + t cnt = 1 t = c s += str ( cnt ) + t num = s print ( len ( num )) >>> 5808 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/5808.html","title":"10 what are you looking at"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#10-what-are-you-looking-at","text":"","title":"\u7b2c 10 \u9898 what are you looking at?"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#1","text":">>> http://www.pythonchallenge.com/pc/return/bull.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#3","text":"len(a[30]) = ?","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#4","text":"\u70b9\u51fb\u5de6\u8fb9\u7684\u725b\uff0c\u9875\u9762\u8df3\u8f6c\uff0c\u5f97\u5230\u4e00\u53e5\uff1a a = [1, 11, 21, 1211, 111221, \u770b\u6765\u662f\u8981\u627e\u89c4\u5f8b\uff0c\u5f97\u5230 a[30] \u7684\u957f\u5ea6 \u89c4\u5f8b a[0] \u4e3a\u521d\u59cb\u503c\uff0c a[n] \u662f\u5bf9 a[n-1] \u7684\u89e3\u91ca a[1] \u7684 11 \u8868\u793a a[0] \u6709 1 \u4e2a 1 a[2] \u7684 21 \u8868\u793a a[1] \u6709 2 \u4e2a 1 a[3] \u7684 1211 \u8868\u793a a[2] \u6709 1 \u4e2a 2 \uff0c1 \u4e2a 1 a[4] \u7684 111221 \u8868\u793a a[3] \u6709 1 \u4e2a 1 \uff0c1 \u4e2a 2 \uff0c2 \u4e2a 1 \u65b9\u6cd5\u6709\u8bb8\u591a\uff0c\u6211\u6765\u4e2a\u629b\u7816\u5f15\u7389 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 num = \"1\" for i in range ( 30 ): s = '' cnt = 1 t = num [ 0 ] for c in num [ 1 :]: if t == c : cnt += 1 else : s += str ( cnt ) + t cnt = 1 t = c s += str ( cnt ) + t num = s print ( len ( num )) >>> 5808","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/10_what_are_you_looking_at/#5","text":"http://www.pythonchallenge.com/pc/return/5808.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/11_odd_even/","text":"\u7b2c 11 \u9898 odd even Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/5808.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u6b64\u56fe\u50cf\u662f\u4ece\u73bb\u7483\u7a97\u4e0a\u770b\u5230\u7684\uff0c\u6709\u201c\u5012\u5f71\u201d \u6807\u9898\u6697\u793a\u628a\u56fe\u50cf\u6309\u201c\u5947\u5076\u201d\u5206\u6210\u4e24\u5f20 \u81f3\u4e8e\u662f\u4ec0\u4e48\u7684\u5947\u5076\uff0c\u5927\u80c6\u731c\u6d4b\uff1a\u50cf\u7d20\u7684\u5e8f\u53f7\uff08\u4ece 0 \u5f00\u59cb\uff09 part2 Link \u4ece\u9898\u56fe\u4e2d\u53d6\u4e00\u5757\u5e76\u653e\u5927 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) big = small . resize (( 500 , 250 )) big . save ( \"11_crop_resize.png\" ) \u5f97\u5230\u5982\u4e0b\u56fe\u7247 \u5f97\u5230\u5982\u4e0b\u89c4\u5f8b\uff08\u5355\u4f4d\uff1a\u50cf\u7d20\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09 \u5076\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00 \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00 part3 Link \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size one = Image . new ( img . mode , ( w // 2 , h )) two = one . copy () for x in range ( w ): for y in range ( h ): pixel = img . getpixel (( x , y )) if x % 2 == 0 : if y % 2 == 0 : one . putpixel (( x // 2 , y ), pixel ) else : two . putpixel (( x // 2 , y ), pixel ) else : if y % 2 == 0 : two . putpixel (( x // 2 , y ), pixel ) else : one . putpixel (( x // 2 , y ), pixel ) one . save ( \"11_even.png\" ) two . save ( \"11_odd.png\" ) \u56fe even \u56fe odd \u65b9\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size res = Image . new ( img . mode , ( w // 2 , h )) for x in range ( w ): for y in range ( h ): if not x % 2 ^ y % 2 : res . putpixel (( x // 2 , y ), img . getpixel (( x , y ))) res . show () \u5f97\u5230\u7684\u56fe\u7247\u4e0e\u4e0a\u65b9\u7684 even \u4e00\u81f4\uff0c\u800c\u56fe\u4e2d\u7684 evil \u6b63\u662f\u6b64\u9898\u7684\u89e3 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/evil.html","title":"11 odd even"},{"location":"PythonChallenge/Solutions/11_odd_even/#11-odd-even","text":"","title":"\u7b2c 11 \u9898 odd even"},{"location":"PythonChallenge/Solutions/11_odd_even/#1","text":">>> http://www.pythonchallenge.com/pc/return/5808.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/11_odd_even/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/11_odd_even/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/11_odd_even/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/11_odd_even/#part1","text":"\u6b64\u56fe\u50cf\u662f\u4ece\u73bb\u7483\u7a97\u4e0a\u770b\u5230\u7684\uff0c\u6709\u201c\u5012\u5f71\u201d \u6807\u9898\u6697\u793a\u628a\u56fe\u50cf\u6309\u201c\u5947\u5076\u201d\u5206\u6210\u4e24\u5f20 \u81f3\u4e8e\u662f\u4ec0\u4e48\u7684\u5947\u5076\uff0c\u5927\u80c6\u731c\u6d4b\uff1a\u50cf\u7d20\u7684\u5e8f\u53f7\uff08\u4ece 0 \u5f00\u59cb\uff09","title":"part1"},{"location":"PythonChallenge/Solutions/11_odd_even/#part2","text":"\u4ece\u9898\u56fe\u4e2d\u53d6\u4e00\u5757\u5e76\u653e\u5927 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) big = small . resize (( 500 , 250 )) big . save ( \"11_crop_resize.png\" ) \u5f97\u5230\u5982\u4e0b\u56fe\u7247 \u5f97\u5230\u5982\u4e0b\u89c4\u5f8b\uff08\u5355\u4f4d\uff1a\u50cf\u7d20\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\uff09 \u5076\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00 \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u884c \u5076\u6570\u5217\u5c5e\u4e8e\u56fe\u4e8c \u5947\u6570\u5217\u5c5e\u4e8e\u56fe\u4e00","title":"part2"},{"location":"PythonChallenge/Solutions/11_odd_even/#part3","text":"","title":"part3"},{"location":"PythonChallenge/Solutions/11_odd_even/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size one = Image . new ( img . mode , ( w // 2 , h )) two = one . copy () for x in range ( w ): for y in range ( h ): pixel = img . getpixel (( x , y )) if x % 2 == 0 : if y % 2 == 0 : one . putpixel (( x // 2 , y ), pixel ) else : two . putpixel (( x // 2 , y ), pixel ) else : if y % 2 == 0 : two . putpixel (( x // 2 , y ), pixel ) else : one . putpixel (( x // 2 , y ), pixel ) one . save ( \"11_even.png\" ) two . save ( \"11_odd.png\" ) \u56fe even \u56fe odd","title":"\u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/11_odd_even/#_2","text":"1 2 3 4 5 6 7 8 9 10 from PIL import Image img = Image . open ( \"cave.jpg\" ) w , h = img . size res = Image . new ( img . mode , ( w // 2 , h )) for x in range ( w ): for y in range ( h ): if not x % 2 ^ y % 2 : res . putpixel (( x // 2 , y ), img . getpixel (( x , y ))) res . show () \u5f97\u5230\u7684\u56fe\u7247\u4e0e\u4e0a\u65b9\u7684 even \u4e00\u81f4\uff0c\u800c\u56fe\u4e2d\u7684 evil \u6b63\u662f\u6b64\u9898\u7684\u89e3","title":"\u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/11_odd_even/#5","text":"http://www.pythonchallenge.com/pc/return/evil.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/12_dealing_evil/","text":"\u7b2c 12 \u9898 dealing evil Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/evil.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u5c06\u9898\u56fe\u53e6\u5b58\u4e3a\u65f6\u53d1\u73b0\u6b64\u56fe\u540d\u4e3a evil1.jpg \u56fe\u7247\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/return/evil1.jpg \u5c06 evil1 \u6539\u4e3a evil2 \uff0c\u5f97\u5230\u4e0b\u56fe \u6309\u56fe\u4e2d\u63d0\u793a\uff0c\u5c06\u5730\u5740\u7684\u540e\u7f00\u6539\u4e3a .gfx \uff0c\u53ef\u4ee5\u4e0b\u8f7d\u5230\u4e00\u4e2a evil2.gfx \u7684\u6587\u4ef6 \u641c\u7d22\u5f97\u77e5\uff0c PS \u652f\u6301 .gfx \u683c\u5f0f\uff0c\u6211\u6ca1\u6709 PS \uff0c\u4ece\u7ed3\u679c\u770b\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u6253\u4e0d\u5f00\u7684 part2 Link \u8bd5\u8bd5 evil3 \uff0c\u679c\u7136\u8fd8\u6709\u56fe\u7247 evil4 \u6709\u4e9b\u602a\uff0c\u6ca1\u6709\u56fe\u50cf\uff08\u5b9e\u9645\u4e0a\u5b83\u662f\u6587\u672c\u6587\u4ef6\uff09\uff0c\u4f46\u53ef\u4ee5\u83b7\u53d6\u4fe1\u606f\uff08\u4e0b\u4e00\u9898\u6709\u7528\uff09 evil5 \u662f 404 \uff0c\u6240\u4ee5\u5230\u6b64\u4e3a\u6b62\u4e86 part3 Link \u9898\u56fe\u4e2d\uff0c\u4e3b\u89d2\u5c06\u724c\u5206\u6210\u4e86\u4e94\u5806\uff0c\u8fd9\u662f\u6697\u793a\u6211\u4eec\u5c06 evil2.gfx \u5206\u6210\u4e94\u4efd \u68c0\u67e5\u4e00\u4e0b\u6570\u636e\u662f\u5426\u662f 5 \u7684\u500d\u6570 1 2 3 4 5 6 7 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read () img . close () print ( len ( data )) >>> 67575 \u786e\u5b9a\u8fd9\u4e94\u5f20\u56fe\u7247\u7684\u683c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () array = [ n for n in range ( 30 , 40 )] + [ n for n in range ( 65 , 91 )] + [ n for n in range ( 97 , 123 )] for i in range ( 5 ): print ( '' . join ([ chr ( e ) for e in data [ i :: 5 ] if e in array ])) >>> JFIF PNGIHDR GIFa PNGIHDR JFIF \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNGIHDR -> png GIFa -> gif part4 Link 1 2 3 4 5 6 7 f = open ( \"evil2.gfx\" , \"rb\" ) content = f . read () f . close () names = [ \"12_01.jpg\" , \"12_02.png\" , \"12_03.gif\" , \"12_04.png\" , \"12_05.jpg\" ] for i in range ( 5 ): with open ( names [ i ], \"wb\" ) as f : f . write ( content [ i :: 5 ]) \u56fe\u4e00 \u56fe\u4e8c \u56fe\u4e09 \u56fe\u56db \u56fe\u4e94 part5 Link \u7b2c 4 \u5f20\u56fe\u662f\u7834\u635f\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6709\u4ee5\u4e0b\u4e09\u79cd\u89e3\u91ca \u5bf9\u5e94\u7f51\u9875\u4e2d\u7684\u65e0\u6cd5\u663e\u793a\u7684 evil4 \u4e94\u7ec4\u7b49\u957f\u7684\u6570\u636e\u5408\u6210\u4e0d\u540c\u683c\u5f0f\u7684\u56fe\u7247\u540e\uff0c\u5206\u8fa8\u7387\u5404\u5f02\uff0c\u8fd8\u51fa\u73b0\u4e86\u7834\u635f\u7684\u56fe\u7247\uff0c\u7ed3\u5408\u9898\u56fe\uff0c\u8fd9\u53ef\u80fd\u6697\u793a\u201c\u8d4c\u684c\u201d\u4e0a\u5b58\u5728 evil \u4e5f\u8bb8\u4f5c\u8005\u662f\u60f3\u8ba9\u6211\u4eec\u901a\u8fc7\u56db\u5f20\u6b63\u5e38\u7684\u56fe\u7247\u63a8\u6d4b\u5269\u4e0b\u7684\u8fd9\u5f20 \u7b2c 4 \u5f20\u56fe\u7247\u867d\u7136\u7834\u635f\uff0c\u4f46\u4ecd\u80fd\u8fa8\u8ba4\u51fa\uff0c\u800c\u5c06\u524d\u56db\u5f20\u56fe\u4e2d\u7684\u5b57\u6bcd\u8fde\u8d77\u6765\uff0c\u53ef\u5f97\u5230\uff1a disproportional 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/disproportional.html","title":"12 dealing evil"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#12-dealing-evil","text":"","title":"\u7b2c 12 \u9898 dealing evil"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#1","text":">>> http://www.pythonchallenge.com/pc/return/evil.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part1","text":"\u5c06\u9898\u56fe\u53e6\u5b58\u4e3a\u65f6\u53d1\u73b0\u6b64\u56fe\u540d\u4e3a evil1.jpg \u56fe\u7247\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/return/evil1.jpg \u5c06 evil1 \u6539\u4e3a evil2 \uff0c\u5f97\u5230\u4e0b\u56fe \u6309\u56fe\u4e2d\u63d0\u793a\uff0c\u5c06\u5730\u5740\u7684\u540e\u7f00\u6539\u4e3a .gfx \uff0c\u53ef\u4ee5\u4e0b\u8f7d\u5230\u4e00\u4e2a evil2.gfx \u7684\u6587\u4ef6 \u641c\u7d22\u5f97\u77e5\uff0c PS \u652f\u6301 .gfx \u683c\u5f0f\uff0c\u6211\u6ca1\u6709 PS \uff0c\u4ece\u7ed3\u679c\u770b\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u6253\u4e0d\u5f00\u7684","title":"part1"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part2","text":"\u8bd5\u8bd5 evil3 \uff0c\u679c\u7136\u8fd8\u6709\u56fe\u7247 evil4 \u6709\u4e9b\u602a\uff0c\u6ca1\u6709\u56fe\u50cf\uff08\u5b9e\u9645\u4e0a\u5b83\u662f\u6587\u672c\u6587\u4ef6\uff09\uff0c\u4f46\u53ef\u4ee5\u83b7\u53d6\u4fe1\u606f\uff08\u4e0b\u4e00\u9898\u6709\u7528\uff09 evil5 \u662f 404 \uff0c\u6240\u4ee5\u5230\u6b64\u4e3a\u6b62\u4e86","title":"part2"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part3","text":"\u9898\u56fe\u4e2d\uff0c\u4e3b\u89d2\u5c06\u724c\u5206\u6210\u4e86\u4e94\u5806\uff0c\u8fd9\u662f\u6697\u793a\u6211\u4eec\u5c06 evil2.gfx \u5206\u6210\u4e94\u4efd \u68c0\u67e5\u4e00\u4e0b\u6570\u636e\u662f\u5426\u662f 5 \u7684\u500d\u6570 1 2 3 4 5 6 7 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read () img . close () print ( len ( data )) >>> 67575 \u786e\u5b9a\u8fd9\u4e94\u5f20\u56fe\u7247\u7684\u683c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 img = open ( \"evil2.gfx\" , \"rb\" ) data = img . read ( 80 ) img . close () array = [ n for n in range ( 30 , 40 )] + [ n for n in range ( 65 , 91 )] + [ n for n in range ( 97 , 123 )] for i in range ( 5 ): print ( '' . join ([ chr ( e ) for e in data [ i :: 5 ] if e in array ])) >>> JFIF PNGIHDR GIFa PNGIHDR JFIF \u5173\u4e8e\u683c\u5f0f JFIF -> jpg PNGIHDR -> png GIFa -> gif","title":"part3"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part4","text":"1 2 3 4 5 6 7 f = open ( \"evil2.gfx\" , \"rb\" ) content = f . read () f . close () names = [ \"12_01.jpg\" , \"12_02.png\" , \"12_03.gif\" , \"12_04.png\" , \"12_05.jpg\" ] for i in range ( 5 ): with open ( names [ i ], \"wb\" ) as f : f . write ( content [ i :: 5 ]) \u56fe\u4e00 \u56fe\u4e8c \u56fe\u4e09 \u56fe\u56db \u56fe\u4e94","title":"part4"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#part5","text":"\u7b2c 4 \u5f20\u56fe\u662f\u7834\u635f\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6709\u4ee5\u4e0b\u4e09\u79cd\u89e3\u91ca \u5bf9\u5e94\u7f51\u9875\u4e2d\u7684\u65e0\u6cd5\u663e\u793a\u7684 evil4 \u4e94\u7ec4\u7b49\u957f\u7684\u6570\u636e\u5408\u6210\u4e0d\u540c\u683c\u5f0f\u7684\u56fe\u7247\u540e\uff0c\u5206\u8fa8\u7387\u5404\u5f02\uff0c\u8fd8\u51fa\u73b0\u4e86\u7834\u635f\u7684\u56fe\u7247\uff0c\u7ed3\u5408\u9898\u56fe\uff0c\u8fd9\u53ef\u80fd\u6697\u793a\u201c\u8d4c\u684c\u201d\u4e0a\u5b58\u5728 evil \u4e5f\u8bb8\u4f5c\u8005\u662f\u60f3\u8ba9\u6211\u4eec\u901a\u8fc7\u56db\u5f20\u6b63\u5e38\u7684\u56fe\u7247\u63a8\u6d4b\u5269\u4e0b\u7684\u8fd9\u5f20 \u7b2c 4 \u5f20\u56fe\u7247\u867d\u7136\u7834\u635f\uff0c\u4f46\u4ecd\u80fd\u8fa8\u8ba4\u51fa\uff0c\u800c\u5c06\u524d\u56db\u5f20\u56fe\u4e2d\u7684\u5b57\u6bcd\u8fde\u8d77\u6765\uff0c\u53ef\u5f97\u5230\uff1a disproportional","title":"part5"},{"location":"PythonChallenge/Solutions/12_dealing_evil/#5","text":"http://www.pythonchallenge.com/pc/return/disproportional.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/13_call_him/","text":"\u7b2c 13 \u9898 call him Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/disproportional.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link phone that evil 4. \u89e3\u6cd5 Link part1 Link evil \u5728\u201c\u4e5d\u952e\u201d\u4e2d\u7684\u5bf9\u5e94\u7684\u6570\u5b57\u4f9d\u6b21\u4e3a 3 8 4 5 \u5f53\u9f20\u6807\u79fb\u5165 5 \u7684\u8303\u56f4\u65f6\uff0c\u53d1\u73b0 Button \u70b9\u51fb\u540e\uff0c\u7f51\u9875\u8df3\u8f6c\uff0c\u5f97\u5230\u5982\u4e0b <methodResponse> <fault> <value> <struct> <member> <name> faultCode </name> <value> <int> 105 </int> </value> </member> <member> <name> faultString </name> <value> <string> XML error: Invalid document end at line 1, column 1 </string> </value> </member> </struct> </value> </fault> </methodResponse> part2 Link \u4e0a\u65b9\u7684\u4fe1\u606f\u662f\u6697\u793a\u4f7f\u7528 Python \u5904\u7406 XML \u641c\u7d22\u5f97\u77e5 xmlrpc \u5e93 >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # \u4e0a\u4e00\u9898\u8bf4 Bert is evil '555-ITALY' \u5728\u7f8e\u56fd\uff0c\u4ee5 555 \u6253\u5934\u7684\u662f\u7a7a\u53f7\uff0c\u6240\u4ee5\u6b64\u9898\u7684\u89e3\u4e3a italy 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/italy.html","title":"13 call him"},{"location":"PythonChallenge/Solutions/13_call_him/#13-call-him","text":"","title":"\u7b2c 13 \u9898 call him"},{"location":"PythonChallenge/Solutions/13_call_him/#1","text":">>> http://www.pythonchallenge.com/pc/return/disproportional.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/13_call_him/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/13_call_him/#3","text":"phone that evil","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/13_call_him/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/13_call_him/#part1","text":"evil \u5728\u201c\u4e5d\u952e\u201d\u4e2d\u7684\u5bf9\u5e94\u7684\u6570\u5b57\u4f9d\u6b21\u4e3a 3 8 4 5 \u5f53\u9f20\u6807\u79fb\u5165 5 \u7684\u8303\u56f4\u65f6\uff0c\u53d1\u73b0 Button \u70b9\u51fb\u540e\uff0c\u7f51\u9875\u8df3\u8f6c\uff0c\u5f97\u5230\u5982\u4e0b <methodResponse> <fault> <value> <struct> <member> <name> faultCode </name> <value> <int> 105 </int> </value> </member> <member> <name> faultString </name> <value> <string> XML error: Invalid document end at line 1, column 1 </string> </value> </member> </struct> </value> </fault> </methodResponse>","title":"part1"},{"location":"PythonChallenge/Solutions/13_call_him/#part2","text":"\u4e0a\u65b9\u7684\u4fe1\u606f\u662f\u6697\u793a\u4f7f\u7528 Python \u5904\u7406 XML \u641c\u7d22\u5f97\u77e5 xmlrpc \u5e93 >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # \u4e0a\u4e00\u9898\u8bf4 Bert is evil '555-ITALY' \u5728\u7f8e\u56fd\uff0c\u4ee5 555 \u6253\u5934\u7684\u662f\u7a7a\u53f7\uff0c\u6240\u4ee5\u6b64\u9898\u7684\u89e3\u4e3a italy","title":"part2"},{"location":"PythonChallenge/Solutions/13_call_him/#5","text":"http://www.pythonchallenge.com/pc/return/italy.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/14_walk_around/","text":"\u7b2c 14 \u9898 walk around Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/italy.html 2. \u9898\u56fe\u4e0e\u63d0\u793a\u56fe Link \u9898\u56fe \u63d0\u793a\u56fe ps \u82e5\u76f4\u63a5\u4fdd\u5b58\u63d0\u793a\u56fe\uff0c\u4f1a\u5f97\u5230 1000X1 \u50cf\u7d20\u7684\u56fe\u7247\uff0c\u4e0b\u65b9\u7a0b\u5e8f\u7528\u5230\u7684\u4e5f\u662f\u8fd9\u5f20 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca remember: 100*100 = (100+99+99+98) + (.. 4. \u89e3\u6cd5 Link part1 Link \u5c06\u6ce8\u91ca\u4e2d\u7684\u5f0f\u5b50\u8865\u5168 100 * 100 = (100 + 99 + 99 + 98) + ( 98 + 97 + 97 + 96\uff09+ ... + ( 4 + 3 + 3 + 2) + ( 2 + 1 + 1 + 0) \u5c06\u90a3\u5f20 1000X1 \u7684\u56fe\u7247\u50cf\u4e00\u6761\u51ac\u7720\u7684 Python \u4e00\u6837\u201c\u76d8\u8d77\u6765\u201d \u65b9\u5411\uff1a\u6309\u9898\u56fe\u4e2d\u7684\u6765\uff0c\u5373\u987a\u65f6\u9488\u3001\u4ece\u5916\u90e8\u5411\u91cc\u9762 \u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u662f\u6bcf\u6b21\u6392\u7248\u7684\u8fb9\u957f part2 Link \u65b9\u6cd5\u4e00 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) i = 0 row_begin = col_begin = 0 row_end = col_end = 99 for _ in range ( 100 * 2 - 1 ): for j in range ( col_begin , col_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_begin , j ), pixel ) i += 1 row_begin += 1 for j in range ( row_begin , row_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_end ), pixel ) i += 1 col_end -= 1 for j in range ( col_end , col_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_end , j ), pixel ) i += 1 row_end -= 1 for j in range ( row_end , row_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_begin ), pixel ) i += 1 col_begin += 1 new . save ( \"14_result.png\" ) \u751f\u6210\u4e00\u5f20\u56fe\u7247 \u65b9\u6cd5\u4e8c Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from PIL import Image img = Image . open ( \"wire.png\" ) delta = [( 1 , 0 ), ( 0 , 1 ), ( - 1 , 0 ), ( 0 , - 1 )] # right, down, left, up res = Image . new ( \"RGB\" , [ 100 , 100 ]) # tuple or list x , y = - 1 , 0 cnt = 0 d = 200 while d / 2 > 0 : for v in delta : steps = d // 2 for s in range ( steps ): x , y = x + v [ 0 ], y + v [ 1 ] res . putpixel (( x , y ), img . getpixel (( cnt , 0 ))) cnt += 1 d -= 1 # (100,) 99, 99, 98... res . save ( \"14_result.jpg\" ) \u8fd9\u6b21\u751f\u6210\u7684\u56fe\u7247\u662f\u6b63\u7684 \u5173\u952e\u5b57\uff1a cat part3 Link \u767b\u5165\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/return/cat.html \u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff08\u6b64\u56fe\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u4e0d\u662f\u4e0b\u4e00\u5173\uff09 \u5916\u52a0\u4e00\u53e5\u63d0\u793a and its name is uzi . you'll hear from him later. \u5173\u952e\u5b57\uff1a uzi \uff0c\u7ecf\u68c0\u9a8c\uff0c\u6b64\u4e3a\u7b54\u6848 other Link part2 \u751f\u6210\u7684\u56fe\u7247\u4e0a\u6709\u7ea2\u70b9\uff0c\u63a2\u7d22\u540e\u53d1\u73b0\uff0c\u8fd9\u4e9b\u662f\u201c\u6e29\u99a8\u63d0\u793a\u201d \u5982\u679c\u662f\u76f4\u63a5\u6309\u884c\u53e0\u52a0\u5f97\u5230\u7684\u56fe\u7247 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) new . putdata ( img . getdata ()) new . show () \u8fd9\u4e9b\u7ea2\u70b9\u4f1a\u62fc\u6210\u7ea2\u5b57\uff1a bit \u767b\u5165 http://www.pythonchallenge.com/pc/return/bit.html \uff0c\u53ea\u80fd\u5f97\u5230 you took the wrong curve. 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/uzi.html","title":"14 walk around"},{"location":"PythonChallenge/Solutions/14_walk_around/#14-walk-around","text":"","title":"\u7b2c 14 \u9898 walk around"},{"location":"PythonChallenge/Solutions/14_walk_around/#1","text":">>> http://www.pythonchallenge.com/pc/return/italy.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/14_walk_around/#2","text":"\u9898\u56fe \u63d0\u793a\u56fe ps \u82e5\u76f4\u63a5\u4fdd\u5b58\u63d0\u793a\u56fe\uff0c\u4f1a\u5f97\u5230 1000X1 \u50cf\u7d20\u7684\u56fe\u7247\uff0c\u4e0b\u65b9\u7a0b\u5e8f\u7528\u5230\u7684\u4e5f\u662f\u8fd9\u5f20","title":"2. \u9898\u56fe\u4e0e\u63d0\u793a\u56fe"},{"location":"PythonChallenge/Solutions/14_walk_around/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca remember: 100*100 = (100+99+99+98) + (..","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/14_walk_around/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/14_walk_around/#part1","text":"\u5c06\u6ce8\u91ca\u4e2d\u7684\u5f0f\u5b50\u8865\u5168 100 * 100 = (100 + 99 + 99 + 98) + ( 98 + 97 + 97 + 96\uff09+ ... + ( 4 + 3 + 3 + 2) + ( 2 + 1 + 1 + 0) \u5c06\u90a3\u5f20 1000X1 \u7684\u56fe\u7247\u50cf\u4e00\u6761\u51ac\u7720\u7684 Python \u4e00\u6837\u201c\u76d8\u8d77\u6765\u201d \u65b9\u5411\uff1a\u6309\u9898\u56fe\u4e2d\u7684\u6765\uff0c\u5373\u987a\u65f6\u9488\u3001\u4ece\u5916\u90e8\u5411\u91cc\u9762 \u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u662f\u6bcf\u6b21\u6392\u7248\u7684\u8fb9\u957f","title":"part1"},{"location":"PythonChallenge/Solutions/14_walk_around/#part2","text":"","title":"part2"},{"location":"PythonChallenge/Solutions/14_walk_around/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) i = 0 row_begin = col_begin = 0 row_end = col_end = 99 for _ in range ( 100 * 2 - 1 ): for j in range ( col_begin , col_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_begin , j ), pixel ) i += 1 row_begin += 1 for j in range ( row_begin , row_end + 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_end ), pixel ) i += 1 col_end -= 1 for j in range ( col_end , col_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( row_end , j ), pixel ) i += 1 row_end -= 1 for j in range ( row_end , row_begin - 1 , - 1 ): pixel = img . getpixel (( i , 0 )) new . putpixel (( j , col_begin ), pixel ) i += 1 col_begin += 1 new . save ( \"14_result.png\" ) \u751f\u6210\u4e00\u5f20\u56fe\u7247","title":"\u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Solutions/14_walk_around/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from PIL import Image img = Image . open ( \"wire.png\" ) delta = [( 1 , 0 ), ( 0 , 1 ), ( - 1 , 0 ), ( 0 , - 1 )] # right, down, left, up res = Image . new ( \"RGB\" , [ 100 , 100 ]) # tuple or list x , y = - 1 , 0 cnt = 0 d = 200 while d / 2 > 0 : for v in delta : steps = d // 2 for s in range ( steps ): x , y = x + v [ 0 ], y + v [ 1 ] res . putpixel (( x , y ), img . getpixel (( cnt , 0 ))) cnt += 1 d -= 1 # (100,) 99, 99, 98... res . save ( \"14_result.jpg\" ) \u8fd9\u6b21\u751f\u6210\u7684\u56fe\u7247\u662f\u6b63\u7684 \u5173\u952e\u5b57\uff1a cat","title":"\u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Solutions/14_walk_around/#part3","text":"\u767b\u5165\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/return/cat.html \u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff08\u6b64\u56fe\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u4e0d\u662f\u4e0b\u4e00\u5173\uff09 \u5916\u52a0\u4e00\u53e5\u63d0\u793a and its name is uzi . you'll hear from him later. \u5173\u952e\u5b57\uff1a uzi \uff0c\u7ecf\u68c0\u9a8c\uff0c\u6b64\u4e3a\u7b54\u6848","title":"part3"},{"location":"PythonChallenge/Solutions/14_walk_around/#other","text":"part2 \u751f\u6210\u7684\u56fe\u7247\u4e0a\u6709\u7ea2\u70b9\uff0c\u63a2\u7d22\u540e\u53d1\u73b0\uff0c\u8fd9\u4e9b\u662f\u201c\u6e29\u99a8\u63d0\u793a\u201d \u5982\u679c\u662f\u76f4\u63a5\u6309\u884c\u53e0\u52a0\u5f97\u5230\u7684\u56fe\u7247 1 2 3 4 5 6 from PIL import Image img = Image . open ( \"wire.png\" ) new = Image . new ( img . mode , ( 100 , 100 )) new . putdata ( img . getdata ()) new . show () \u8fd9\u4e9b\u7ea2\u70b9\u4f1a\u62fc\u6210\u7ea2\u5b57\uff1a bit \u767b\u5165 http://www.pythonchallenge.com/pc/return/bit.html \uff0c\u53ea\u80fd\u5f97\u5230 you took the wrong curve.","title":"other"},{"location":"PythonChallenge/Solutions/14_walk_around/#5","text":"http://www.pythonchallenge.com/pc/return/uzi.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/15_whom/","text":"\u7b2c 15 \u9898 whom Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/uzi.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca he ain't the youngest, he is the second todo: buy flowers for tomorrow 4. \u89e3\u6cd5 Link part1 Link \u5e74\u4efd\u8303\u56f4\uff1a 1xx6 \u8be5\u5e74\u7684 1 \u6708 26 \u65e5\u662f\u5468\u4e00 \u9898\u56fe\u53f3\u4e0b\u89d2\u7684\u4e8c\u6708\u6709 29 \u5929\uff0c\u6240\u4ee5\u8fd9\u4e00\u5e74\u662f\u95f0\u5e74 \u7528\u7a0b\u5e8f\u5f97\u5230\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5e74\u4efd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from datetime import datetime for y in range ( 1006 , 1997 , 10 ): date = datetime ( y , 1 , 26 ) if date . weekday () == 0 : # \u5468\u4e00\u5bf9\u5e94 0 if date . year % 4 == 0 : # 1xx6 \u5e74\u53ea\u9700\u5224\u65ad\u662f\u5426\u4e3a 4 \u7684\u500d\u6570 print ( date . year ) >>> 1176 1356 1576 1756 1976 part2 Link \u56e0\u4e3a\u662f\u7b2c\u4e8c\u5e74\u8f7b\uff0c\u6240\u4ee5\u662f 1756 \u56e0\u4e3a\u7b2c\u4e8c\u5929\u8981\u4e70\u82b1\uff0c\u6240\u4ee5 1756-1-27 \u53ef\u80fd\u662f\u7eaa\u5ff5\u65e5 \u641c\u7d22\u5f97\u77e5\uff1a\u8fd9\u5929\u5965\u5730\u5229\u97f3\u4e50\u5927\u5e08 \u83ab\u624e\u7279 \uff0c\u4e5f\u5c31\u662f mozart 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/mozart.html","title":"15 whom"},{"location":"PythonChallenge/Solutions/15_whom/#15-whom","text":"","title":"\u7b2c 15 \u9898 whom"},{"location":"PythonChallenge/Solutions/15_whom/#1","text":">>> http://www.pythonchallenge.com/pc/return/uzi.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/15_whom/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/15_whom/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca he ain't the youngest, he is the second todo: buy flowers for tomorrow","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/15_whom/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/15_whom/#part1","text":"\u5e74\u4efd\u8303\u56f4\uff1a 1xx6 \u8be5\u5e74\u7684 1 \u6708 26 \u65e5\u662f\u5468\u4e00 \u9898\u56fe\u53f3\u4e0b\u89d2\u7684\u4e8c\u6708\u6709 29 \u5929\uff0c\u6240\u4ee5\u8fd9\u4e00\u5e74\u662f\u95f0\u5e74 \u7528\u7a0b\u5e8f\u5f97\u5230\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5e74\u4efd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from datetime import datetime for y in range ( 1006 , 1997 , 10 ): date = datetime ( y , 1 , 26 ) if date . weekday () == 0 : # \u5468\u4e00\u5bf9\u5e94 0 if date . year % 4 == 0 : # 1xx6 \u5e74\u53ea\u9700\u5224\u65ad\u662f\u5426\u4e3a 4 \u7684\u500d\u6570 print ( date . year ) >>> 1176 1356 1576 1756 1976","title":"part1"},{"location":"PythonChallenge/Solutions/15_whom/#part2","text":"\u56e0\u4e3a\u662f\u7b2c\u4e8c\u5e74\u8f7b\uff0c\u6240\u4ee5\u662f 1756 \u56e0\u4e3a\u7b2c\u4e8c\u5929\u8981\u4e70\u82b1\uff0c\u6240\u4ee5 1756-1-27 \u53ef\u80fd\u662f\u7eaa\u5ff5\u65e5 \u641c\u7d22\u5f97\u77e5\uff1a\u8fd9\u5929\u5965\u5730\u5229\u97f3\u4e50\u5927\u5e08 \u83ab\u624e\u7279 \uff0c\u4e5f\u5c31\u662f mozart","title":"part2"},{"location":"PythonChallenge/Solutions/15_whom/#5","text":"http://www.pythonchallenge.com/pc/return/mozart.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/","text":"\u7b2c 16 \u9898 let me get this straight Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/mozart.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u6709\u8bb8\u591a\u7d2b\u8272\u7ebf\u6bb5\uff0c\u653e\u5927\u540e\u770b\u662f\u8fd9\u6837\u7684 \u7b2c 14 \u9898\u6709 1000X1 \u7684\u56fe\u7247\uff0c\u6b64\u56fe\u4e3a 640X480 \u53ef\u5c06\u6b64\u56fe\u770b\u6210\u662f 480 \u4e2a 640X1 \u7684\u56fe\u7247\u5c42\u53e0\u800c\u6210 \u68c0\u9a8c\u6bcf\u4e2a 640X1 \u533a\u57df\u4e2d\u7d2b\u8272\u7ebf\u6bb5\u7684\u6570\u91cf\uff08\u4f7f\u7528\u622a\u56fe\u5de5\u5177\u6d4b\u91cf\uff0c\u7d2b\u8272\u7ebf\u6bb5\u7ea6 5 \u4e2a\u50cf\u7d20\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from PIL import Image from pprint import pprint def check_lines ( filename ): img = Image . open ( filename ) w , h = img . size res = [] for line_num in range ( h ): line = [] pix = img . getpixel (( 0 , line_num )) cnt = 1 for i in range ( 1 , w ): tmp = img . getpixel (( i , line_num )) if tmp == pix : cnt += 1 else : pix = tmp cnt = 1 if cnt == 5 : line . append ( tmp ) res . append ( line ) return res if __name__ == \"__main__\" : filename = \"mozart.gif\" pprint ( check_lines ( filename )) \u7ed3\u8bba \u6bcf\u884c\u5747\u6709\u8fde\u7eed 5 \u4e2a\u50cf\u7d20\u4e00\u81f4\u7684\u503c \u6709\u4e9b\u884c\u8fd9\u6837\u7684\u503c\u4e0d\u503c\u4e00\u4e2a \u552f\u72ec 195 \u5728\u6bcf\u884c\u90fd\u51fa\u73b0\u4e86\u4e00\u6b21 \u5173\u4e8e 195 \u9898\u56fe\u4e3a .gif \u683c\u5f0f\uff0c\u6b64\u683c\u5f0f\u9664\u4e86\u6709 R, G, B \uff0c\u8fd8\u6709\u201c\u8c03\u8272\u677f\u201d\u4fe1\u606f 0-255 \u5bf9\u5e94 256 \u79cd\u989c\u8272\uff0c 195 \u7684 R, G, B \u5bf9\u5e94 (255, 0, 255) part2 Link \u53ef\u4ee5\u5bf9 part1 \u4e2d\u7684\u7ed3\u8bba\u8fdb\u884c\u68c0\u9a8c >>> from PIL import Image , ImageChops >>> image = Image . open ( \"mozart.gif\" ) >>> h = image . histogram () # [count(0), count(1), ...] >>> for num in h : ... if num and num % image . height == 0 : ... print ( h . index ( num ), num ) ... 195 2400 >>> 2. 640 x 5 = 2400, ok part3 Link \u628a\u6bcf\u4e00\u201c\u6761\u201d 640X1 \u4ee5\u7d2b\u8272\u7ebf\u6bb5\u4e3a\u5f00\u5934\uff0c\u591a\u4f59\u7684\u90e8\u5206\u79fb\u5230\u8be5\u884c\u672b\u5c3e 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) for y in range ( img . size [ 1 ]): box = 0 , y , img . size [ 0 ], y + 1 row = img . crop ( box ) row_bytes = row . tobytes () i = row_bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # like 'crol' in c img . paste ( row , box ) img . save ( \"16_result.gif\" ) \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u7b54\u6848\uff1a romance 5. \u7b54\u6848 Link www.pythonchallenge.com/pc/return/romance.html","title":"16 let me get this straight"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#16-let-me-get-this-straight","text":"","title":"\u7b2c 16 \u9898 let me get this straight"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#1","text":">>> http://www.pythonchallenge.com/pc/return/mozart.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#part1","text":"\u56fe\u4e2d\u6709\u8bb8\u591a\u7d2b\u8272\u7ebf\u6bb5\uff0c\u653e\u5927\u540e\u770b\u662f\u8fd9\u6837\u7684 \u7b2c 14 \u9898\u6709 1000X1 \u7684\u56fe\u7247\uff0c\u6b64\u56fe\u4e3a 640X480 \u53ef\u5c06\u6b64\u56fe\u770b\u6210\u662f 480 \u4e2a 640X1 \u7684\u56fe\u7247\u5c42\u53e0\u800c\u6210 \u68c0\u9a8c\u6bcf\u4e2a 640X1 \u533a\u57df\u4e2d\u7d2b\u8272\u7ebf\u6bb5\u7684\u6570\u91cf\uff08\u4f7f\u7528\u622a\u56fe\u5de5\u5177\u6d4b\u91cf\uff0c\u7d2b\u8272\u7ebf\u6bb5\u7ea6 5 \u4e2a\u50cf\u7d20\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from PIL import Image from pprint import pprint def check_lines ( filename ): img = Image . open ( filename ) w , h = img . size res = [] for line_num in range ( h ): line = [] pix = img . getpixel (( 0 , line_num )) cnt = 1 for i in range ( 1 , w ): tmp = img . getpixel (( i , line_num )) if tmp == pix : cnt += 1 else : pix = tmp cnt = 1 if cnt == 5 : line . append ( tmp ) res . append ( line ) return res if __name__ == \"__main__\" : filename = \"mozart.gif\" pprint ( check_lines ( filename )) \u7ed3\u8bba \u6bcf\u884c\u5747\u6709\u8fde\u7eed 5 \u4e2a\u50cf\u7d20\u4e00\u81f4\u7684\u503c \u6709\u4e9b\u884c\u8fd9\u6837\u7684\u503c\u4e0d\u503c\u4e00\u4e2a \u552f\u72ec 195 \u5728\u6bcf\u884c\u90fd\u51fa\u73b0\u4e86\u4e00\u6b21 \u5173\u4e8e 195 \u9898\u56fe\u4e3a .gif \u683c\u5f0f\uff0c\u6b64\u683c\u5f0f\u9664\u4e86\u6709 R, G, B \uff0c\u8fd8\u6709\u201c\u8c03\u8272\u677f\u201d\u4fe1\u606f 0-255 \u5bf9\u5e94 256 \u79cd\u989c\u8272\uff0c 195 \u7684 R, G, B \u5bf9\u5e94 (255, 0, 255)","title":"part1"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#part2","text":"\u53ef\u4ee5\u5bf9 part1 \u4e2d\u7684\u7ed3\u8bba\u8fdb\u884c\u68c0\u9a8c >>> from PIL import Image , ImageChops >>> image = Image . open ( \"mozart.gif\" ) >>> h = image . histogram () # [count(0), count(1), ...] >>> for num in h : ... if num and num % image . height == 0 : ... print ( h . index ( num ), num ) ... 195 2400 >>> 2. 640 x 5 = 2400, ok","title":"part2"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#part3","text":"\u628a\u6bcf\u4e00\u201c\u6761\u201d 640X1 \u4ee5\u7d2b\u8272\u7ebf\u6bb5\u4e3a\u5f00\u5934\uff0c\u591a\u4f59\u7684\u90e8\u5206\u79fb\u5230\u8be5\u884c\u672b\u5c3e 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image , ImageChops img = Image . open ( \"mozart.gif\" ) for y in range ( img . size [ 1 ]): box = 0 , y , img . size [ 0 ], y + 1 row = img . crop ( box ) row_bytes = row . tobytes () i = row_bytes . index ( 195 ) row = ImageChops . offset ( row , - i ) # like 'crol' in c img . paste ( row , box ) img . save ( \"16_result.gif\" ) \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u7b54\u6848\uff1a romance","title":"part3"},{"location":"PythonChallenge/Solutions/16_let_me_get_this_straight/#5","text":"www.pythonchallenge.com/pc/return/romance.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/17_eat/","text":"\u7b2c 17 \u9898 eat? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/romance.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u6b64\u9898\u56fe\u7684\u5de6\u4e0b\u89d2\u4e3a\u7b2c 4 \u9898\u7684\u9898\u56fe 4. \u89e3\u6cd5 Link part1 Link \u56de\u5230\u7b2c 4 \u9898\uff1a http://www.pythonchallenge.com/pc/def/linkedlist.php \u997c\u5e72\u7684\u82f1\u6587\uff1a cookie \u672c\u9898\u7684\u9898\u56fe\u540d\u4e3a cookies \u6839\u636e\u4f5c\u8005\u7684\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u7684 cookie part2 Link \u70b9\u51fb\u7b2c 4 \u9898\u7684\u9898\u56fe \u5c06 nothing \u6539\u4e3a busynothing http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=12345 \u7f51\u9875\u8df3\u8f6c\uff0c\u5e76\u5f97\u5230\u5982\u4e0b\u4fe1\u606f If you came here from level 4 - go back! You should follow the obvious chain... and the next busynothing is 44827 \u66f4\u6539 busynothing \u7684\u503c\uff0c\u67e5\u770b\u65b0\u7f51\u9875\u7684 cookie \uff0c\u5176\u503c\u4e3a B \u770b\u6765\u662f\u8981\u6536\u96c6 cookies part3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=\" num = \"12345\" lst = [] while num . isdecimal (): res = get ( url + num ) lst . append ( res . cookies . get ( \"info\" )) num = res . text . split ()[ - 1 ] print ( num ) print ( res . text ) tmp = '' . join ( lst ) print ( tmp ) with open ( \"17_cookies.txt\" , 'w' ) as f : f . write ( tmp ) >>> ... 83051 it . that 's it. BZh91AY % 26 SY % 94 % 3 A % E2I % 00 % 00 % 21 % 19 % 80 P % 81 % 11 % 00 % AFg % 9 E % A0 +% 00 hE % 3 DM % B5 % 23 % D0 % D4 % D1 % E2 % 8 D % 06 % A9 % FA % 26 S % D4 % D3 % 21 % A1 % EAi7h % 9 B % 9 A % 2 B % BF % 60 % 22 % C5WX % E1 % ADL % 80 % E8V % 3 C % C6 % A8 % DBH % 2632 % 18 % A8x % 01 % 08 % 21 % 8 DS % 0 B % C8 % AF % 96 KO % CA2 % B0 % F1 % BD % 1 Du % A0 % 86 % 05 % 92 s % B0 % 92 % C4Bc % F1w % 24 S % 85 % 09 % 09 C % AE % 24 % 90 \u4ee5 BZh91 \u5f00\u5934\uff0c\u56de\u60f3\u8d77\u7b2c 8 \u9898 part4 Link \u4ed4\u7ec6\u770b\u4e0a\u9762\u7684 BZh91... \uff0c\u4f1a\u53d1\u73b0\u6709\u4e2a + \uff0c\u628a\u5b83\u66ff\u6362\u6210\u7a7a\u683c\u518d\u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' 26 \u53f7\u4e0e flower \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 15 \u9898 call \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 13 \u9898 \u7efc\u5408\u8d77\u6765\uff0c\u662f\u8981\u7528\u7b2c 13 \u9898\u7684 phone \u8ddf Mozart \u7236\u4eb2\u901a\u8bdd \u901a\u8bdd\u5185\u5bb9\uff1a the flowers are on their way part5 Link \u641c\u7d22\u5f97\u77e5\uff0c Mozart \u7236\u4eb2\u540d\u4e3a\uff1a Leopold 1 2 3 4 5 6 7 from xmlrpc.client import ServerProxy contact = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) print ( contact . phone ( \"Leopold\" )) >>> 555 - VIOLIN \u201c\u5c0f\u63d0\u7434\u624b\u201d \u6b63\u662f Leopold \u7684\u4e00\u4e2a\u8eab\u4efd \u6253\u5f00\u7f51\u9875 http://www.pythonchallenge.com/pc/return/violin.html \uff0c\u5f97\u5230 no! i mean yes! but ../stuff/violin.php. \u5f97\u5230\u4e0b\u4e00\u6b65\u7684\u7f51\u9875\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/stuff/violin.php \u6b64\u4e3a Leopold \u7684\u8096\u50cf \u56fe\u7247\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u6b64\u9898\u8fd8\u672b\u7ed3\u675f \u56fe\u7247\u4e0d\u662f\u5c45\u4e2d\uff0c\u800c\u662f\u5728\u6b63\u4e0a\u65b9\uff0c\u90a3\u4e48\u7f51\u9875\u4e0b\u534a\u90e8\u5206\u53ef\u80fd\u9690\u85cf\u7740\u8bdd part6 Link \u4f7f\u7528 the flowers are on their way 1 2 3 4 5 6 from requests import get url = \"http://www.pythonchallenge.com/pc/stuff/violin.php\" cookie = { \"info\" : \"the flowers are on their way\" } res = get ( url , cookies = cookie ) print ( res . text ) \u5f97\u5230\u5982\u4e0b\u4fe1\u606f < html > < head > < title > it's me. what do you want? </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"../style.css\" > </ head > < body > < br >< br > < center >< font color = \"gold\" > < img src = \"leopold.jpg\" border = \"0\" /> < br >< br > oh well, don't you dare to forget the balloons. </ font > </ body > </ html > \u5173\u952e\u5b57\uff1a balloons other Link \u82e5\u4f7f\u7528\u63d2\u4ef6\u4fee\u6539 cookie \uff0c\u53ef\u5728 Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u770b\u5230 oh well, don't you dare to forget the balloons. 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/return/balloons.html","title":"17 eat"},{"location":"PythonChallenge/Solutions/17_eat/#17-eat","text":"","title":"\u7b2c 17 \u9898 eat?"},{"location":"PythonChallenge/Solutions/17_eat/#1","text":">>> http://www.pythonchallenge.com/pc/return/romance.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/17_eat/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/17_eat/#3","text":"\u6b64\u9898\u56fe\u7684\u5de6\u4e0b\u89d2\u4e3a\u7b2c 4 \u9898\u7684\u9898\u56fe","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/17_eat/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/17_eat/#part1","text":"\u56de\u5230\u7b2c 4 \u9898\uff1a http://www.pythonchallenge.com/pc/def/linkedlist.php \u997c\u5e72\u7684\u82f1\u6587\uff1a cookie \u672c\u9898\u7684\u9898\u56fe\u540d\u4e3a cookies \u6839\u636e\u4f5c\u8005\u7684\u63d0\u793a\uff0c\u67e5\u770b\u7f51\u9875\u7684 cookie","title":"part1"},{"location":"PythonChallenge/Solutions/17_eat/#part2","text":"\u70b9\u51fb\u7b2c 4 \u9898\u7684\u9898\u56fe \u5c06 nothing \u6539\u4e3a busynothing http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=12345 \u7f51\u9875\u8df3\u8f6c\uff0c\u5e76\u5f97\u5230\u5982\u4e0b\u4fe1\u606f If you came here from level 4 - go back! You should follow the obvious chain... and the next busynothing is 44827 \u66f4\u6539 busynothing \u7684\u503c\uff0c\u67e5\u770b\u65b0\u7f51\u9875\u7684 cookie \uff0c\u5176\u503c\u4e3a B \u770b\u6765\u662f\u8981\u6536\u96c6 cookies","title":"part2"},{"location":"PythonChallenge/Solutions/17_eat/#part3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from requests import get url = \"http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=\" num = \"12345\" lst = [] while num . isdecimal (): res = get ( url + num ) lst . append ( res . cookies . get ( \"info\" )) num = res . text . split ()[ - 1 ] print ( num ) print ( res . text ) tmp = '' . join ( lst ) print ( tmp ) with open ( \"17_cookies.txt\" , 'w' ) as f : f . write ( tmp ) >>> ... 83051 it . that 's it. BZh91AY % 26 SY % 94 % 3 A % E2I % 00 % 00 % 21 % 19 % 80 P % 81 % 11 % 00 % AFg % 9 E % A0 +% 00 hE % 3 DM % B5 % 23 % D0 % D4 % D1 % E2 % 8 D % 06 % A9 % FA % 26 S % D4 % D3 % 21 % A1 % EAi7h % 9 B % 9 A % 2 B % BF % 60 % 22 % C5WX % E1 % ADL % 80 % E8V % 3 C % C6 % A8 % DBH % 2632 % 18 % A8x % 01 % 08 % 21 % 8 DS % 0 B % C8 % AF % 96 KO % CA2 % B0 % F1 % BD % 1 Du % A0 % 86 % 05 % 92 s % B0 % 92 % C4Bc % F1w % 24 S % 85 % 09 % 09 C % AE % 24 % 90 \u4ee5 BZh91 \u5f00\u5934\uff0c\u56de\u60f3\u8d77\u7b2c 8 \u9898","title":"part3"},{"location":"PythonChallenge/Solutions/17_eat/#part4","text":"\u4ed4\u7ec6\u770b\u4e0a\u9762\u7684 BZh91... \uff0c\u4f1a\u53d1\u73b0\u6709\u4e2a + \uff0c\u628a\u5b83\u66ff\u6362\u6210\u7a7a\u683c\u518d\u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 from bz2 import decompress from urllib.parse import unquote_to_bytes with open ( \"17_cookies.txt\" , 'r' ) as f : text = f . readline () res = text . replace ( '+' , ' ' ) ans = unquote_to_bytes ( res ) print ( decompress ( ans )) >>> b 'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he \\' ll understand.' 26 \u53f7\u4e0e flower \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 15 \u9898 call \u8bf4\u7684\u5e94\u8be5\u662f\u7b2c 13 \u9898 \u7efc\u5408\u8d77\u6765\uff0c\u662f\u8981\u7528\u7b2c 13 \u9898\u7684 phone \u8ddf Mozart \u7236\u4eb2\u901a\u8bdd \u901a\u8bdd\u5185\u5bb9\uff1a the flowers are on their way","title":"part4"},{"location":"PythonChallenge/Solutions/17_eat/#part5","text":"\u641c\u7d22\u5f97\u77e5\uff0c Mozart \u7236\u4eb2\u540d\u4e3a\uff1a Leopold 1 2 3 4 5 6 7 from xmlrpc.client import ServerProxy contact = ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) print ( contact . phone ( \"Leopold\" )) >>> 555 - VIOLIN \u201c\u5c0f\u63d0\u7434\u624b\u201d \u6b63\u662f Leopold \u7684\u4e00\u4e2a\u8eab\u4efd \u6253\u5f00\u7f51\u9875 http://www.pythonchallenge.com/pc/return/violin.html \uff0c\u5f97\u5230 no! i mean yes! but ../stuff/violin.php. \u5f97\u5230\u4e0b\u4e00\u6b65\u7684\u7f51\u9875\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/stuff/violin.php \u6b64\u4e3a Leopold \u7684\u8096\u50cf \u56fe\u7247\u6ca1\u6709\u9898\u53f7\uff0c\u6545\u6b64\u9898\u8fd8\u672b\u7ed3\u675f \u56fe\u7247\u4e0d\u662f\u5c45\u4e2d\uff0c\u800c\u662f\u5728\u6b63\u4e0a\u65b9\uff0c\u90a3\u4e48\u7f51\u9875\u4e0b\u534a\u90e8\u5206\u53ef\u80fd\u9690\u85cf\u7740\u8bdd","title":"part5"},{"location":"PythonChallenge/Solutions/17_eat/#part6","text":"\u4f7f\u7528 the flowers are on their way 1 2 3 4 5 6 from requests import get url = \"http://www.pythonchallenge.com/pc/stuff/violin.php\" cookie = { \"info\" : \"the flowers are on their way\" } res = get ( url , cookies = cookie ) print ( res . text ) \u5f97\u5230\u5982\u4e0b\u4fe1\u606f < html > < head > < title > it's me. what do you want? </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"../style.css\" > </ head > < body > < br >< br > < center >< font color = \"gold\" > < img src = \"leopold.jpg\" border = \"0\" /> < br >< br > oh well, don't you dare to forget the balloons. </ font > </ body > </ html > \u5173\u952e\u5b57\uff1a balloons","title":"part6"},{"location":"PythonChallenge/Solutions/17_eat/#other","text":"\u82e5\u4f7f\u7528\u63d2\u4ef6\u4fee\u6539 cookie \uff0c\u53ef\u5728 Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u770b\u5230 oh well, don't you dare to forget the balloons.","title":"other"},{"location":"PythonChallenge/Solutions/17_eat/#5","text":"http://www.pythonchallenge.com/pc/return/balloons.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/","text":"\u7b2c 18 \u9898 can you tell the difference? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/return/balloons.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca it is more obvious that what you might think 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u5de6\u53f3\u533a\u522b\u5728\u201c\u4eae\u5ea6\u201d\u2014\u2014 brightness \u82e5\u4ee5 bright \u8bd5\u4e4b\uff0c\u4f1a\u5f97\u5230 ness \uff0c\u5176\u610f\u4e5f\u4e3a brightness \u6253\u5f00\u7f51\u9875\uff1a http://www.pythonchallenge.com/pc/return/brightness.html \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u53e5\u6ce8\u91ca\uff1a maybe consider deltas.gz \u5c06\u5730\u5740\u6539\u4e3a\uff1a http://www.pythonchallenge.com/pc/return/deltas.gz \u53ef\u4e0b\u8f7d\u5f97\u5230\u6587\u4ef6 deltas.gz \u89e3\u538b\u540e\uff0c\u5f97\u5230 delta.txt \u5efa\u8bae\u7528\u8bb0\u4e8b\u672c\u4ee5\u5916\u7684\u7f16\u8f91\u5668\u6253\u5f00\uff0c\u90a3\u6837\u770b\u5f97\u6e05\u695a part2 Link \u5f00\u5934\u516b\u7ec4\u6570\u636e\u4e3a\uff1a 89 50 4e 47 0d 0a 1a 0a \uff0c\u6709\u4e86\u7b2c 12 \u9898\u548c\u7b2c 7 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u5927\u80c6\u731c\u6d4b\u5176\u4e3a\u201c\u5341\u516d\u8fdb\u5236\u201d\uff0c\u4e14\u4e0e ASCII \u7801\u6709\u5173 >>> hex_nums = \"89 50 4e 47 0d 0a 1a 0a\" . split () >>> dec_nums = [ int ( e , 16 ) for e in hex_nums ] >>> bytes ( dec_nums ) b ' \\x89 PNG \\r\\n\\x1a\\n ' >>> \u770b\u5230 \\x89PNG \u7b49\u5b57\u6837\uff0c\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e32\u6570\u636e\u662f .png \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u7b2c 51 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u51fa\u73b0\u4e0d\u540c\uff0c\u4e14\u8be5\u884c\u53f3\u8fb9\u7b49\u4e8e\u8be5\u884c\u4e0b\u4e00\u884c\u7684\u5de6\u8fb9 \u7b2c 56 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u5728\u9694\u51e0\u884c\u65f6\uff0c\u4ecd\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5 part3 Link \u9700\u8981\u5c06\u6570\u636e\u5206\u6210\u4e09\u7ec4 \u53ea\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4e24\u4fa7\u5747\u5b58\u5728 \u53ea\u5b58\u5728\u4e8e\u53f3\u4fa7 \u81ea\u5df1\u9020\u8f6e\u5b50\u4e5f\u8d39\u4e0d\u4e86\u51e0\u884c\uff0c\u4e0d\u8fc7\u6709\u73b0\u6210\u7684 difflib \u53ef\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare = difflib . ndiff ( left , right ) fl = open ( \"18_left.png\" , \"wb\" ) # only in left fb = open ( \"18_both.png\" , \"wb\" ) # both have fr = open ( \"18_right.png\" , \"wb\" ) # only in right for line in compare : bs = bytes ([ int ( e , 16 ) for e in line [ 2 :] . strip () . split () if e ]) if line [ 0 ] == '-' : fl . write ( bs ) elif line [ 0 ] == '+' : fr . write ( bs ) else : fb . write ( bs ) fl . close () fb . close () fr . close () \u56fe left \u56fe both \u56fe right part4 Link ../hex/bin.html \u5e94\u8be5\u662f\u8bf4\u4e0b\u4e00\u5173\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/hex/bin.html \u6253\u5f00\u7f51\u5740\u540e\uff0c\u7c7b\u4f3c\u7b2c 8 \u9898\uff0c\u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\uff08\u770b\u6765\uff0c\u505a\u540e\u7eed\u7684\u9898\u76ee\u8981\u66f4\u65b0\u5bc6\u7801\u4e86\uff09 butter \u4e0e fly \u53ef\u4ee5\u51d1\u6210 butterfly \uff0c\u6309\u987a\u5e8f\u6b63\u597d \u8d26\u53f7\uff1a butter \u5bc6\u7801\uff1a fly 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/bin.html","title":"18 can you tell the difference"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#18-can-you-tell-the-difference","text":"","title":"\u7b2c 18 \u9898 can you tell the difference?"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#1","text":">>> http://www.pythonchallenge.com/pc/return/balloons.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca it is more obvious that what you might think","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part1","text":"\u56fe\u4e2d\u5de6\u53f3\u533a\u522b\u5728\u201c\u4eae\u5ea6\u201d\u2014\u2014 brightness \u82e5\u4ee5 bright \u8bd5\u4e4b\uff0c\u4f1a\u5f97\u5230 ness \uff0c\u5176\u610f\u4e5f\u4e3a brightness \u6253\u5f00\u7f51\u9875\uff1a http://www.pythonchallenge.com/pc/return/brightness.html \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u53e5\u6ce8\u91ca\uff1a maybe consider deltas.gz \u5c06\u5730\u5740\u6539\u4e3a\uff1a http://www.pythonchallenge.com/pc/return/deltas.gz \u53ef\u4e0b\u8f7d\u5f97\u5230\u6587\u4ef6 deltas.gz \u89e3\u538b\u540e\uff0c\u5f97\u5230 delta.txt \u5efa\u8bae\u7528\u8bb0\u4e8b\u672c\u4ee5\u5916\u7684\u7f16\u8f91\u5668\u6253\u5f00\uff0c\u90a3\u6837\u770b\u5f97\u6e05\u695a","title":"part1"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part2","text":"\u5f00\u5934\u516b\u7ec4\u6570\u636e\u4e3a\uff1a 89 50 4e 47 0d 0a 1a 0a \uff0c\u6709\u4e86\u7b2c 12 \u9898\u548c\u7b2c 7 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u5927\u80c6\u731c\u6d4b\u5176\u4e3a\u201c\u5341\u516d\u8fdb\u5236\u201d\uff0c\u4e14\u4e0e ASCII \u7801\u6709\u5173 >>> hex_nums = \"89 50 4e 47 0d 0a 1a 0a\" . split () >>> dec_nums = [ int ( e , 16 ) for e in hex_nums ] >>> bytes ( dec_nums ) b ' \\x89 PNG \\r\\n\\x1a\\n ' >>> \u770b\u5230 \\x89PNG \u7b49\u5b57\u6837\uff0c\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e32\u6570\u636e\u662f .png \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u7b2c 51 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u51fa\u73b0\u4e0d\u540c\uff0c\u4e14\u8be5\u884c\u53f3\u8fb9\u7b49\u4e8e\u8be5\u884c\u4e0b\u4e00\u884c\u7684\u5de6\u8fb9 \u7b2c 56 \u884c\u5f00\u59cb\uff0c\u5de6\u53f3\u5728\u9694\u51e0\u884c\u65f6\uff0c\u4ecd\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5","title":"part2"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part3","text":"\u9700\u8981\u5c06\u6570\u636e\u5206\u6210\u4e09\u7ec4 \u53ea\u5b58\u5728\u4e8e\u5de6\u4fa7 \u4e24\u4fa7\u5747\u5b58\u5728 \u53ea\u5b58\u5728\u4e8e\u53f3\u4fa7 \u81ea\u5df1\u9020\u8f6e\u5b50\u4e5f\u8d39\u4e0d\u4e86\u51e0\u884c\uff0c\u4e0d\u8fc7\u6709\u73b0\u6210\u7684 difflib \u53ef\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import difflib import gzip data = gzip . open ( \"deltas.gz\" ) left , right = [], [] for line in data : left . append ( line [: 53 ] . decode () + \" \\n \" ) # \u8fd9\u91cc\u522b\u5fd8 right . append ( line [ 56 :] . decode ()) compare = difflib . ndiff ( left , right ) fl = open ( \"18_left.png\" , \"wb\" ) # only in left fb = open ( \"18_both.png\" , \"wb\" ) # both have fr = open ( \"18_right.png\" , \"wb\" ) # only in right for line in compare : bs = bytes ([ int ( e , 16 ) for e in line [ 2 :] . strip () . split () if e ]) if line [ 0 ] == '-' : fl . write ( bs ) elif line [ 0 ] == '+' : fr . write ( bs ) else : fb . write ( bs ) fl . close () fb . close () fr . close () \u56fe left \u56fe both \u56fe right","title":"part3"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#part4","text":"../hex/bin.html \u5e94\u8be5\u662f\u8bf4\u4e0b\u4e00\u5173\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/hex/bin.html \u6253\u5f00\u7f51\u5740\u540e\uff0c\u7c7b\u4f3c\u7b2c 8 \u9898\uff0c\u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\uff08\u770b\u6765\uff0c\u505a\u540e\u7eed\u7684\u9898\u76ee\u8981\u66f4\u65b0\u5bc6\u7801\u4e86\uff09 butter \u4e0e fly \u53ef\u4ee5\u51d1\u6210 butterfly \uff0c\u6309\u987a\u5e8f\u6b63\u597d \u8d26\u53f7\uff1a butter \u5bc6\u7801\uff1a fly","title":"part4"},{"location":"PythonChallenge/Solutions/18_can_you_tell_the_difference/#5","text":"http://www.pythonchallenge.com/pc/hex/bin.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/19_please/","text":"\u7b2c 19 \u9898 please! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/bin.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u4e32\u5f88\u957f\u7684\u6ce8\u91ca From: leopold.moz@pythonchallenge.com Subject: what do you mean by \"open the attachment?\" Mime-version: 1.0 Content-type: Multipart/mixed; boundary=\"===============1295515792==\" It is so much easier for you, youngsters. Maybe my computer is out of order. I have a real work to do and I must know what's inside! --===============1295515792== Content-type: audio/x-wav; name=\"indian.wav\" Content-transfer-encoding: base64 ... # \u7701\u7565\u4e86\u8fd1 2000 \u884c\uff0c\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u6b64\u5904\u4fe1\u606f\u4fdd\u5b58\u5728\u6587\u4ef6 please.txt --===============1295515792==-- 4. \u89e3\u6cd5 Link part1 Link \u7f51\u9875\u7684\u6ce8\u91ca\u50cf\u662f Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u6765\u7684\u4e00\u5c01\u90ae\u4ef6 \u4ed6\u8bf4\uff1a open the attachment? \uff0c\u8bf4\u660e\u6709\u4e2a\u9644\u4ef6 audio/x-wav; name=\"indian.wav\" \u8bf4\u660e\u9644\u4ef6\u662f\u4e00\u4e2a\u97f3\u9891 base64 \u63d0\u793a\u4e86\u7f16\u7801\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 from base64 import b64decode f = open ( \"please.txt\" , \"rb\" ) audio = open ( \"indian.wav\" , \"wb\" ) for line in f . readlines (): audio . write ( b64decode ( line . strip ())) f . close () audio . close () \u97f3\u9891\u4e2d\u4ec5\u6709\u4e00\u4e2a\u7537\u58f0\u5355\u8bcd sorry part2 Link \u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/sorry.html \uff0c\u770b\u5230 \"what are you apologizing for?\" part3 Link \u97f3\u9891\u7ea6 5 \u79d2\uff0c\u4e0d\u8be5\u53ea\u6709\u4e00\u4e2a\u5355\u8bcd \u5173\u4e8e wav \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u524d 44 \u4e2a\u5b57\u8282\u662f\u56fa\u5b9a\u7684 \u5176\u4f59\u7684\u6570\u636e\u5206\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\uff0c\u9ad8\u4f4d\u5f71\u54cd\u5927\uff0c\u4f4e\u4f4d\u5f71\u54cd\u5c0f \u8bd5\u7740\u201c\u7ffb\u8f6c\u9ad8\u4f4e\u4f4d\u201d 1 2 3 4 5 6 7 8 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () new = open ( \"indian_1.wav\" , \"wb\" ) file_head = data [: 44 ] # \u6587\u4ef6\u5934\u90e8 wave_data = data [ 44 :] # \u58f0\u97f3\u6570\u636e new . write ( file_head ) # \u5199\u5165\u5934\u90e8\u6570\u636e new . write ( wave_data [:: - 1 ]) # \u5199\u5165\u53cd\u8f6c\u7684\u58f0\u97f3\u6570\u636e new . close () \u6253\u5f00 indian_1.wav \uff0c\u58f0\u97f3\u53d8\u5f97\u4e30\u5bcc\u4e86\uff0c\u4f46\u542c\u4e0d\u6e05\u8bcd part4 Link \u7ffb\u8f6c\u6709\u8bef \u4e0a\u9762\u662f\u5c06 12345678 \u7ffb\u8f6c\u4e3a 87654321 \u5e94\u8be5\u7ffb\u8f6c\u4e3a 21436587 \u7b80\u5355\u5730\u8bf4\uff0c\u9664\u4e86\u6587\u4ef6\u5934\uff0c\u5176\u4ed6\u7684\u6570\u636e\u9700\u8981\u7ffb\u8f6c\u5404\u81ea\u7684\u201c\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\u201d 1 2 3 4 5 6 7 8 9 10 11 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () file_head = data [: 44 ] wave_data = data [ 44 :] tail = [] for i in range ( 0 , len ( wave_data ), 2 ): tail . extend ([ wave_data [ i + 1 ], wave_data [ i ]]) new = open ( \"indian_2.wav\" , \"wb\" ) new . write ( file_head ) new . write ( bytes ( tail )) new . close () \u64ad\u653e indian_2.wav \uff0c\u542c\u5230\uff1a You are an idiot. Ha, ha, ha, ... \u5173\u952e\u5b57\uff1a idiot part5 Link \u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/idiot.html \u7f51\u9875\u5185\u5bb9 \u4e0a\u65b9\uff1a Leopold \u7684\u8096\u50cf \u4e0b\u65b9\uff1a \"Now you should apologize...\" \u548c Continue to the next level \u70b9\u51fb Continue to the next level \uff0c\u53bb\u5230\u4e0b\u4e00\u9898 other Link \u505a\u4e00\u4ef6\u4e0e\u672c\u9898\u65e0\u5173\u7684\u4e8b\uff1a\u5c06\u56fe\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u6539\u4e3a\u5176\u201c\u8865\u8272\u201d \u8865\u8272\u7684 R, G, B \u7684\u7b97\u6cd5\uff1a 255 - color_value 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image def com_color ( color ): r , g , b = color return 255 - r , 255 - g , 255 - b if __name__ == \"__main__\" : img = Image . open ( \"map.jpg\" ) data = map ( com_color , img . getdata ()) img . putdata ( list ( data )) img . save ( \"19_new_map.jpg\" ) img . close () \u5f97\u5230\u4e00\u5f20\u6e05\u6670\u7684\u56fe\u7247 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/idiot2.html","title":"19 please"},{"location":"PythonChallenge/Solutions/19_please/#19-please","text":"","title":"\u7b2c 19 \u9898 please!"},{"location":"PythonChallenge/Solutions/19_please/#1","text":">>> http://www.pythonchallenge.com/pc/hex/bin.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/19_please/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/19_please/#3","text":"\u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u4e32\u5f88\u957f\u7684\u6ce8\u91ca From: leopold.moz@pythonchallenge.com Subject: what do you mean by \"open the attachment?\" Mime-version: 1.0 Content-type: Multipart/mixed; boundary=\"===============1295515792==\" It is so much easier for you, youngsters. Maybe my computer is out of order. I have a real work to do and I must know what's inside! --===============1295515792== Content-type: audio/x-wav; name=\"indian.wav\" Content-transfer-encoding: base64 ... # \u7701\u7565\u4e86\u8fd1 2000 \u884c\uff0c\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u6b64\u5904\u4fe1\u606f\u4fdd\u5b58\u5728\u6587\u4ef6 please.txt --===============1295515792==--","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/19_please/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/19_please/#part1","text":"\u7f51\u9875\u7684\u6ce8\u91ca\u50cf\u662f Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u6765\u7684\u4e00\u5c01\u90ae\u4ef6 \u4ed6\u8bf4\uff1a open the attachment? \uff0c\u8bf4\u660e\u6709\u4e2a\u9644\u4ef6 audio/x-wav; name=\"indian.wav\" \u8bf4\u660e\u9644\u4ef6\u662f\u4e00\u4e2a\u97f3\u9891 base64 \u63d0\u793a\u4e86\u7f16\u7801\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 from base64 import b64decode f = open ( \"please.txt\" , \"rb\" ) audio = open ( \"indian.wav\" , \"wb\" ) for line in f . readlines (): audio . write ( b64decode ( line . strip ())) f . close () audio . close () \u97f3\u9891\u4e2d\u4ec5\u6709\u4e00\u4e2a\u7537\u58f0\u5355\u8bcd sorry","title":"part1"},{"location":"PythonChallenge/Solutions/19_please/#part2","text":"\u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/sorry.html \uff0c\u770b\u5230 \"what are you apologizing for?\"","title":"part2"},{"location":"PythonChallenge/Solutions/19_please/#part3","text":"\u97f3\u9891\u7ea6 5 \u79d2\uff0c\u4e0d\u8be5\u53ea\u6709\u4e00\u4e2a\u5355\u8bcd \u5173\u4e8e wav \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u524d 44 \u4e2a\u5b57\u8282\u662f\u56fa\u5b9a\u7684 \u5176\u4f59\u7684\u6570\u636e\u5206\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\uff0c\u9ad8\u4f4d\u5f71\u54cd\u5927\uff0c\u4f4e\u4f4d\u5f71\u54cd\u5c0f \u8bd5\u7740\u201c\u7ffb\u8f6c\u9ad8\u4f4e\u4f4d\u201d 1 2 3 4 5 6 7 8 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () new = open ( \"indian_1.wav\" , \"wb\" ) file_head = data [: 44 ] # \u6587\u4ef6\u5934\u90e8 wave_data = data [ 44 :] # \u58f0\u97f3\u6570\u636e new . write ( file_head ) # \u5199\u5165\u5934\u90e8\u6570\u636e new . write ( wave_data [:: - 1 ]) # \u5199\u5165\u53cd\u8f6c\u7684\u58f0\u97f3\u6570\u636e new . close () \u6253\u5f00 indian_1.wav \uff0c\u58f0\u97f3\u53d8\u5f97\u4e30\u5bcc\u4e86\uff0c\u4f46\u542c\u4e0d\u6e05\u8bcd","title":"part3"},{"location":"PythonChallenge/Solutions/19_please/#part4","text":"\u7ffb\u8f6c\u6709\u8bef \u4e0a\u9762\u662f\u5c06 12345678 \u7ffb\u8f6c\u4e3a 87654321 \u5e94\u8be5\u7ffb\u8f6c\u4e3a 21436587 \u7b80\u5355\u5730\u8bf4\uff0c\u9664\u4e86\u6587\u4ef6\u5934\uff0c\u5176\u4ed6\u7684\u6570\u636e\u9700\u8981\u7ffb\u8f6c\u5404\u81ea\u7684\u201c\u9ad8\u516b\u4f4d\u4e0e\u4f4e\u516b\u4f4d\u201d 1 2 3 4 5 6 7 8 9 10 11 with open ( \"indian.wav\" , \"rb\" ) as f : data = f . read () file_head = data [: 44 ] wave_data = data [ 44 :] tail = [] for i in range ( 0 , len ( wave_data ), 2 ): tail . extend ([ wave_data [ i + 1 ], wave_data [ i ]]) new = open ( \"indian_2.wav\" , \"wb\" ) new . write ( file_head ) new . write ( bytes ( tail )) new . close () \u64ad\u653e indian_2.wav \uff0c\u542c\u5230\uff1a You are an idiot. Ha, ha, ha, ... \u5173\u952e\u5b57\uff1a idiot","title":"part4"},{"location":"PythonChallenge/Solutions/19_please/#part5","text":"\u6253\u5f00\u7f51\u5740\uff1a http://www.pythonchallenge.com/pc/hex/idiot.html \u7f51\u9875\u5185\u5bb9 \u4e0a\u65b9\uff1a Leopold \u7684\u8096\u50cf \u4e0b\u65b9\uff1a \"Now you should apologize...\" \u548c Continue to the next level \u70b9\u51fb Continue to the next level \uff0c\u53bb\u5230\u4e0b\u4e00\u9898","title":"part5"},{"location":"PythonChallenge/Solutions/19_please/#other","text":"\u505a\u4e00\u4ef6\u4e0e\u672c\u9898\u65e0\u5173\u7684\u4e8b\uff1a\u5c06\u56fe\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u6539\u4e3a\u5176\u201c\u8865\u8272\u201d \u8865\u8272\u7684 R, G, B \u7684\u7b97\u6cd5\uff1a 255 - color_value 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image def com_color ( color ): r , g , b = color return 255 - r , 255 - g , 255 - b if __name__ == \"__main__\" : img = Image . open ( \"map.jpg\" ) data = map ( com_color , img . getdata ()) img . putdata ( list ( data )) img . save ( \"19_new_map.jpg\" ) img . close () \u5f97\u5230\u4e00\u5f20\u6e05\u6670\u7684\u56fe\u7247","title":"other"},{"location":"PythonChallenge/Solutions/19_please/#5","text":"http://www.pythonchallenge.com/pc/hex/idiot2.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/20_go_away/","text":"\u7b2c 20 \u9898 go away! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/idiot2.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 but inspecting it carefully is allowed. 4. \u89e3\u6cd5 Link part1 Link \u9898\u56fe\u540d\u79f0\uff1a unreal \u6309 F12 \uff0c\u67e5\u770b\u201c\u8bf7\u6c42\u5934\u201d Content-Range: bytes 0-30202/2123456789 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:43:14 GMT Server: lighttpd/1.4.35 Transfer-Encoding: chunked \u5bf9\u6bd4\u4e0a\u4e00\u9898\u7684\u201c\u8bf7\u6c42\u5934\u201d Accept-Ranges: bytes Content-Length: 45552 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:44:54 GMT ETag: \"886623682\" Last-Modified: Sat, 12 Mar 2016 19:38:45 GMT Server: lighttpd/1.4.35 part2 Link \u4f7f\u7528 requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...' \u65e2\u7136\u662f unreal \uff0c\u4e0d\u59a8\u4ece 30202 + 1 \u5f00\u59cb\u83b7\u53d6\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) if __name__ == \"__main__\" : get_unreal ( 30203 ) >>> Response Status Code : 206 Content Range : bytes 30203 - 30236 / 2123456789 Size of Content : 34 bytes Content : b \"Why don't you respect my privacy? \\n \" \u5185\u5bb9\u5206\u6790 206 \u8868\u793a\u201c\u90e8\u5206\u5185\u5bb9\u201d 30236 \u4e4b\u540e\u8fd8\u6709 part3 Link \u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 30236 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30237-30283/2123456789 Size of Content: 47 bytes Content: b'we can go on in this way for really long time.\\n' \u4ece 30283 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30284-30294/2123456789 Size of Content: 11 bytes Content: b'stop this!\\n' \u4ece 30294 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30295-30312/2123456789 Size of Content: 18 bytes Content: b'invader! invader!\\n' \u4ece 30312 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30313-30346/2123456789 Size of Content: 34 bytes Content: b'ok, invader. you are inside now. \\n' \u518d\u91cd\u590d\uff0c\u5c31\u6ca1\u4e0b\u6587\u4e86 \u629b\u51fa\u5f02\u5e38\uff1a KeyError: 'content-range' part4 Link Content \u4e2d\u51fa\u73b0\u4e86\u4e09\u6b21 invader \uff0c\u62ff\u5b83\u8bd5\u8bd5 \u6253\u5f00 http://www.pythonchallenge.com/pc/hex/invader.html \uff0c\u5f97\u5230 Yes! that's you! part5 Link \u7535\u5f71\u300a\u5934\u53f7\u73a9\u5bb6\u300b\u4e2d\uff0c\u7b2c\u4e00\u5173\u7684\u201c\u8d5b\u8f66\u201d\u662f\u4ece\u540e\u65b9\u5012\u8f66\u6253\u901a\u7684\uff0c\u8bd5\u8bd5\u4e3b\u89d2\u7684\u65b9\u6cd5 \u4ece 2123456789 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456744-2123456788/2123456789 Size of Content: 45 bytes Content: b'esrever ni emankcin wen ruoy si drowssap eht\\n' \u5206\u6790\u7ed3\u679c Content \u7684\u5185\u5bb9\u770b\u7740\u65e2\u50cf\u82f1\u6587\uff0c\u53c8\u4e0d\u50cf\u82f1\u6587 \u672b\u5c3e\u7684 eht \u6bd4\u8f83\u597d\u8ba4\uff0c\u53cd\u8fc7\u6765\u662f the \u540c\u6837\u7684\uff0c\u628a\u7b2c\u4e00\u4e2a\u8bcd esrever \u53cd\u8fc7\u6765\uff0c\u7ed3\u679c\u662f reverse \uff0c\u8fd9\u5c31\u660e\u786e\u4e86 reverse \"Context\" >>> s = \"esrever ni emankcin wen ruoy si drowssap eht\" >>> s [:: - 1 ] 'the password is your new nickname in reverse' >>> pwd = \"invader\" >>> pwd [:: - 1 ] redavni >>> part6 Link \u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 2123456744 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456712-2123456743/2123456789 Size of Content: 32 bytes Content: b'and it is hiding at 1152983631.\\n' \u4ece 1152983631 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 1152983631-1153223363/2123456789 Size of Content: 239733 bytes Content: b'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00;\\xa7\\xaa2\\xac\\xe5f\\x14\\xa9\\x00\\x00\\x00\\xd3\\x00\\x00\\x00\\n\\x00\\x15\\x00readme.txtUT\\t\\x00\\x03\"\\xf6\\x80B\\x19\\xf7\\x80BUx...' \u5185\u5bb9\u5206\u6790 Content \u5f00\u5934\u6709\u4e2a PK \uff0c\u5f80\u540e\u8bfb\u8fd8\u80fd\u770b\u5230 readme.txt \u641c\u7d22\u5f97\u77e5 PK \u662f .zip \u7684\u6587\u4ef6\u5934 \u81f3\u6b64\uff0c\u53cd\u5411\u8d70\u4e5f\u5230\u5934\u4e86 part7 Link \u5c06 res.content \u5199\u5165\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) return res . content if __name__ == \"__main__\" : f = open ( \"unreal.zip\" , \"wb\" ) f . write ( get_unreal ( 1152983631 )) f . close () \u6253\u5f00 unreal.zip \uff0c\u5185\u6709\u4e24\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u5bc6\u7801 \u4f7f\u7528 part5 \u5f97\u5230\u7684\u5bc6\u7801 redavni \u6253\u5f00 readme.txt Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: * We used to play this game when we were kids * When I had no idea what to do, I looked backwards. \u6240\u4ee5\u4e0b\u4e00\u9898\u662f\u6253\u5f00\u8fd9\u4e2a\u538b\u7f29\u5305 5. \u7b54\u6848 Link \u538b\u7f29\u5305\u5bc6\u7801\uff1a redavni","title":"20 go away"},{"location":"PythonChallenge/Solutions/20_go_away/#20-go-away","text":"","title":"\u7b2c 20 \u9898 go away!"},{"location":"PythonChallenge/Solutions/20_go_away/#1","text":">>> http://www.pythonchallenge.com/pc/hex/idiot2.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/20_go_away/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/20_go_away/#3","text":"\u7f51\u9875\u5185 but inspecting it carefully is allowed.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/20_go_away/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/20_go_away/#part1","text":"\u9898\u56fe\u540d\u79f0\uff1a unreal \u6309 F12 \uff0c\u67e5\u770b\u201c\u8bf7\u6c42\u5934\u201d Content-Range: bytes 0-30202/2123456789 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:43:14 GMT Server: lighttpd/1.4.35 Transfer-Encoding: chunked \u5bf9\u6bd4\u4e0a\u4e00\u9898\u7684\u201c\u8bf7\u6c42\u5934\u201d Accept-Ranges: bytes Content-Length: 45552 Content-Type: image/jpeg Date: Sat, 07 Mar 2020 06:44:54 GMT ETag: \"886623682\" Last-Modified: Sat, 12 Mar 2016 19:38:45 GMT Server: lighttpd/1.4.35","title":"part1"},{"location":"PythonChallenge/Solutions/20_go_away/#part2","text":"\u4f7f\u7528 requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import requests # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00\\xff \\...' \u65e2\u7136\u662f unreal \uff0c\u4e0d\u59a8\u4ece 30202 + 1 \u5f00\u59cb\u83b7\u53d6\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 200 ])) if __name__ == \"__main__\" : get_unreal ( 30203 ) >>> Response Status Code : 206 Content Range : bytes 30203 - 30236 / 2123456789 Size of Content : 34 bytes Content : b \"Why don't you respect my privacy? \\n \" \u5185\u5bb9\u5206\u6790 206 \u8868\u793a\u201c\u90e8\u5206\u5185\u5bb9\u201d 30236 \u4e4b\u540e\u8fd8\u6709","title":"part2"},{"location":"PythonChallenge/Solutions/20_go_away/#part3","text":"\u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 30236 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30237-30283/2123456789 Size of Content: 47 bytes Content: b'we can go on in this way for really long time.\\n' \u4ece 30283 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30284-30294/2123456789 Size of Content: 11 bytes Content: b'stop this!\\n' \u4ece 30294 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30295-30312/2123456789 Size of Content: 18 bytes Content: b'invader! invader!\\n' \u4ece 30312 + 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 30313-30346/2123456789 Size of Content: 34 bytes Content: b'ok, invader. you are inside now. \\n' \u518d\u91cd\u590d\uff0c\u5c31\u6ca1\u4e0b\u6587\u4e86 \u629b\u51fa\u5f02\u5e38\uff1a KeyError: 'content-range'","title":"part3"},{"location":"PythonChallenge/Solutions/20_go_away/#part4","text":"Content \u4e2d\u51fa\u73b0\u4e86\u4e09\u6b21 invader \uff0c\u62ff\u5b83\u8bd5\u8bd5 \u6253\u5f00 http://www.pythonchallenge.com/pc/hex/invader.html \uff0c\u5f97\u5230 Yes! that's you!","title":"part4"},{"location":"PythonChallenge/Solutions/20_go_away/#part5","text":"\u7535\u5f71\u300a\u5934\u53f7\u73a9\u5bb6\u300b\u4e2d\uff0c\u7b2c\u4e00\u5173\u7684\u201c\u8d5b\u8f66\u201d\u662f\u4ece\u540e\u65b9\u5012\u8f66\u6253\u901a\u7684\uff0c\u8bd5\u8bd5\u4e3b\u89d2\u7684\u65b9\u6cd5 \u4ece 2123456789 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456744-2123456788/2123456789 Size of Content: 45 bytes Content: b'esrever ni emankcin wen ruoy si drowssap eht\\n' \u5206\u6790\u7ed3\u679c Content \u7684\u5185\u5bb9\u770b\u7740\u65e2\u50cf\u82f1\u6587\uff0c\u53c8\u4e0d\u50cf\u82f1\u6587 \u672b\u5c3e\u7684 eht \u6bd4\u8f83\u597d\u8ba4\uff0c\u53cd\u8fc7\u6765\u662f the \u540c\u6837\u7684\uff0c\u628a\u7b2c\u4e00\u4e2a\u8bcd esrever \u53cd\u8fc7\u6765\uff0c\u7ed3\u679c\u662f reverse \uff0c\u8fd9\u5c31\u660e\u786e\u4e86 reverse \"Context\" >>> s = \"esrever ni emankcin wen ruoy si drowssap eht\" >>> s [:: - 1 ] 'the password is your new nickname in reverse' >>> pwd = \"invader\" >>> pwd [:: - 1 ] redavni >>>","title":"part5"},{"location":"PythonChallenge/Solutions/20_go_away/#part6","text":"\u91cd\u590d part2 \u7684\u7b2c\u4e8c\u6b65\u64cd\u4f5c \u4ece 2123456744 - 1 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 2123456712-2123456743/2123456789 Size of Content: 32 bytes Content: b'and it is hiding at 1152983631.\\n' \u4ece 1152983631 \u5f00\u59cb\uff0c\u5f97\u5230 Response Status Code: 206 Content Range: bytes 1152983631-1153223363/2123456789 Size of Content: 239733 bytes Content: b'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00;\\xa7\\xaa2\\xac\\xe5f\\x14\\xa9\\x00\\x00\\x00\\xd3\\x00\\x00\\x00\\n\\x00\\x15\\x00readme.txtUT\\t\\x00\\x03\"\\xf6\\x80B\\x19\\xf7\\x80BUx...' \u5185\u5bb9\u5206\u6790 Content \u5f00\u5934\u6709\u4e2a PK \uff0c\u5f80\u540e\u8bfb\u8fd8\u80fd\u770b\u5230 readme.txt \u641c\u7d22\u5f97\u77e5 PK \u662f .zip \u7684\u6587\u4ef6\u5934 \u81f3\u6b64\uff0c\u53cd\u5411\u8d70\u4e5f\u5230\u5934\u4e86","title":"part6"},{"location":"PythonChallenge/Solutions/20_go_away/#part7","text":"\u5c06 res.content \u5199\u5165\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from requests import get def get_unreal ( start , stop = '' ): # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res_range = { \"Range\" : f \"bytes= { start } - { stop } \" } res = get ( url , auth = usr_and_pwd , headers = res_range ) # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Content Range:\" , res . headers [ \"Content-Range\" ]) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) return res . content if __name__ == \"__main__\" : f = open ( \"unreal.zip\" , \"wb\" ) f . write ( get_unreal ( 1152983631 )) f . close () \u6253\u5f00 unreal.zip \uff0c\u5185\u6709\u4e24\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u5bc6\u7801 \u4f7f\u7528 part5 \u5f97\u5230\u7684\u5bc6\u7801 redavni \u6253\u5f00 readme.txt Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: * We used to play this game when we were kids * When I had no idea what to do, I looked backwards. \u6240\u4ee5\u4e0b\u4e00\u9898\u662f\u6253\u5f00\u8fd9\u4e2a\u538b\u7f29\u5305","title":"part7"},{"location":"PythonChallenge/Solutions/20_go_away/#5","text":"\u538b\u7f29\u5305\u5bc6\u7801\uff1a redavni","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/","text":"\u7b2c 21 \u9898 dealing package.pack Link 1. \u5730\u5740 Link \u65e0 2. \u6587\u4ef6 Link readme.txt package.pack 3. \u63d0\u793a Link readme.txt \u4e2d\u7684\u4fe1\u606f\u5982\u4e0b Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: We used to play this game when we were kids When I had no idea what to do, I looked backwards. 4. \u89e3\u6cd5 Link part1 Link \u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00 readme.txt \u641c\u7d22\u5f97\u77e5\uff1a 78 9c \u4e3a zlib \u6587\u4ef6\u5934\uff0c\u6b64\u5916\u8fd8\u641c\u5f97 gzip: 1f 8b 08 lzma: 6c 00 \u81f3\u4e8e\u201c\u5c0f\u65f6\u5019\u73a9\u7684\u6e38\u620f\u201d\uff0c\u6709\u4eba\u8bf4\u662f\u201c\u51fb\u9f13\u4f20\u82b1\u201d\uff0c\u6211\u611f\u89c9\u50cf\u201c\u5957\u5a03\u201d part2 Link \u6162\u6162\u6765\uff0c\u591a\u8bd5\u51e0\u6b21 >>> import zlib >>> f = open ( \"package.pack\" , \"rb\" ) >>> data = f . read () >>> data [: 6 ] b 'x \\x9c\\x00\\n @ \\xf5 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x07 @ \\xf8 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x06 @ \\xf9 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x84 vuT' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> \u4e0a\u65b9\u4f7f\u7528 zlib.decompress(data) \u516d\u6b21\u540e\uff0c data \u7684\u201c\u6587\u4ef6\u5934\u201d\u53d8\u4e3a\u4e86 BZh \u6539\u4f7f\u7528 Bz2 >>> import bz2 # \u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x1f @ \\xe0 ' >>> \u4e0a\u65b9\u4f7f\u7528 bz2.decompress(data) \u4e09\u6b21\u540e\u53c8\u56de\u5230 zlib \u4e86 \u52a0\u901f\uff0c\u8ba9 while \u5904\u7406 >>> while True : ... if data . startswith ( b 'x \\x9c ' ): ... data = zlib . decompress ( data ) ... elif data . startswith ( b 'BZh' ): ... data = bz2 . decompress ( data ) ... else : ... break ... >>> len ( data ) 184947 >>> data [: 6 ] b ' \\x80\\x8d\\x96\\xcb\\xb5 r' >>> part3 Link \u56de\u60f3\u63d0\u793a\uff1a When I had no idea what to do, I looked backwards. \u505a\u4e00\u6b21 reverse >>> data = data [:: - 1 ] >>> data [: 6 ] b 'x \\x9c\\x00\\x0c @ \\xf3 ' >>> \u770b\u6765\uff0c\u603b\u5171\u4e09\u79cd\u64cd\u4f5c\uff1a zlib.decompress, bz2.decompress, reverse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) elif data . endswith ( b ' \\x9c x' ): # \\x9c \u662f\u4e00\u4e2a\uff0cx \u662f\u4e00\u4e2a data = data [:: - 1 ] else : break print ( data ) >>> b 'sgol ruoy ta kool' \u8fd9\u56de\u53ef\u4ee5\u8089\u773c\u53cd\u8f6c\uff1a look at your logs part4 Link \u6309 part3 \u7684\u63d0\u793a\uff0c\u8bb0\u5f55 zlib.decompress \u4e0e bz2.decompress \u4e0e data[::-1] \u7684\u6b21\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () cnt_zlib = cnt_bz2 = cnt_reverse = 0 while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) cnt_zlib += 1 elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) cnt_bz2 += 1 elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] cnt_reverse += 1 else : break print ( cnt_zlib , cnt_bz2 , cnt_reverse ) \u53d1\u73b0\u53cd\u8f6c\u53ea\u505a\u4e86 9 \u6b21 \u5c06\u6bcf\u6b21\u64cd\u4f5c\u8bb0\u5f55\u5230\u5217\u8868\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () res = [] while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) res . append ( \"zlib\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('z') elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) res . append ( \"bz2\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('b') elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] res . append ( \"reverse\" ) # \u56e0\u4e3a\u7a00\u6709\uff0c\u731c\u6d4b\u662f 9 \u884c\u7684\u5b57\u7b26\u753b\uff0c\u6539\u4e3a \\n\uff0c\u4e0b\u4e00\u6b65\u628a list \u6539\u4e3a str else : break print ( res ) \u5bf9\u4e0a\u4e00\u6b65\uff0c\u6309\u6ce8\u91ca\u6539\u8fc7\u540e\uff0c\u53ef\u770b\u51fa\u5927\u81f4\u8f6e\u5ed3 \u518d\u5c0f\u6539\u4e00\u756a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import bz2 import zlib result = \"\" with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) result += ' ' elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) result += '#' elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] result += ' \\n ' else : break print ( result ) >>> ### ### ######## ######## ########## ######## ####### ####### ######### ######### ######### ######### ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ######### ######### ######## ######### ## ## ## ######## ######## ######## ######## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ####### ####### ## ## ######### ## ## ### ### ## ## ########## ## ## 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/copper.html","title":"21 dealing package.pack"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#21-dealing-packagepack","text":"","title":"\u7b2c 21 \u9898 dealing package.pack"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#1","text":"\u65e0","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#2","text":"readme.txt package.pack","title":"2. \u6587\u4ef6"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#3","text":"readme.txt \u4e2d\u7684\u4fe1\u606f\u5982\u4e0b Yes! This is really level 21 in here. And yes, After you solve it, you'll be in level 22! Now for the level: We used to play this game when we were kids When I had no idea what to do, I looked backwards.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part1","text":"\u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00 readme.txt \u641c\u7d22\u5f97\u77e5\uff1a 78 9c \u4e3a zlib \u6587\u4ef6\u5934\uff0c\u6b64\u5916\u8fd8\u641c\u5f97 gzip: 1f 8b 08 lzma: 6c 00 \u81f3\u4e8e\u201c\u5c0f\u65f6\u5019\u73a9\u7684\u6e38\u620f\u201d\uff0c\u6709\u4eba\u8bf4\u662f\u201c\u51fb\u9f13\u4f20\u82b1\u201d\uff0c\u6211\u611f\u89c9\u50cf\u201c\u5957\u5a03\u201d","title":"part1"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part2","text":"\u6162\u6162\u6765\uff0c\u591a\u8bd5\u51e0\u6b21 >>> import zlib >>> f = open ( \"package.pack\" , \"rb\" ) >>> data = f . read () >>> data [: 6 ] b 'x \\x9c\\x00\\n @ \\xf5 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x07 @ \\xf8 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x06 @ \\xf9 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\xff ? \\x00 ' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x84 vuT' >>> data = zlib . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> \u4e0a\u65b9\u4f7f\u7528 zlib.decompress(data) \u516d\u6b21\u540e\uff0c data \u7684\u201c\u6587\u4ef6\u5934\u201d\u53d8\u4e3a\u4e86 BZh \u6539\u4f7f\u7528 Bz2 >>> import bz2 # \u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'BZh91A' >>> data = bz2 . decompress ( data ) >>> data [: 6 ] b 'x \\x9c\\x00\\x1f @ \\xe0 ' >>> \u4e0a\u65b9\u4f7f\u7528 bz2.decompress(data) \u4e09\u6b21\u540e\u53c8\u56de\u5230 zlib \u4e86 \u52a0\u901f\uff0c\u8ba9 while \u5904\u7406 >>> while True : ... if data . startswith ( b 'x \\x9c ' ): ... data = zlib . decompress ( data ) ... elif data . startswith ( b 'BZh' ): ... data = bz2 . decompress ( data ) ... else : ... break ... >>> len ( data ) 184947 >>> data [: 6 ] b ' \\x80\\x8d\\x96\\xcb\\xb5 r' >>>","title":"part2"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part3","text":"\u56de\u60f3\u63d0\u793a\uff1a When I had no idea what to do, I looked backwards. \u505a\u4e00\u6b21 reverse >>> data = data [:: - 1 ] >>> data [: 6 ] b 'x \\x9c\\x00\\x0c @ \\xf3 ' >>> \u770b\u6765\uff0c\u603b\u5171\u4e09\u79cd\u64cd\u4f5c\uff1a zlib.decompress, bz2.decompress, reverse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) elif data . endswith ( b ' \\x9c x' ): # \\x9c \u662f\u4e00\u4e2a\uff0cx \u662f\u4e00\u4e2a data = data [:: - 1 ] else : break print ( data ) >>> b 'sgol ruoy ta kool' \u8fd9\u56de\u53ef\u4ee5\u8089\u773c\u53cd\u8f6c\uff1a look at your logs","title":"part3"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#part4","text":"\u6309 part3 \u7684\u63d0\u793a\uff0c\u8bb0\u5f55 zlib.decompress \u4e0e bz2.decompress \u4e0e data[::-1] \u7684\u6b21\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () cnt_zlib = cnt_bz2 = cnt_reverse = 0 while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) cnt_zlib += 1 elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) cnt_bz2 += 1 elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] cnt_reverse += 1 else : break print ( cnt_zlib , cnt_bz2 , cnt_reverse ) \u53d1\u73b0\u53cd\u8f6c\u53ea\u505a\u4e86 9 \u6b21 \u5c06\u6bcf\u6b21\u64cd\u4f5c\u8bb0\u5f55\u5230\u5217\u8868\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import bz2 import zlib with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () res = [] while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) res . append ( \"zlib\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('z') elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) res . append ( \"bz2\" ) # \u56e0\u4e3a\u4e0d\u6e05\u6670\uff0c\u4e0b\u4e00\u6b65\u6539\u4e3a res.append('b') elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] res . append ( \"reverse\" ) # \u56e0\u4e3a\u7a00\u6709\uff0c\u731c\u6d4b\u662f 9 \u884c\u7684\u5b57\u7b26\u753b\uff0c\u6539\u4e3a \\n\uff0c\u4e0b\u4e00\u6b65\u628a list \u6539\u4e3a str else : break print ( res ) \u5bf9\u4e0a\u4e00\u6b65\uff0c\u6309\u6ce8\u91ca\u6539\u8fc7\u540e\uff0c\u53ef\u770b\u51fa\u5927\u81f4\u8f6e\u5ed3 \u518d\u5c0f\u6539\u4e00\u756a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import bz2 import zlib result = \"\" with open ( \"package.pack\" , \"rb\" ) as f : data = f . read () while True : if data . startswith ( b 'x \\x9c ' ): data = zlib . decompress ( data ) result += ' ' elif data . startswith ( b 'BZh' ): data = bz2 . decompress ( data ) result += '#' elif data . endswith ( b ' \\x9c x' ): data = data [:: - 1 ] result += ' \\n ' else : break print ( result ) >>> ### ### ######## ######## ########## ######## ####### ####### ######### ######### ######### ######### ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ######### ######### ######## ######### ## ## ## ######## ######## ######## ######## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ####### ####### ## ## ######### ## ## ### ### ## ## ########## ## ##","title":"part4"},{"location":"PythonChallenge/Solutions/21_dealing_package-pack/#5","text":"http://www.pythonchallenge.com/pc/hex/copper.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/22_emulate/","text":"\u7b2c 22 \u9898 emulate Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/copper.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca or maybe white.gif would be more bright 4. \u89e3\u6cd5 Link part1 Link \u6839\u636e\u6ce8\u91ca\u63d0\u793a\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/hex/white.gif \uff0c\u5e76\u5f97\u5230\u56fe\u7247 \u56fe\u7247\u662f gif \u683c\u5f0f\uff0c\u5c3a\u5bf8\uff1a 200x200 \u56fe\u7247\u4e00\u7247\u6f06\u9ed1\uff0c\u5374\u6709 39k \u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00\u56fe\u7247\uff0c\u4e3a\u6587\u4ef6\u5934 47 49 46 38 39 61 c8 00 c8 00 ... \u6709\u8fc7\u7b2c 12 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u524d\u516d\u7ec4\u4e2a\u5b57\u8282\u5bf9\u5e94 GIF89a c8 \u7684\u5341\u8fdb\u5236\u662f 200 \uff0c\u6545\u540e\u56db\u4e2a\u5b57\u8282\u5bf9\u5e94\u56fe\u7247\u5c3a\u5bf8 \u4ece\u7b2c 14 \u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u4e09\u4e2a\u6570\u636e\u4e00\u7ec4\uff0c\u8868\u793a\u8c03\u8272\u677f\u4fe1\u606f \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 NETSCAPE2.0 \u548c Created with The GIMP \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 c800c800 \uff0c\u4e14\u4e0d\u6b62\u4e00\u6b21\uff0c\u8fd9\u8bf4\u660e\u6b64\u56fe\u662f\u7531\u597d\u51e0\u5e27\u56fe\u7247\u5408\u6210\u7684\u52a8\u56fe part2 Link \u67e5\u770b\u989c\u8272\u5206\u5e03 >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = getdata () >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () [( 39999 , 0 ), ( 1 , 8 )] >>> \u4ec5\u4e00\u70b9\u4e3a 8 \u53f7\u8272\uff0c\u8fd9\u662f\u5173\u952e >>> f = open ( \"white.gif\" , \"rb\" ) >>> data = f . read () >>> data . index ( 8 ) 37 >>> new = data [: 37 ] + b \" \\xff\\xff\\xff \" + data [ 40 :] # \u5c06\u516b\u53f7\u8272\u5bf9\u5e94\u7684\u70b9\u6539\u4e3a\u767d\u8272 >>> g = open ( \"22_new_White.gif\" , \"wb\" ) >>> g . write ( new ) 38979 >>> g . close () >>> \u5f97\u5230\u4e00\u5f20\u52a8\u56fe \u4f5c\u8005\u4e4b\u610f\u5927\u6982\u5c31\u662f\uff1a\u8fd9\u4e2a\u5c0f\u767d\u70b9\uff0c\u5c31\u50cf\u624b\u67c4\u5728\u5c4f\u5e55\u4e0a\u5bf9\u5e94\u7684\u56fe\u6807 \u5c0f\u767d\u70b9\u50cf\u662f\u5728\u5199\u5b57\uff0c\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u5c31\u662f\u628a\u5b83\u7684\u8def\u5f84\u8bb0\u5f55\u4e0b\u6765 part3 Link \u83b7\u53d6\u56fe\u50cf\u7684\u5e27\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 except : break print ( frame ) gif . close () >>> 133 \u8be5\u56fe\u6709 133 \u5e27 part4 Link \u8bb0\u5f55\u5c0f\u767d\u70b9\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 x , y , _ , _ = gif . getbbox () print ( f \"( { x : >3 } , { y : >3 } )\" ) except : break gif . close () >>> ( 100 , 100 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 102 , 102 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 98 ) ... # \u540e\u9762\u7701\u7565 \u770b\u4e0a\u53bb\u5f88\u50cf\u7b14\u753b\uff0c\u4e00\u7ad6\u3001\u4e00\u6a2a\u7684\uff0c\u800c\u4e14\u662f\u76f8\u5bf9\u56fe\u7247\u4e2d\u5fc3\u5728\u52a8 \u8bb0\u5f55\u76f8\u5bf9\u4e2d\u5fc3\u7684\u8ddd\u79bb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () print ( list ( res )) print ( '=' * 30 ) print ( set ( res )) >>> [( 0 , 0 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( - 2 , - 2 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ... ============================== {( 0 , 0 ), ( - 2 , 0 ), ( 2 , 2 ), ( - 2 , 2 ), ( 2 , - 2 ), ( 2 , 0 ), ( - 2 , - 2 ), ( 0 , - 2 ), ( 0 , 2 )} \u9664\u53bb (0, 0) \uff0c\u5171\u6709\u516b\u79cd\u65b9\u5411\uff0c\u8fd9\u6b63\u5bf9\u5e94\u624b\u67c4\u7684\u516b\u4e2a\u65b9\u5411 part5 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst def get_script1 ( lst ): white = 255 side = 300 x = y = side // 2 img = Image . new ( 'P' , ( side , side ), 0 ) for dx , dy in lst : x += dx y += dy img . putpixel (( x , y ), white ) img . show () def get_script2 ( lst ): cnt = 0 for t in lst : if t == ( 0 , 0 ): cnt += 1 print ( cnt ) def get_script3 ( lst ): white = 255 x = y = 50 img = Image . new ( 'P' , ( 500 , 100 ), 0 ) cnt = 0 for dx , dy in lst : if dx == dy == 0 : x = 50 + cnt * 100 y = 50 cnt += 1 else : x -= dx y -= dy img . putpixel (( x , y ), white ) img . save ( \"22_result.gif\" ) if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () # get_script1(res) # \u5b57\u6bcd\u91cd\u53e0\u5728\u4e00\u8d77 # get_script2(res) # 5 -> 5 letters get_script3 ( res ) 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/bonus.html","title":"22 emulate"},{"location":"PythonChallenge/Solutions/22_emulate/#22-emulate","text":"","title":"\u7b2c 22 \u9898 emulate"},{"location":"PythonChallenge/Solutions/22_emulate/#1","text":">>> http://www.pythonchallenge.com/pc/hex/copper.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/22_emulate/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/22_emulate/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca or maybe white.gif would be more bright","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/22_emulate/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/22_emulate/#part1","text":"\u6839\u636e\u6ce8\u91ca\u63d0\u793a\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/hex/white.gif \uff0c\u5e76\u5f97\u5230\u56fe\u7247 \u56fe\u7247\u662f gif \u683c\u5f0f\uff0c\u5c3a\u5bf8\uff1a 200x200 \u56fe\u7247\u4e00\u7247\u6f06\u9ed1\uff0c\u5374\u6709 39k \u4f7f\u7528\u201c\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u201d\u6253\u5f00\u56fe\u7247\uff0c\u4e3a\u6587\u4ef6\u5934 47 49 46 38 39 61 c8 00 c8 00 ... \u6709\u8fc7\u7b2c 12 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u524d\u516d\u7ec4\u4e2a\u5b57\u8282\u5bf9\u5e94 GIF89a c8 \u7684\u5341\u8fdb\u5236\u662f 200 \uff0c\u6545\u540e\u56db\u4e2a\u5b57\u8282\u5bf9\u5e94\u56fe\u7247\u5c3a\u5bf8 \u4ece\u7b2c 14 \u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u4e09\u4e2a\u6570\u636e\u4e00\u7ec4\uff0c\u8868\u793a\u8c03\u8272\u677f\u4fe1\u606f \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 NETSCAPE2.0 \u548c Created with The GIMP \u518d\u5f80\u4e0b\u8d70\uff0c\u8fd8\u80fd\u770b\u5230 c800c800 \uff0c\u4e14\u4e0d\u6b62\u4e00\u6b21\uff0c\u8fd9\u8bf4\u660e\u6b64\u56fe\u662f\u7531\u597d\u51e0\u5e27\u56fe\u7247\u5408\u6210\u7684\u52a8\u56fe","title":"part1"},{"location":"PythonChallenge/Solutions/22_emulate/#part2","text":"\u67e5\u770b\u989c\u8272\u5206\u5e03 >>> from PIL import Image >>> gif = Image . open ( \"white.gif\" ) >>> gif . size ( 200 , 200 ) >>> data = getdata () >>> len ( data ) 40000 # 200x200 >>> gif . getcolors () [( 39999 , 0 ), ( 1 , 8 )] >>> \u4ec5\u4e00\u70b9\u4e3a 8 \u53f7\u8272\uff0c\u8fd9\u662f\u5173\u952e >>> f = open ( \"white.gif\" , \"rb\" ) >>> data = f . read () >>> data . index ( 8 ) 37 >>> new = data [: 37 ] + b \" \\xff\\xff\\xff \" + data [ 40 :] # \u5c06\u516b\u53f7\u8272\u5bf9\u5e94\u7684\u70b9\u6539\u4e3a\u767d\u8272 >>> g = open ( \"22_new_White.gif\" , \"wb\" ) >>> g . write ( new ) 38979 >>> g . close () >>> \u5f97\u5230\u4e00\u5f20\u52a8\u56fe \u4f5c\u8005\u4e4b\u610f\u5927\u6982\u5c31\u662f\uff1a\u8fd9\u4e2a\u5c0f\u767d\u70b9\uff0c\u5c31\u50cf\u624b\u67c4\u5728\u5c4f\u5e55\u4e0a\u5bf9\u5e94\u7684\u56fe\u6807 \u5c0f\u767d\u70b9\u50cf\u662f\u5728\u5199\u5b57\uff0c\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u5c31\u662f\u628a\u5b83\u7684\u8def\u5f84\u8bb0\u5f55\u4e0b\u6765","title":"part2"},{"location":"PythonChallenge/Solutions/22_emulate/#part3","text":"\u83b7\u53d6\u56fe\u50cf\u7684\u5e27\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 except : break print ( frame ) gif . close () >>> 133 \u8be5\u56fe\u6709 133 \u5e27","title":"part3"},{"location":"PythonChallenge/Solutions/22_emulate/#part4","text":"\u8bb0\u5f55\u5c0f\u767d\u70b9\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from PIL import Image gif = Image . open ( \"white.gif\" ) frame = 0 while True : try : gif . seek ( frame ) frame += 1 x , y , _ , _ = gif . getbbox () print ( f \"( { x : >3 } , { y : >3 } )\" ) except : break gif . close () >>> ( 100 , 100 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 100 , 102 ) ( 102 , 102 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 100 ) ( 102 , 98 ) ... # \u540e\u9762\u7701\u7565 \u770b\u4e0a\u53bb\u5f88\u50cf\u7b14\u753b\uff0c\u4e00\u7ad6\u3001\u4e00\u6a2a\u7684\uff0c\u800c\u4e14\u662f\u76f8\u5bf9\u56fe\u7247\u4e2d\u5fc3\u5728\u52a8 \u8bb0\u5f55\u76f8\u5bf9\u4e2d\u5fc3\u7684\u8ddd\u79bb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () print ( list ( res )) print ( '=' * 30 ) print ( set ( res )) >>> [( 0 , 0 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( 0 , - 2 ), ( - 2 , - 2 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 0 ), ( - 2 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ( 0 , 2 ), ... ============================== {( 0 , 0 ), ( - 2 , 0 ), ( 2 , 2 ), ( - 2 , 2 ), ( 2 , - 2 ), ( 2 , 0 ), ( - 2 , - 2 ), ( 0 , - 2 ), ( 0 , 2 )} \u9664\u53bb (0, 0) \uff0c\u5171\u6709\u516b\u79cd\u65b9\u5411\uff0c\u8fd9\u6b63\u5bf9\u5e94\u624b\u67c4\u7684\u516b\u4e2a\u65b9\u5411","title":"part4"},{"location":"PythonChallenge/Solutions/22_emulate/#part5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 from PIL import Image def get_movements ( f ): ox = oy = 100 lst = [] for frame in range ( 133 ): f . seek ( frame ) x , y , _ , _ = f . getbbox () lst . append (( ox - x , oy - y )) return lst def get_script1 ( lst ): white = 255 side = 300 x = y = side // 2 img = Image . new ( 'P' , ( side , side ), 0 ) for dx , dy in lst : x += dx y += dy img . putpixel (( x , y ), white ) img . show () def get_script2 ( lst ): cnt = 0 for t in lst : if t == ( 0 , 0 ): cnt += 1 print ( cnt ) def get_script3 ( lst ): white = 255 x = y = 50 img = Image . new ( 'P' , ( 500 , 100 ), 0 ) cnt = 0 for dx , dy in lst : if dx == dy == 0 : x = 50 + cnt * 100 y = 50 cnt += 1 else : x -= dx y -= dy img . putpixel (( x , y ), white ) img . save ( \"22_result.gif\" ) if __name__ == \"__main__\" : gif = Image . open ( \"white.gif\" ) res = get_movements ( gif ) gif . close () # get_script1(res) # \u5b57\u6bcd\u91cd\u53e0\u5728\u4e00\u8d77 # get_script2(res) # 5 -> 5 letters get_script3 ( res )","title":"part5"},{"location":"PythonChallenge/Solutions/22_emulate/#5","text":"http://www.pythonchallenge.com/pc/hex/bonus.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/","text":"\u7b2c 23 \u9898 what is this module? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/bonus.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca TODO: do you owe someone an apology? now it is a good time to tell him that you are sorry. Please show good manners although it has nothing to do with this level. it can't find it. this is an undocumented module. va gur snpr bs jung?' 4. \u89e3\u6cd5 Link part1 Link \u8bf4\u5230 apology \uff0c\u7b2c 19 \u9898\u4ee4\u4eba\u5370\u8c61\u6df1\u523b \u89e3\u9898\u8fc7\u7a0b\u4e2d\u751f\u6210\u4e86\u4e00\u4e2a indian.wav \uff0c\u6709\u4e00\u58f0 sorry \u8fdb\u5165\u65b0\u9875\u9762\u65f6\uff0c Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u6709\u4e00\u53e5 \"Now you should apologize...\" \u90a3\u4e00\u9898\u6709 Leopold \u7684\u90ae\u7bb1\u5730\u5740\uff1a leopold.moz@pythonchallenge.com \u53d1\u4e00\u5c01\u9053\u6b49\u4fe1\u5427\uff0c\u867d\u7136\u4e0a\u9762\u8bf4 it has nothing to do with this level \uff0c\u663e\u7136\u8fd9\u662f\u540e\u9762\u7684\u9898\u76ee\u7684\u7ebf\u7d22 \u5f88\u5feb\u5c31\u5f97\u5230\u4e86 Leopold \u7684\u56de\u590d Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to? part2 Link this is an undocumented module this \u662f\u53cc\u5173\u8bed\uff0c\u9664\u4e86\u539f\u6765\u7684\u610f\u601d\uff0c\u8fd8\u4ee3\u8868 this \u6a21\u5757 \u8fd9\u4e2a\u6a21\u5757\u6b63\u597d\u6ca1\u6709\u8bf4\u660e\u6587\u6863 \u641c\u7d22\u5f97\u77e5\u8fd9\u4e2a\u7f51\u9875\uff1a https://legacy.python.org/dev/peps/pep-0020/ \u8be5\u7f51\u9875\u9898\u4e3a\uff1a PEP 20 -- The Zen of Python \uff0c\u5373\u201cPython \u4e4b\u7985\u201d \u62c9\u5012\u7f51\u9875\u4e0b\u65b9\uff0c\u53ef\u4ee5\u770b\u89c1\u201c\u590d\u6d3b\u8282\u5f69\u86cb\u201d Easter Egg >>> import this \u5bfc\u5165\u6a21\u5757\uff0c\u4f1a\u7acb\u5373\u8f93\u51fa\u201cPython \u4e4b\u7985\u201d >>> import this The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! >>> part3 Link \u8fd9\u91cc\u6709 Python2 \u7684 this \u6e90\u7801\uff1a https://svn.python.org/projects/python/trunk/Lib/this.py \u5728\u5b89\u88c5\u76ee\u5f55\u4e5f\u80fd\u627e\u5230\uff0c\u6bd4\u5982\u6211\u7684\u662f\u5728 E:\\Anaconda3\\Lib\\this.py \u82e5\u53ea\u88c5\u4e86 Python\uff0c\u53ef\u80fd\u7684\u6587\u4ef6\u8def\u5f84\u662f\uff1a C:\\Users\\YourName\\AppData\\Local\\Programs\\Python\\Python38-64\\Lib\\this.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 s = \"\"\"Gur Mra bs Clguba, ol Gvz Crgref Ornhgvshy vf orggre guna htyl. Rkcyvpvg vf orggre guna vzcyvpvg. Fvzcyr vf orggre guna pbzcyrk. Pbzcyrk vf orggre guna pbzcyvpngrq. Syng vf orggre guna arfgrq. Fcnefr vf orggre guna qrafr. Ernqnovyvgl pbhagf. Fcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf. Nygubhtu cenpgvpnyvgl orngf chevgl. Reebef fubhyq arire cnff fvyragyl. Hayrff rkcyvpvgyl fvyraprq. Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff. Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg. Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu. Abj vf orggre guna arire. Nygubhtu arire vf bsgra orggre guna *evtug* abj. Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn. Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn. Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!\"\"\" d = {} for c in ( 65 , 97 ): for i in range ( 26 ): d [ chr ( i + c )] = chr (( i + 13 ) % 26 + c ) print ( \"\" . join ([ d . get ( c , c ) for c in s ])) \u501f\u7528 this.py \u7684\u5b57\u5178 >>> import this ... # \u7701\u7565\u82e5\u5e72 >>> s = \"va gur snpr bs jung?\" >>> '' . join ([ this . d . get ( c , c ) for c in s ]) 'in the face of what?' >>> \u67e5\u770b\u539f\u6587\u540e\u5f97\u77e5\uff1a In the face of ambiguity 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/ambiguity.html","title":"23 what is this mudule"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#23-what-is-this-module","text":"","title":"\u7b2c 23 \u9898 what is this module?"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#1","text":">>> http://www.pythonchallenge.com/pc/hex/bonus.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca TODO: do you owe someone an apology? now it is a good time to tell him that you are sorry. Please show good manners although it has nothing to do with this level. it can't find it. this is an undocumented module. va gur snpr bs jung?'","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#part1","text":"\u8bf4\u5230 apology \uff0c\u7b2c 19 \u9898\u4ee4\u4eba\u5370\u8c61\u6df1\u523b \u89e3\u9898\u8fc7\u7a0b\u4e2d\u751f\u6210\u4e86\u4e00\u4e2a indian.wav \uff0c\u6709\u4e00\u58f0 sorry \u8fdb\u5165\u65b0\u9875\u9762\u65f6\uff0c Leopold \u7684\u8096\u50cf\u4e0b\u65b9\u6709\u4e00\u53e5 \"Now you should apologize...\" \u90a3\u4e00\u9898\u6709 Leopold \u7684\u90ae\u7bb1\u5730\u5740\uff1a leopold.moz@pythonchallenge.com \u53d1\u4e00\u5c01\u9053\u6b49\u4fe1\u5427\uff0c\u867d\u7136\u4e0a\u9762\u8bf4 it has nothing to do with this level \uff0c\u663e\u7136\u8fd9\u662f\u540e\u9762\u7684\u9898\u76ee\u7684\u7ebf\u7d22 \u5f88\u5feb\u5c31\u5f97\u5230\u4e86 Leopold \u7684\u56de\u590d Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to?","title":"part1"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#part2","text":"this is an undocumented module this \u662f\u53cc\u5173\u8bed\uff0c\u9664\u4e86\u539f\u6765\u7684\u610f\u601d\uff0c\u8fd8\u4ee3\u8868 this \u6a21\u5757 \u8fd9\u4e2a\u6a21\u5757\u6b63\u597d\u6ca1\u6709\u8bf4\u660e\u6587\u6863 \u641c\u7d22\u5f97\u77e5\u8fd9\u4e2a\u7f51\u9875\uff1a https://legacy.python.org/dev/peps/pep-0020/ \u8be5\u7f51\u9875\u9898\u4e3a\uff1a PEP 20 -- The Zen of Python \uff0c\u5373\u201cPython \u4e4b\u7985\u201d \u62c9\u5012\u7f51\u9875\u4e0b\u65b9\uff0c\u53ef\u4ee5\u770b\u89c1\u201c\u590d\u6d3b\u8282\u5f69\u86cb\u201d Easter Egg >>> import this \u5bfc\u5165\u6a21\u5757\uff0c\u4f1a\u7acb\u5373\u8f93\u51fa\u201cPython \u4e4b\u7985\u201d >>> import this The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! >>>","title":"part2"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#part3","text":"\u8fd9\u91cc\u6709 Python2 \u7684 this \u6e90\u7801\uff1a https://svn.python.org/projects/python/trunk/Lib/this.py \u5728\u5b89\u88c5\u76ee\u5f55\u4e5f\u80fd\u627e\u5230\uff0c\u6bd4\u5982\u6211\u7684\u662f\u5728 E:\\Anaconda3\\Lib\\this.py \u82e5\u53ea\u88c5\u4e86 Python\uff0c\u53ef\u80fd\u7684\u6587\u4ef6\u8def\u5f84\u662f\uff1a C:\\Users\\YourName\\AppData\\Local\\Programs\\Python\\Python38-64\\Lib\\this.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 s = \"\"\"Gur Mra bs Clguba, ol Gvz Crgref Ornhgvshy vf orggre guna htyl. Rkcyvpvg vf orggre guna vzcyvpvg. Fvzcyr vf orggre guna pbzcyrk. Pbzcyrk vf orggre guna pbzcyvpngrq. Syng vf orggre guna arfgrq. Fcnefr vf orggre guna qrafr. Ernqnovyvgl pbhagf. Fcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf. Nygubhtu cenpgvpnyvgl orngf chevgl. Reebef fubhyq arire cnff fvyragyl. Hayrff rkcyvpvgyl fvyraprq. Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff. Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg. Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu. Abj vf orggre guna arire. Nygubhtu arire vf bsgra orggre guna *evtug* abj. Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn. Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn. Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!\"\"\" d = {} for c in ( 65 , 97 ): for i in range ( 26 ): d [ chr ( i + c )] = chr (( i + 13 ) % 26 + c ) print ( \"\" . join ([ d . get ( c , c ) for c in s ])) \u501f\u7528 this.py \u7684\u5b57\u5178 >>> import this ... # \u7701\u7565\u82e5\u5e72 >>> s = \"va gur snpr bs jung?\" >>> '' . join ([ this . d . get ( c , c ) for c in s ]) 'in the face of what?' >>> \u67e5\u770b\u539f\u6587\u540e\u5f97\u77e5\uff1a In the face of ambiguity","title":"part3"},{"location":"PythonChallenge/Solutions/23_what_is_this_module/#5","text":"http://www.pythonchallenge.com/pc/hex/ambiguity.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/","text":"\u7b2c 24 \u9898 from top to bottom Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/ambiguity.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u65e0 4. \u89e3\u6cd5 Link part1 Link \u5c06\u56fe\u7247\u653e\u5927\u540e\uff0c\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u5f20\u5de8\u5927\u7684\u201c\u8ff7\u5bab\u56fe\u201d \u6807\u9898\u8bf4 from top to bottom \uff0c\u8bf4\u660e\u5165\u53e3\u5728\u4e0a\u65b9\uff0c\u51fa\u53e3\u5728\u4e0b\u65b9 \u4e00\u5f00\u59cb\uff0c\u6211\u4e0b\u610f\u8bc6\u5730\u8ba4\u4e3a\u9ed1\u8272\u7684\u662f\u5899\uff0c\u5b9e\u9645\u4e0a\uff0c\u9ed1\u8272\u7684\u662f\u8def\u5f84 \u6b64\u5916\uff0c\u4ed4\u7ec6\u770b\u8fd8\u80fd\u53d1\u73b0\uff1a\u8def\u5f84\u5e76\u975e\u5b8c\u5168\u662f\u9ed1\u8272\uff0c\u4e2d\u95f4\u8fd8\u6df7\u4e00\u4e9b\u201c\u7ea2\u70b9\u201d \u653e\u5927\u56fe\u7247\u53ef\u4ee5\u53d1\u73b0\u5165\u53e3\u5728\u53f3\u4e0a\u89d2 \u51fa\u53e3\u5728\u5de6\u4e0b\u89d2 \u5f53\u7136\uff0c\u4f7f\u7528 Python \u89e3\u5f97\u5165\u53e3\u4e0e\u51fa\u53e3\u66f4\u6709\u8bf4\u670d\u529b >>> from PIL import Image >>> maze = Image . open ( \"maze.png\" ) >>> w , h = maze . size >>> w , h ( 641 , 641 ) >>> for i in range ( w ): print ( maze . getpixel (( i , 0 ))) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u5165\u53e3\uff0c\u7b2c\u4e00\u884c\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) >>> for i in range ( w ): print ( maze . getpixel (( i , h - 1 ))) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u51fa\u53e3\uff0c\u6700\u540e\u7b2c\u4e00\u884c\uff0c\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) >>> part2 Link \u4f7f\u7528 BFS \u4ece\u51fa\u53e3\u53cd\u63a8\u8def\u5f84\uff0c\u5e76\u7ed8\u5236\u51fa\u8def\u7ebf\uff08\u4e5f\u6709\u522b\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 A-Star\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from PIL import Image def find_way ( img , entrance , export ): w , h = img . size pix = img . load () right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] # \u7b2c 14 \u9898\u7684\u65b9\u6cd5\u4e8c\u4e5f\u662f\u8fd9\u79cd\u601d\u8def\uff0c\u4f46\u987a\u5e8f\u4e0d\u540c try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) print ( len ( right_way )) break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( img , way , entrance , export ): new_img = img . copy () t = ( 0 , 255 , 0 , 255 ) # green if way : p = entrance while p != export : new_img . putpixel ( p , t ) p = way [ p ] new_img . putpixel ( p , t ) new_img . save ( \"24_maze_route.png\" ) if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( img , entrance , export ) reproduce ( img , way , entrance , export ) \u5f97\u5230\u56fe\u7247 part3 Link \u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f 0 \uff0c\u8fd9\u6837\u7684\u70b9\u90fd\u662f\u5728\u8def\u5f84\u7684\u5076\u6570\u70b9 (0, 2, ...) \u67e5\u770b\u975e\u9ed1\u8272\u50cf\u7d20\u70b9\u7684\u503c\uff0c\u5373\u8def\u5f84\u6570\u4e3a\u5947\u6570\u7684\u70b9\u7684\u50cf\u7d20\u503c >>> maze . getpixel (( 639 , 1 )) # \u5165\u53e3 (639, 0) \u7684\u4e0b\u4e00\u4e2a\u70b9 ( 80 , 0 , 0 , 255 ) >>> maze . getpixel (( 639 , 3 )) ( 75 , 0 , 0 , 255 ) >>> chr ( 80 ) 'P' >>> chr ( 75 ) 'K' >>> \u53d1\u73b0\u4ee5 PK \u5f00\u5934\uff0c\u6709\u4e86\u7b2c 20 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u8fd9\u662f zip \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u5c06\u8fd9\u4e9b\u6570\u636e\u5199\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 from PIL import Image def find_way ( w , h , pix , entrance , export ): right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) # print(len(right_way)) # 194941 break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( pix , way , entrance , export ): t = ( 0 , 255 , 0 , 255 ) if way : p = entrance data = [] while p != export : data . append ( pix [ p [ 0 ], p [ 1 ]][ 0 ]) p = way [ p ] with open ( \"maze.zip\" , \"wb\" ) as f : f . write ( bytes ( data [ 1 :: 2 ])) # \u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f0\uff0c\u800c\u4e14\u90fd\u662f\u5728\u5076\u6570\u5b57\u8282 if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) w , h = img . size pix = img . load () entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( w , h , pix , entrance , export ) reproduce ( pix , way , entrance , export ) \u5f97\u5230\u4e00\u4e2a\u538b\u7f29\u5305 \u89e3\u538b\u540e\u6709\u4e00\u5f20\u56fe\u7247\uff08\u5982\u4e0b\uff09\u548c\u53e6\u4e00\u4e2a\u540d\u4e3a mybroken.zip \u7684\u538b\u7f29\u5305 lake \u4e3a\u89e3 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/lake.html","title":"24 from top to bottom"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#24-from-top-to-bottom","text":"","title":"\u7b2c 24 \u9898  from top to bottom"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#1","text":">>> http://www.pythonchallenge.com/pc/hex/ambiguity.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#3","text":"\u65e0","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#part1","text":"\u5c06\u56fe\u7247\u653e\u5927\u540e\uff0c\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u5f20\u5de8\u5927\u7684\u201c\u8ff7\u5bab\u56fe\u201d \u6807\u9898\u8bf4 from top to bottom \uff0c\u8bf4\u660e\u5165\u53e3\u5728\u4e0a\u65b9\uff0c\u51fa\u53e3\u5728\u4e0b\u65b9 \u4e00\u5f00\u59cb\uff0c\u6211\u4e0b\u610f\u8bc6\u5730\u8ba4\u4e3a\u9ed1\u8272\u7684\u662f\u5899\uff0c\u5b9e\u9645\u4e0a\uff0c\u9ed1\u8272\u7684\u662f\u8def\u5f84 \u6b64\u5916\uff0c\u4ed4\u7ec6\u770b\u8fd8\u80fd\u53d1\u73b0\uff1a\u8def\u5f84\u5e76\u975e\u5b8c\u5168\u662f\u9ed1\u8272\uff0c\u4e2d\u95f4\u8fd8\u6df7\u4e00\u4e9b\u201c\u7ea2\u70b9\u201d \u653e\u5927\u56fe\u7247\u53ef\u4ee5\u53d1\u73b0\u5165\u53e3\u5728\u53f3\u4e0a\u89d2 \u51fa\u53e3\u5728\u5de6\u4e0b\u89d2 \u5f53\u7136\uff0c\u4f7f\u7528 Python \u89e3\u5f97\u5165\u53e3\u4e0e\u51fa\u53e3\u66f4\u6709\u8bf4\u670d\u529b >>> from PIL import Image >>> maze = Image . open ( \"maze.png\" ) >>> w , h = maze . size >>> w , h ( 641 , 641 ) >>> for i in range ( w ): print ( maze . getpixel (( i , 0 ))) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u5165\u53e3\uff0c\u7b2c\u4e00\u884c\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) >>> for i in range ( w ): print ( maze . getpixel (( i , h - 1 ))) ( 255 , 255 , 255 , 255 ) ( 0 , 0 , 0 , 255 ) # \u51fa\u53e3\uff0c\u6700\u540e\u7b2c\u4e00\u884c\uff0c\u7b2c\u4e8c\u4e2a\u50cf\u7d20 ( 255 , 255 , 255 , 255 ) ... # \u7701\u53bb 638 \u4e2a (255, 255, 255, 255) >>>","title":"part1"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#part2","text":"\u4f7f\u7528 BFS \u4ece\u51fa\u53e3\u53cd\u63a8\u8def\u5f84\uff0c\u5e76\u7ed8\u5236\u51fa\u8def\u7ebf\uff08\u4e5f\u6709\u522b\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 A-Star\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from PIL import Image def find_way ( img , entrance , export ): w , h = img . size pix = img . load () right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] # \u7b2c 14 \u9898\u7684\u65b9\u6cd5\u4e8c\u4e5f\u662f\u8fd9\u79cd\u601d\u8def\uff0c\u4f46\u987a\u5e8f\u4e0d\u540c try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) print ( len ( right_way )) break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( img , way , entrance , export ): new_img = img . copy () t = ( 0 , 255 , 0 , 255 ) # green if way : p = entrance while p != export : new_img . putpixel ( p , t ) p = way [ p ] new_img . putpixel ( p , t ) new_img . save ( \"24_maze_route.png\" ) if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( img , entrance , export ) reproduce ( img , way , entrance , export ) \u5f97\u5230\u56fe\u7247","title":"part2"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#part3","text":"\u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f 0 \uff0c\u8fd9\u6837\u7684\u70b9\u90fd\u662f\u5728\u8def\u5f84\u7684\u5076\u6570\u70b9 (0, 2, ...) \u67e5\u770b\u975e\u9ed1\u8272\u50cf\u7d20\u70b9\u7684\u503c\uff0c\u5373\u8def\u5f84\u6570\u4e3a\u5947\u6570\u7684\u70b9\u7684\u50cf\u7d20\u503c >>> maze . getpixel (( 639 , 1 )) # \u5165\u53e3 (639, 0) \u7684\u4e0b\u4e00\u4e2a\u70b9 ( 80 , 0 , 0 , 255 ) >>> maze . getpixel (( 639 , 3 )) ( 75 , 0 , 0 , 255 ) >>> chr ( 80 ) 'P' >>> chr ( 75 ) 'K' >>> \u53d1\u73b0\u4ee5 PK \u5f00\u5934\uff0c\u6709\u4e86\u7b2c 20 \u9898\u7684\u7ecf\u9a8c\uff0c\u53ef\u77e5\u8fd9\u662f zip \u683c\u5f0f\u7684\u6587\u4ef6\u5934 \u5c06\u8fd9\u4e9b\u6570\u636e\u5199\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 from PIL import Image def find_way ( w , h , pix , entrance , export ): right_way = {} trial = [ export ] white = ( 255 , 255 , 255 , 255 ) direction = [( - 1 , 0 ), ( 1 , 0 ), ( 0 , - 1 ), ( 0 , 1 )] try : while True : t = trial . pop ( 0 ) if t == entrance : print ( \"Find over!\" ) # print(len(right_way)) # 194941 break for d in direction : new = ( t [ 0 ] + d [ 0 ], t [ 1 ] + d [ 1 ]) if - 1 < new [ 0 ] < w and - 1 < new [ 1 ] < h : if pix [ new [ 0 ], new [ 1 ]] != white and new not in right_way : trial . append ( new ) right_way [ new ] = t return right_way except Exception as e : print ( e ) def reproduce ( pix , way , entrance , export ): t = ( 0 , 255 , 0 , 255 ) if way : p = entrance data = [] while p != export : data . append ( pix [ p [ 0 ], p [ 1 ]][ 0 ]) p = way [ p ] with open ( \"maze.zip\" , \"wb\" ) as f : f . write ( bytes ( data [ 1 :: 2 ])) # \u9ed1\u8272\u7684\u50cf\u7d20\u70b9\u503c\u662f0\uff0c\u800c\u4e14\u90fd\u662f\u5728\u5076\u6570\u5b57\u8282 if __name__ == \"__main__\" : img = Image . open ( \"maze.png\" ) w , h = img . size pix = img . load () entrance = ( 639 , 0 ) export = ( 1 , 640 ) way = find_way ( w , h , pix , entrance , export ) reproduce ( pix , way , entrance , export ) \u5f97\u5230\u4e00\u4e2a\u538b\u7f29\u5305 \u89e3\u538b\u540e\u6709\u4e00\u5f20\u56fe\u7247\uff08\u5982\u4e0b\uff09\u548c\u53e6\u4e00\u4e2a\u540d\u4e3a mybroken.zip \u7684\u538b\u7f29\u5305 lake \u4e3a\u89e3","title":"part3"},{"location":"PythonChallenge/Solutions/24_from_top_to_bottom/#5","text":"http://www.pythonchallenge.com/pc/hex/lake.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/","text":"\u7b2c 25 \u9898 imagine how they sound Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/lake.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca can you see the waves? 4. \u89e3\u6cd5 Link part1 Link \u8fd9\u4e00\u9898\u7684\u56fe\u7247\u540d\u4e3a lake1.jpg \uff0c\u6309\u4e4b\u524d\u7684\u89c4\u5f8b\uff08\u5982\u7b2c 12 \u9898\uff09\uff0c\u53ef\u80fd\u6709 lake2, lake3, ... \u6807\u9898\u662f\u5728\u63d0\u793a\u4f7f\u7528 Python \u7684 wave \u5e93 \uff08\u5982\u7b2c 19 \u9898\uff0c summary \u4e2d\u6709\u7528\u5230 wave \u6a21\u5757\uff09 \u5148\u5c06\u7f51\u5740\u7684 lake.html \u6539\u4e3a lake1.wav \u8bd5\u8bd5 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u63d0\u793a waves \uff0c\u8fd9\u8bf4\u660e\u53ef\u80fd\u6709\u8bb8\u591a .wav \uff0c\u6211\u8bd5\u4e86 lake2.wav \u679c\u7136\u6709 part2 Link \u8fd9\u662f\u7b2c 25 \u9898\uff0c\u800c\u4e14\u56fe\u4e2d\u7684\u62fc\u56fe\u5757\u4e5f\u6709 25 \u5757\uff0c\u8bf4\u4e0d\u5b9a\u6709 25 \u4e2a .wav \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from requests import get def download_one ( filename ): url = \"http://www.pythonchallenge.com/pc/hex/\" + filename res = get ( url , auth = ( \"butter\" , \"fly\" )) if res . ok : f = open ( filename , \"wb\" ) f . write ( res . content ) f . close () return True else : return False def download_all (): n = 1 while True : filename = f \"lake { n } .wav\" if download_one ( filename ): print ( filename , \"download!\" ) n += 1 else : print ( \"nothing more.\" ) return if __name__ == \"__main__\" : download_all () \u4e0a\u9762\u7684\u65b9\u6cd5\u80fd\u4e0b\uff0c\u4f46\u4e2d\u9014\u53ef\u80fd\u4f1a\u5361 \u52a0\u5165\u8bf7\u6c42\u5934\uff0c\u5e76\u5c06\u5176\u4e0b\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\u5939\u5185 1 2 3 4 5 6 7 8 9 10 11 12 import requests req = requests . Session () header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/\" for i in range ( 1 , 26 ): name = f \"lake { i } .wav\" res = req . get ( url + name , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\ {} \" . format ( name ), \"wb\" ) as f : f . write ( res . content ) print ( name , \"has been downloaded!\" ) \u5982\u679c\u4e2d\u9014\u8fd8\u662f\u5361\u4e86\uff0c\u53ef\u4ee5\u5173\u95ed\u7a0b\u5e8f\uff0c\u4fee\u6539\u5faa\u73af\u8d77\u59cb\u6570\u636e\uff0c\u7ee7\u7eed\u4e0b\u8f7d part2 Link \u968f\u673a\u542c\u51e0\u4e2a\u97f3\u9891\uff0c\u6bd4\u8f83\u523a\u8033 \u53f3\u952e\u67e5\u770b\u4e00\u4e0b\u5c5e\u6027\uff0c\u53d1\u73b0\u5176\u5927\u5c0f\u4e3a 10,844 bytes \u4ece\u7b2c 19 \u9898\u5b66\u5230\uff1a .wav \u7684\u6587\u4ef6\u5934\u5927\u5c0f\u4e3a 44 bytes \u62ff Python \u7684\u4ea4\u4e92\u73af\u5883\u5f53\u4e00\u4e0b\u8ba1\u7b97\u5668 >>> from math import sqrt >>> sqrt (( 10844 - 44 ) // 3 ) # \u6bcf\u4e2a\u989c\u8272\u5360\u4e09\u4e2a\u5b57\u8282 (R, G, B) 60.0 >>> \u53ef\u4ee5\u5927\u80c6\u731c\u6d4b\u6bcf\u4e2a\u97f3\u9891\u5747\u53ef\u5316\u4e3a 60x60 \u7684\u56fe\u7247\uff0c\u7136\u540e\u50cf\u9898\u56fe\u4e00\u6837\u62fc\u6210 300x300 \u7684\u5927\u56fe 1 2 3 4 5 6 7 8 9 10 from PIL import Image filename = \"lake1.wav\" f = open ( filename , \"rb\" ) data = f . read ()[ 44 :] f . close () img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( data ) img . save ( \"lake_01.jpg\" ) img . close () \u5f97\u5230\u7b2c\u4e00\u5f20\u56fe\u7247 part3 Link \u751f\u6210 25 \u5f20\u56fe\u7247\uff08\u4e0d\u5fc5\u4e00\u4e00\u4fdd\u5b58\uff09\uff0c\u5e76\u5c06\u5176\u4ee5 5x5 \u7684\u6392\u5217\u62fc\u6210\u4e00\u5e45\u56fe\u7247 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from PIL import Image def wav2img ( filename ): with open ( filename , \"rb\" ) as f : img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( f . read ()[ 44 :]) return img def jigsaw_puzzle (): jigsaw = Image . new ( \"RGB\" , ( 300 , 300 )) for i in range ( 25 ): row , col = divmod ( i , 5 ) # div + mod piece = wav2img ( f \"lake { i + 1 } .wav\" ) jigsaw . paste ( piece , ( col * 60 , row * 60 )) jigsaw . save ( \"25_result.jpg\" ) if __name__ == \"__main__\" : jigsaw_puzzle () \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u89e3\uff1a decent 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/decent.html","title":"25 imagine how they sound"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#25-imagine-how-they-sound","text":"","title":"\u7b2c 25 \u9898 imagine how they sound"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#1","text":">>> http://www.pythonchallenge.com/pc/hex/lake.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca can you see the waves?","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part1","text":"\u8fd9\u4e00\u9898\u7684\u56fe\u7247\u540d\u4e3a lake1.jpg \uff0c\u6309\u4e4b\u524d\u7684\u89c4\u5f8b\uff08\u5982\u7b2c 12 \u9898\uff09\uff0c\u53ef\u80fd\u6709 lake2, lake3, ... \u6807\u9898\u662f\u5728\u63d0\u793a\u4f7f\u7528 Python \u7684 wave \u5e93 \uff08\u5982\u7b2c 19 \u9898\uff0c summary \u4e2d\u6709\u7528\u5230 wave \u6a21\u5757\uff09 \u5148\u5c06\u7f51\u5740\u7684 lake.html \u6539\u4e3a lake1.wav \u8bd5\u8bd5 \u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u63d0\u793a waves \uff0c\u8fd9\u8bf4\u660e\u53ef\u80fd\u6709\u8bb8\u591a .wav \uff0c\u6211\u8bd5\u4e86 lake2.wav \u679c\u7136\u6709","title":"part1"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part2","text":"\u8fd9\u662f\u7b2c 25 \u9898\uff0c\u800c\u4e14\u56fe\u4e2d\u7684\u62fc\u56fe\u5757\u4e5f\u6709 25 \u5757\uff0c\u8bf4\u4e0d\u5b9a\u6709 25 \u4e2a .wav \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from requests import get def download_one ( filename ): url = \"http://www.pythonchallenge.com/pc/hex/\" + filename res = get ( url , auth = ( \"butter\" , \"fly\" )) if res . ok : f = open ( filename , \"wb\" ) f . write ( res . content ) f . close () return True else : return False def download_all (): n = 1 while True : filename = f \"lake { n } .wav\" if download_one ( filename ): print ( filename , \"download!\" ) n += 1 else : print ( \"nothing more.\" ) return if __name__ == \"__main__\" : download_all () \u4e0a\u9762\u7684\u65b9\u6cd5\u80fd\u4e0b\uff0c\u4f46\u4e2d\u9014\u53ef\u80fd\u4f1a\u5361 \u52a0\u5165\u8bf7\u6c42\u5934\uff0c\u5e76\u5c06\u5176\u4e0b\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\u5939\u5185 1 2 3 4 5 6 7 8 9 10 11 12 import requests req = requests . Session () header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/\" for i in range ( 1 , 26 ): name = f \"lake { i } .wav\" res = req . get ( url + name , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\ {} \" . format ( name ), \"wb\" ) as f : f . write ( res . content ) print ( name , \"has been downloaded!\" ) \u5982\u679c\u4e2d\u9014\u8fd8\u662f\u5361\u4e86\uff0c\u53ef\u4ee5\u5173\u95ed\u7a0b\u5e8f\uff0c\u4fee\u6539\u5faa\u73af\u8d77\u59cb\u6570\u636e\uff0c\u7ee7\u7eed\u4e0b\u8f7d","title":"part2"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part2_1","text":"\u968f\u673a\u542c\u51e0\u4e2a\u97f3\u9891\uff0c\u6bd4\u8f83\u523a\u8033 \u53f3\u952e\u67e5\u770b\u4e00\u4e0b\u5c5e\u6027\uff0c\u53d1\u73b0\u5176\u5927\u5c0f\u4e3a 10,844 bytes \u4ece\u7b2c 19 \u9898\u5b66\u5230\uff1a .wav \u7684\u6587\u4ef6\u5934\u5927\u5c0f\u4e3a 44 bytes \u62ff Python \u7684\u4ea4\u4e92\u73af\u5883\u5f53\u4e00\u4e0b\u8ba1\u7b97\u5668 >>> from math import sqrt >>> sqrt (( 10844 - 44 ) // 3 ) # \u6bcf\u4e2a\u989c\u8272\u5360\u4e09\u4e2a\u5b57\u8282 (R, G, B) 60.0 >>> \u53ef\u4ee5\u5927\u80c6\u731c\u6d4b\u6bcf\u4e2a\u97f3\u9891\u5747\u53ef\u5316\u4e3a 60x60 \u7684\u56fe\u7247\uff0c\u7136\u540e\u50cf\u9898\u56fe\u4e00\u6837\u62fc\u6210 300x300 \u7684\u5927\u56fe 1 2 3 4 5 6 7 8 9 10 from PIL import Image filename = \"lake1.wav\" f = open ( filename , \"rb\" ) data = f . read ()[ 44 :] f . close () img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( data ) img . save ( \"lake_01.jpg\" ) img . close () \u5f97\u5230\u7b2c\u4e00\u5f20\u56fe\u7247","title":"part2"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#part3","text":"\u751f\u6210 25 \u5f20\u56fe\u7247\uff08\u4e0d\u5fc5\u4e00\u4e00\u4fdd\u5b58\uff09\uff0c\u5e76\u5c06\u5176\u4ee5 5x5 \u7684\u6392\u5217\u62fc\u6210\u4e00\u5e45\u56fe\u7247 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from PIL import Image def wav2img ( filename ): with open ( filename , \"rb\" ) as f : img = Image . new ( \"RGB\" , ( 60 , 60 )) img . frombytes ( f . read ()[ 44 :]) return img def jigsaw_puzzle (): jigsaw = Image . new ( \"RGB\" , ( 300 , 300 )) for i in range ( 25 ): row , col = divmod ( i , 5 ) # div + mod piece = wav2img ( f \"lake { i + 1 } .wav\" ) jigsaw . paste ( piece , ( col * 60 , row * 60 )) jigsaw . save ( \"25_result.jpg\" ) if __name__ == \"__main__\" : jigsaw_puzzle () \u5f97\u5230\u56fe\u7247 \u5f97\u5230\u89e3\uff1a decent","title":"part3"},{"location":"PythonChallenge/Solutions/25_imagine_how_they_sound/#5","text":"http://www.pythonchallenge.com/pc/hex/decent.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/","text":"\u7b2c 26 \u9898 be a man - apologize! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/decent.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 Hurry up, I'm missing the boat \u7f51\u9875\u6e90\u7801 you've got his e-mail Join us at the IRC: irc.freenode.net #pythonchallenge 4. \u89e3\u6cd5 Link part1 Link \u7b2c 23 \u9898\u5f00\u5934\uff0c\u6211\u66fe\u7ed9 Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u4e00\u5c01\u201c\u9053\u6b49\u4fe1\u201d \u7b2c 24 \u9898\u7ed3\u5c3e\uff0c\u6211\u4ece maze.zip \u4e2d\u5f97\u5230\u4e86 mybroken.zip \uff0c\u5e76\u5f97\u77e5\u5176\u4e2d\u6709 mybroken.gif \u56de\u987e\u4e00\u4e0b Leopold \u7684\u56de\u4fe1 Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to? Leopold \u5927\u6982\u60f3\u8bf4\uff1a\u4ec5\u4ec5\u4e00\u4e2a\u5b57\u8282\u7684\u6539\u53d8\uff0c\u5c31\u4f1a\u4ee4\u6587\u4ef6\u7684 md5 \u503c\u53d1\u751f\u5de8\u5927\u7684\u53d8\u5316 \u53ef\u4ee5\u63a8\u65ad\uff0c\u538b\u7f29\u6587\u4ef6 mybroken.zip \u88ab\u6539\u52a8\u4e86\u4e00\u4e2a\u5b57\u8282 part2 Link \u67e5\u770b\u538b\u7f29\u5305\u5c5e\u6027\uff0c\u5176\u5927\u5c0f\u4e3a 2,701 bytes \uff08\u53bb\u6389\u4e00\u4e2a\u5b57\u8282\u6070\u80fd\u51d1\u6574\uff0c\u53ef\u60dc\u4e0d\u662f\u8fd9\u6761\u601d\u8def\uff09 \u6309\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\uff0c\u76f4\u5230\u7b97\u51fa\u7684 md5 \u503c\u4e0e Leopold \u7ed9\u51fa\u7684\u4e00\u6837\u4e3a\u6b62 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from hashlib import md5 def repair ( data , md5str ): n = len ( data ) for i in range ( n ): t = data [ i ] for byte in range ( 256 ): data [ i ] = byte if md5 ( data ) . hexdigest () == md5str : print ( \"broken because of bytes\" , i ) return True data [ i ] = t return False if __name__ == \"__main__\" : md5str = \"bbb8b499a0eef99b52c7f13f4e78c24b\" f = open ( \"mybroken.zip\" , \"rb\" ) data = bytearray ( f . read ()) f . close () if repair ( data , md5str ): zf = open ( \"repaired.zip\" , \"wb\" ) zf . write ( data ) zf . close () print ( \"done!\" ) else : print ( \"faild!\" ) >>> broken because of bytes 1234 done ! \u770b\u4e00\u770b\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\u524d\u540e\u7684 md5 \u503c part3 Link \u89e3\u538b\u7f29 repaired.zip \uff0c\u5f97\u5230\u56fe\u7247 mybroken.gif \u5176\u5b9e\u4f7f\u7528 bandzip \u53ef\u4ee5\u76f4\u63a5\u770b\u5230 speed \uff0c\u539f\u56e0\u53ef\u80fd\u548c\u7b2c 12 \u9898\u7684\u7b2c\u56db\u5f20\u7834\u635f\u7684\u56fe\u7247\u76f8\u540c \u6253\u4e0d\u5f00\u7f51\u5740 http://www.pythonchallenge.com/pc/hex/speed.html \u56de\u987e\u63d0\u793a\u8bed\uff1a I'm missing the boat \u548c\u7b2c 23 \u9898\u7684 this \u4e00\u6837\uff0c\u8fd9\u4e5f\u662f\u53cc\u5173\u8bed\uff0c\u610f\u6307 speed \u6f0f\u4e0b\u4e86 boat \u89e3\u4e3a speedboat 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/hex/speedboat.html","title":"26 be a man-apologize"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#26-be-a-man-apologize","text":"","title":"\u7b2c 26 \u9898 be a man - apologize!"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#1","text":">>> http://www.pythonchallenge.com/pc/hex/decent.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#3","text":"\u7f51\u9875\u5185 Hurry up, I'm missing the boat \u7f51\u9875\u6e90\u7801 you've got his e-mail Join us at the IRC: irc.freenode.net #pythonchallenge","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#part1","text":"\u7b2c 23 \u9898\u5f00\u5934\uff0c\u6211\u66fe\u7ed9 Leopold \u8001\u7237\u5b50\u53d1\u8fc7\u4e00\u5c01\u201c\u9053\u6b49\u4fe1\u201d \u7b2c 24 \u9898\u7ed3\u5c3e\uff0c\u6211\u4ece maze.zip \u4e2d\u5f97\u5230\u4e86 mybroken.zip \uff0c\u5e76\u5f97\u77e5\u5176\u4e2d\u6709 mybroken.gif \u56de\u987e\u4e00\u4e0b Leopold \u7684\u56de\u4fe1 Never mind that. Have you found my broken zip? md5: bbb8b499a0eef99b52c7f13f4e78c24b Can you believe what one mistake can lead to? Leopold \u5927\u6982\u60f3\u8bf4\uff1a\u4ec5\u4ec5\u4e00\u4e2a\u5b57\u8282\u7684\u6539\u53d8\uff0c\u5c31\u4f1a\u4ee4\u6587\u4ef6\u7684 md5 \u503c\u53d1\u751f\u5de8\u5927\u7684\u53d8\u5316 \u53ef\u4ee5\u63a8\u65ad\uff0c\u538b\u7f29\u6587\u4ef6 mybroken.zip \u88ab\u6539\u52a8\u4e86\u4e00\u4e2a\u5b57\u8282","title":"part1"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#part2","text":"\u67e5\u770b\u538b\u7f29\u5305\u5c5e\u6027\uff0c\u5176\u5927\u5c0f\u4e3a 2,701 bytes \uff08\u53bb\u6389\u4e00\u4e2a\u5b57\u8282\u6070\u80fd\u51d1\u6574\uff0c\u53ef\u60dc\u4e0d\u662f\u8fd9\u6761\u601d\u8def\uff09 \u6309\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\uff0c\u76f4\u5230\u7b97\u51fa\u7684 md5 \u503c\u4e0e Leopold \u7ed9\u51fa\u7684\u4e00\u6837\u4e3a\u6b62 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from hashlib import md5 def repair ( data , md5str ): n = len ( data ) for i in range ( n ): t = data [ i ] for byte in range ( 256 ): data [ i ] = byte if md5 ( data ) . hexdigest () == md5str : print ( \"broken because of bytes\" , i ) return True data [ i ] = t return False if __name__ == \"__main__\" : md5str = \"bbb8b499a0eef99b52c7f13f4e78c24b\" f = open ( \"mybroken.zip\" , \"rb\" ) data = bytearray ( f . read ()) f . close () if repair ( data , md5str ): zf = open ( \"repaired.zip\" , \"wb\" ) zf . write ( data ) zf . close () print ( \"done!\" ) else : print ( \"faild!\" ) >>> broken because of bytes 1234 done ! \u770b\u4e00\u770b\u4fee\u6539\u4e00\u4e2a\u5b57\u8282\u524d\u540e\u7684 md5 \u503c","title":"part2"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#part3","text":"\u89e3\u538b\u7f29 repaired.zip \uff0c\u5f97\u5230\u56fe\u7247 mybroken.gif \u5176\u5b9e\u4f7f\u7528 bandzip \u53ef\u4ee5\u76f4\u63a5\u770b\u5230 speed \uff0c\u539f\u56e0\u53ef\u80fd\u548c\u7b2c 12 \u9898\u7684\u7b2c\u56db\u5f20\u7834\u635f\u7684\u56fe\u7247\u76f8\u540c \u6253\u4e0d\u5f00\u7f51\u5740 http://www.pythonchallenge.com/pc/hex/speed.html \u56de\u987e\u63d0\u793a\u8bed\uff1a I'm missing the boat \u548c\u7b2c 23 \u9898\u7684 this \u4e00\u6837\uff0c\u8fd9\u4e5f\u662f\u53cc\u5173\u8bed\uff0c\u610f\u6307 speed \u6f0f\u4e0b\u4e86 boat \u89e3\u4e3a speedboat","title":"part3"},{"location":"PythonChallenge/Solutions/26_be_a_man-apologize/#5","text":"http://www.pythonchallenge.com/pc/hex/speedboat.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/27_between_the_tables/","text":"\u7b2c 27 \u9898 between the tables Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/hex/speedboat.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca <img src=\"zigzag.jpg\"> <!-- did you say gif? --> oh, and this is NOT a repeat of 14 4. \u89e3\u6cd5 Link part1 Link \u56fe\u7247\u53ef\u4ee5\u70b9\u8fdb\u53bb\uff0c\u65b0\u7684\u9875\u9762\u7684\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/ring/bell.html \u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff0c\u770b\u6765\u8d26\u53f7\u3001\u5bc6\u7801\u53c8\u4e00\u6b21\u66f4\u65b0\u4e86 \u6309\u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u7684\u7b2c\u4e00\u6761\u63d0\u793a\uff1a\u5c06\u56fe\u7247\u7684\u5730\u5740\u540e\u7f00\u6539\u4e3a gif \u83b7\u5f97\u4e00\u5f20\u7070\u5ea6\u56fe part2 Link \u67e5\u770b\u7070\u5ea6\u56fe\u7684 \u8c03\u8272\u677f\u503c \u4e0e RGB \u503c >>> from PIL import Image >>> img = Image . open ( \"zigzag.gif\" ) >>> data = list ( img . getdata ()) >>> data [: 12 ] [ 215 , 208 , 203 , 12 , 254 , 60 , 139 , 72 , 66 , 189 , 127 , 176 ] >>> >>> >>> colors = img . getpalette () >>> colors [: 9 ] [ 37 , 37 , 37 , 229 , 229 , 229 , 162 , 162 , 162 ] >>> colors = colors [:: 3 ] >>> >>> >>> colors [ 215 ] 208 >>> colors [ 208 ] 203 >>> colors [ 203 ] 12 >>> data \u4e2d\u7684\u5728 colors \u6570\u636e\u50cf \u4e00\u4e2a\u94fe\u8868\uff0c 215 -> 208 -> 203 -> ... \u7b2c 24 \u9898\u4e2d\uff0c\u7528 BFS \u6784\u5efa\u8ff7\u5bab\u8def\u7ebf\u7684\u5b57\u5178 \u9898\u56fe\u4e2d\u5de6\u4e0b\u89d2\u7684 zigzag \u67e5\u770b\u662f\u5426\u5c3e\u5bf9\u5934 >>> data [ - 2 :] [ 250 , 100 ] >>> colors [ 250 ] 100 >>> colors [ 100 ] 93 # not 215 >>> \u56e0\u4e3a\u5c3e\u90e8\u5bf9\u4e0d\u4e0a\uff0c\u6240\u4ee5\u6709\u5fc5\u8981\u67e5\u770b\u4e2d\u95f4\u6709\u6ca1\u6709\u5bf9\u4e0d\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ 1 for i , j in zip ( data1 , data2 ) if i != j ] print ( sum ( lst )) >>> 9465 \u63a2\u7d22\u4e00\u756a\uff0c\u53d1\u73b0\uff1a\u5c06 data1 \u4e0e data2 \u4e0d\u5339\u914d\u4e4b\u5904\u7684\u6570\u636e ASCII \u7801\u8f6c\uff0c\u6709\u719f\u6089\u7684\u8eab\u5f71 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ chr ( i ) for i , j in zip ( data1 , data2 ) if i != j ] print ( lst [: 10 ]) >>> [ 'B' , 'Z' , 'h' , '9' , '1' , 'A' , 'Y' , '&' , 'S' , 'Y' ] part3 Link \u4f7f\u7528 bz2 \u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from bz2 import decompress from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( text ) >>> b '../ring/bell.html del assert repeat raise or class is exec return except print return switch from exec repeat else not while assert or class class break except assert yield finally ../ring/bell.html assert ../ring/bell.html ... \u5206\u6790\u89e3\u7801\u540e\u7684\u5185\u5bb9 \u5305\u542b\u8bb8\u591a Python \u5173\u952e\u5b57\uff08\u51c6\u786e\u5730\u8bf4\uff0c\u662f Python2 \u7684\u5173\u952e\u5b57\uff09 \u6709\u8bb8\u591a\u5185\u5bb9\u662f\u91cd\u590d\u7684 \u5148\u53bb\u5173\u952e\u5b57\uff0c\u518d\u53bb\u91cd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from bz2 import decompress from keyword import iskeyword from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( set ([ w for w in text . split () if not iskeyword ( w . decode ())])) >>> { b 'switch' , b 'exec' , b '../ring/bell.html' , b 'repeat' , b 'print' } \u8bf4\u660e\uff1a\u5728 Python3 \u4e2d\uff0c exec \u4e0e print \u5df2\u7ecf\u4e0d\u662f\u5173\u952e\u5b57\u4e86\uff0c\u6240\u4ee5\u4f5c\u8005\u7684\u539f\u610f\u662f ../ring/bell.html repeat switch \u7ecf\u68c0\u9a8c\uff0c\u8d26\u53f7\u662f repeat \uff0c\u5bc6\u7801\u662f switch 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/bell.html \u8d26\u53f7\uff1a repeat \u5bc6\u7801\uff1a switch","title":"27 between the tables"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#27-between-the-tables","text":"","title":"\u7b2c 27 \u9898 between the tables"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#1","text":">>> http://www.pythonchallenge.com/pc/hex/speedboat.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca <img src=\"zigzag.jpg\"> <!-- did you say gif? --> oh, and this is NOT a repeat of 14","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#part1","text":"\u56fe\u7247\u53ef\u4ee5\u70b9\u8fdb\u53bb\uff0c\u65b0\u7684\u9875\u9762\u7684\u5730\u5740\u4e3a\uff1a http://www.pythonchallenge.com/pc/ring/bell.html \u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff0c\u770b\u6765\u8d26\u53f7\u3001\u5bc6\u7801\u53c8\u4e00\u6b21\u66f4\u65b0\u4e86 \u6309\u7f51\u9875\u6e90\u7801\u6ce8\u91ca\u7684\u7b2c\u4e00\u6761\u63d0\u793a\uff1a\u5c06\u56fe\u7247\u7684\u5730\u5740\u540e\u7f00\u6539\u4e3a gif \u83b7\u5f97\u4e00\u5f20\u7070\u5ea6\u56fe","title":"part1"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#part2","text":"\u67e5\u770b\u7070\u5ea6\u56fe\u7684 \u8c03\u8272\u677f\u503c \u4e0e RGB \u503c >>> from PIL import Image >>> img = Image . open ( \"zigzag.gif\" ) >>> data = list ( img . getdata ()) >>> data [: 12 ] [ 215 , 208 , 203 , 12 , 254 , 60 , 139 , 72 , 66 , 189 , 127 , 176 ] >>> >>> >>> colors = img . getpalette () >>> colors [: 9 ] [ 37 , 37 , 37 , 229 , 229 , 229 , 162 , 162 , 162 ] >>> colors = colors [:: 3 ] >>> >>> >>> colors [ 215 ] 208 >>> colors [ 208 ] 203 >>> colors [ 203 ] 12 >>> data \u4e2d\u7684\u5728 colors \u6570\u636e\u50cf \u4e00\u4e2a\u94fe\u8868\uff0c 215 -> 208 -> 203 -> ... \u7b2c 24 \u9898\u4e2d\uff0c\u7528 BFS \u6784\u5efa\u8ff7\u5bab\u8def\u7ebf\u7684\u5b57\u5178 \u9898\u56fe\u4e2d\u5de6\u4e0b\u89d2\u7684 zigzag \u67e5\u770b\u662f\u5426\u5c3e\u5bf9\u5934 >>> data [ - 2 :] [ 250 , 100 ] >>> colors [ 250 ] 100 >>> colors [ 100 ] 93 # not 215 >>> \u56e0\u4e3a\u5c3e\u90e8\u5bf9\u4e0d\u4e0a\uff0c\u6240\u4ee5\u6709\u5fc5\u8981\u67e5\u770b\u4e2d\u95f4\u6709\u6ca1\u6709\u5bf9\u4e0d\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ 1 for i , j in zip ( data1 , data2 ) if i != j ] print ( sum ( lst )) >>> 9465 \u63a2\u7d22\u4e00\u756a\uff0c\u53d1\u73b0\uff1a\u5c06 data1 \u4e0e data2 \u4e0d\u5339\u914d\u4e4b\u5904\u7684\u6570\u636e ASCII \u7801\u8f6c\uff0c\u6709\u719f\u6089\u7684\u8eab\u5f71 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) lst = [ chr ( i ) for i , j in zip ( data1 , data2 ) if i != j ] print ( lst [: 10 ]) >>> [ 'B' , 'Z' , 'h' , '9' , '1' , 'A' , 'Y' , '&' , 'S' , 'Y' ]","title":"part2"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#part3","text":"\u4f7f\u7528 bz2 \u89e3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from bz2 import decompress from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( text ) >>> b '../ring/bell.html del assert repeat raise or class is exec return except print return switch from exec repeat else not while assert or class class break except assert yield finally ../ring/bell.html assert ../ring/bell.html ... \u5206\u6790\u89e3\u7801\u540e\u7684\u5185\u5bb9 \u5305\u542b\u8bb8\u591a Python \u5173\u952e\u5b57\uff08\u51c6\u786e\u5730\u8bf4\uff0c\u662f Python2 \u7684\u5173\u952e\u5b57\uff09 \u6709\u8bb8\u591a\u5185\u5bb9\u662f\u91cd\u590d\u7684 \u5148\u53bb\u5173\u952e\u5b57\uff0c\u518d\u53bb\u91cd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from bz2 import decompress from keyword import iskeyword from PIL import Image img = Image . open ( \"zigzag.gif\" ) colors = img . getpalette ()[:: 3 ] data1 = list ( img . getdata ()) data2 = [ colors [ i ] for i in data1 ] data1 . append ( data1 . pop ( 0 )) s = [ i for i , j in zip ( data1 , data2 ) if i != j ] text = decompress ( bytes ( s )) print ( set ([ w for w in text . split () if not iskeyword ( w . decode ())])) >>> { b 'switch' , b 'exec' , b '../ring/bell.html' , b 'repeat' , b 'print' } \u8bf4\u660e\uff1a\u5728 Python3 \u4e2d\uff0c exec \u4e0e print \u5df2\u7ecf\u4e0d\u662f\u5173\u952e\u5b57\u4e86\uff0c\u6240\u4ee5\u4f5c\u8005\u7684\u539f\u610f\u662f ../ring/bell.html repeat switch \u7ecf\u68c0\u9a8c\uff0c\u8d26\u53f7\u662f repeat \uff0c\u5bc6\u7801\u662f switch","title":"part3"},{"location":"PythonChallenge/Solutions/27_between_the_tables/#5","text":"http://www.pythonchallenge.com/pc/ring/bell.html \u8d26\u53f7\uff1a repeat \u5bc6\u7801\uff1a switch","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/","text":"\u7b2c 28 \u9898 many pairs ring-ring Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/bell.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 RING-RING-RING say it out loud 4. \u89e3\u6cd5 Link part1 Link \u6309\u7b2c\u4e00\u6761\u63d0\u793a\uff0c Ring-Ring-Ring \u5730\u591a\u8bfb\u51e0\u904d\uff0c\u50cf\u7b2c 5 \u9898\u7684 pickle \u90a3\u6837\uff0c\u53ef\u4ee5\u8bfb\u51fa green \u4fee\u6539\u7f51\u5740\uff0c\u53bb\u5230\uff1a http://www.pythonchallenge.com/pc/ring/green.html \uff0c\u770b\u5230 yes! green! part2 Link \u67e5\u770b\u56fe\u7247\u662f R, G, B, A \u8fd8\u662f R, G, B \u7684\uff0c\u5373\u68c0\u9a8c\u662f\u5426\u5b58\u5728 \u03b1 \u901a\u9053 >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () ( 'R' , 'G' , 'B' ) >>> \u4f7f\u7528 Image.split() \u5206\u79bb\u989c\u8272\uff0c\u867d\u7136\u53ea\u9700\u8981 green \uff0c\u4f46\u53e6\u4e24\u79cd\u989c\u8272\u4e5f\u4e0d\u59a8\u770b\u4e00\u4e0b >>> red , green , blue = img . split () >>> red . show () >>> green . show () >>> blue . show () >>> green . save ( \"green.png\" ) >>> \u63a2\u7d22 green.png \u7684\u50cf\u7d20\u503c >>> data = list ( green . getdata ()) >>> data [: 10 ] [ 55 , 97 , 73 , 115 , 120 , 78 , 60 , 102 , 76 , 118 ] >>> [ data [ i ] - data [ i + 1 ] for i in range ( 0 , 10 , 2 )] [ - 42 , - 42 , 42 , - 42 , - 42 ] >>> \u9898\u5916\u8bdd\uff1a\u300a\u94f6\u6cb3\u7cfb\u6f2b\u6e38\u6307\u5357\u300b\u91cc\uff0c\u201c\u751f\u547d\u3001\u5b87\u5b99\u4ee5\u53ca\u4efb\u4f55\u4e8b\u60c5\u7684\u7ec8\u6781\u7b54\u6848\u201d\u4e3a 42 \u4e0a\u4e00\u9898\u7684 zigzag \u770b\u4f3c\u7b26\u5408\u89c4\u5f8b\uff0c\u4f46\u5176\u4e2d\u6709 9465 \u4e2a\u4f8b\u5916\uff0c\u8fd9\u4e00\u9898\u4e5f\u662f >>> t = [ abs ( i - j ) for i , j in zip ( data [ 1 :: 2 ], data [:: 2 ]) if abs ( i - j ) != 42 ] >>> t [ 119 , 104 , 111 , 100 , 117 , 110 , 110 , 105 , 116 , 40 , 41 , 46 , 115 , 112 , 108 , 105 , 116 , 40 , 41 , 91 , 48 , 93 , 32 , 63 ] >>> len ( t ) 24 >>> \u8f6c ASCII \uff0c\u7136\u540e\u6253\u5370\u4e00\u4e0b >>> bytes ( t ) b 'whodunnit().split()[0] ?' >>> part3 Link \u5fc5\u5e94\u8bcd\u5178\u4e2d whodunit \u7684\u542b\u4e49 \u3008\u7f8e\u4fda\u3009\u4fa6\u63a2\u5c0f\u8bf4[\u620f\u5267,\u5f71\u7247\u7b49] \u7f51\u7edc\u63a8\u7406\u5c0f\u8bf4\uff1b\u4fa6\u63a2\u6545\u4e8b\uff1b\u8c01\u662f\u51f6\u624b \u6309\u7b2c\u4e8c\u6761\u63d0\u793a say it out loud \uff0c whodunit \u8bfb\u8d77\u6765\u50cf\u662f who done it \u8fd9\u91cc\u662f\u8bf4\u8c01\u521b\u9020\u4e86 Python \uff0c\u5f53\u7136\u662f Guido van Rossum \u6b64\u5916\uff0c Guido \u8bfb\u8d77\u6765\u50cf\u662f gui do \uff1a gui \u53d4\u505a\u4e86\u8fd9\u4e00\u5207 >>> \"Guido van Rossum\" . split ()[ 0 ] 'Guido' >>> \u5927\u5199\u4e0d\u884c\uff0c\u8f6c\u6210\u5c0f\u5199\u5373\u662f\u89e3 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/guido.html","title":"28 many pairs ring-ring"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#28-many-pairs-ring-ring","text":"","title":"\u7b2c 28 \u9898 many pairs ring-ring"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#1","text":">>> http://www.pythonchallenge.com/pc/ring/bell.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#3","text":"\u7f51\u9875\u5185 RING-RING-RING say it out loud","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#part1","text":"\u6309\u7b2c\u4e00\u6761\u63d0\u793a\uff0c Ring-Ring-Ring \u5730\u591a\u8bfb\u51e0\u904d\uff0c\u50cf\u7b2c 5 \u9898\u7684 pickle \u90a3\u6837\uff0c\u53ef\u4ee5\u8bfb\u51fa green \u4fee\u6539\u7f51\u5740\uff0c\u53bb\u5230\uff1a http://www.pythonchallenge.com/pc/ring/green.html \uff0c\u770b\u5230 yes! green!","title":"part1"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#part2","text":"\u67e5\u770b\u56fe\u7247\u662f R, G, B, A \u8fd8\u662f R, G, B \u7684\uff0c\u5373\u68c0\u9a8c\u662f\u5426\u5b58\u5728 \u03b1 \u901a\u9053 >>> from PIL import Image >>> img = Image . open ( \"bell.png\" ) >>> img . getbands () ( 'R' , 'G' , 'B' ) >>> \u4f7f\u7528 Image.split() \u5206\u79bb\u989c\u8272\uff0c\u867d\u7136\u53ea\u9700\u8981 green \uff0c\u4f46\u53e6\u4e24\u79cd\u989c\u8272\u4e5f\u4e0d\u59a8\u770b\u4e00\u4e0b >>> red , green , blue = img . split () >>> red . show () >>> green . show () >>> blue . show () >>> green . save ( \"green.png\" ) >>> \u63a2\u7d22 green.png \u7684\u50cf\u7d20\u503c >>> data = list ( green . getdata ()) >>> data [: 10 ] [ 55 , 97 , 73 , 115 , 120 , 78 , 60 , 102 , 76 , 118 ] >>> [ data [ i ] - data [ i + 1 ] for i in range ( 0 , 10 , 2 )] [ - 42 , - 42 , 42 , - 42 , - 42 ] >>> \u9898\u5916\u8bdd\uff1a\u300a\u94f6\u6cb3\u7cfb\u6f2b\u6e38\u6307\u5357\u300b\u91cc\uff0c\u201c\u751f\u547d\u3001\u5b87\u5b99\u4ee5\u53ca\u4efb\u4f55\u4e8b\u60c5\u7684\u7ec8\u6781\u7b54\u6848\u201d\u4e3a 42 \u4e0a\u4e00\u9898\u7684 zigzag \u770b\u4f3c\u7b26\u5408\u89c4\u5f8b\uff0c\u4f46\u5176\u4e2d\u6709 9465 \u4e2a\u4f8b\u5916\uff0c\u8fd9\u4e00\u9898\u4e5f\u662f >>> t = [ abs ( i - j ) for i , j in zip ( data [ 1 :: 2 ], data [:: 2 ]) if abs ( i - j ) != 42 ] >>> t [ 119 , 104 , 111 , 100 , 117 , 110 , 110 , 105 , 116 , 40 , 41 , 46 , 115 , 112 , 108 , 105 , 116 , 40 , 41 , 91 , 48 , 93 , 32 , 63 ] >>> len ( t ) 24 >>> \u8f6c ASCII \uff0c\u7136\u540e\u6253\u5370\u4e00\u4e0b >>> bytes ( t ) b 'whodunnit().split()[0] ?' >>>","title":"part2"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#part3","text":"\u5fc5\u5e94\u8bcd\u5178\u4e2d whodunit \u7684\u542b\u4e49 \u3008\u7f8e\u4fda\u3009\u4fa6\u63a2\u5c0f\u8bf4[\u620f\u5267,\u5f71\u7247\u7b49] \u7f51\u7edc\u63a8\u7406\u5c0f\u8bf4\uff1b\u4fa6\u63a2\u6545\u4e8b\uff1b\u8c01\u662f\u51f6\u624b \u6309\u7b2c\u4e8c\u6761\u63d0\u793a say it out loud \uff0c whodunit \u8bfb\u8d77\u6765\u50cf\u662f who done it \u8fd9\u91cc\u662f\u8bf4\u8c01\u521b\u9020\u4e86 Python \uff0c\u5f53\u7136\u662f Guido van Rossum \u6b64\u5916\uff0c Guido \u8bfb\u8d77\u6765\u50cf\u662f gui do \uff1a gui \u53d4\u505a\u4e86\u8fd9\u4e00\u5207 >>> \"Guido van Rossum\" . split ()[ 0 ] 'Guido' >>> \u5927\u5199\u4e0d\u884c\uff0c\u8f6c\u6210\u5c0f\u5199\u5373\u662f\u89e3","title":"part3"},{"location":"PythonChallenge/Solutions/28_many_pairs_ring-ring/#5","text":"http://www.pythonchallenge.com/pc/ring/guido.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/29_silence/","text":"\u7b2c 29 \u9898 silence! Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/guido.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca\uff1a\u6ca1\u6709\u6ce8\u91ca\uff0c\u4f46\u5176\u4e2d 73 \u884c\u7a7a\u884c 4. \u89e3\u6cd5 Link part1 Link \u56fe\u4e2d\u6709\u8bb8\u591a\u73bb\u7483\u5236\u54c1\uff0c\u4e8e\u662f\uff0c\u5c06\u7f51\u5740\u672b\u5c3e\u6539\u4e3a glass \u8fdb\u5165 http://www.pythonchallenge.com/pc/ring/glass.html \u540e\uff0c\u5f97\u5230 yes. this is a glass. part2 Link \u4e4b\u524d\u5728\u7f51\u4e0a\u89c1\u5230\u6709\u4eba\u5728\u8bba\u6587\u672b\u5c3e\u52a0\u5165\u6587\u5b57\u5e76\u5c06\u5176\u6539\u4e3a\u767d\u8272\u4ee5\u51d1\u5b57\u6570\uff0c\u6b64\u5904\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999 \u6211\u8bd5\u7740\u4ece\u4e0b\u5f80\u4e0a\u9009\u62e9\uff0c\u6ca1\u60f3\u5230\u6709\u201c\u5185\u5bb9\u201d\uff08\u5176\u5b9e\u662f\u7a7a\u683c\uff09\uff0c\u6211\u5c06\u5176\u590d\u5236\u4e0b\u6765\uff0c\u4fdd\u5b58\u5728\u6587\u4ef6 silence.txt \u65e2\u7136\u90fd\u662f\u7a7a\u683c\uff0c\u90a3\u4e48\u5927\u6982\u7387\u4e0e\u7a7a\u683c\u7684\u6570\u91cf\u6709\u5173 1 2 3 4 5 6 7 8 9 f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) print ( bytes ( lst )) f . close () >>> b 'BZh91AY&SY \\xd9\\xc2 p \\x18\\x00\\x00\\x04\\x9d\\x80 ` \\x80\\x00\\x00\\x80 ./ \\x9c \\x00 1L \\x98\\x99\\x06 F \\x11 2hd \\x06 jUd \\xb9\\x9e\\xc6\\x18\\xc5\\x92 RH \\xe5 Z\" \\x01\\xba\\xa7\\x80\\x7f\\x8b\\xb9 \" \\x9c (Hl \\xe1 8 \\x0c\\x00\\x00 ' part3 Link \u4f7f\u7528 bz2 \u89e3\u538b\u7f29 1 2 3 4 5 6 7 8 9 10 11 12 13 from bz2 import decompress f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) f . close () t = bytes ( lst ) print ( decompress ( t )) >>> b \"Isn't it clear? I am yankeedoodle!\" \u5173\u952e\u5b57\uff1a yankeedoodle \u641c\u7d22\u5f97\u77e5\uff1a\u626c\u57fa\u00b7\u675c\u5fb7\u5c14\u53c8\u53eb\u626c\u57fa\u66f2\u3001\u626c\u57fa\u5c0f\u8c03 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/yankeedoodle.html","title":"29 silence"},{"location":"PythonChallenge/Solutions/29_silence/#29-silence","text":"","title":"\u7b2c 29 \u9898 silence!"},{"location":"PythonChallenge/Solutions/29_silence/#1","text":">>> http://www.pythonchallenge.com/pc/ring/guido.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/29_silence/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/29_silence/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca\uff1a\u6ca1\u6709\u6ce8\u91ca\uff0c\u4f46\u5176\u4e2d 73 \u884c\u7a7a\u884c","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/29_silence/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/29_silence/#part1","text":"\u56fe\u4e2d\u6709\u8bb8\u591a\u73bb\u7483\u5236\u54c1\uff0c\u4e8e\u662f\uff0c\u5c06\u7f51\u5740\u672b\u5c3e\u6539\u4e3a glass \u8fdb\u5165 http://www.pythonchallenge.com/pc/ring/glass.html \u540e\uff0c\u5f97\u5230 yes. this is a glass.","title":"part1"},{"location":"PythonChallenge/Solutions/29_silence/#part2","text":"\u4e4b\u524d\u5728\u7f51\u4e0a\u89c1\u5230\u6709\u4eba\u5728\u8bba\u6587\u672b\u5c3e\u52a0\u5165\u6587\u5b57\u5e76\u5c06\u5176\u6539\u4e3a\u767d\u8272\u4ee5\u51d1\u5b57\u6570\uff0c\u6b64\u5904\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999 \u6211\u8bd5\u7740\u4ece\u4e0b\u5f80\u4e0a\u9009\u62e9\uff0c\u6ca1\u60f3\u5230\u6709\u201c\u5185\u5bb9\u201d\uff08\u5176\u5b9e\u662f\u7a7a\u683c\uff09\uff0c\u6211\u5c06\u5176\u590d\u5236\u4e0b\u6765\uff0c\u4fdd\u5b58\u5728\u6587\u4ef6 silence.txt \u65e2\u7136\u90fd\u662f\u7a7a\u683c\uff0c\u90a3\u4e48\u5927\u6982\u7387\u4e0e\u7a7a\u683c\u7684\u6570\u91cf\u6709\u5173 1 2 3 4 5 6 7 8 9 f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) print ( bytes ( lst )) f . close () >>> b 'BZh91AY&SY \\xd9\\xc2 p \\x18\\x00\\x00\\x04\\x9d\\x80 ` \\x80\\x00\\x00\\x80 ./ \\x9c \\x00 1L \\x98\\x99\\x06 F \\x11 2hd \\x06 jUd \\xb9\\x9e\\xc6\\x18\\xc5\\x92 RH \\xe5 Z\" \\x01\\xba\\xa7\\x80\\x7f\\x8b\\xb9 \" \\x9c (Hl \\xe1 8 \\x0c\\x00\\x00 '","title":"part2"},{"location":"PythonChallenge/Solutions/29_silence/#part3","text":"\u4f7f\u7528 bz2 \u89e3\u538b\u7f29 1 2 3 4 5 6 7 8 9 10 11 12 13 from bz2 import decompress f = open ( \"silence.txt\" ) lst = [] for i in range ( 73 ): lst . append ( len ( f . readline () . rstrip ( ' \\n ' ))) f . close () t = bytes ( lst ) print ( decompress ( t )) >>> b \"Isn't it clear? I am yankeedoodle!\" \u5173\u952e\u5b57\uff1a yankeedoodle \u641c\u7d22\u5f97\u77e5\uff1a\u626c\u57fa\u00b7\u675c\u5fb7\u5c14\u53c8\u53eb\u626c\u57fa\u66f2\u3001\u626c\u57fa\u5c0f\u8c03","title":"part3"},{"location":"PythonChallenge/Solutions/29_silence/#5","text":"http://www.pythonchallenge.com/pc/ring/yankeedoodle.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/","text":"\u7b2c 30 \u9898 relax you are on 30 Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/yankeedoodle.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u5185 The picture is only meant to help you relax \u7f51\u9875\u6e90\u7801\u6ce8\u91ca while you look at the csv file 4. \u89e3\u6cd5 Link part1 Link \u9898\u56fe\u662f\u4f5c\u8005\u8ba9\u6211\u4eec\u653e\u677e\u5fc3\u60c5\u7684 \u81f3\u4e8e csv \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u5c06\u7f51\u5740\u540e\u7f00\u6539\u4e3a csv \uff0c\u5982\u6b64\u53ef\u4ee5\u4e0b\u8f7d\u5230\u6587\u4ef6 yankeedoodle.csv \u53ef\u4ee5\u4f7f\u7528 Excel \u6253\u5f00\u770b\u770b\uff0c\u90fd\u662f\u6570\u5b57 \u4f7f\u7528 Python \u7b97\u4e00\u4e0b\u6570\u636e\u6570\u91cf >>> f = open ( \"yankeedoodle.csv\" ) >>> nums = [ num . strip () for num in f . read () . split ( ',' )] >>> len ( nums ) 7367 >>> \u5c06 7367 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 7367 ) >>> [ 53 , 139 ] 53 \u4e0e 139 \u6b63\u597d\u53ef\u4ee5\u4f5c\u4e3a width \u6216 height \u7ecf\u68c0\u9a8c\uff0c w = 53, h = 139 part2 Link \u5c06\u6570\u636e\u8f6c\u6362\u6210 53X139 \u7684\u56fe\u50cf 1 2 3 4 5 6 7 8 from PIL import Image f = open ( \"yankeedoodle.csv\" ) nums = [ float ( num . strip ()) for num in f . read () . split ( ',' )] img = Image . new ( 'P' , ( 53 , 139 )) img . putdata ( nums , 256 ) img . save ( \"30_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247 part3 Link \u56fe\u7247\u9700\u8981\u7ffb\u8f6c\u4e00\u4e0b 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c\u8f6c tmp . save ( \"30_result2.png\" ) \u5f97\u5230\u6b63\u5e38\u89c6\u89d2\u7684\u56fe\u7247 part4 Link \u6309\u4e0a\u56fe\u7684\u516c\u5f0f\u505a 1 2 3 4 5 6 7 8 9 10 f = open ( \"yankeedoodle.csv\" ) nums = [ num . strip () for num in f . read () . split ( ',' )] f . close () res = [ int ( x [ 0 ][ 5 ] + x [ 1 ][ 5 ] + x [ 2 ][ 6 ]) for x in zip ( nums [ 0 :: 3 ], nums [ 1 :: 3 ], nums [ 2 :: 3 ])] print ( '' . join ([ chr ( e ) for e in res ])) >>> So , you found the hidden message . There is lots of room here for a long message , but we only need very little space to say \"look at grandpa\" , so the rest is just garbage . VTZ . l '\u007ftf*Om@I\"p]#R`cWEBZ40ofSC>OZFkRP0\\)+b?Ir)S%Jt3f{ei%n2<FErFx~IzVm JTh =xdx++' de8C5 '|>2\\/We;ib(b %d $N<2u(o$*d@.*6F\u007fd' nW5 #J!}a]T\"1Q-7Y~bOF]T+^9d]e^J^=&I&<x|EEgdQ$$pX'f!_n>F0... \u5173\u952e\u5b57\uff1a grandpa \u4e4b\u540e\u7684 gibberish \u90fd\u53ef\u4ee5\u5ffd\u7565 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/ring/grandpa.html","title":"30 relax you are on 30"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#30-relax-you-are-on-30","text":"","title":"\u7b2c 30 \u9898 relax you are on 30"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#1","text":">>> http://www.pythonchallenge.com/pc/ring/yankeedoodle.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#3","text":"\u7f51\u9875\u5185 The picture is only meant to help you relax \u7f51\u9875\u6e90\u7801\u6ce8\u91ca while you look at the csv file","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part1","text":"\u9898\u56fe\u662f\u4f5c\u8005\u8ba9\u6211\u4eec\u653e\u677e\u5fc3\u60c5\u7684 \u81f3\u4e8e csv \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u5c06\u7f51\u5740\u540e\u7f00\u6539\u4e3a csv \uff0c\u5982\u6b64\u53ef\u4ee5\u4e0b\u8f7d\u5230\u6587\u4ef6 yankeedoodle.csv \u53ef\u4ee5\u4f7f\u7528 Excel \u6253\u5f00\u770b\u770b\uff0c\u90fd\u662f\u6570\u5b57 \u4f7f\u7528 Python \u7b97\u4e00\u4e0b\u6570\u636e\u6570\u91cf >>> f = open ( \"yankeedoodle.csv\" ) >>> nums = [ num . strip () for num in f . read () . split ( ',' )] >>> len ( nums ) 7367 >>> \u5c06 7367 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 7367 ) >>> [ 53 , 139 ] 53 \u4e0e 139 \u6b63\u597d\u53ef\u4ee5\u4f5c\u4e3a width \u6216 height \u7ecf\u68c0\u9a8c\uff0c w = 53, h = 139","title":"part1"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part2","text":"\u5c06\u6570\u636e\u8f6c\u6362\u6210 53X139 \u7684\u56fe\u50cf 1 2 3 4 5 6 7 8 from PIL import Image f = open ( \"yankeedoodle.csv\" ) nums = [ float ( num . strip ()) for num in f . read () . split ( ',' )] img = Image . new ( 'P' , ( 53 , 139 )) img . putdata ( nums , 256 ) img . save ( \"30_result.png\" ) \u5f97\u5230\u4e00\u5f20\u56fe\u7247","title":"part2"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part3","text":"\u56fe\u7247\u9700\u8981\u7ffb\u8f6c\u4e00\u4e0b 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c\u8f6c tmp . save ( \"30_result2.png\" ) \u5f97\u5230\u6b63\u5e38\u89c6\u89d2\u7684\u56fe\u7247","title":"part3"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#part4","text":"\u6309\u4e0a\u56fe\u7684\u516c\u5f0f\u505a 1 2 3 4 5 6 7 8 9 10 f = open ( \"yankeedoodle.csv\" ) nums = [ num . strip () for num in f . read () . split ( ',' )] f . close () res = [ int ( x [ 0 ][ 5 ] + x [ 1 ][ 5 ] + x [ 2 ][ 6 ]) for x in zip ( nums [ 0 :: 3 ], nums [ 1 :: 3 ], nums [ 2 :: 3 ])] print ( '' . join ([ chr ( e ) for e in res ])) >>> So , you found the hidden message . There is lots of room here for a long message , but we only need very little space to say \"look at grandpa\" , so the rest is just garbage . VTZ . l '\u007ftf*Om@I\"p]#R`cWEBZ40ofSC>OZFkRP0\\)+b?Ir)S%Jt3f{ei%n2<FErFx~IzVm JTh =xdx++' de8C5 '|>2\\/We;ib(b %d $N<2u(o$*d@.*6F\u007fd' nW5 #J!}a]T\"1Q-7Y~bOF]T+^9d]e^J^=&I&<x|EEgdQ$$pX'f!_n>F0... \u5173\u952e\u5b57\uff1a grandpa \u4e4b\u540e\u7684 gibberish \u90fd\u53ef\u4ee5\u5ffd\u7565","title":"part4"},{"location":"PythonChallenge/Solutions/30_relax_you_are_on_30/#5","text":"http://www.pythonchallenge.com/pc/ring/grandpa.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/31_where_am_I/","text":"\u7b2c 31 \u9898 Where am I? Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/ring/grandpa.html 2. \u56fe\u7247 Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca short break, this REALLY has nothing to do with Python 4. \u89e3\u6cd5 Link part1 Link \u70b9\u51fb\u56fe\u7247\uff0c\u6709\u63d0\u793a \"island : country\" \u770b\u6765\uff0c\u53c8\u8981\u66f4\u6362\u8d26\u53f7\u3001\u5bc6\u7801\u4e86 \u800c\u4e14\uff0c\u8d26\u53f7\u662f\u5c9b\u5c7f\u540d\u79f0\uff0c\u5bc6\u7801\u662f\u56fd\u5bb6\u540d\u79f0 \u4f5c\u8005\u8bf4\u8fd9\u91cc\u7684\u64cd\u4f5c\u4e0e Python \u7684\u5173\u7cfb\u4e0d\u5927\uff0c\u90a3\u5c31\u4f7f\u7528\u767e\u5ea6\u8bc6\u56fe\u5427 \u5c9b\u5c7f\uff1a\u82cf\u6885\u5c9b kohsamui \u56fd\u5bb6\uff1a\u6cf0\u56fd thailand part2 Link \u8f93\u5165\u8d26\u53f7\u3001\u5bc6\u7801\u540e\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/rock/grandpa.html \u65b0\u7684\u6807\u9898\uff1a UFOs ? \u65b0\u7684\u9898\u56fe \u65b0\u7684\u63d0\u793a\u8bed That was too easy. You are still on 31... \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u6bb5\u975e\u6ce8\u91ca\u5728\u5047\u88c5 HTML \u8bed\u53e5 <window left=\"0.34\" top=\"0.57\" width=\"0.036\" height=\"0.027\"/> <option iterations=\"128\"/> part3 Link \u56fe\u7247\u770b\u7740\u50cf\u201c\u79d1\u8d6b\u96ea\u82b1\u201d\uff0c\u4e0d\u8fc7\u56fe\u7247\u88ab\u547d\u540d\u4e3a mandelbrot \u641c\u7d22\u5f97\u77e5\u6b64\u4e3a\uff1a mandelbrot \u56fe \u5c06\u56fe\u7247\u653e\u5927\uff0c\u4f1a\u53d1\u73b0\u56fe\u7247\u4e2d\u6709\u8bb8\u591a\u70b9\u88ab\u6539\u52a8\u8fc7 part4 Link \u81ea\u5df1\u751f\u6210\u4e00\u5f20 mandelbrot \u56fe\uff0c\u5bf9\u6bd4\u65b0\u9898\u56fe left, top, width, height \uff0c\u662f\u8ba1\u7b97\u7684\u754c\u9650\uff08top \u6709\u4e89\u8bae\uff09 \u7ecf\u5178\u56fe\u5982\u4e0b \u5173\u4e8e\u4e0a\u56fe\u7684\u8bf4\u660e \u539f\u70b9\u5927\u7ea6\u5728\u56fe\u4e2d\u7684 O \u5904 left \u7b49\u56db\u4e2a\u6570\u5b57\u6846\u4f4f\u7684\u8303\u56f4\u5927\u7ea6\u5728\u56fe\u4e2d\u53f3\u4e0a\u89d2\u7684\u65b9\u6846\u5904 \u5728\u4e8c\u7ef4\u56fe\u50cf (x\uff0cy) \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u552f\u4e00\u5730\u5bf9\u5e94\u4e00\u4e2a\u590d\u6570 c \u5176\u5b9e\u90e8\u4e3a left + x * width/img_size_w \u5176\u865a\u90e8\u4e3a top + y * height/img_size_h part5 Link z = 0 + 0j \u91cd\u590d\u8ba1\u7b97 z = z * z + c \u5982\u679c z \u6536\u655b\uff0c\u5219\u663e\u793a\u8fd9\u4e2a\u50cf\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from PIL import Image left , top = 0.34 , 0.57 # 0.34 + 0.57i width , height = 0.036 , 0.027 iterations = 128 img1 = Image . open ( \"mandelbrot.gif\" ) w , h = img1 . size rx , ry = width / w , height / h res = [] for y in range ( h - 1 , - 1 , - 1 ): # \u8c8c\u4f3c 0.57 \u662f bottom\uff0c\u4f5c\u8005\u8bef\u5199\u6210\u4e86 top\uff0c\u6545\u5e94\u4ece\u4e0b\u5f80\u4e0a\u8d70 for x in range ( w ): c = complex ( left + x * rx , top + y * ry ) z = 0 + 0 j for i in range ( iterations ): z = z * z + c if abs ( z ) > 2 : break res . append ( i ) img2 = img1 . copy () img2 . putdata ( res ) img2 . save ( \"31_mandelbrot_clean.gif\" ) \u5f97\u5230\u56fe\u50cf part6 Link \u627e\u51fa\u4e0d\u540c\u70b9 1 2 3 4 5 6 7 8 9 10 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] print ( len ( diff )) # \u8fd9\u4e9b\u70b9\u7684\u7edd\u5bf9\u503c\u5747\u662f 16 >>> 1679 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): # level 30 \u7528\u8fc7 factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 1679 ) >>> [ 23 , 73 ] \u7ecf\u68c0\u9a8c\uff0c w = 23, h = 73 \u65f6\u53ef\u6210\u56fe 1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . save ( \"plot.gif\" ) \u5f97\u5230\u4e00\u5f20\u5355\u8272\u56fe \u6b64\u56fe\u4e3a\u201c\u963f\u96f7\u897f\u535a\u4fe1\u606f\u201d arecibo In 1974, the Arecibo Message[1] was sent into space via radio-waves from the Arecibo Observatory. \u9898\u5916\u8bdd\uff1a\u300a\u4e09\u4f53\u300b\u4e2d\uff0c\u53f6\u6587\u6d01\u5728 1971 \u5e74\u4e5f\u505a\u8fc7\u5dee\u4e0d\u591a\u7684\u4e8b\u3002\u3002\u3002\u602a\u4e0d\u5f97\u65b0\u6807\u9898\u662f UFO ? 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/rock/arecibo.html","title":"31 where am I"},{"location":"PythonChallenge/Solutions/31_where_am_I/#31-where-am-i","text":"","title":"\u7b2c 31 \u9898 Where am I?"},{"location":"PythonChallenge/Solutions/31_where_am_I/#1","text":">>> http://www.pythonchallenge.com/pc/ring/grandpa.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/31_where_am_I/#2","text":"","title":"2. \u56fe\u7247"},{"location":"PythonChallenge/Solutions/31_where_am_I/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca short break, this REALLY has nothing to do with Python","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/31_where_am_I/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part1","text":"\u70b9\u51fb\u56fe\u7247\uff0c\u6709\u63d0\u793a \"island : country\" \u770b\u6765\uff0c\u53c8\u8981\u66f4\u6362\u8d26\u53f7\u3001\u5bc6\u7801\u4e86 \u800c\u4e14\uff0c\u8d26\u53f7\u662f\u5c9b\u5c7f\u540d\u79f0\uff0c\u5bc6\u7801\u662f\u56fd\u5bb6\u540d\u79f0 \u4f5c\u8005\u8bf4\u8fd9\u91cc\u7684\u64cd\u4f5c\u4e0e Python \u7684\u5173\u7cfb\u4e0d\u5927\uff0c\u90a3\u5c31\u4f7f\u7528\u767e\u5ea6\u8bc6\u56fe\u5427 \u5c9b\u5c7f\uff1a\u82cf\u6885\u5c9b kohsamui \u56fd\u5bb6\uff1a\u6cf0\u56fd thailand","title":"part1"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part2","text":"\u8f93\u5165\u8d26\u53f7\u3001\u5bc6\u7801\u540e\uff0c\u6765\u5230 http://www.pythonchallenge.com/pc/rock/grandpa.html \u65b0\u7684\u6807\u9898\uff1a UFOs ? \u65b0\u7684\u9898\u56fe \u65b0\u7684\u63d0\u793a\u8bed That was too easy. You are still on 31... \u7f51\u9875\u6e90\u7801\u4e2d\u6709\u4e00\u6bb5\u975e\u6ce8\u91ca\u5728\u5047\u88c5 HTML \u8bed\u53e5 <window left=\"0.34\" top=\"0.57\" width=\"0.036\" height=\"0.027\"/> <option iterations=\"128\"/>","title":"part2"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part3","text":"\u56fe\u7247\u770b\u7740\u50cf\u201c\u79d1\u8d6b\u96ea\u82b1\u201d\uff0c\u4e0d\u8fc7\u56fe\u7247\u88ab\u547d\u540d\u4e3a mandelbrot \u641c\u7d22\u5f97\u77e5\u6b64\u4e3a\uff1a mandelbrot \u56fe \u5c06\u56fe\u7247\u653e\u5927\uff0c\u4f1a\u53d1\u73b0\u56fe\u7247\u4e2d\u6709\u8bb8\u591a\u70b9\u88ab\u6539\u52a8\u8fc7","title":"part3"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part4","text":"\u81ea\u5df1\u751f\u6210\u4e00\u5f20 mandelbrot \u56fe\uff0c\u5bf9\u6bd4\u65b0\u9898\u56fe left, top, width, height \uff0c\u662f\u8ba1\u7b97\u7684\u754c\u9650\uff08top \u6709\u4e89\u8bae\uff09 \u7ecf\u5178\u56fe\u5982\u4e0b \u5173\u4e8e\u4e0a\u56fe\u7684\u8bf4\u660e \u539f\u70b9\u5927\u7ea6\u5728\u56fe\u4e2d\u7684 O \u5904 left \u7b49\u56db\u4e2a\u6570\u5b57\u6846\u4f4f\u7684\u8303\u56f4\u5927\u7ea6\u5728\u56fe\u4e2d\u53f3\u4e0a\u89d2\u7684\u65b9\u6846\u5904 \u5728\u4e8c\u7ef4\u56fe\u50cf (x\uff0cy) \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u552f\u4e00\u5730\u5bf9\u5e94\u4e00\u4e2a\u590d\u6570 c \u5176\u5b9e\u90e8\u4e3a left + x * width/img_size_w \u5176\u865a\u90e8\u4e3a top + y * height/img_size_h","title":"part4"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part5","text":"z = 0 + 0j \u91cd\u590d\u8ba1\u7b97 z = z * z + c \u5982\u679c z \u6536\u655b\uff0c\u5219\u663e\u793a\u8fd9\u4e2a\u50cf\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from PIL import Image left , top = 0.34 , 0.57 # 0.34 + 0.57i width , height = 0.036 , 0.027 iterations = 128 img1 = Image . open ( \"mandelbrot.gif\" ) w , h = img1 . size rx , ry = width / w , height / h res = [] for y in range ( h - 1 , - 1 , - 1 ): # \u8c8c\u4f3c 0.57 \u662f bottom\uff0c\u4f5c\u8005\u8bef\u5199\u6210\u4e86 top\uff0c\u6545\u5e94\u4ece\u4e0b\u5f80\u4e0a\u8d70 for x in range ( w ): c = complex ( left + x * rx , top + y * ry ) z = 0 + 0 j for i in range ( iterations ): z = z * z + c if abs ( z ) > 2 : break res . append ( i ) img2 = img1 . copy () img2 . putdata ( res ) img2 . save ( \"31_mandelbrot_clean.gif\" ) \u5f97\u5230\u56fe\u50cf","title":"part5"},{"location":"PythonChallenge/Solutions/31_where_am_I/#part6","text":"\u627e\u51fa\u4e0d\u540c\u70b9 1 2 3 4 5 6 7 8 9 10 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] print ( len ( diff )) # \u8fd9\u4e9b\u70b9\u7684\u7edd\u5bf9\u503c\u5747\u662f 16 >>> 1679 \u5206\u89e3\u8d28\u56e0\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def prime_factorization ( num ): # level 30 \u7528\u8fc7 factor = [] for i in range ( 3 , int ( num ** 0.5 ), 2 ): if num % i == 0 : factor . append ( i ) factor . append ( num // i ) print ( factor ) if __name__ == \"__main__\" : prime_factorization ( 1679 ) >>> [ 23 , 73 ] \u7ecf\u68c0\u9a8c\uff0c w = 23, h = 73 \u65f6\u53ef\u6210\u56fe 1 2 3 4 5 6 7 8 9 from PIL import Image img1 = Image . open ( \"mandelbrot.gif\" ) img2 = Image . open ( \"newMandelbrot.gif\" ) diff = [( i - j ) for i , j in zip ( img1 . getdata (), img2 . getdata ()) if i != j ] plot = Image . new ( 'L' , ( 23 , 73 )) # \u2018L\u2019 \u6bd4 '1' \u6697\u4e00\u4e9b plot . putdata ( diff ) plot . save ( \"plot.gif\" ) \u5f97\u5230\u4e00\u5f20\u5355\u8272\u56fe \u6b64\u56fe\u4e3a\u201c\u963f\u96f7\u897f\u535a\u4fe1\u606f\u201d arecibo In 1974, the Arecibo Message[1] was sent into space via radio-waves from the Arecibo Observatory. \u9898\u5916\u8bdd\uff1a\u300a\u4e09\u4f53\u300b\u4e2d\uff0c\u53f6\u6587\u6d01\u5728 1971 \u5e74\u4e5f\u505a\u8fc7\u5dee\u4e0d\u591a\u7684\u4e8b\u3002\u3002\u3002\u602a\u4e0d\u5f97\u65b0\u6807\u9898\u662f UFO ?","title":"part6"},{"location":"PythonChallenge/Solutions/31_where_am_I/#5","text":"http://www.pythonchallenge.com/pc/rock/arecibo.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/","text":"\u7b2c 32 \u9898 etch-a-scetch Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/rock/arecibo.html 2. \u9898\u56fe Link \u51c6\u786e\u5730\u8bf4\uff0c\u8fd9\u4e00\u9898\u7684\u7f51\u9875\u4e2d\u663e\u793a\u7684\u4e0d\u662f\u56fe\u7247 \u66f4\u50cf\u662f\u7528 Js \u5199\u7684\u5c0f\u6e38\u620f \u622a\u56fe 3. \u63d0\u793a Link \u7f51\u9875\u5185 Fill in the blanks \u7f51\u9875\u6e90\u7801 you are in level 32 for warmup.txt 4. \u89e3\u6cd5 Link part1 Link \u8fdb\u5165 http://www.pythonchallenge.com/pc/rock/warmup.txt \u5f97\u5230 Info # Dimensions 9 9 # Horizontal 2 1 2 1 3 1 5 7 9 3 2 3 2 2 3 2 2 3 2 # Vertical 2 1 3 1 2 3 3 8 9 8 3 1 2 3 2 1 3 \u770b\u6587\u4ef6\u540d\uff0c\u8fd9\u5e94\u8be5\u662f\u70ed\u8eab\u9898 part2 Link \u8fd9\u662f\u4e00\u79cd\u540d\u4e3a Nonograms \u7684\u6e38\u620f\uff0c\u4ece\u7eb5\u5411\u6570\u636e\u770b\uff0c\u5de6\u53f3\u5f88\u6709\u53ef\u80fd\u662f\u5bf9\u79f0\u7684 \u51d1\u6a2a\u5411\u7684 232 \u586b\u4e0a\u7eb5\u6a2a\u552f\u4e00\u7684 9 \u586b\u7eb5\u5411\u7684\u4e24\u4e2a 8 \u6b64\u65f6\u6a2a\u5411\u7b2c 6 \u884c\u5df2\u6ee1\uff0c\u8865\u7eb5\u5411\u7684\u7b2c 3 \u5217\u4e0e\u7b2c 7 \u5217\u7684 3 \u6b64\u65f6\u6a2a\u5411\u7b2c\u4e09\u884c\u5df2\u6ee1 \u6b64\u65f6\u7684\u7b2c 4 \u884c\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u82e5\u7b2c 4 \u884c\u5b9a\u4e0b\uff0c\u5219\u7b2c 1 \u5217\u4e0e\u7b2c 9 \u5217\u4e5f\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u5982\u6b64\uff0c\u6700\u540e\u4e24\u4e2a\u4e5f\u5c31\u5b9a\u4e86 \u6700\u7ec8\u6548\u679c part3 Link \u56fe\u50cf\u662f\u5411\u4e0a\u7684\u7bad\u5934\uff0c\u6545\u5173\u952e\u5b57\u4e3a up \u66f4\u6539\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/rock/up.html \uff0c\u5f97\u5230 You want to go up? Let's scale this up then. Now get serious and solve this. \u70b9\u51fb this \u53ef\u4ee5\u53bb\u5230 http://www.pythonchallenge.com/pc/rock/up.txt \u770b\u5230\u65b0\u7684\u9898\u76ee Info # Dimensions 32 32 # Horizontal lines 3 2 8 10 3 1 1 5 2 1 5 2 1 4 1 1 15 19 6 14 6 1 12 6 1 10 7 2 1 8 6 1 1 2 1 1 1 1 5 1 4 1 5 4 1 4 1 1 1 5 1 1 8 5 2 1 8 6 1 2 1 3 6 3 2 1 6 1 5 1 6 3 2 7 2 3 3 10 4 9 12 1 22 1 21 4 1 17 1 2 8 5 1 2 2 4 5 2 1 1 5 # Vertical lines 5 5 5 3 1 3 1 5 5 6 5 6 9 5 11 5 1 13 6 1 14 6 1 7 12 1 6 1 11 1 3 1 1 1 9 1 3 4 10 8 1 1 2 8 1 10 1 1 1 7 1 10 4 1 1 7 1 3 2 5 2 1 2 6 2 3 2 4 2 1 1 4 1 2 6 3 1 1 1 1 1 12 3 1 2 1 1 1 3 2 7 3 1 2 1 2 2 6 3 1 1 1 1 12 3 1 5 6 3 1 6 4 1 5 4 4 1 1 5 part4 Link \u5f92\u624b\u89e3 32x32 \u7684\u6570\u56fe\uff0c\u5c31\u6bd4\u8f83\u4f24\u8eab\u4f53\u4e86 \u601d\u8def \u9012\u5f52\u5730\u83b7\u53d6\u6bcf\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u65b9\u5f0f \u82e5\u67d0\u4e00\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u4e2d\uff0c\u67d0\u4e00\u70b9\u7684\u503c\u4e0d\u53d8\uff0c\u5219\u8fd9\u4e00\u70b9\u53ef\u4ee5\u88ab\u786e\u5b9a \u7528\u884c/\u5217\u4e2d\u7684\u786e\u5b9a\u70b9\u53bb\u7b5b\u9009\u6389\u5217/\u884c\u4e2d\u4e0d\u7b26\u5408\u8be5\u70b9\u503c\u7684\u7ec4\u5408 \u53cd\u590d\u7b5b\u9009\uff0c\u76f4\u5230\u5269\u4e0b\u552f\u4e00\u7684\u7ec4\u5408\uff08\u4f5c\u8005\u80af\u5b9a\u51d1\u597d\u7684\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def get_data ( filename ): \"\"\" \u83b7\u53d6\u5927\u5c0f\u3001\u6a2a/\u7eb5\u5411\u7ec4\u5408\u65b9\u5f0f \"\"\" f = open ( filename ) flag = - 1 size , hor , ver = [], [], [] data = [ size , hor , ver ] for line in f : if line [ 0 ] == '#' : flag += 1 elif line [ 0 ] == ' \\n ' : pass else : data [ flag ] . append ( list ( map ( int , line . split ()))) return data def get_candidates ( nums , size ): ''' \u7ed9\u51fa\u884c/\u5217\u7684\u7ec4\u5408\u65b9\u5f0f\uff0c\u9012\u5f52\u5730\u83b7\u5f97\u6240\u6709\u7684\u6392\u5217\uff0c# \u4e3a\u9009\u62e9\u6807\u8bb0 ''' n = len ( nums ) candidates = [] length = size - sum ( nums ) - ( n - 1 ) for i in range ( length + 1 ): head = ' ' * i + '#' * nums [ 0 ] len_h = len ( head ) if n == 1 : tail = ' ' * ( size - len_h ) candidates . append ( head + tail ) else : tails = [ ' ' + j for j in get_candidates ( nums [ 1 :], size - len_h - 1 )] candidates . extend ([ head + tail for tail in tails ]) return candidates def init_all_candidates ( w , h , hor , ver ): ''' \u5f97\u5230\u6240\u6709\u884c/\u5217\u7684\u6240\u6709\u6392\u5217 ''' candi_h = [ get_candidates ( hor [ i ], w ) for i in range ( h )] candi_v = [ get_candidates ( ver [ i ], h ) for i in range ( w )] return candi_h , candi_v def filtrate ( candidates , pos , symbol ): ''' \u7b5b\u9009\u51fa\u67d0\u4e00\u884c/\u5217\u7684\u7b26\u5408\u89c4\u5219\u7684\u6392\u5217 ''' if candidates == \"done\" : return candidates return [ line for line in candidates if line [ pos ] == symbol ] def solve ( filename ): size , hor , ver = get_data ( filename ) w , h = size [ 0 ] candi_h , candi_v = init_all_candidates ( w , h , hor , ver ) res = [[ '0' ] * w for _ in range ( h )] cnt , target = 0 , w * h while cnt < target : # \u5148\u9488\u5bf9\u6bcf\u4e00\u884c for row , lines in enumerate ( candi_h ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a cnt += res [ row ] . count ( '0' ) for col in range ( w ): res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) candi_h [ row ] = \"done\" else : for col in range ( w ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ col ] != lines [ 0 ][ col ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) # \u518d\u9488\u5bf9\u6bcf\u4e00\u5217 for col , lines in enumerate ( candi_v ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a for row in range ( h ): if res [ row ][ col ] == '0' : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) candi_v [ col ] = \"done\" else : for row in range ( h ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ row ] != lines [ 0 ][ row ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) return res if __name__ == \"__main__\" : res = solve ( \"up.txt\" ) new = [ '' . join ( line ) + ' \\n ' for line in res ] print ( '' . join ( newu8ff7\u4f60\u9f99\uff1f\u4e0d\uff0c\u662f\u4e00\u6761 Python \u767b\u5165 http://www.pythonchallenge.com/pc/rock/python.html \uff0c\u5f97\u5230 \u56fe\u7247 \u63d0\u793a Congrats! You made it through to the smiling python. \"Free\" as in \"Free speech\", not as in \"free... \u641c\u7d22\u5f97\u77e5\uff0c\u8fd9\u662f\u5f00\u6e90\u793e\u533a\u6d41\u884c\u7684\u4e00\u53e5\u8bdd\uff1a \u201cFree as in Speech\u201d or \u201cFree as in Beer\u201d 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/rock/beer.html","title":"32 etch-a-scetch"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#32-etch-a-scetch","text":"","title":"\u7b2c 32 \u9898 etch-a-scetch"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#1","text":">>> http://www.pythonchallenge.com/pc/rock/arecibo.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#2","text":"\u51c6\u786e\u5730\u8bf4\uff0c\u8fd9\u4e00\u9898\u7684\u7f51\u9875\u4e2d\u663e\u793a\u7684\u4e0d\u662f\u56fe\u7247 \u66f4\u50cf\u662f\u7528 Js \u5199\u7684\u5c0f\u6e38\u620f \u622a\u56fe","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#3","text":"\u7f51\u9875\u5185 Fill in the blanks \u7f51\u9875\u6e90\u7801 you are in level 32 for warmup.txt","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part1","text":"\u8fdb\u5165 http://www.pythonchallenge.com/pc/rock/warmup.txt \u5f97\u5230 Info # Dimensions 9 9 # Horizontal 2 1 2 1 3 1 5 7 9 3 2 3 2 2 3 2 2 3 2 # Vertical 2 1 3 1 2 3 3 8 9 8 3 1 2 3 2 1 3 \u770b\u6587\u4ef6\u540d\uff0c\u8fd9\u5e94\u8be5\u662f\u70ed\u8eab\u9898","title":"part1"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part2","text":"\u8fd9\u662f\u4e00\u79cd\u540d\u4e3a Nonograms \u7684\u6e38\u620f\uff0c\u4ece\u7eb5\u5411\u6570\u636e\u770b\uff0c\u5de6\u53f3\u5f88\u6709\u53ef\u80fd\u662f\u5bf9\u79f0\u7684 \u51d1\u6a2a\u5411\u7684 232 \u586b\u4e0a\u7eb5\u6a2a\u552f\u4e00\u7684 9 \u586b\u7eb5\u5411\u7684\u4e24\u4e2a 8 \u6b64\u65f6\u6a2a\u5411\u7b2c 6 \u884c\u5df2\u6ee1\uff0c\u8865\u7eb5\u5411\u7684\u7b2c 3 \u5217\u4e0e\u7b2c 7 \u5217\u7684 3 \u6b64\u65f6\u6a2a\u5411\u7b2c\u4e09\u884c\u5df2\u6ee1 \u6b64\u65f6\u7684\u7b2c 4 \u884c\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u82e5\u7b2c 4 \u884c\u5b9a\u4e0b\uff0c\u5219\u7b2c 1 \u5217\u4e0e\u7b2c 9 \u5217\u4e5f\u53ea\u6709\u4e00\u79cd\u586b\u6cd5 \u5982\u6b64\uff0c\u6700\u540e\u4e24\u4e2a\u4e5f\u5c31\u5b9a\u4e86 \u6700\u7ec8\u6548\u679c","title":"part2"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part3","text":"\u56fe\u50cf\u662f\u5411\u4e0a\u7684\u7bad\u5934\uff0c\u6545\u5173\u952e\u5b57\u4e3a up \u66f4\u6539\u5730\u5740\uff1a http://www.pythonchallenge.com/pc/rock/up.html \uff0c\u5f97\u5230 You want to go up? Let's scale this up then. Now get serious and solve this. \u70b9\u51fb this \u53ef\u4ee5\u53bb\u5230 http://www.pythonchallenge.com/pc/rock/up.txt \u770b\u5230\u65b0\u7684\u9898\u76ee Info # Dimensions 32 32 # Horizontal lines 3 2 8 10 3 1 1 5 2 1 5 2 1 4 1 1 15 19 6 14 6 1 12 6 1 10 7 2 1 8 6 1 1 2 1 1 1 1 5 1 4 1 5 4 1 4 1 1 1 5 1 1 8 5 2 1 8 6 1 2 1 3 6 3 2 1 6 1 5 1 6 3 2 7 2 3 3 10 4 9 12 1 22 1 21 4 1 17 1 2 8 5 1 2 2 4 5 2 1 1 5 # Vertical lines 5 5 5 3 1 3 1 5 5 6 5 6 9 5 11 5 1 13 6 1 14 6 1 7 12 1 6 1 11 1 3 1 1 1 9 1 3 4 10 8 1 1 2 8 1 10 1 1 1 7 1 10 4 1 1 7 1 3 2 5 2 1 2 6 2 3 2 4 2 1 1 4 1 2 6 3 1 1 1 1 1 12 3 1 2 1 1 1 3 2 7 3 1 2 1 2 2 6 3 1 1 1 1 12 3 1 5 6 3 1 6 4 1 5 4 4 1 1 5","title":"part3"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#part4","text":"\u5f92\u624b\u89e3 32x32 \u7684\u6570\u56fe\uff0c\u5c31\u6bd4\u8f83\u4f24\u8eab\u4f53\u4e86 \u601d\u8def \u9012\u5f52\u5730\u83b7\u53d6\u6bcf\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u65b9\u5f0f \u82e5\u67d0\u4e00\u884c/\u5217\u7684\u6240\u6709\u7ec4\u5408\u4e2d\uff0c\u67d0\u4e00\u70b9\u7684\u503c\u4e0d\u53d8\uff0c\u5219\u8fd9\u4e00\u70b9\u53ef\u4ee5\u88ab\u786e\u5b9a \u7528\u884c/\u5217\u4e2d\u7684\u786e\u5b9a\u70b9\u53bb\u7b5b\u9009\u6389\u5217/\u884c\u4e2d\u4e0d\u7b26\u5408\u8be5\u70b9\u503c\u7684\u7ec4\u5408 \u53cd\u590d\u7b5b\u9009\uff0c\u76f4\u5230\u5269\u4e0b\u552f\u4e00\u7684\u7ec4\u5408\uff08\u4f5c\u8005\u80af\u5b9a\u51d1\u597d\u7684\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def get_data ( filename ): \"\"\" \u83b7\u53d6\u5927\u5c0f\u3001\u6a2a/\u7eb5\u5411\u7ec4\u5408\u65b9\u5f0f \"\"\" f = open ( filename ) flag = - 1 size , hor , ver = [], [], [] data = [ size , hor , ver ] for line in f : if line [ 0 ] == '#' : flag += 1 elif line [ 0 ] == ' \\n ' : pass else : data [ flag ] . append ( list ( map ( int , line . split ()))) return data def get_candidates ( nums , size ): ''' \u7ed9\u51fa\u884c/\u5217\u7684\u7ec4\u5408\u65b9\u5f0f\uff0c\u9012\u5f52\u5730\u83b7\u5f97\u6240\u6709\u7684\u6392\u5217\uff0c# \u4e3a\u9009\u62e9\u6807\u8bb0 ''' n = len ( nums ) candidates = [] length = size - sum ( nums ) - ( n - 1 ) for i in range ( length + 1 ): head = ' ' * i + '#' * nums [ 0 ] len_h = len ( head ) if n == 1 : tail = ' ' * ( size - len_h ) candidates . append ( head + tail ) else : tails = [ ' ' + j for j in get_candidates ( nums [ 1 :], size - len_h - 1 )] candidates . extend ([ head + tail for tail in tails ]) return candidates def init_all_candidates ( w , h , hor , ver ): ''' \u5f97\u5230\u6240\u6709\u884c/\u5217\u7684\u6240\u6709\u6392\u5217 ''' candi_h = [ get_candidates ( hor [ i ], w ) for i in range ( h )] candi_v = [ get_candidates ( ver [ i ], h ) for i in range ( w )] return candi_h , candi_v def filtrate ( candidates , pos , symbol ): ''' \u7b5b\u9009\u51fa\u67d0\u4e00\u884c/\u5217\u7684\u7b26\u5408\u89c4\u5219\u7684\u6392\u5217 ''' if candidates == \"done\" : return candidates return [ line for line in candidates if line [ pos ] == symbol ] def solve ( filename ): size , hor , ver = get_data ( filename ) w , h = size [ 0 ] candi_h , candi_v = init_all_candidates ( w , h , hor , ver ) res = [[ '0' ] * w for _ in range ( h )] cnt , target = 0 , w * h while cnt < target : # \u5148\u9488\u5bf9\u6bcf\u4e00\u884c for row , lines in enumerate ( candi_h ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a cnt += res [ row ] . count ( '0' ) for col in range ( w ): res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) candi_h [ row ] = \"done\" else : for col in range ( w ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ col ] != lines [ 0 ][ col ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ col ] candi_v [ col ] = filtrate ( candi_v [ col ], row , lines [ 0 ][ col ]) # \u518d\u9488\u5bf9\u6bcf\u4e00\u5217 for col , lines in enumerate ( candi_v ): if lines == \"done\" : continue elif len ( lines ) == 1 : # \u786e\u5b9a for row in range ( h ): if res [ row ][ col ] == '0' : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) candi_v [ col ] = \"done\" else : for row in range ( h ): if res [ row ][ col ] == '0' : for line in lines [ 1 :]: if line [ row ] != lines [ 0 ][ row ]: break else : cnt += 1 res [ row ][ col ] = lines [ 0 ][ row ] candi_h [ row ] = filtrate ( candi_h [ row ], col , lines [ 0 ][ row ]) return res if __name__ == \"__main__\" : res = solve ( \"up.txt\" ) new = [ '' . join ( line ) + ' \\n ' for line in res ] print ( '' . join ( newu8ff7\u4f60\u9f99\uff1f\u4e0d\uff0c\u662f\u4e00\u6761 Python \u767b\u5165 http://www.pythonchallenge.com/pc/rock/python.html \uff0c\u5f97\u5230 \u56fe\u7247 \u63d0\u793a Congrats! You made it through to the smiling python. \"Free\" as in \"Free speech\", not as in \"free... \u641c\u7d22\u5f97\u77e5\uff0c\u8fd9\u662f\u5f00\u6e90\u793e\u533a\u6d41\u884c\u7684\u4e00\u53e5\u8bdd\uff1a \u201cFree as in Speech\u201d or \u201cFree as in Beer\u201d","title":"part4"},{"location":"PythonChallenge/Solutions/32_etch-a-scetch/#5","text":"http://www.pythonchallenge.com/pc/rock/beer.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/","text":"\u7b2c 33 \u9898 33 bottles of beer on the wall Link 1. \u5730\u5740 Link >>> http://www.pythonchallenge.com/pc/rock/beer.html 2. \u9898\u56fe Link 3. \u63d0\u793a Link \u7f51\u9875\u6e90\u7801\u6ce8\u91ca If you are blinded by the light, remove its power, with its might. Then from the ashes, fair and square, another truth at you will glare. 4. \u89e3\u6cd5 Link part1 Link \u56fe\u7247\u540d\u4e3a bear1.jpg \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u6539\u5730\u5740\uff0c\u5f97\u5230 bear2.jpg \u518d\u6539\uff0c\u6539\u4e3a beer2.png \uff0c\u5f97\u5230\u4e00\u5f20\u7070\u5ea6\u56fe part2 Link \u7f51\u9875\u6e90\u7801\u63d0\u793a\u4e2d\u7684\u5173\u952e\u5b57 light, ashes fair, square \u601d\u8def\uff1a \u5bf9\u56fe\u4e2d\u5404\u50cf\u7d20\u6309\u989c\u8272\u5206\u7ec4\uff0c\u82e5\u67d0\u989c\u8272\u7684\u4e2a\u6570\u662f\u5e73\u65b9\u6570\uff0c\u5219\u8bb0\u5f55\u4e0b\u6765 \u4ece\u6700\u4eae\u7684\u989c\u8272 255 \u5f00\u59cb\uff0c\u4f9d\u6b21\u63d0\u53d6\u989c\u8272 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) n = len ( ashes ) lights = img . getcolors () lights . reverse () print ( lights ) print ( len ( lights )) wall = [] for num , _ in lights : n -= num tmp = n ** 0.5 if tmp == int ( tmp ): wall . append ( tmp ) print ( wall ) print ( len ( wall )) >>> [( 272 , 194 ), ( 1348 , 193 ), ( 283 , 188 ), ( 241 , 187 ), ( 318 , 182 ), ( 198 , 181 ), ( 337 , 176 ), ( 171 , 175 ), ( 317 , 170 ), ( 183 , 169 ), ( 317 , 164 ), ( 175 , 163 ), ( 323 , 158 ), ( 161 , 157 ), ( 324 , 152 ), ( 152 , 151 ), ( 323 , 146 ), ( 145 , 145 ), ( 342 , 140 ), ( 118 , 139 ), ( 342 , 134 ), ( 110 , 133 ), ( 327 , 128 ), ( 117 , 127 ), ( 198 , 122 ), ( 238 , 121 ), ( 183 , 116 ), ( 32 , 115 ), ( 310 , 110 ), ( 114 , 109 ), ( 224 , 104 ), ( 192 , 103 ), ( 505 , 98 ), ( 104 , 97 ), ( 257 , 92 ), ( 139 , 91 ), ( 341 , 86 ), ( 47 , 85 ), ( 354 , 80 ), ( 26 , 79 ), ( 164 , 74 ), ( 23 , 73 ), ( 298 , 68 ), ( 70 , 67 ), ( 356 , 62 ), ( 181 , 61 ), ( 609 , 56 ), ( 79 , 55 ), ( 225 , 50 ), ( 107 , 49 ), ( 357 , 44 ), ( 126 , 43 ), ( 339 , 38 ), ( 126 , 37 ), ( 328 , 32 ), ( 119 , 31 ), ( 424 , 26 ), ( 144 , 25 ), ( 243 , 20 ), ( 549 , 19 ), ( 329 , 14 ), ( 724 , 13 ), ( 189 , 8 ), ( 963 , 7 ), ( 232 , 2 ), ( 1532 , 1 )] 66 [ 132.0 , 130.0 , 128.0 , 126.0 , 124.0 , 122.0 , 120.0 , 118.0 , 116.0 , 114.0 , 112.0 , 110.0 , 108.0 , 107.0 , 105.0 , 103.0 , 100.0 , 98.0 , 96.0 , 94.0 , 93.0 , 91.0 , 88.0 , 84.0 , 82.0 , 79.0 , 76.0 , 73.0 , 69.0 , 63.0 , 54.0 , 42.0 , 0.0 ] 33 \u7ed3\u679c\u5206\u6790 194 - 193 = 1, 188 - 187 = 1, 182 - 181 = 1 ... \u82e5 for \u8bed\u53e5\u4e2d\u4e0d\u7528 if \u7b5b\u9009\uff0c\u4f1a\u53d1\u73b0 wall \u4e2d\u7684\u5e73\u65b9\u6570\u4e5f\u662f\u95f4\u9694\u7684 part3 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) max_value = max ( ashes ) for i in range ( 33 ): data = [ ash == max_value for ash in ashes ] side = int ( len ( data ) ** 0.5 ) res = Image . new ( '1' , ( side , side )) res . putdata ( data ) res . save ( f \"./beer/33_ { i + 1 : 0>2 } .png\" ) ashes = [ ash for ash in ashes if ash < max_value - 1 ] max_value = max ( ashes , default =- 1 ) \u4e0e\u7b2c 25 \u9898\u7c7b\u4f3c\uff0c\u8fd9\u4e00\u9898\u662f\u7b2c 33 \u9898\uff0c\u6545\u53ef\u5f97 33 \u5f20\u56fe\u7247 \u5c06\u5e26\u6846\u7684\u56fe\u7247\u4f9d\u6b21\u7ec4\u5408\uff0c\u53ef\u5f97\u5230 gremlins 5. \u7b54\u6848 Link http://www.pythonchallenge.com/pc/rock/gremlins.html 6. \u540e\u8bb0 Link Temporary End Thank you for playing the Python Challenge. More levels will come soon. You can find if there are new levels by checking the homepage or at the Python Challenge News Forum. You can also subscribe to the news forum by RSS. If you have ideas for new levels please send me using the forums. thesamet","title":"33 33 bottles of beer on the wall"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#33-33-bottles-of-beer-on-the-wall","text":"","title":"\u7b2c 33 \u9898 33 bottles of beer on the wall"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#1","text":">>> http://www.pythonchallenge.com/pc/rock/beer.html","title":"1. \u5730\u5740"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#2","text":"","title":"2. \u9898\u56fe"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#3","text":"\u7f51\u9875\u6e90\u7801\u6ce8\u91ca If you are blinded by the light, remove its power, with its might. Then from the ashes, fair and square, another truth at you will glare.","title":"3. \u63d0\u793a"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#4","text":"","title":"4. \u89e3\u6cd5"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#part1","text":"\u56fe\u7247\u540d\u4e3a bear1.jpg \uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u6539\u5730\u5740\uff0c\u5f97\u5230 bear2.jpg \u518d\u6539\uff0c\u6539\u4e3a beer2.png \uff0c\u5f97\u5230\u4e00\u5f20\u7070\u5ea6\u56fe","title":"part1"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#part2","text":"\u7f51\u9875\u6e90\u7801\u63d0\u793a\u4e2d\u7684\u5173\u952e\u5b57 light, ashes fair, square \u601d\u8def\uff1a \u5bf9\u56fe\u4e2d\u5404\u50cf\u7d20\u6309\u989c\u8272\u5206\u7ec4\uff0c\u82e5\u67d0\u989c\u8272\u7684\u4e2a\u6570\u662f\u5e73\u65b9\u6570\uff0c\u5219\u8bb0\u5f55\u4e0b\u6765 \u4ece\u6700\u4eae\u7684\u989c\u8272 255 \u5f00\u59cb\uff0c\u4f9d\u6b21\u63d0\u53d6\u989c\u8272 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) n = len ( ashes ) lights = img . getcolors () lights . reverse () print ( lights ) print ( len ( lights )) wall = [] for num , _ in lights : n -= num tmp = n ** 0.5 if tmp == int ( tmp ): wall . append ( tmp ) print ( wall ) print ( len ( wall )) >>> [( 272 , 194 ), ( 1348 , 193 ), ( 283 , 188 ), ( 241 , 187 ), ( 318 , 182 ), ( 198 , 181 ), ( 337 , 176 ), ( 171 , 175 ), ( 317 , 170 ), ( 183 , 169 ), ( 317 , 164 ), ( 175 , 163 ), ( 323 , 158 ), ( 161 , 157 ), ( 324 , 152 ), ( 152 , 151 ), ( 323 , 146 ), ( 145 , 145 ), ( 342 , 140 ), ( 118 , 139 ), ( 342 , 134 ), ( 110 , 133 ), ( 327 , 128 ), ( 117 , 127 ), ( 198 , 122 ), ( 238 , 121 ), ( 183 , 116 ), ( 32 , 115 ), ( 310 , 110 ), ( 114 , 109 ), ( 224 , 104 ), ( 192 , 103 ), ( 505 , 98 ), ( 104 , 97 ), ( 257 , 92 ), ( 139 , 91 ), ( 341 , 86 ), ( 47 , 85 ), ( 354 , 80 ), ( 26 , 79 ), ( 164 , 74 ), ( 23 , 73 ), ( 298 , 68 ), ( 70 , 67 ), ( 356 , 62 ), ( 181 , 61 ), ( 609 , 56 ), ( 79 , 55 ), ( 225 , 50 ), ( 107 , 49 ), ( 357 , 44 ), ( 126 , 43 ), ( 339 , 38 ), ( 126 , 37 ), ( 328 , 32 ), ( 119 , 31 ), ( 424 , 26 ), ( 144 , 25 ), ( 243 , 20 ), ( 549 , 19 ), ( 329 , 14 ), ( 724 , 13 ), ( 189 , 8 ), ( 963 , 7 ), ( 232 , 2 ), ( 1532 , 1 )] 66 [ 132.0 , 130.0 , 128.0 , 126.0 , 124.0 , 122.0 , 120.0 , 118.0 , 116.0 , 114.0 , 112.0 , 110.0 , 108.0 , 107.0 , 105.0 , 103.0 , 100.0 , 98.0 , 96.0 , 94.0 , 93.0 , 91.0 , 88.0 , 84.0 , 82.0 , 79.0 , 76.0 , 73.0 , 69.0 , 63.0 , 54.0 , 42.0 , 0.0 ] 33 \u7ed3\u679c\u5206\u6790 194 - 193 = 1, 188 - 187 = 1, 182 - 181 = 1 ... \u82e5 for \u8bed\u53e5\u4e2d\u4e0d\u7528 if \u7b5b\u9009\uff0c\u4f1a\u53d1\u73b0 wall \u4e2d\u7684\u5e73\u65b9\u6570\u4e5f\u662f\u95f4\u9694\u7684","title":"part2"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#part3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image img = Image . open ( \"beer2.png\" ) ashes = list ( img . getdata ()) max_value = max ( ashes ) for i in range ( 33 ): data = [ ash == max_value for ash in ashes ] side = int ( len ( data ) ** 0.5 ) res = Image . new ( '1' , ( side , side )) res . putdata ( data ) res . save ( f \"./beer/33_ { i + 1 : 0>2 } .png\" ) ashes = [ ash for ash in ashes if ash < max_value - 1 ] max_value = max ( ashes , default =- 1 ) \u4e0e\u7b2c 25 \u9898\u7c7b\u4f3c\uff0c\u8fd9\u4e00\u9898\u662f\u7b2c 33 \u9898\uff0c\u6545\u53ef\u5f97 33 \u5f20\u56fe\u7247 \u5c06\u5e26\u6846\u7684\u56fe\u7247\u4f9d\u6b21\u7ec4\u5408\uff0c\u53ef\u5f97\u5230 gremlins","title":"part3"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#5","text":"http://www.pythonchallenge.com/pc/rock/gremlins.html","title":"5. \u7b54\u6848"},{"location":"PythonChallenge/Solutions/33_33_bottles_of_beer_on_the_wall/#6","text":"Temporary End Thank you for playing the Python Challenge. More levels will come soon. You can find if there are new levels by checking the homepage or at the Python Challenge News Forum. You can also subscribe to the news forum by RSS. If you have ideas for new levels please send me using the forums. thesamet","title":"6. \u540e\u8bb0"},{"location":"PythonChallenge/Summarize/BIF/","text":"\u5185\u7f6e\u51fd\u6570 Link bytearray Link >>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>> bytes & list Link 1 2 3 4 5 6 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' # chr(1) = '\\x01' [ 1 , 2 , 3 ] bytes & string Link bytes to str 1 2 3 4 5 6 7 8 9 s = b \"abc\" print ( s . decode ()) print ( bytes . decode ( s )) print ( str ( s , encoding = \"utf-8\" )) >>> abc abc abc str to bytes 1 2 3 4 5 6 7 8 9 s = \"abc\" print ( s . encode ()) print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc' b 'abc' divmod Link divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200 max Link >>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>> translate & maketrans Link str.translate(table) You can use str.maketrans() to create a translation map from character-to-character mappings in different formats. static str.maketrans(x[, y[, z]]) This static method returns a translation table usable for str.translate(). If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result. >>> \"abc\" . translate ( str . maketrans ({ 'a' : 'x' , 'b' : 'y' , 'c' : 'z' })) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' )) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' , 'b' )) 'xz' >>> bytes.translate(table, /, delete=b'') You can use the bytes.maketrans() method to create a translation table. static bytes.maketrans(from, to) This static method returns a translation table usable for bytes.translate() that will map each character in from into the character at the same position in to; from and to must both be bytes-like objects and have the same length. >>> b \"xyz\" . translate ( None , b \"x\" ) b 'yz' >>> >>> b \"abc\" . translate ( bytes . maketrans ( b 'abc' , b 'xyz' )) b 'xyz' >>>","title":"02 BIF"},{"location":"PythonChallenge/Summarize/BIF/#_1","text":"","title":"\u5185\u7f6e\u51fd\u6570"},{"location":"PythonChallenge/Summarize/BIF/#bytearray","text":">>> s = b \"abcdefg\" >>> s [ 3 ] = ord ( 'D' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : 'bytes' object does not support item assignment >>> >>> t = bytearray ( s ) # bytearray \u53ef\u5f53\u4f5c array \u90a3\u6837\u4f7f\u7528 >>> t [ 3 ] = ord ( 'D' ) >>> t bytearray ( b 'abcDefg' ) >>>","title":"bytearray"},{"location":"PythonChallenge/Summarize/BIF/#bytes-list","text":"1 2 3 4 5 6 print ( bytes ([ 1 , 2 , 3 ])) print ( list ( b ' \\x01\\x02\\x03 ' )) >>> b ' \\x01\\x02\\x03 ' # chr(1) = '\\x01' [ 1 , 2 , 3 ]","title":"bytes &amp; list"},{"location":"PythonChallenge/Summarize/BIF/#bytes-string","text":"bytes to str 1 2 3 4 5 6 7 8 9 s = b \"abc\" print ( s . decode ()) print ( bytes . decode ( s )) print ( str ( s , encoding = \"utf-8\" )) >>> abc abc abc str to bytes 1 2 3 4 5 6 7 8 9 s = \"abc\" print ( s . encode ()) print ( str . encode ( s )) print ( bytes ( s , encoding = \"utf-8\" )) >>> b 'abc' b 'abc' b 'abc'","title":"bytes &amp; string"},{"location":"PythonChallenge/Summarize/BIF/#divmod","text":"divmod -> div & mod >>> divmod ( 20110 , 200 ) ( 100 , 110 ) # 20110//200, 20110%200","title":"divmod"},{"location":"PythonChallenge/Summarize/BIF/#max","text":">>> max ([]) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : max () arg is an empty sequence >>> max ([], default =- 1 ) # \u4e0d\u5e38\u7528\uff0c\u4f46\u4e0e dict.get(sth, default) \u76f8\u4f3c - 1 >>>","title":"max"},{"location":"PythonChallenge/Summarize/BIF/#translate-maketrans","text":"str.translate(table) You can use str.maketrans() to create a translation map from character-to-character mappings in different formats. static str.maketrans(x[, y[, z]]) This static method returns a translation table usable for str.translate(). If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result. >>> \"abc\" . translate ( str . maketrans ({ 'a' : 'x' , 'b' : 'y' , 'c' : 'z' })) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' )) 'xyz' >>> >>> \"abc\" . translate ( str . maketrans ( 'abc' , 'xyz' , 'b' )) 'xz' >>> bytes.translate(table, /, delete=b'') You can use the bytes.maketrans() method to create a translation table. static bytes.maketrans(from, to) This static method returns a translation table usable for bytes.translate() that will map each character in from into the character at the same position in to; from and to must both be bytes-like objects and have the same length. >>> b \"xyz\" . translate ( None , b \"x\" ) b 'yz' >>> >>> b \"abc\" . translate ( bytes . maketrans ( b 'abc' , b 'xyz' )) b 'xyz' >>>","title":"translate &amp; maketrans"},{"location":"PythonChallenge/Summarize/HttpResponseCode/","text":"HttpResponseCode Link \u5e38\u89c1\u7684 Status Code Link Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9 \u8865\u5145 Link \u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095","title":"12 HttpResponseCode"},{"location":"PythonChallenge/Summarize/HttpResponseCode/#httpresponsecode","text":"","title":"HttpResponseCode"},{"location":"PythonChallenge/Summarize/HttpResponseCode/#status-code","text":"Status Code \u91ca\u4e49 HTTP: Status 200 \u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7f51\u9875 HTTP: Status 404 \u8bf7\u6c42\u7684\u7f51\u9875\u4e0d\u5b58\u5728 HTTP: Status 503 \u670d\u52a1\u4e0d\u53ef\u7528 HTTP Status 2xx: \u6210\u529f -> \u8868\u793a\u6210\u529f\u5904\u7406\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u4ee3\u7801 HTTP Status 2xx \u91ca\u4e49 HTTP Status 200 \u6210\u529f HTTP Status 201 \u5df2\u521b\u5efa HTTP Status 202 \u5df2\u63a5\u53d7 HTTP Status 203 \u975e\u6388\u6743\u4fe1\u606f HTTP Status 204 \u65e0\u5185\u5bb9 HTTP Status 205 \u91cd\u7f6e\u5185\u5bb9 HTTP Status 206 \u90e8\u5206\u5185\u5bb9","title":"\u5e38\u89c1\u7684 Status Code"},{"location":"PythonChallenge/Summarize/HttpResponseCode/#_1","text":"\u9759\u6001\u6587\u4ef6 Content-Length:xxxxx \u52a8\u6001\u7f51\u9875\uff08\u8f93\u51fa\u7684\u5185\u5bb9\u957f\u5ea6\u4e0d\u80fd\u786e\u5b9a\uff09 Transfer-Encoding:chunked \u65ad\u70b9\u7eed\u4f20 Accept-Ranges:bytes Content-Range:bytes 0-4095/4096 \u591a\u7ebf\u7a0b\u4e0b\u8f7d Range:bytes=0-1023 Range:bytes=1024-2047 Range:bytes=2048-3071 Range:bytes=3072-4095","title":"\u8865\u5145"},{"location":"PythonChallenge/Summarize/Linux-CMD/","text":"curl Link \u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ... 2. md5 Link york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip 3. you get Link york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file 4. \u67e5\u770b\u6587\u4ef6\u7c7b\u578b Link york$ file unreal.dat ... 5. \u4e0b\u8f7d\u6587\u4ef6 Link york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"14 Linux-CMD"},{"location":"PythonChallenge/Summarize/Linux-CMD/#curl","text":"\u4e00\u822c\u7528\u6cd5 york$ curl https://www.xxx ... \u9700\u8981\u8d26\u53f7\u3001\u5bc6\u7801\u65f6 york$ curl -u username:password https://www.xxx ...","title":"curl"},{"location":"PythonChallenge/Summarize/Linux-CMD/#2-md5","text":"york$ md5sum mybroken.zip repaired.zip bbf6616928e23ecfef4b717f281c53cc *mybroken.zip bbb8b499a0eef99b52c7f13f4e78c24b *repaired.zip","title":"2. md5"},{"location":"PythonChallenge/Summarize/Linux-CMD/#3-you-get","text":"york$ http://www.pythonchallenge.com/pc/return/evil4.jpg --user huge -- password file","title":"3. you get"},{"location":"PythonChallenge/Summarize/Linux-CMD/#4","text":"york$ file unreal.dat ...","title":"4. \u67e5\u770b\u6587\u4ef6\u7c7b\u578b"},{"location":"PythonChallenge/Summarize/Linux-CMD/#5","text":"york$ for i in {1..25}; do wget --user butter --password fly http://www.pythonchallenge.com/pc/hex/lake$i.wav; done","title":"5. \u4e0b\u8f7d\u6587\u4ef6"},{"location":"PythonChallenge/Summarize/Pillow/","text":"Pillow Link \u5b89\u88c5\u4e0e\u4f7f\u7528 Link \u5b89\u88c5\u65f6\u7684\u540d\u5b57\uff1a Pillow \u4f7f\u7528\u65f6\u7684\u540d\u5b57\uff1a PIL PIL.Image Link \u6253\u5f00\u3001\u8f7d\u5165\u3001\u67e5\u770b\u4e0e\u5173\u95ed PIL.Image.open(fp, mode='r') Image.load() Image.mode 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ... Image.close() >>> from PIL import Image >>> >>> img1 = Image . open ( \"python.png\" ) # \u7528 Image \u6253\u5f00\u56fe\u7247 >>> img1 . mode '1' >>> pix1 = img1 . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e >>> pix1 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684\u50cf\u7d20\u503c 255 >>> img2 = Image . open ( \"oxygen.png\" ) >>> img2 . mode 'RGBA' >>> pix2 = img2 . load () >>> pix2 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684 R, G, B, A\uff08A \u4e3a\u900f\u660e\u5ea6\uff09 ( 79 , 92 , 23 , 255 ) # A=255 \u8868\u793a\u4e0d\u900f\u660e >>> \u83b7\u53d6\u901a\u9053\u7684\u5b57\u7b26\u4e32\u5e8f\u5217 Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> >>> img = Image . open ( \"oxygen.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' , 'A' ) >>> \u67e5\u770b\u56fe\u7247\u7684\u5c3a\u5bf8 PIL.Image.size Image.size[0], Image.size[1] PIL.Image.width, PIL.Image.height >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> w , h = img . size >>> w , h ( 640 , 480 ) >>> img . size [ 0 ], img . size [ 1 ] ( 640 , 480 ) >>> img . width , img . height ( 640 , 480 ) >>> \u88c1\u526a\u3001\u653e\u5927\u3001\u5c55\u793a\u4e0e\u4fdd\u5b58\u56fe\u7247 Image.crop(box=None) Image.resize(size, resample=3, box=None, reducing_gap=None) Image.show(title=None, command=None) Image.save(fp, format=None, **params) 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250 img . show () img . save ( \"resize_cave.jpg\" ) \u65b0\u5efa\u56fe\u7247\uff0c\u83b7\u53d6\u50cf\u7d20\u4e0e\u586b\u5165\u50cf\u7d20 PIL.Image.new(mode, size, color=0) Image.getpixel(xy) Image.putpixel(xy, value) >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> new = Image . new ( \"RGB\" , ( 500 , 500 )) >>> pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c >>> pix ( 0 , 20 , 0 ) >>> new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> 256 \u8272\u51fa\u73b0\u6b21\u6570\u7edf\u8ba1 Image.histogram(mask=None, extrema=None) If the image has more than one band, the histograms for all bands are concatenated. for example, the histogram for an \u201cRGB\u201d image contains 768 values. >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> res = img . histogram () # \u53cc\u8272\u56fe\uff1a0-255\uff1bR,G,B \u56fe\uff1a3 x (0-255) >>> len ( res ) # \u8fd9\u4e2a\u503c\u4e0e\u56fe\u7247\u7684 mode \u6709\u5173 768 # 768 = 256 x 3 >>> res [: 9 ] [ 12690 , 3753 , 1339 , 4152 , 4660 , 1828 , 5823 , 5698 , 6229 ] >>> \u83b7\u53d6\u56fe\u7247\u7684\u989c\u8272\u3001\u5927\u5c0f\u7b49\u4fe1\u606f Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() Image.seek(frame) Image.getpalette() >>> from PIL import Image >>> >>> gif = Image . open ( \"white.gif\" ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u53cd\u8f6c\u6216\u65cb\u8f6c Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c # ... with wave Link \u5199\u5165\u6570\u636e PIL.Image.frombytes(mode, size, data, decoder_name='raw', *args) Image.paste(im, box=None, mask=None) 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): wave_bytes = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), wave_bytes ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' ) PIL.ImageChrop Link \u5e73\u79fb PIL.ImageChops.offset(image, xoffset, yoffset=None) \u5c06\u56fe\u7247\u8f6c\u4e3a\u5b57\u8282\u5bf9\u8c61 Image.tobytes(encoder_name='raw', *args) Return image as a bytes object. >>> from PIL import Image , ImageChops >>> >>> img = Image . open ( \"mozart.gif\" ) >>> box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 >>> row = img . crop ( box ) # \u88c1\u526a >>> row2bytes = row . tobytes () >>> i = row2bytes . index ( 195 ) >>> row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 >>> img . paste ( row , box ) # \u7c98\u8d34 >>> PIL.ImageDraw Link \u753b\u7ebf class PIL.ImageDraw.Draw(im, mode=None) PIL.ImageDraw.ImageDraw.line(xy, fill=None, width=0, joint=None) PIL.ImageDraw.ImageDraw.polygon(xy, fill=None, outline=None) >>> from PIL import Image , ImageDraw >>> >>> rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] >>> rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] >>> img = Image . new ( \"RGB\" , ( 500 , 500 )) >>> draw = ImageDraw . Draw ( img ) >>> draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde >>> draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde >>>","title":"17 Pillow"},{"location":"PythonChallenge/Summarize/Pillow/#pillow","text":"","title":"Pillow"},{"location":"PythonChallenge/Summarize/Pillow/#_1","text":"\u5b89\u88c5\u65f6\u7684\u540d\u5b57\uff1a Pillow \u4f7f\u7528\u65f6\u7684\u540d\u5b57\uff1a PIL","title":"\u5b89\u88c5\u4e0e\u4f7f\u7528"},{"location":"PythonChallenge/Summarize/Pillow/#pilimage","text":"\u6253\u5f00\u3001\u8f7d\u5165\u3001\u67e5\u770b\u4e0e\u5173\u95ed PIL.Image.open(fp, mode='r') Image.load() Image.mode 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) ... Image.close() >>> from PIL import Image >>> >>> img1 = Image . open ( \"python.png\" ) # \u7528 Image \u6253\u5f00\u56fe\u7247 >>> img1 . mode '1' >>> pix1 = img1 . load () # \u4e3a\u56fe\u50cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u52a0\u8f7d\u50cf\u7d20\u6570\u636e >>> pix1 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684\u50cf\u7d20\u503c 255 >>> img2 = Image . open ( \"oxygen.png\" ) >>> img2 . mode 'RGBA' >>> pix2 = img2 . load () >>> pix2 [ 0 , 0 ] # \u67e5\u770b [0, 0] \u70b9\u7684 R, G, B, A\uff08A \u4e3a\u900f\u660e\u5ea6\uff09 ( 79 , 92 , 23 , 255 ) # A=255 \u8868\u793a\u4e0d\u900f\u660e >>> \u83b7\u53d6\u901a\u9053\u7684\u5b57\u7b26\u4e32\u5e8f\u5217 Image.getbands() For example, getbands on an RGB image returns (\"R\", \"G\", \"B\"). >>> from PIL import Image >>> >>> img = Image . open ( \"oxygen.png\" ) >>> img . getbands () # \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6b64\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u6807\u6ce8\u680f\u7684\u540d\u79f0 ( 'R' , 'G' , 'B' , 'A' ) >>> \u67e5\u770b\u56fe\u7247\u7684\u5c3a\u5bf8 PIL.Image.size Image.size[0], Image.size[1] PIL.Image.width, PIL.Image.height >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> w , h = img . size >>> w , h ( 640 , 480 ) >>> img . size [ 0 ], img . size [ 1 ] ( 640 , 480 ) >>> img . width , img . height ( 640 , 480 ) >>> \u88c1\u526a\u3001\u653e\u5927\u3001\u5c55\u793a\u4e0e\u4fdd\u5b58\u56fe\u7247 Image.crop(box=None) Image.resize(size, resample=3, box=None, reducing_gap=None) Image.show(title=None, command=None) Image.save(fp, format=None, **params) 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"cave.jpg\" ) small = img . crop (( 0 , 0 , 10 , 5 )) # \u88c1\u526a big = small . resize (( 500 , 250 )) # \u653e\u5927\u81f3 500X250 img . show () img . save ( \"resize_cave.jpg\" ) \u65b0\u5efa\u56fe\u7247\uff0c\u83b7\u53d6\u50cf\u7d20\u4e0e\u586b\u5165\u50cf\u7d20 PIL.Image.new(mode, size, color=0) Image.getpixel(xy) Image.putpixel(xy, value) >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> new = Image . new ( \"RGB\" , ( 500 , 500 )) >>> pix = img . getpixel (( 0 , 0 )) # \u83b7\u53d6\u70b9 (0, 0) \u7684\u50cf\u7d20\u503c >>> pix ( 0 , 20 , 0 ) >>> new . putpixel (( 0 , 0 ), pix ) # \u5c06\u50cf\u7d20\u503c pix \u5199\u5165 new \u7684 (0, 0) \u70b9 >>> 256 \u8272\u51fa\u73b0\u6b21\u6570\u7edf\u8ba1 Image.histogram(mask=None, extrema=None) If the image has more than one band, the histograms for all bands are concatenated. for example, the histogram for an \u201cRGB\u201d image contains 768 values. >>> from PIL import Image >>> >>> img = Image . open ( \"cave.jpg\" ) >>> res = img . histogram () # \u53cc\u8272\u56fe\uff1a0-255\uff1bR,G,B \u56fe\uff1a3 x (0-255) >>> len ( res ) # \u8fd9\u4e2a\u503c\u4e0e\u56fe\u7247\u7684 mode \u6709\u5173 768 # 768 = 256 x 3 >>> res [: 9 ] [ 12690 , 3753 , 1339 , 4152 , 4660 , 1828 , 5823 , 5698 , 6229 ] >>> \u83b7\u53d6\u56fe\u7247\u7684\u989c\u8272\u3001\u5927\u5c0f\u7b49\u4fe1\u606f Image.getdata(band=None) Image.getcolors(maxcolors=256) Image.getbbox() Image.seek(frame) Image.getpalette() >>> from PIL import Image >>> >>> gif = Image . open ( \"white.gif\" ) >>> data = gif . getdata () # \u5c06\u6b64\u56fe\u50cf\u7684\u5185\u5bb9\u4ee5\u5305\u542b\u50cf\u7d20\u503c\u7684\u5e8f\u5217\u5bf9\u8c61\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 list() \u8f6c >>> len ( data ) 40000 # 200x200 >>> >>> gif . getcolors () # \u8fd4\u56de\u6b64\u56fe\u50cf\u4e2d\u4f7f\u7528\u8fc7\u7684\u989c\u8272\u7684\u5217\u8868 [(\u6b21\u6570, \u989c\u8272\u503c), ...] [( 39999 , 0 ), ( 1 , 8 )] >>> >>> gif . getbbox () # \u8ba1\u7b97\u56fe\u50cf\u4e2d\u975e\u96f6\u533a\u57df\u7684\u8fb9\u754c\u6846 ( 100 , 100 , 101 , 101 ) # left, upper, right, lower >>> gif . seek ( 1 ) # \u6765\u5230\u7b2c 1 \u5e27\uff0c\u5e27\u6570\u4ece 0 \u5f00\u59cb >>> gif . getbbox () ( 100 , 102 , 101 , 103 ) >>> >>> gif . getpalette ()[: 10 * 3 ] # \u5c06\u56fe\u50cf\u8c03\u8272\u677f\u4f5c\u4e3a\u5217\u8868\u8fd4\u56de\uff0c\u4ee5 R, G, B \u7684\u5f62\u5f0f [ 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 255 , 255 , 255 ] >>> \u53cd\u8f6c\u6216\u65cb\u8f6c Image.transpose(method) method \u2013 One of PIL.Image.FLIP_LEFT_RIGHT PIL.Image.FLIP_TOP_BOTTOM PIL.Image.ROTATE_90 PIL.Image.ROTATE_180 PIL.Image.ROTATE_270 PIL.Image.TRANSPOSE PIL.Image.TRANSVERSE 1 2 3 4 5 6 7 from PIL import Image img = Image . open ( \"30_result.png\" ) tmp = img . copy () tmp = tmp . transpose ( Image . ROTATE_90 ) # \u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6 tmp = tmp . transpose ( Image . FLIP_TOP_BOTTOM ) # \u4e0a\u4e0b\u7ffb\u8f6c # ...","title":"PIL.Image"},{"location":"PythonChallenge/Summarize/Pillow/#with-wave","text":"\u5199\u5165\u6570\u636e PIL.Image.frombytes(mode, size, data, decoder_name='raw', *args) Image.paste(im, box=None, mask=None) 1 2 3 4 5 6 7 8 9 10 11 from PIL import Image import wave wavs = [ wave . open ( 'lake/lake %d .wav' % i ) for i in range ( 1 , 26 )] result = Image . new ( 'RGB' , ( 300 , 300 ), 0 ) num_frames = wavs [ 0 ] . getnframes () # \u603b\u5e27\u6570 for i in range ( 25 ): wave_bytes = wavs [ i ] . readframes ( num_frames ) #\u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891 img = Image . frombytes ( 'RGB' , ( 60 , 60 ), wave_bytes ) result . paste ( img , ( 60 * ( i % 5 ), 60 * ( i // 5 ))) result . save ( 'level25.png' )","title":"with wave"},{"location":"PythonChallenge/Summarize/Pillow/#pilimagechrop","text":"\u5e73\u79fb PIL.ImageChops.offset(image, xoffset, yoffset=None) \u5c06\u56fe\u7247\u8f6c\u4e3a\u5b57\u8282\u5bf9\u8c61 Image.tobytes(encoder_name='raw', *args) Return image as a bytes object. >>> from PIL import Image , ImageChops >>> >>> img = Image . open ( \"mozart.gif\" ) >>> box = ( 0 , 0 , 640 , 1 ) # \u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\uff0c\u6700\u540e\u4e00\u884c\u4e0d\u53d6 >>> row = img . crop ( box ) # \u88c1\u526a >>> row2bytes = row . tobytes () >>> i = row2bytes . index ( 195 ) >>> row = ImageChops . offset ( row , - i ) # \u53ef\u4ee5\u770b\u6210\u5faa\u73af\u5de6\u79fb i \u4e2a\u50cf\u7d20 >>> img . paste ( row , box ) # \u7c98\u8d34 >>>","title":"PIL.ImageChrop"},{"location":"PythonChallenge/Summarize/Pillow/#pilimagedraw","text":"\u753b\u7ebf class PIL.ImageDraw.Draw(im, mode=None) PIL.ImageDraw.ImageDraw.line(xy, fill=None, width=0, joint=None) PIL.ImageDraw.ImageDraw.polygon(xy, fill=None, outline=None) >>> from PIL import Image , ImageDraw >>> >>> rect1 = [( 100 , 100 ), ( 200 , 100 ), ( 200 , 200 ), ( 100 , 200 ), ( 100 , 100 )] >>> rect2 = [ 300 , 100 , 400 , 100 , 400 , 200 , 300 , 200 ] >>> img = Image . new ( \"RGB\" , ( 500 , 500 )) >>> draw = ImageDraw . Draw ( img ) >>> draw . line ( rect1 , fill = \"white\" ) # \u9700\u8981\u9996\u5c3e\u76f8\u8fde >>> draw . polygon ( rect2 , fill = \"red\" ) # \u4e0d\u9700\u9996\u5c3e\u76f8\u8fde >>>","title":"PIL.ImageDraw"},{"location":"PythonChallenge/Summarize/base64/","text":"base64 Link base64.b64decode Link 1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @'","title":"01 base64"},{"location":"PythonChallenge/Summarize/base64/#base64","text":"","title":"base64"},{"location":"PythonChallenge/Summarize/base64/#base64b64decode","text":"1 2 3 4 5 6 7 from base64 import b64decode s = \"UklGRvyzAQBXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YdizAQBABkAMQAtAAEADQAJA\" print ( b64decode ( s )) >>> b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 @ \\x06 @ \\x0c @ \\x0b @ \\x00 @ \\x03 @ \\x02 @'","title":"base64.b64decode"},{"location":"PythonChallenge/Summarize/binascii/","text":"binascii Link \u6709\u76f8\u540c\u7684\u4f5c\u7528 unhexlify \u2248 a2b_hex hexlify \u2248 b2a_hex >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>>","title":"03 binascii"},{"location":"PythonChallenge/Summarize/binascii/#binascii","text":"\u6709\u76f8\u540c\u7684\u4f5c\u7528 unhexlify \u2248 a2b_hex hexlify \u2248 b2a_hex >>> from binascii import unhexlify , a2b_hex , hexlify , b2a_hex >>> >>> unhexlify ( b \"30\" ) # \u627e\u5230 16 \u8fdb\u5236\u7684\u67d0\u6570\u5728 ASCII \u8868\u4e2d\u7684\u6620\u5c04 b '0' # 30(16\u8fdb\u5236) = 48(10\u8fdb\u5236) => 0 >>> a2b_hex ( b \"30\" ) b '0' >>> hexlify ( b \"0\" ) # \u627e\u5230 ASCII \u8868\u4e2d\u67d0\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684 16 \u8fdb\u5236\u6570 b '30' >>> b2a_hex ( b \"0\" ) b '30' >>>","title":"binascii"},{"location":"PythonChallenge/Summarize/bz2/","text":"bz2 Link bz2.decompress Link 1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"04 bz2"},{"location":"PythonChallenge/Summarize/bz2/#bz2","text":"","title":"bz2"},{"location":"PythonChallenge/Summarize/bz2/#bz2decompress","text":"1 2 3 4 5 6 7 from bz2 import decompress un = b \"BZh91AY&SYA \\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00 ! \\x9a h3M \\x07 <] \\xc9\\x14\\xe1 BA \\x06\\xbe\\x08 4\" print ( \"un:\" , decompress ( un )) >>> un : b 'huge'","title":"bz2.decompress"},{"location":"PythonChallenge/Summarize/collections/","text":"collections Link collections.Counter Link class collections.Counter([iterable-or-mapping]) A Counter is a dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. >>> from collections import Counter >>> Counter ( \"happy\" ) Counter ({ 'p' : 2 , 'h' : 1 , 'a' : 1 , 'y' : 1 }) >>>","title":"05 collections"},{"location":"PythonChallenge/Summarize/collections/#collections","text":"","title":"collections"},{"location":"PythonChallenge/Summarize/collections/#collectionscounter","text":"class collections.Counter([iterable-or-mapping]) A Counter is a dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. >>> from collections import Counter >>> Counter ( \"happy\" ) Counter ({ 'p' : 2 , 'h' : 1 , 'a' : 1 , 'y' : 1 }) >>>","title":"collections.Counter"},{"location":"PythonChallenge/Summarize/datetime/","text":"datetime Link datetime.datetime Link >>> from datetime import datetime >>> date = datetime ( 2020 , 1 , 1 ) >>> date datetime . datetime ( 2020 , 1 , 1 , 0 , 0 ) # y, m, d, h, m >>> date . year , date . month , date . day ( 2020 , 1 , 1 ) >>> date . weekday () # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 2 # 2020-01-01 \u662f\u5468\u4e09 >>>","title":"06 datetime"},{"location":"PythonChallenge/Summarize/datetime/#datetime","text":"","title":"datetime"},{"location":"PythonChallenge/Summarize/datetime/#datetimedatetime","text":">>> from datetime import datetime >>> date = datetime ( 2020 , 1 , 1 ) >>> date datetime . datetime ( 2020 , 1 , 1 , 0 , 0 ) # y, m, d, h, m >>> date . year , date . month , date . day ( 2020 , 1 , 1 ) >>> date . weekday () # \u5468\u4e00\u81f3\u5468\u65e5\u4f9d\u6b21\u5bf9\u5e94 0, 1, 2, 3, 4, 5, 6 2 # 2020-01-01 \u662f\u5468\u4e09 >>>","title":"datetime.datetime"},{"location":"PythonChallenge/Summarize/difflib/","text":"difflib Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import difflib data = \"\"\"abc abc def def ghi ghh jkk jkl mno mno\"\"\" left , right = [], [] for line in data . splitlines (): left . append ( line [: 3 ]) right . append ( line [ 4 :]) print ( left ) print ( right ) # compare = difflib.Differ().compare(left, right) # \u521b\u5efa\u4e00\u4e2a Differ \u5bf9\u8c61\uff0c\u6548\u679c\u540c\u4e0b compare = difflib . ndiff ( left , right ) for line in compare : print ( line ) >>> [ 'abc' , 'def' , 'ghi' , 'jkk' , 'mno' ] [ 'abc' , 'def' , 'ghh' , 'jkl' , 'mno' ] abc def - ghi - jkk + ghh + jkl mno","title":"07 difflib"},{"location":"PythonChallenge/Summarize/difflib/#difflib","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import difflib data = \"\"\"abc abc def def ghi ghh jkk jkl mno mno\"\"\" left , right = [], [] for line in data . splitlines (): left . append ( line [: 3 ]) right . append ( line [ 4 :]) print ( left ) print ( right ) # compare = difflib.Differ().compare(left, right) # \u521b\u5efa\u4e00\u4e2a Differ \u5bf9\u8c61\uff0c\u6548\u679c\u540c\u4e0b compare = difflib . ndiff ( left , right ) for line in compare : print ( line ) >>> [ 'abc' , 'def' , 'ghi' , 'jkk' , 'mno' ] [ 'abc' , 'def' , 'ghh' , 'jkl' , 'mno' ] abc def - ghi - jkk + ghh + jkl mno","title":"difflib"},{"location":"PythonChallenge/Summarize/email/","text":"email Link email.txt \u89c1\u201c\u6765\u6e90\u201d 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False","title":"08 email"},{"location":"PythonChallenge/Summarize/email/#email","text":"email.txt \u89c1\u201c\u6765\u6e90\u201d 1 2 3 4 5 6 7 8 9 import email message = open ( \"email.txt\" , \"rb\" ) . read () . decode () # \u5c06\u672c\u9898\u6ce8\u91ca\u7684\u6240\u6709\u5185\u5bb9\u4fdd\u5b58\u4e3a email.txt mail = email . message_from_string ( message ) audio = mail . get_payload ( 0 ) . get_payload ( decode = True ) f = open ( \"indian.wav\" , \"wb\" ) # \u97f3\u9891\u5185\u5bb9\uff1asorry f . write ( audio ) f . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import email msg = email . message_from_file ( open ( \"email.txt\" )) print ( msg . get ( \"from\" )) print ( '=' * 50 ) print ( msg . get ( \"subject\" )) print ( '=' * 50 ) print ( msg . preamble ) print ( '=' * 50 ) for part in msg . walk (): if part . get_content_maintype () == \"audio\" : print ( part . get_content_maintype ()) print ( part . get_content_type ()) print ( part . get_filename ()) print ( part . is_multipart ()) >>> leopold . moz @pythonchallenge . com ================================================== what do you mean by \"open the attachment?\" ================================================== It is so much easier for you , youngsters . Maybe my computer is out of order . I have a real work to do and I must know what 's inside! ================================================== audio audio / x - wav indian . wav False","title":"email"},{"location":"PythonChallenge/Summarize/file-header/","text":"\u6587\u4ef6\u5934 Link \u683c\u5f0f \u6587\u4ef6\u5934\u7684\u90e8\u5206\u4fe1\u606f bz2 'BZh91A' gif 'GIF' jpg 'JFIF' png 'PNG...IHDR' zip 'PK' \u683c\u5f0f hex bytes gzip 1f 8b 08 b'\\x1f\\x8b\\x08' lzma 6c 00 b'l\\x00' zlib 78 9c b'x\\x9c'","title":"09 file-header"},{"location":"PythonChallenge/Summarize/file-header/#_1","text":"\u683c\u5f0f \u6587\u4ef6\u5934\u7684\u90e8\u5206\u4fe1\u606f bz2 'BZh91A' gif 'GIF' jpg 'JFIF' png 'PNG...IHDR' zip 'PK' \u683c\u5f0f hex bytes gzip 1f 8b 08 b'\\x1f\\x8b\\x08' lzma 6c 00 b'l\\x00' zlib 78 9c b'x\\x9c'","title":"\u6587\u4ef6\u5934"},{"location":"PythonChallenge/Summarize/gzip/","text":"gzip Link 1 2 3 4 5 6 7 8 9 import gzip with gzip . open ( \"deltas.gz\" ) as f : for line in f : print ( line . decode ()) break >>> 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00","title":"10 gzip"},{"location":"PythonChallenge/Summarize/gzip/#gzip","text":"1 2 3 4 5 6 7 8 9 import gzip with gzip . open ( \"deltas.gz\" ) as f : for line in f : print ( line . decode ()) break >>> 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00 89 50 4 e 47 0 d 0 a 1 a 0 a 00 00 00 0 d 49 48 44 52 00 00","title":"gzip"},{"location":"PythonChallenge/Summarize/hashlib/","text":"hashlib Link hashlib.md5 Link \u6587\u4ef6 Link 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc \u5b57\u7b26\u4e32 Link 1 2 3 4 5 6 7 8 9 10 from hashlib import md5 m = md5 () m . update ( bytes ( \"password\" , \"utf8\" )) # \u8fd9\u91cc\u52a0\u76d0\u66f4\u597d pwd = m . hexdigest () print ( pwd ) >>> 5 f4dcc3b5aa765d61d8327deb882cf99","title":"11 hashlib"},{"location":"PythonChallenge/Summarize/hashlib/#hashlib","text":"","title":"hashlib"},{"location":"PythonChallenge/Summarize/hashlib/#hashlibmd5","text":"","title":"hashlib.md5"},{"location":"PythonChallenge/Summarize/hashlib/#_1","text":"1 2 3 4 5 6 7 8 9 10 from hashlib import md5 f = open ( \"mybroken.zip\" , \"rb\" ) data = f . read () f . close () print ( md5 ( data ) . hexdigest ()) >>> bbf6616928e23ecfef4b717f281c53cc","title":"\u6587\u4ef6"},{"location":"PythonChallenge/Summarize/hashlib/#_2","text":"1 2 3 4 5 6 7 8 9 10 from hashlib import md5 m = md5 () m . update ( bytes ( \"password\" , \"utf8\" )) # \u8fd9\u91cc\u52a0\u76d0\u66f4\u597d pwd = m . hexdigest () print ( pwd ) >>> 5 f4dcc3b5aa765d61d8327deb882cf99","title":"\u5b57\u7b26\u4e32"},{"location":"PythonChallenge/Summarize/keyword/","text":"keyword Link test in Python3.7.6 keyword.iskeyword Link \u65b9\u6cd5\u4e00 Link >>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>> \u65b9\u6cd5\u4e8c Link >>> from keyword import kwlist >>> kwlist [ 'False' , 'None' , 'True' , 'and' , 'as' , 'assert' , 'async' , 'await' , 'break' , 'class' , 'continue' , 'def' , 'del' , 'elif' , 'else' , 'except' , 'finally' , 'for' , 'from' , 'global' , 'if' , 'import' , 'in' , 'is' , 'lambda' , 'nonlocal' , 'not' , 'or' , 'pass' , 'raise' , 'return' , 'try' , 'while' , 'with' , 'yield' ] >>> len ( kwlist ) 35 >>>","title":"l3 keyword"},{"location":"PythonChallenge/Summarize/keyword/#keyword","text":"test in Python3.7.6","title":"keyword"},{"location":"PythonChallenge/Summarize/keyword/#keywordiskeyword","text":"","title":"keyword.iskeyword"},{"location":"PythonChallenge/Summarize/keyword/#_1","text":">>> from keyword import iskeyword >>> iskeyword ( \"print\" ) False >>> iskeyword ( \"if\" ) True >>>","title":"\u65b9\u6cd5\u4e00"},{"location":"PythonChallenge/Summarize/keyword/#_2","text":">>> from keyword import kwlist >>> kwlist [ 'False' , 'None' , 'True' , 'and' , 'as' , 'assert' , 'async' , 'await' , 'break' , 'class' , 'continue' , 'def' , 'del' , 'elif' , 'else' , 'except' , 'finally' , 'for' , 'from' , 'global' , 'if' , 'import' , 'in' , 'is' , 'lambda' , 'nonlocal' , 'not' , 'or' , 'pass' , 'raise' , 'return' , 'try' , 'while' , 'with' , 'yield' ] >>> len ( kwlist ) 35 >>>","title":"\u65b9\u6cd5\u4e8c"},{"location":"PythonChallenge/Summarize/os/","text":"os Link os.popen Link 1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux","title":"15 os"},{"location":"PythonChallenge/Summarize/os/#os","text":"","title":"os"},{"location":"PythonChallenge/Summarize/os/#ospopen","text":"1 2 3 4 from os import popen popen ( \"indian.wav\" ) # Windows popen ( \"aplay\" , \"indian.wav\" ) # Linux","title":"os.popen"},{"location":"PythonChallenge/Summarize/pickle/","text":"pickle Link pickle.dump \u2014\u2014\u5199\u5165 Link 1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close () pickle.load \u2014\u2014\u5bfc\u51fa Link 1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"16 pickle"},{"location":"PythonChallenge/Summarize/pickle/#pickle","text":"","title":"pickle"},{"location":"PythonChallenge/Summarize/pickle/#pickledump","text":"1 2 3 4 5 6 from pickle import dump text = \"Python Challenge\" f = open ( \"test.pkl\" , \"wb\" ) # b is necessary dump ( text , f ) f . close ()","title":"pickle.dump \u2014\u2014\u5199\u5165"},{"location":"PythonChallenge/Summarize/pickle/#pickleload","text":"1 2 3 4 5 6 7 8 9 from pickle import load f = open ( \"test.pkl\" , \"rb\" ) # b is necessary text = load ( f ) f . close () print ( text ) >>> Python Challenge","title":"pickle.load \u2014\u2014\u5bfc\u51fa"},{"location":"PythonChallenge/Summarize/re/","text":"re Link \u7279\u6b8a\u5b57\u7b26 Link \u8d44\u6599\u5730\u5740\uff1ahttps://docs.python.org/3/library/re.html . In the default mode, this matches any character except a newline. If the DOTALL flag has been specified, this matches any character including a newline. . \u5728\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u5339\u914d\u9664\u4e86\u6362\u884c\u7684\u4efb\u610f\u5b57\u7b26\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u6807\u7b7e DOTALL \uff0c\u5b83\u5c06\u5339\u914d\u5305\u62ec\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u3002 * Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab* will match \u2018a\u2019, \u2018ab\u2019, or \u2018a\u2019 followed by any number of \u2018b\u2019s. * \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u5230\u4efb\u610f\u6b21\u91cd\u590d\uff0c \u5c3d\u91cf\u591a\u7684\u5339\u914d\u5b57\u7b26\u4e32\u3002 ab* \u4f1a\u5339\u914d 'a'\uff0c'ab'\uff0c\u6216\u8005 'a' \u540e\u9762\u8ddf\u968f\u4efb\u610f\u4e2a 'b'\u3002 + Causes the resulting RE to match 1 or more repetitions of the preceding RE. ab+ will match \u2018a\u2019 followed by any non-zero number of \u2018b\u2019s; it will not match just \u2018a\u2019. + \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d1\u5230\u4efb\u610f\u6b21\u91cd\u590d\u3002 ab+ \u4f1a\u5339\u914d 'a' \u540e\u9762\u8ddf\u968f1\u4e2a\u4ee5\u4e0a\u5230\u4efb\u610f\u4e2a 'b'\uff0c\u5b83\u4e0d\u4f1a\u5339\u914d 'a'\u3002 {m} Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match. For example, a{6} will match exactly six 'a' characters, but not five. {m} \u5bf9\u5176\u4e4b\u524d\u7684\u6b63\u5219\u5f0f\u6307\u5b9a\u5339\u914d m \u4e2a\u91cd\u590d\uff1b \u5c11\u4e8e m \u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u5339\u914d\u5931\u8d25\u3002 \u6bd4\u5982\uff0ca{6} \u5c06\u5339\u914d6\u4e2a 'a' , \u4f46\u662f\u4e0d\u80fd\u662f5\u4e2a\u3002 {m,n} Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible. For example, a{3,5} will match from 3 to 5 'a' characters. Omitting m specifies a lower bound of zero, and omitting n specifies an infinite upper bound. As an example, a{4,}b will match 'aaaab' or a thousand 'a' characters followed by a 'b', but not 'aaab'. The comma may not be omitted or t\u3002he modifier would be confused with the previously described form. {m, n} \u5bf9\u6b63\u5219\u5f0f\u8fdb\u884c m \u5230 n \u6b21\u5339\u914d\uff0c\u5728 m \u548c n \u4e4b\u95f4\u53d6\u5c3d\u91cf\u591a\u3002 \u6bd4\u5982\uff0ca{3,5} \u5c06\u5339\u914d 3 \u5230 5 \u4e2a 'a'\u3002 \u5ffd\u7565 m \u610f\u4e3a\u6307\u5b9a\u4e0b\u754c\u4e3a0\uff0c\u5ffd\u7565 n \u6307\u5b9a\u4e0a\u754c\u4e3a\u65e0\u9650\u6b21\u3002 \u6bd4\u5982 a{4,}b \u5c06\u5339\u914d 'aaaab' \u6216\u8005 1000 \u4e2a 'a' \u5c3e\u968f\u4e00\u4e2a 'b'\uff0c\u4f46\u4e0d\u80fd\u5339\u914d 'aaab'\u3002 \u9017\u53f7\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u65e0\u6cd5\u8fa8\u522b\u4fee\u9970\u7b26\u5e94\u8be5\u5ffd\u7565\u54ea\u4e2a\u8fb9\u754c\u3002 [] Used to indicate a set of characters. In a set: Characters can be listed individually, e.g. [amk] will match 'a', 'm', or 'k'. Ranges of characters can be indicated by giving two characters and separating them by a '-', for example [a-z] will match any lowercase ASCII letter [0-5][0-9] will match all the two-digits numbers from 00 to 59 [0-9A-Fa-f] will match any hexadecimal digit. If - is escaped (e.g. [a-z]) or if it\u2019s placed as the first or last character (e.g. [-a] or [a-]), it will match a literal '-'. [] \u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u96c6\u5408\u3002\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff1a \u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u5217\u51fa\uff0c\u6bd4\u5982 [amk] \u5339\u914d 'a'\uff0c 'm'\uff0c \u6216\u8005 'k'\u3002 \u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u8303\u56f4\uff0c\u901a\u8fc7\u7528 '-' \u5c06\u4e24\u4e2a\u5b57\u7b26\u8fde\u8d77\u6765\u3002 \u6bd4\u5982 [a-z] \u5c06\u5339\u914d\u4efb\u4f55\u5c0f\u5199ASCII\u5b57\u7b26\uff0c [0-5][0-9] \u5c06\u5339\u914d\u4ece 00 \u5230 59 \u7684\u4e24\u4f4d\u6570\u5b57\uff0c [0-9A-Fa-f] \u5c06\u5339\u914d\u4efb\u4f55\u5341\u516d\u8fdb\u5236\u6570\u4f4d\u3002 \u5982\u679c - \u8fdb\u884c\u4e86\u8f6c\u4e49 \uff08\u6bd4\u5982 [a-z]\uff09\u6216\u8005\u5b83\u7684\u4f4d\u7f6e\u5728\u9996\u4f4d\u6216\u8005\u672b\u5c3e\uff08\u5982 [-a] \u6216 [a-]\uff09\uff0c\u5b83\u5c31\u53ea\u8868\u793a\u666e\u901a\u5b57\u7b26 '-'\u3002 \u7279\u6b8a\u5b57\u7b26\u5728\u96c6\u5408\u4e2d\uff0c\u5931\u53bb\u5b83\u7684\u7279\u6b8a\u542b\u4e49\u3002\u6bd4\u5982 [(+ )] \u53ea\u4f1a\u5339\u914d\u8fd9\u51e0\u4e2a\u6587\u6cd5\u5b57\u7b26 '(', '+', ' ', or ')'\u3002 \u5b57\u7b26\u7c7b\u5982 \\w \u6216\u8005 \\S (\u5982\u4e0b\u5b9a\u4e49) \u5728\u96c6\u5408\u5185\u53ef\u4ee5\u63a5\u53d7\uff0c\u5b83\u4eec\u53ef\u4ee5\u5339\u914d\u7684\u5b57\u7b26\u7531 ASCII \u6216\u8005 LOCALE \u6a21\u5f0f\u51b3\u5b9a\u3002 \u4e0d\u5728\u96c6\u5408\u8303\u56f4\u5185\u7684\u5b57\u7b26\u53ef\u4ee5\u901a\u8fc7 \u53d6\u53cd \u6765\u8fdb\u884c\u5339\u914d\u3002\u5982\u679c\u96c6\u5408\u9996\u5b57\u7b26\u662f '^' \uff0c\u6240\u6709 \u4e0d \u5728\u96c6\u5408\u5185\u7684\u5b57\u7b26\u5c06\u4f1a\u88ab\u5339\u914d\uff0c\u6bd4\u5982 [^5] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '5'\uff0c [^^] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '^'. ^ \u5982\u679c\u4e0d\u5728\u96c6\u5408\u9996\u4f4d\uff0c\u5c31\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u5728\u96c6\u5408\u5185\u8981\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ']'\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u8981\u4e48\u5c31\u5728\u5b83\u4e4b\u524d\u52a0\u4e0a\u53cd\u659c\u6760\uff0c\u8981\u4e48\u5c31\u628a\u5b83\u653e\u5230\u96c6\u5408\u9996\u4f4d\u3002\u6bd4\u5982\uff0c [()[]{}] \u548c [{}] \u90fd\u53ef\u4ee5\u5339\u914d\u62ec\u53f7\u3002 Unicode Technical Standard #18 \u91cc\u7684\u5d4c\u5957\u96c6\u5408\u548c\u96c6\u5408\u64cd\u4f5c\u652f\u6301\u53ef\u80fd\u5728\u672a\u6765\u6dfb\u52a0\u3002\u8fd9\u5c06\u4f1a\u6539\u53d8\u8bed\u6cd5\uff0c\u6240\u4ee5\u4e3a\u4e86\u5e2e\u52a9\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e00\u4e2a FutureWarning \u5c06\u4f1a\u5728\u6709\u591a\u4e49\u7684\u60c5\u51b5\u91cc\u88ab raise\uff0c\u5305\u542b\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff0c\u96c6\u5408\u7531 '[' \u5f00\u59cb\uff0c\u6216\u8005\u5305\u542b\u4e0b\u5217\u5b57\u7b26\u5e8f\u5217 '--', '&&', '~~', \u548c '||'\u3002\u4e3a\u4e86\u907f\u514d\u8b66\u544a\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u7528\u53cd\u659c\u6760\u8f6c\u4e49\u3002 \u5728 3.7 \u7248\u66f4\u6539: \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6784\u5efa\u7684\u8bed\u4e49\u5728\u672a\u6765\u4f1a\u6539\u53d8\u7684\u8bdd\uff0c\u4e00\u4e2a FutureWarning \u4f1a raise \u3002 (...) Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the \\number special sequence, described below. To match the literals '(' or ')', use ( or ), or enclose them inside a character class: [(], [)]. (...) \uff08\u7ec4\u5408\uff09\uff0c\u5339\u914d\u62ec\u53f7\u5185\u7684\u4efb\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5e76\u6807\u8bc6\u51fa\u7ec4\u5408\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 \u5339\u914d\u5b8c\u6210\u540e\uff0c\u7ec4\u5408\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u83b7\u53d6\uff0c\u5e76\u53ef\u4ee5\u5728\u4e4b\u540e\u7528 \\number \u8f6c\u4e49\u5e8f\u5217\u8fdb\u884c\u518d\u6b21\u5339\u914d\uff0c\u4e4b\u540e\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002 \u8981\u5339\u914d\u5b57\u7b26 '(' \u6216\u8005 ')', \u7528 ( \u6216 ), \u6216\u8005\u628a\u5b83\u4eec\u5305\u542b\u5728\u5b57\u7b26\u96c6\u5408\u91cc: [(], [)].","title":"18 re"},{"location":"PythonChallenge/Summarize/re/#re","text":"","title":"re"},{"location":"PythonChallenge/Summarize/re/#_1","text":"\u8d44\u6599\u5730\u5740\uff1ahttps://docs.python.org/3/library/re.html . In the default mode, this matches any character except a newline. If the DOTALL flag has been specified, this matches any character including a newline. . \u5728\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u5339\u914d\u9664\u4e86\u6362\u884c\u7684\u4efb\u610f\u5b57\u7b26\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u6807\u7b7e DOTALL \uff0c\u5b83\u5c06\u5339\u914d\u5305\u62ec\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u3002 * Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab* will match \u2018a\u2019, \u2018ab\u2019, or \u2018a\u2019 followed by any number of \u2018b\u2019s. * \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d0\u5230\u4efb\u610f\u6b21\u91cd\u590d\uff0c \u5c3d\u91cf\u591a\u7684\u5339\u914d\u5b57\u7b26\u4e32\u3002 ab* \u4f1a\u5339\u914d 'a'\uff0c'ab'\uff0c\u6216\u8005 'a' \u540e\u9762\u8ddf\u968f\u4efb\u610f\u4e2a 'b'\u3002 + Causes the resulting RE to match 1 or more repetitions of the preceding RE. ab+ will match \u2018a\u2019 followed by any non-zero number of \u2018b\u2019s; it will not match just \u2018a\u2019. + \u5bf9\u5b83\u524d\u9762\u7684\u6b63\u5219\u5f0f\u5339\u914d1\u5230\u4efb\u610f\u6b21\u91cd\u590d\u3002 ab+ \u4f1a\u5339\u914d 'a' \u540e\u9762\u8ddf\u968f1\u4e2a\u4ee5\u4e0a\u5230\u4efb\u610f\u4e2a 'b'\uff0c\u5b83\u4e0d\u4f1a\u5339\u914d 'a'\u3002 {m} Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match. For example, a{6} will match exactly six 'a' characters, but not five. {m} \u5bf9\u5176\u4e4b\u524d\u7684\u6b63\u5219\u5f0f\u6307\u5b9a\u5339\u914d m \u4e2a\u91cd\u590d\uff1b \u5c11\u4e8e m \u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u5339\u914d\u5931\u8d25\u3002 \u6bd4\u5982\uff0ca{6} \u5c06\u5339\u914d6\u4e2a 'a' , \u4f46\u662f\u4e0d\u80fd\u662f5\u4e2a\u3002 {m,n} Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible. For example, a{3,5} will match from 3 to 5 'a' characters. Omitting m specifies a lower bound of zero, and omitting n specifies an infinite upper bound. As an example, a{4,}b will match 'aaaab' or a thousand 'a' characters followed by a 'b', but not 'aaab'. The comma may not be omitted or t\u3002he modifier would be confused with the previously described form. {m, n} \u5bf9\u6b63\u5219\u5f0f\u8fdb\u884c m \u5230 n \u6b21\u5339\u914d\uff0c\u5728 m \u548c n \u4e4b\u95f4\u53d6\u5c3d\u91cf\u591a\u3002 \u6bd4\u5982\uff0ca{3,5} \u5c06\u5339\u914d 3 \u5230 5 \u4e2a 'a'\u3002 \u5ffd\u7565 m \u610f\u4e3a\u6307\u5b9a\u4e0b\u754c\u4e3a0\uff0c\u5ffd\u7565 n \u6307\u5b9a\u4e0a\u754c\u4e3a\u65e0\u9650\u6b21\u3002 \u6bd4\u5982 a{4,}b \u5c06\u5339\u914d 'aaaab' \u6216\u8005 1000 \u4e2a 'a' \u5c3e\u968f\u4e00\u4e2a 'b'\uff0c\u4f46\u4e0d\u80fd\u5339\u914d 'aaab'\u3002 \u9017\u53f7\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u65e0\u6cd5\u8fa8\u522b\u4fee\u9970\u7b26\u5e94\u8be5\u5ffd\u7565\u54ea\u4e2a\u8fb9\u754c\u3002 [] Used to indicate a set of characters. In a set: Characters can be listed individually, e.g. [amk] will match 'a', 'm', or 'k'. Ranges of characters can be indicated by giving two characters and separating them by a '-', for example [a-z] will match any lowercase ASCII letter [0-5][0-9] will match all the two-digits numbers from 00 to 59 [0-9A-Fa-f] will match any hexadecimal digit. If - is escaped (e.g. [a-z]) or if it\u2019s placed as the first or last character (e.g. [-a] or [a-]), it will match a literal '-'. [] \u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u96c6\u5408\u3002\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff1a \u5b57\u7b26\u53ef\u4ee5\u5355\u72ec\u5217\u51fa\uff0c\u6bd4\u5982 [amk] \u5339\u914d 'a'\uff0c 'm'\uff0c \u6216\u8005 'k'\u3002 \u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u8303\u56f4\uff0c\u901a\u8fc7\u7528 '-' \u5c06\u4e24\u4e2a\u5b57\u7b26\u8fde\u8d77\u6765\u3002 \u6bd4\u5982 [a-z] \u5c06\u5339\u914d\u4efb\u4f55\u5c0f\u5199ASCII\u5b57\u7b26\uff0c [0-5][0-9] \u5c06\u5339\u914d\u4ece 00 \u5230 59 \u7684\u4e24\u4f4d\u6570\u5b57\uff0c [0-9A-Fa-f] \u5c06\u5339\u914d\u4efb\u4f55\u5341\u516d\u8fdb\u5236\u6570\u4f4d\u3002 \u5982\u679c - \u8fdb\u884c\u4e86\u8f6c\u4e49 \uff08\u6bd4\u5982 [a-z]\uff09\u6216\u8005\u5b83\u7684\u4f4d\u7f6e\u5728\u9996\u4f4d\u6216\u8005\u672b\u5c3e\uff08\u5982 [-a] \u6216 [a-]\uff09\uff0c\u5b83\u5c31\u53ea\u8868\u793a\u666e\u901a\u5b57\u7b26 '-'\u3002 \u7279\u6b8a\u5b57\u7b26\u5728\u96c6\u5408\u4e2d\uff0c\u5931\u53bb\u5b83\u7684\u7279\u6b8a\u542b\u4e49\u3002\u6bd4\u5982 [(+ )] \u53ea\u4f1a\u5339\u914d\u8fd9\u51e0\u4e2a\u6587\u6cd5\u5b57\u7b26 '(', '+', ' ', or ')'\u3002 \u5b57\u7b26\u7c7b\u5982 \\w \u6216\u8005 \\S (\u5982\u4e0b\u5b9a\u4e49) \u5728\u96c6\u5408\u5185\u53ef\u4ee5\u63a5\u53d7\uff0c\u5b83\u4eec\u53ef\u4ee5\u5339\u914d\u7684\u5b57\u7b26\u7531 ASCII \u6216\u8005 LOCALE \u6a21\u5f0f\u51b3\u5b9a\u3002 \u4e0d\u5728\u96c6\u5408\u8303\u56f4\u5185\u7684\u5b57\u7b26\u53ef\u4ee5\u901a\u8fc7 \u53d6\u53cd \u6765\u8fdb\u884c\u5339\u914d\u3002\u5982\u679c\u96c6\u5408\u9996\u5b57\u7b26\u662f '^' \uff0c\u6240\u6709 \u4e0d \u5728\u96c6\u5408\u5185\u7684\u5b57\u7b26\u5c06\u4f1a\u88ab\u5339\u914d\uff0c\u6bd4\u5982 [^5] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '5'\uff0c [^^] \u5c06\u5339\u914d\u6240\u6709\u5b57\u7b26\uff0c\u9664\u4e86 '^'. ^ \u5982\u679c\u4e0d\u5728\u96c6\u5408\u9996\u4f4d\uff0c\u5c31\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u5728\u96c6\u5408\u5185\u8981\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ']'\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u8981\u4e48\u5c31\u5728\u5b83\u4e4b\u524d\u52a0\u4e0a\u53cd\u659c\u6760\uff0c\u8981\u4e48\u5c31\u628a\u5b83\u653e\u5230\u96c6\u5408\u9996\u4f4d\u3002\u6bd4\u5982\uff0c [()[]{}] \u548c [{}] \u90fd\u53ef\u4ee5\u5339\u914d\u62ec\u53f7\u3002 Unicode Technical Standard #18 \u91cc\u7684\u5d4c\u5957\u96c6\u5408\u548c\u96c6\u5408\u64cd\u4f5c\u652f\u6301\u53ef\u80fd\u5728\u672a\u6765\u6dfb\u52a0\u3002\u8fd9\u5c06\u4f1a\u6539\u53d8\u8bed\u6cd5\uff0c\u6240\u4ee5\u4e3a\u4e86\u5e2e\u52a9\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e00\u4e2a FutureWarning \u5c06\u4f1a\u5728\u6709\u591a\u4e49\u7684\u60c5\u51b5\u91cc\u88ab raise\uff0c\u5305\u542b\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff0c\u96c6\u5408\u7531 '[' \u5f00\u59cb\uff0c\u6216\u8005\u5305\u542b\u4e0b\u5217\u5b57\u7b26\u5e8f\u5217 '--', '&&', '~~', \u548c '||'\u3002\u4e3a\u4e86\u907f\u514d\u8b66\u544a\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u7528\u53cd\u659c\u6760\u8f6c\u4e49\u3002 \u5728 3.7 \u7248\u66f4\u6539: \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6784\u5efa\u7684\u8bed\u4e49\u5728\u672a\u6765\u4f1a\u6539\u53d8\u7684\u8bdd\uff0c\u4e00\u4e2a FutureWarning \u4f1a raise \u3002 (...) Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the \\number special sequence, described below. To match the literals '(' or ')', use ( or ), or enclose them inside a character class: [(], [)]. (...) \uff08\u7ec4\u5408\uff09\uff0c\u5339\u914d\u62ec\u53f7\u5185\u7684\u4efb\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5e76\u6807\u8bc6\u51fa\u7ec4\u5408\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 \u5339\u914d\u5b8c\u6210\u540e\uff0c\u7ec4\u5408\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u83b7\u53d6\uff0c\u5e76\u53ef\u4ee5\u5728\u4e4b\u540e\u7528 \\number \u8f6c\u4e49\u5e8f\u5217\u8fdb\u884c\u518d\u6b21\u5339\u914d\uff0c\u4e4b\u540e\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002 \u8981\u5339\u914d\u5b57\u7b26 '(' \u6216\u8005 ')', \u7528 ( \u6216 ), \u6216\u8005\u628a\u5b83\u4eec\u5305\u542b\u5728\u5b57\u7b26\u96c6\u5408\u91cc: [(], [)].","title":"\u7279\u6b8a\u5b57\u7b26"},{"location":"PythonChallenge/Summarize/requests/","text":"requests Link requests.get Link >>> from requests import get >>> res = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) >>> res . text 'and the next nothing is 44827' >>> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from requests import get # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a username and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 20 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00 ' requests.Session Link 1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content )","title":"19 requests"},{"location":"PythonChallenge/Summarize/requests/#requests","text":"","title":"requests"},{"location":"PythonChallenge/Summarize/requests/#requestsget","text":">>> from requests import get >>> res = get ( \"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345\" ) >>> res . text 'and the next nothing is 44827' >>> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from requests import get # request url = \"http://www.pythonchallenge.com/pc/hex/unreal.jpg\" usr_and_pwd = ( \"butter\" , \"fly\" ) res = get ( url , auth = usr_and_pwd ) # When the website needs a username and password # response print ( \"Response Status Code:\" , res . status_code ) print ( \"Response Headers:\" , res . headers ) print ( \"Size of Content:\" , len ( res . content ), \"bytes\" ) print ( \"Content:\" , repr ( res . content [: 20 ])) >>> Response Status Code : 200 Response Headers : { 'Content-Type' : 'image/jpeg' , 'Content-Range' : 'bytes 0-30202/2123456789' , 'Transfer-Encoding' : 'chunked' , 'Date' : 'Sat, 07 Mar 2020 06:52:45 GMT' , 'Server' : 'lighttpd/1.4.35' } Size of Content : 30203 bytes Content : b ' \\xff\\xd8\\xff\\xe0\\x00\\x10 JFIF \\x00\\x01\\x01\\x01\\x00 H \\x00 H \\x00\\x00 '","title":"requests.get"},{"location":"PythonChallenge/Summarize/requests/#requestssession","text":"1 2 3 4 5 6 7 8 9 10 import requests req = requests . Session () # # \u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff08\u8de8\u8bf7\u6c42\u4fdd\u6301\u67d0\u4e9b\u53c2\u6570\uff09 header = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 YaBrowser/16.10.0.2564 Yowser/2.5 Safari/537.36\" } url = \"http://www.pythonchallenge.com/pc/hex/lake1.wav\" res = req . get ( url , auth = ( \"butter\" , \"fly\" ), headers = header ) with open ( r \"lake\\lake1.wav\" , \"wb\" ) as f : # \u9700\u4e8b\u5148\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u5efa\u597d lake \u6587\u4ef6\u5939 if res . ok : # get \u5230\uff0c\u5219\u8fd4\u56de True f . write ( res . content )","title":"requests.Session"},{"location":"PythonChallenge/Summarize/struct/","text":"struct Link struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 )","title":"20 struct"},{"location":"PythonChallenge/Summarize/struct/#struct","text":"struct.unpack(format, data) format 4s: 4 bytes string I: 4 bytes unsigned int H: 2 bytes unsigned int 1 2 3 4 5 6 7 8 import struct fmt = \"4sI4s4sIHHIIHH4sI\" data = b 'RIFF \\xfc\\xb3\\x01\\x00 WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x11 + \\x00\\x00 \"V \\x00\\x00\\x02\\x00\\x10\\x00 data \\xd8\\xb3\\x01\\x00 ' print ( struct . unpack ( fmt , data )) >>> ( b 'RIFF' , 111612 , b 'WAVE' , b 'fmt ' , 16 , 1 , 1 , 11025 , 22050 , 2 , 16 , b 'data' , 111576 )","title":"struct"},{"location":"PythonChallenge/Summarize/this/","text":"this Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import this print ( '=' * 30 ) print ( this . d ) >>> The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! ============================== { 'A' : 'N' , 'B' : 'O' , 'C' : 'P' , 'D' : 'Q' , 'E' : 'R' , 'F' : 'S' , 'G' : 'T' , 'H' : 'U' , 'I' : 'V' , 'J' : 'W' , 'K' : 'X' , 'L' : 'Y' , 'M' : 'Z' , 'N' : 'A' , 'O' : 'B' , 'P' : 'C' , 'Q' : 'D' , 'R' : 'E' , 'S' : 'F' , 'T' : 'G' , 'U' : 'H' , 'V' : 'I' , 'W' : 'J' , 'X' : 'K' , 'Y' : 'L' , 'Z' : 'M' , 'a' : 'n' , 'b' : 'o' , 'c' : 'p' , 'd' : 'q' , 'e' : 'r' , 'f' : 's' , 'g' : 't' , 'h' : 'u' , 'i' : 'v' , 'j' : 'w' , 'k' : 'x' , 'l' : 'y' , 'm' : 'z' , 'n' : 'a' , 'o' : 'b' , 'p' : 'c' , 'q' : 'd' , 'r' : 'e' , 's' : 'f' , 't' : 'g' , 'u' : 'h' , 'v' : 'i' , 'w' : 'j' , 'x' : 'k' , 'y' : 'l' , 'z' : 'm' }","title":"21 this"},{"location":"PythonChallenge/Summarize/this/#this","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import this print ( '=' * 30 ) print ( this . d ) >>> The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! ============================== { 'A' : 'N' , 'B' : 'O' , 'C' : 'P' , 'D' : 'Q' , 'E' : 'R' , 'F' : 'S' , 'G' : 'T' , 'H' : 'U' , 'I' : 'V' , 'J' : 'W' , 'K' : 'X' , 'L' : 'Y' , 'M' : 'Z' , 'N' : 'A' , 'O' : 'B' , 'P' : 'C' , 'Q' : 'D' , 'R' : 'E' , 'S' : 'F' , 'T' : 'G' , 'U' : 'H' , 'V' : 'I' , 'W' : 'J' , 'X' : 'K' , 'Y' : 'L' , 'Z' : 'M' , 'a' : 'n' , 'b' : 'o' , 'c' : 'p' , 'd' : 'q' , 'e' : 'r' , 'f' : 's' , 'g' : 't' , 'h' : 'u' , 'i' : 'v' , 'j' : 'w' , 'k' : 'x' , 'l' : 'y' , 'm' : 'z' , 'n' : 'a' , 'o' : 'b' , 'p' : 'c' , 'q' : 'd' , 'r' : 'e' , 's' : 'f' , 't' : 'g' , 'u' : 'h' , 'v' : 'i' , 'w' : 'j' , 'x' : 'k' , 'y' : 'l' , 'z' : 'm' }","title":"this"},{"location":"PythonChallenge/Summarize/urllib/","text":"urllib Link urllib.parse Link >>> import urllib.parse as up >>> s = \"123!@#abc+ /\" >>> up . quote ( s ) '123 %21% 40 %23a bc%2B%20/' >>> up . unquote ( '123 %21% 40 %23a bc%2B%20/' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B%20/' ) b '123!@#abc+ /' >>> up . quote_plus ( s ) '123 %21% 40 %23a bc%2B+ %2F ' >>> up . unquote_plus ( '123 %21% 40 %23a bc%2B+ %2F ' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B+ %2F ' ) b '123!@#abc++/' >>> >>> up . quote ( \" /\" ) '%20/' >>> up . quote_plus ( \" /\" ) '+ %2F ' >>>","title":"22 urllib"},{"location":"PythonChallenge/Summarize/urllib/#urllib","text":"","title":"urllib"},{"location":"PythonChallenge/Summarize/urllib/#urllibparse","text":">>> import urllib.parse as up >>> s = \"123!@#abc+ /\" >>> up . quote ( s ) '123 %21% 40 %23a bc%2B%20/' >>> up . unquote ( '123 %21% 40 %23a bc%2B%20/' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B%20/' ) b '123!@#abc+ /' >>> up . quote_plus ( s ) '123 %21% 40 %23a bc%2B+ %2F ' >>> up . unquote_plus ( '123 %21% 40 %23a bc%2B+ %2F ' ) '123!@#abc+ /' >>> up . unquote_to_bytes ( '123 %21% 40 %23a bc%2B+ %2F ' ) b '123!@#abc++/' >>> >>> up . quote ( \" /\" ) '%20/' >>> up . quote_plus ( \" /\" ) '+ %2F ' >>>","title":"urllib.parse"},{"location":"PythonChallenge/Summarize/wave/","text":"wave Link \u4e00\u4e9b\u53c2\u6570 Link wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) ps: \u4e0b\u65b9\u7684\u4ee3\u7801\uff0c\u6211\u6839\u636e\u201c\u8001\u8d75\u201d\u7684\u7248\u672c(Python2)\uff0c\u505a\u4e86\u5fae\u8c03 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps \u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5 Link ps: Hackingnote \u7684\u89e3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close () ps: \u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58","title":"23 wave"},{"location":"PythonChallenge/Summarize/wave/#wave","text":"","title":"wave"},{"location":"PythonChallenge/Summarize/wave/#_1","text":"wav \u683c\u5f0f\u5934\u90e8\u6570\u636e 44 \u5b57\u8282 RIFF(48) size of RIFF(4B) \"wave\"(4B) \"fmt\"(4B) 16(4B) \u683c\u5f0f\u7f16\u53f7(2B) \u58f0\u9053\u6570(2B) \u91c7\u6837\u7387(4B) \u6bcf\u79d2\u5b57\u8282\u6570(4B) \u6bcf\u91c7\u6837\u5b57\u8282\u6570(2B) \u91c7\u6837\u4f4d\u6570(2B) \"DATA\"(4B) size of data(4B) ps: \u4e0b\u65b9\u7684\u4ee3\u7801\uff0c\u6211\u6839\u636e\u201c\u8001\u8d75\u201d\u7684\u7248\u672c(Python2)\uff0c\u505a\u4e86\u5fae\u8c03 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import wave wav = wave . open ( \"indian_2.wav\" ) compress_name = wav . getcompname () # \u538b\u7f29\u540d\u79f0\uff0c\" not compressed compress_type = wav . getcomptype () # \u538b\u7f29\u7c7b\u578b\uff0c\"NONE total_frames = wav . getnframes () # \u603b\u5e27\u6570 sample_rate = wav . getframerate () # \u91c7\u6837\u7387 channels = wav . getnchannels () # \u58f0\u9053\u6570 sample_width = wav . getsampwidth () # \u6bcf\u5e27\u6570\u636e\u91cf\uff0c\u5355\u4f4d\u5b57\u8282 params = wav . getparams () # \u83b7\u53d6\u6240\u6709\u53c2\u6570 last_time = 1.0 * total_frames / sample_rate # \u65f6\u957f data_size = sample_width * total_frames * channels # \u6570\u636e\u91cf\uff0c\u5b57\u8282\u6570 file_size = data_size + 44 # \u6587\u4ef6\u5927\u5c0f\uff0c\u5b57\u8282\u6570 bits_per_frame = 8 * sample_width * channels # \u6bcf\u5e27\u4f4d\u6570\uff0cPCM\u4e3a bytes_per_second = sample_width * sample_rate * channels # \u6bcf\u79d2\u6570\u636e\u91cf bit_per_second = 8 * bytes_per_second # bitrate bps print ( \"wav getparms() ->\" , params ) print ( \"\u538b\u7f29\u540d\u79f0\uff1a\" , compress_name ) print ( \"\u538b\u7f29\u7c7b\u578b\uff1a\" , compress_type ) print ( \"\u58f0\u9053\u6570\uff1a\" , channels ) print ( \"\u6bcf\u5e27\u5b57\u8282\u6570\uff1a\" , sample_width ) print ( \"\u91c7\u6837\u7387\uff08\u6bcf\u79d2\u91c7\u6837\u6b21\u6570\uff09\uff1a\" , sample_rate ) print ( \"\u603b\u5e27\u6570\uff1a\" , total_frames ) print ( \"\u65f6\u957f=\u603b\u5e27\u6570/\u91c7\u6837\u7387\uff1a\" , last_time ) print ( \"\u6bcf\u5e27\u6570\u636e\u4f4d\u6570=8x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570\uff1a\" , bits_per_frame ) print ( \"\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570\uff1a\" , data_size ) print ( \"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u593444\u5b57\u8282+\u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570\uff1a\" , file_size ) print ( \"\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570=\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387\uff1a\" , bytes_per_second ) print ( \"\u7801\u7387bit/s=\u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8\uff1a\" , bit_per_second , \"bps\" ) >>> wav getparms () -> _wave_params ( nchannels = 1 , sampwidth = 2 , framerate = 11025 , nframes = 55788 , comptype = 'NONE' , compname = 'not compressed' ) \u538b\u7f29\u540d\u79f0 \uff1a not compressed \u538b\u7f29\u7c7b\u578b \uff1a NONE \u58f0\u9053\u6570 \uff1a 1 \u6bcf\u5e27\u5b57\u8282\u6570 \uff1a 2 \u91c7\u6837\u7387 \uff08 \u6bcf\u79d2\u91c7\u6837\u6b21\u6570 \uff09\uff1a 11025 \u603b\u5e27\u6570 \uff1a 55788 \u65f6\u957f = \u603b\u5e27\u6570 / \u91c7\u6837\u7387 \uff1a 5.060136054421768 \u6bcf\u5e27\u6570\u636e\u4f4d\u6570 = 8 x\u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570 \uff1a 16 \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570\u2179\u603b\u5e27\u6570x\u58f0\u9053\u6570 \uff1a 111576 \u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u593444\u5b57\u8282 + \u58f0\u97f3\u6570\u636e\u603b\u5b57\u8282\u6570 \uff1a 111620 \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570 = \u6bcf\u5e27\u5b57\u8282\u6570x\u58f0\u9053\u6570x\u91c7\u6837\u7387 \uff1a 22050 \u7801\u7387bit / s = \u6bcf\u79d2\u6570\u636e\u5b57\u8282\u6570x8 \uff1a 176400 bps","title":"\u4e00\u4e9b\u53c2\u6570"},{"location":"PythonChallenge/Summarize/wave/#19","text":"ps: Hackingnote \u7684\u89e3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import wave w = wave . open ( \"indian.wav\" , \"rb\" ) h = wave . open ( \"result.wav\" , \"wb\" ) print ( w . getnchannels ()) # 1\uff1a\u5355\u58f0\u9053 print ( w . getsampwidth ()) # 2\uff1a\u91c7\u6837\u5b57\u8282\u957f\u5ea6 print ( w . getframerate ()) # 11025\uff1a\u91c7\u6837\u9891\u7387 h . setnchannels ( w . getnchannels ()) h . setsampwidth ( w . getsampwidth () // 2 ) h . setframerate ( w . getframerate () * 2 ) frames = w . readframes ( w . getnframes ()) # \u8bfb\u53d6\u5e76\u8fd4\u56de\u4ee5 bytes \u5bf9\u8c61\u8868\u793a\u7684\u6700\u591a n \u5e27\u97f3\u9891\uff1b\u97f3\u9891\u603b\u5e27\u6570 wave . big_endiana = 1 h . writeframes ( frames ) # \u5199\u5165\u97f3\u9891\u5e27\u5e76\u786e\u4fdd nframes \u662f\u6b63\u786e\u7684 w . close () h . close () ps: \u751f\u6210\u7684\u97f3\u9891\u4e2d sorry \u4e0e You are an idiot \u5e76\u5b58","title":"\u7b2c 19 \u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5"},{"location":"PythonChallenge/Summarize/xmlrpc/","text":"\u201c\u901a\u4fe1\u201d Link xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY'","title":"24 xmlrpc"},{"location":"PythonChallenge/Summarize/xmlrpc/#_1","text":"xmlrpc xmlrpc.client >>> from xmlrpc import client >>> conn = client . ServerProxy ( \"http://www.pythonchallenge.com/pc/phonebook.php\" ) >>> conn < ServerProxy for www . pythonchallenge . com / pc / phonebook . php > >>> conn . system . listMethods () # \u5217\u51fa\u65b9\u6cd5 [ 'phone' , 'system.listMethods' , 'system.methodHelp' , 'system.methodSignature' , 'system.multicall' , 'system.getCapabilities' ] >>> >>> >>> conn . system . methodHelp ( \"phone\" ) # \u67e5\u770b\u5e2e\u52a9 'Returns the phone of a person' >>> conn . system . methodSignature ( \"phone\" ) # \u67e5\u770b\u4f7f\u7528\u4f55\u79cd\u7c7b\u578b\u7684\u53c2\u6570 [[ 'string' , 'string' ]] >>> >>> >>> conn . phone ( \"Bert\" ) # call Bert '555-ITALY'","title":"\u201c\u901a\u4fe1\u201d"},{"location":"PythonChallenge/Summarize/zipfile/","text":"zipfile Link zipfile.ZipFile Link ZipFile.open(name, mode='r', pwd=None, *, force_zip64=False) Access a member of the archive as a binary file-like object. name can be either the name of a file within the archive or a ZipInfo object. The mode parameter, if included, must be 'r' (the default) or 'w'. pwd is the password used to decrypt encrypted ZIP files. With mode 'r' the file-like object (ZipExtFile) is read-only and provides the following methods: read() readline() readlines() seek() tell() iter () next () These objects can operate independently of the ZipFile. >>> from zipfile import ZipFile >>> >>> channel = ZipFile ( \"channel.zip\" ) >>> readme = channel . open ( \"readme.txt\" ) >>> readme . readline () b 'welcome to my zipped list. \\n ' >>> readme . close () >>> channel . close () >>> ZipFile.getinfo(name) Return a ZipInfo object with information about the archive member name. Calling getinfo() for a name not currently contained in the archive will raise a KeyError. ZipInfo.file_size Size of the uncompressed file. ZipInfo.compress_size Size of the compressed data. ZipInfo.comment Comment for the individual archive member as a bytes object. >>> channel . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> channel . getinfo ( \"90052.txt\" ) . comment b '*' >>> channel . getinfo ( \"90052.txt\" ) . file_size 21 >>> channel . getinfo ( \"90052.txt\" ) . compress_size # \u6587\u4ef6\u6570\u636e\u5c11\uff0c\u538b\u7f29\u540e\u53cd\u800c\u5927 23 >>> channel . getinfo ( \"readme.txt\" ) . file_size 84 >>> channel . getinfo ( \"readme.txt\" ) . compress_size 78 >>> ZipFile.setpassword(pwd) Set pwd as default password to extract encrypted files. ZipFile.namelist() Return a list of archive members by name. 1 2 3 4 5 6 7 8 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 >>> [ 'readme.txt' , 'package.pack' ]","title":"25 zipfile"},{"location":"PythonChallenge/Summarize/zipfile/#zipfile","text":"","title":"zipfile"},{"location":"PythonChallenge/Summarize/zipfile/#zipfilezipfile","text":"ZipFile.open(name, mode='r', pwd=None, *, force_zip64=False) Access a member of the archive as a binary file-like object. name can be either the name of a file within the archive or a ZipInfo object. The mode parameter, if included, must be 'r' (the default) or 'w'. pwd is the password used to decrypt encrypted ZIP files. With mode 'r' the file-like object (ZipExtFile) is read-only and provides the following methods: read() readline() readlines() seek() tell() iter () next () These objects can operate independently of the ZipFile. >>> from zipfile import ZipFile >>> >>> channel = ZipFile ( \"channel.zip\" ) >>> readme = channel . open ( \"readme.txt\" ) >>> readme . readline () b 'welcome to my zipped list. \\n ' >>> readme . close () >>> channel . close () >>> ZipFile.getinfo(name) Return a ZipInfo object with information about the archive member name. Calling getinfo() for a name not currently contained in the archive will raise a KeyError. ZipInfo.file_size Size of the uncompressed file. ZipInfo.compress_size Size of the compressed data. ZipInfo.comment Comment for the individual archive member as a bytes object. >>> channel . read ( \"readme.txt\" ) b 'welcome to my zipped list. \\n\\n hint1: ... # \u540e\u9762\u7701\u7565 >>> channel . getinfo ( \"90052.txt\" ) . comment b '*' >>> channel . getinfo ( \"90052.txt\" ) . file_size 21 >>> channel . getinfo ( \"90052.txt\" ) . compress_size # \u6587\u4ef6\u6570\u636e\u5c11\uff0c\u538b\u7f29\u540e\u53cd\u800c\u5927 23 >>> channel . getinfo ( \"readme.txt\" ) . file_size 84 >>> channel . getinfo ( \"readme.txt\" ) . compress_size 78 >>> ZipFile.setpassword(pwd) Set pwd as default password to extract encrypted files. ZipFile.namelist() Return a list of archive members by name. 1 2 3 4 5 6 7 8 from zipfile import ZipFile zp = ZipFile ( \"unreal.zip\" ) zp . setpassword ( b \"redavni\" ) # \u89e3\u538b\u5bc6\u7801\uff0c\u63a5\u6536 bytes\uff0c\u4e0d\u63a5\u6536 str print ( zp . namelist ()) # \u5217\u4e3e\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6 >>> [ 'readme.txt' , 'package.pack' ]","title":"zipfile.ZipFile"},{"location":"PythonChallenge/Summarize/zlib/","text":"zlib Link Compression compatible with gzip 1 2 3 4 5 6 7 8 9 10 11 import zlib s1 = b \"abcdefg\" print ( zlib . compress ( s1 )) s2 = b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' print ( zlib . decompress ( s2 )) >>> b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' b 'abcdefg'","title":"26 zlib"},{"location":"PythonChallenge/Summarize/zlib/#zlib","text":"Compression compatible with gzip 1 2 3 4 5 6 7 8 9 10 11 import zlib s1 = b \"abcdefg\" print ( zlib . compress ( s1 )) s2 = b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' print ( zlib . decompress ( s2 )) >>> b 'x \\x9c KLJNIMK \\x07\\x00\\n\\xdb\\x02\\xbd ' b 'abcdefg'","title":"zlib"}]}